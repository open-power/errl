// fapiHwpErrorInfo.H
// This file is generated by perl script fapiParseErrorInfo.pl

#ifndef FAPIHWPERRORINFO_H_
#define FAPIHWPERRORINFO_H_

/**
 * @brief Error Information macros and HwpFfdcId enumeration
 */
#define RC_TEST_ERROR_A_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, hwpTestFfdc1, UNIT_TEST_CHIP_TARGET, RC); }
#define RC_TEST_ERROR_A_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(UNIT_TEST_CHIP_TARGET, fapi::REG_FFDC_TEST_X_PROC_REGISTERS, RC); fapiCollectRegFfdc(UNIT_TEST_MBA_TARGET, fapi::REG_FFDC_TEST_X_MBA_REGISTERS, RC); fapiCollectRegFfdc(UNIT_TEST_CHIP_TARGET, fapi::REG_FFDC_TEST_X_EX_REGISTERS, RC, fapi::TARGET_TYPE_EX_CHIPLET); fapiCollectRegFfdc(UNIT_TEST_CHIP_TARGET, fapi::REG_FFDC_TEST_X_PROC_REGISTERS_PRES_CHILDREN, RC, fapi::TARGET_TYPE_NONE, fapi::TARGET_TYPE_EX_CHIPLET, 0x01000000);
#define RC_TEST_ERROR_A_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&UNIT_TEST_FFDC_DATA_INTEGER, &UNIT_TEST_FFDC_DATA_BUF, &UNIT_TEST_CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_TEST_ERROR_A_UNIT_TEST_FFDC_DATA_INTEGER; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT_TEST_FFDC_DATA_INTEGER); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_TEST_ERROR_A_UNIT_TEST_FFDC_DATA_BUF; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT_TEST_FFDC_DATA_BUF); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_TEST_ERROR_A_UNIT_TEST_CHIP_TARGET; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT_TEST_CHIP_TARGET); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::LVL_SUPPORT; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_TEST_DIMM_CALLOUT_MBA_A_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_DIMM_CALLOUT_MBA_A_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_DIMM_CALLOUT_MBA_A_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&UNIT_TEST_MBA_TARGET); \
\
{ \
  const void * l_objects[] = {&UNIT_TEST_MBA_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[0].children_cdg.iv_parentObjIndex = 0; \
  l_entries[0].children_cdg.iv_callout = 1; \
  l_entries[0].children_cdg.iv_deconfigure = 0; \
  l_entries[0].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[0].children_cdg.iv_childPort = UNIT_TEST_MBA_PORT_NUMBER; \
  l_entries[0].children_cdg.iv_childNumber = 255; \
  l_entries[0].children_cdg.iv_gard = 0; \
  l_entries[0].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_TEST_DIMM_CALLOUT_MBA_B_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_DIMM_CALLOUT_MBA_B_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_DIMM_CALLOUT_MBA_B_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&UNIT_TEST_MBA_TARGET); \
\
{ \
  const void * l_objects[] = {&UNIT_TEST_MBA_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[0].children_cdg.iv_parentObjIndex = 0; \
  l_entries[0].children_cdg.iv_callout = 1; \
  l_entries[0].children_cdg.iv_deconfigure = 0; \
  l_entries[0].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[0].children_cdg.iv_childPort = UNIT_TEST_MBA_PORT_NUMBER; \
  l_entries[0].children_cdg.iv_childNumber = UNIT_TEST_DIMM_NUMBER; \
  l_entries[0].children_cdg.iv_gard = 0; \
  l_entries[0].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_TEST_DIMM_CALLOUT_MBA_C_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_DIMM_CALLOUT_MBA_C_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_DIMM_CALLOUT_MBA_C_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&UNIT_TEST_MBA_TARGET); \
\
{ \
  const void * l_objects[] = {&UNIT_TEST_MBA_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[0].children_cdg.iv_parentObjIndex = 0; \
  l_entries[0].children_cdg.iv_callout = 1; \
  l_entries[0].children_cdg.iv_deconfigure = 0; \
  l_entries[0].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[0].children_cdg.iv_childPort = 255; \
  l_entries[0].children_cdg.iv_childNumber = 255; \
  l_entries[0].children_cdg.iv_gard = 0; \
  l_entries[0].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_TEST_DIMM_DECONFIGURE_MBA_A_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_DIMM_DECONFIGURE_MBA_A_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_DIMM_DECONFIGURE_MBA_A_ADD_ERROR_INFO(RC) 

#define RC_TEST_DIMM_GARD_MBA_B_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_DIMM_GARD_MBA_B_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_DIMM_GARD_MBA_B_ADD_ERROR_INFO(RC) 

#define RC_TEST_ERROR_B_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_ERROR_B_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_ERROR_B_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&UNIT_TEST_FFDC_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_TEST_ERROR_B_UNIT_TEST_FFDC_DATA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT_TEST_FFDC_DATA); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_TEST_CONFIG_NO_MCS_CHIPLETS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_CONFIG_NO_MCS_CHIPLETS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_CONFIG_NO_MCS_CHIPLETS_ADD_ERROR_INFO(RC) 

#define RC_TEST_CONFIG_PARENT_CHIP_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_CONFIG_PARENT_CHIP_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_CONFIG_PARENT_CHIP_MISMATCH_ADD_ERROR_INFO(RC) 

#define RC_TEST_DQ_NO_ERR_ON_BAD_PARAMS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_DQ_NO_ERR_ON_BAD_PARAMS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_DQ_NO_ERR_ON_BAD_PARAMS_ADD_ERROR_INFO(RC) 

#define RC_TEST_DQ_BAD_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_DQ_BAD_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_DQ_BAD_DATA_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_DATA1, &FFDC_DATA2}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_TEST_DQ_BAD_DATA_FFDC_DATA1; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA1); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_TEST_DQ_BAD_DATA_FFDC_DATA2; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA2); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_INITFILE_INCORRECT_VER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INITFILE_INCORRECT_VER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INITFILE_INCORRECT_VER_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_IF_VER}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_INITFILE_INCORRECT_VER_FFDC_IF_VER; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_VER); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_INITFILE_ATTR_ID_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INITFILE_ATTR_ID_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INITFILE_ATTR_ID_OUT_OF_RANGE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_IF_ATTR_ID_OUT_OF_RANGE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_INITFILE_ATTR_ID_OUT_OF_RANGE_FFDC_IF_ATTR_ID_OUT_OF_RANGE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_ATTR_ID_OUT_OF_RANGE); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_INITFILE_LIT_ID_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INITFILE_LIT_ID_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INITFILE_LIT_ID_OUT_OF_RANGE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_IF_LIT_ID_OUT_OF_RANGE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_INITFILE_LIT_ID_OUT_OF_RANGE_FFDC_IF_LIT_ID_OUT_OF_RANGE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_LIT_ID_OUT_OF_RANGE); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_INITFILE_TGT_NUM_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INITFILE_TGT_NUM_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INITFILE_TGT_NUM_OUT_OF_RANGE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_IF_TGT_NUM, &FFDC_IF_NUM_TGTS_PASSED_IN}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_INITFILE_TGT_NUM_OUT_OF_RANGE_FFDC_IF_TGT_NUM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_TGT_NUM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_INITFILE_TGT_NUM_OUT_OF_RANGE_FFDC_IF_NUM_TGTS_PASSED_IN; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_NUM_TGTS_PASSED_IN); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_HWP_EXEC_INITFILE_TEST_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_FAILED_ADD_ERROR_INFO(RC) 

#define RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_IF_TEST_NUM_MBAS_FOUND}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_FFDC_IF_TEST_NUM_MBAS_FOUND; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_TEST_NUM_MBAS_FOUND); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_HWP_EXEC_INITFILE_TEST_NO_MEMBUF_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_NO_MEMBUF_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_NO_MEMBUF_FOUND_ADD_ERROR_INFO(RC) 

#define RC_HWP_ATTR_UNIT_TEST_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_HWP_ATTR_UNIT_TEST_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_HWP_ATTR_UNIT_TEST_FAIL_ADD_ERROR_INFO(RC) 

#define RC_TEST_WRONG_MCS_RETURNED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_WRONG_MCS_RETURNED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_WRONG_MCS_RETURNED_ADD_ERROR_INFO(RC) 

#define RC_INITFILE_EXECUTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INITFILE_EXECUTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INITFILE_EXECUTION_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_SCOM_ADDRID, &FFDC_SCOM_OFFSET, &FFDC_SCOM_LEN, &FFDC_COLUMN, &FFDC_ROW}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_INITFILE_EXECUTION_ERROR_FFDC_SCOM_ADDRID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_SCOM_ADDRID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_INITFILE_EXECUTION_ERROR_FFDC_SCOM_OFFSET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_SCOM_OFFSET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_INITFILE_EXECUTION_ERROR_FFDC_SCOM_LEN; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_SCOM_LEN); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_INITFILE_EXECUTION_ERROR_FFDC_COLUMN; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_COLUMN); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_INITFILE_EXECUTION_ERROR_FFDC_ROW; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_ROW); \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_TEST_COLLECT_TRACE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_COLLECT_TRACE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_COLLECT_TRACE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_VALUE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_COLLECT_TRACE; \
  l_entries[0].collect_trace.iv_eieTraceId =  fapi::CollectTraces::FSI; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_COLLECT_TRACE; \
  l_entries[1].collect_trace.iv_eieTraceId =  fapi::CollectTraces::SCOM; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_COLLECT_TRACE; \
  l_entries[2].collect_trace.iv_eieTraceId =  fapi::CollectTraces::SCAN; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_COLLECT_TRACE; \
  l_entries[3].collect_trace.iv_eieTraceId =  fapi::CollectTraces::MBOX; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_TEST_COLLECT_TRACE_FFDC_VALUE; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_VALUE); \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ARGS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_ARGS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ARGS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MCS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MCS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MCS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MCS_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MCS_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[2].bus_callout.iv_endpoint1ObjIndex = 2; \
  l_entries[2].bus_callout.iv_endpoint2ObjIndex = 3; \
  l_entries[2].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MEMBUF_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MEMBUF_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MEMBUF_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MEMBUF_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MEMBUF_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[2].bus_callout.iv_endpoint1ObjIndex = 2; \
  l_entries[2].bus_callout.iv_endpoint2ObjIndex = 3; \
  l_entries[2].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 1; \
  l_entries[5].target_cdg.iv_gard = 1; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 0; \
  l_entries[6].target_cdg.iv_gard = 0; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[2].bus_callout.iv_endpoint1ObjIndex = 2; \
  l_entries[2].bus_callout.iv_endpoint2ObjIndex = 3; \
  l_entries[2].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[2].bus_callout.iv_endpoint1ObjIndex = 2; \
  l_entries[2].bus_callout.iv_endpoint2ObjIndex = 3; \
  l_entries[2].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MCS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MCS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MCS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MCS_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MCS_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[2].bus_callout.iv_endpoint1ObjIndex = 2; \
  l_entries[2].bus_callout.iv_endpoint2ObjIndex = 3; \
  l_entries[2].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MEMBUF_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MEMBUF_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MEMBUF_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MEMBUF_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MEMBUF_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[2].bus_callout.iv_endpoint1ObjIndex = 2; \
  l_entries[2].bus_callout.iv_endpoint2ObjIndex = 3; \
  l_entries[2].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 1; \
  l_entries[5].target_cdg.iv_gard = 1; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 0; \
  l_entries[6].target_cdg.iv_gard = 0; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 1; \
  l_entries[5].target_cdg.iv_gard = 1; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 0; \
  l_entries[6].target_cdg.iv_gard = 0; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[2].bus_callout.iv_endpoint1ObjIndex = 2; \
  l_entries[2].bus_callout.iv_endpoint2ObjIndex = 3; \
  l_entries[2].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[2].bus_callout.iv_endpoint1ObjIndex = 2; \
  l_entries[2].bus_callout.iv_endpoint2ObjIndex = 3; \
  l_entries[2].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
fapi::fapiCheckType<const fapi::Target *>(&MCS_CHIPLET); \
fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP); \
\
{ \
  const void * l_objects[] = {&MCI_STAT, &MCI_FIR, &MBI_STAT, &MBI_FIR, &MCS_CHIPLET, &MEMBUF_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR_MCI_STAT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_STAT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR_MCI_FIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCI_FIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR_MBI_STAT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_STAT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR_MBI_FIR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBI_FIR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[4].bus_callout.iv_endpoint1ObjIndex = 4; \
  l_entries[4].bus_callout.iv_endpoint2ObjIndex = 5; \
  l_entries[4].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 5; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_BAD_DQ_DIMM_BAD_PARAM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_BAD_DQ_DIMM_BAD_PARAM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_BAD_DQ_DIMM_BAD_PARAM_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_PORT, &FFDC_DIMM, &FFDC_RANK}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_PORT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_PORT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_DIMM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DIMM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_RANK; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_RANK); \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_BAD_DQ_DIMM_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_BAD_DQ_DIMM_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_BAD_DQ_DIMM_NOT_FOUND_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_MBA_TARGET, &FFDC_PORT, &FFDC_DIMM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_MBA_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_MBA_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_PORT; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_PORT); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_DIMM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DIMM); \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM); \
\
{ \
  const void * l_objects[] = {&DIMM, &CLEAN_BAD_DQ_BITMAP_RANK0, &CLEAN_BAD_DQ_BITMAP_RANK1, &CLEAN_BAD_DQ_BITMAP_RANK2, &CLEAN_BAD_DQ_BITMAP_RANK3, &CURRENT_BAD_DQ_BITMAP_RANK0, &CURRENT_BAD_DQ_BITMAP_RANK1, &CURRENT_BAD_DQ_BITMAP_RANK2, &CURRENT_BAD_DQ_BITMAP_RANK3}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[10]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_DIMM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CLEAN_BAD_DQ_BITMAP_RANK0; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CLEAN_BAD_DQ_BITMAP_RANK0); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CLEAN_BAD_DQ_BITMAP_RANK1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CLEAN_BAD_DQ_BITMAP_RANK1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CLEAN_BAD_DQ_BITMAP_RANK2; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CLEAN_BAD_DQ_BITMAP_RANK2); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CLEAN_BAD_DQ_BITMAP_RANK3; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CLEAN_BAD_DQ_BITMAP_RANK3); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CURRENT_BAD_DQ_BITMAP_RANK0; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CURRENT_BAD_DQ_BITMAP_RANK0); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CURRENT_BAD_DQ_BITMAP_RANK1; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CURRENT_BAD_DQ_BITMAP_RANK1); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CURRENT_BAD_DQ_BITMAP_RANK2; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CURRENT_BAD_DQ_BITMAP_RANK2); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CURRENT_BAD_DQ_BITMAP_RANK3; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CURRENT_BAD_DQ_BITMAP_RANK3); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[9].target_cdg.iv_targetObjIndex = 0; \
  l_entries[9].target_cdg.iv_callout = 1; \
  l_entries[9].target_cdg.iv_deconfigure = 0; \
  l_entries[9].target_cdg.iv_gard = 0; \
  l_entries[9].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 10); \
}

#define RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM); \
\
{ \
  const void * l_objects[] = {&DIMM, &CLEAN_BAD_DQ_BITMAP_RANK0, &CLEAN_BAD_DQ_BITMAP_RANK1, &CLEAN_BAD_DQ_BITMAP_RANK2, &CLEAN_BAD_DQ_BITMAP_RANK3, &UPDATE_BAD_DQ_BITMAP_RANK0, &UPDATE_BAD_DQ_BITMAP_RANK1, &UPDATE_BAD_DQ_BITMAP_RANK2, &UPDATE_BAD_DQ_BITMAP_RANK3}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[10]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_DIMM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_CLEAN_BAD_DQ_BITMAP_RANK0; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CLEAN_BAD_DQ_BITMAP_RANK0); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_CLEAN_BAD_DQ_BITMAP_RANK1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CLEAN_BAD_DQ_BITMAP_RANK1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_CLEAN_BAD_DQ_BITMAP_RANK2; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CLEAN_BAD_DQ_BITMAP_RANK2); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_CLEAN_BAD_DQ_BITMAP_RANK3; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CLEAN_BAD_DQ_BITMAP_RANK3); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_UPDATE_BAD_DQ_BITMAP_RANK0; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UPDATE_BAD_DQ_BITMAP_RANK0); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_UPDATE_BAD_DQ_BITMAP_RANK1; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UPDATE_BAD_DQ_BITMAP_RANK1); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_UPDATE_BAD_DQ_BITMAP_RANK2; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UPDATE_BAD_DQ_BITMAP_RANK2); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_UPDATE_BAD_DQ_BITMAP_RANK3; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UPDATE_BAD_DQ_BITMAP_RANK3); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[9].target_cdg.iv_targetObjIndex = 0; \
  l_entries[9].target_cdg.iv_callout = 1; \
  l_entries[9].target_cdg.iv_deconfigure = 0; \
  l_entries[9].target_cdg.iv_gard = 0; \
  l_entries[9].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 10); \
}

#define RC_OSC_SWITCH_UNEXPECTED_CHIP_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OSC_SWITCH_UNEXPECTED_CHIP_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OSC_SWITCH_UNEXPECTED_CHIP_TYPE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_CHIP_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_OSC_SWITCH_UNEXPECTED_CHIP_TYPE_FFDC_CHIP_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_CHIP_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_OSC_SWITCH_UNEXPECTED_CHIP_POSITION_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OSC_SWITCH_UNEXPECTED_CHIP_POSITION_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OSC_SWITCH_UNEXPECTED_CHIP_POSITION_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_CHIP_POSITION}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_OSC_SWITCH_UNEXPECTED_CHIP_POSITION_FFDC_CHIP_POSITION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_CHIP_POSITION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_OSC_SWITCH_UNEXPECTED_CHIP_EC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OSC_SWITCH_UNEXPECTED_CHIP_EC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OSC_SWITCH_UNEXPECTED_CHIP_EC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_CHIP_EC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_OSC_SWITCH_UNEXPECTED_CHIP_EC_FFDC_CHIP_EC; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_CHIP_EC); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_OSC_SWITCH_CTL_UNEXPECTED_CHIP_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OSC_SWITCH_CTL_UNEXPECTED_CHIP_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OSC_SWITCH_CTL_UNEXPECTED_CHIP_TYPE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_CHIP_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_OSC_SWITCH_CTL_UNEXPECTED_CHIP_TYPE_FFDC_CHIP_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_CHIP_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_OSC_SWITCH_CTL_UNEXPECTED_ATTR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OSC_SWITCH_CTL_UNEXPECTED_ATTR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OSC_SWITCH_CTL_UNEXPECTED_ATTR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_UNEXPECTED_ATTR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_OSC_SWITCH_CTL_UNEXPECTED_ATTR_FFDC_UNEXPECTED_ATTR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_UNEXPECTED_ATTR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_OSC_SWITCH_CTL_INVALID_ATTR_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OSC_SWITCH_CTL_INVALID_ATTR_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OSC_SWITCH_CTL_INVALID_ATTR_SIZE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_ATTR, &FFDC_EXPECTED_SIZE, &FFDC_PASSED_SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_OSC_SWITCH_CTL_INVALID_ATTR_SIZE_FFDC_ATTR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_ATTR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_OSC_SWITCH_CTL_INVALID_ATTR_SIZE_FFDC_EXPECTED_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_EXPECTED_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_OSC_SWITCH_CTL_INVALID_ATTR_SIZE_FFDC_PASSED_SIZE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_PASSED_SIZE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_INSUFFICIENT_VPD_RETURNED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INSUFFICIENT_VPD_RETURNED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INSUFFICIENT_VPD_RETURNED_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&KEYWORD, &RETURNED_SIZE, &EXPECTED_SIZE, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_INSUFFICIENT_VPD_RETURNED_KEYWORD; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(KEYWORD); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_INSUFFICIENT_VPD_RETURNED_RETURNED_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURNED_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_INSUFFICIENT_VPD_RETURNED_EXPECTED_SIZE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_SIZE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_PLACE_HOLDER_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_PLACE_HOLDER_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_PLACE_HOLDER_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_EFF_CONFIG_RANK_GROUP_RC_ERROR_001A_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RANK_GROUP_RC_ERROR_001A_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RANK_GROUP_RC_ERROR_001A_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNEXPECTED_MEM_CLK_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNEXPECTED_MEM_CLK_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNEXPECTED_MEM_CLK_STATUS_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNEXPECTED_NEST_CLK_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_NEST_CHIPLET, RC); }
#define RC_MSS_UNEXPECTED_NEST_CLK_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNEXPECTED_NEST_CLK_STATUS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_INIT1_OPCG_DONE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FLUSH_FAIL, POR_FFDC_OFFSET_USE_P1, RC); }
#define RC_MSS_INIT1_OPCG_DONE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INIT1_OPCG_DONE_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_INIT1_FSISTATUS_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INIT1_FSISTATUS_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_CEN_STANDBY_REGION, RC); 
#define RC_MSS_INIT1_FSISTATUS_FAIL_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_INIT3_FSISTATUS_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_TP_CHIPLET, RC); }
#define RC_MSS_INIT3_FSISTATUS_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INIT3_FSISTATUS_FAIL_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_NEST_PLL_LOCK_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_NEST_PLL_LOCK_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_CEN_STANDBY_REGION, RC); 
#define RC_MSS_NEST_PLL_LOCK_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_MEM_PLL_LOCK_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MEM_PLL_LOCK_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_CEN_STANDBY_REGION, RC); 
#define RC_MSS_MEM_PLL_LOCK_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_THOLD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_TP_CHIPLET, RC); }
#define RC_MSS_THOLD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_THOLD_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_CCREG_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_TP_CHIPLET, RC); }
#define RC_MSS_CCREG_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_CCREG_MISMATCH_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_ARRAY_REPAIR_BUSY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ARRAY_REPAIR_BUSY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ARRAY_REPAIR_BUSY_ADD_ERROR_INFO(RC) 

#define RC_MSS_ARRAY_REPAIR_NOT_DONE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ARRAY_REPAIR_NOT_DONE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ARRAY_REPAIR_NOT_DONE_ADD_ERROR_INFO(RC) 

#define RC_MSS_ECC_TRAP_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ECC_TRAP_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ECC_TRAP_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_GENERAL_PUTSCOM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GENERAL_PUTSCOM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GENERAL_PUTSCOM_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_GENERAL_GETSCOM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GENERAL_GETSCOM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GENERAL_GETSCOM_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNEXPECTED_FIR_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNEXPECTED_FIR_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNEXPECTED_FIR_STATUS_ADD_ERROR_INFO(RC) 

#define RC_MSS_INIT_CAL_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INIT_CAL_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INIT_CAL_FAILED_ADD_ERROR_INFO(RC) 

#define RC_MSS_GENERAL_SIMSTKFAC_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GENERAL_SIMSTKFAC_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GENERAL_SIMSTKFAC_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_GET_FAPI_ATTRIBUTE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GET_FAPI_ATTRIBUTE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GET_FAPI_ATTRIBUTE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_GET_SIM_HIERARCHY_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GET_SIM_HIERARCHY_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GET_SIM_HIERARCHY_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_INVALID_FN_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INVALID_FN_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INVALID_FN_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_MCBIST_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MCBIST_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MCBIST_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_PORT_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_PORT_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_PORT_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_DRIVER_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRIVER_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRIVER_IMP_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_SLEW_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SLEW_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SLEW_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_WR_DRAM_VREF_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_WR_DRAM_VREF_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_WR_DRAM_VREF_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_READ_CEN_VREF_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_READ_CEN_VREF_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_READ_CEN_VREF_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_RECEIVER_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_RECEIVER_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_RECEIVER_IMP_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNABLE_TO_GROUP_MCS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNABLE_TO_GROUP_MCS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNABLE_TO_GROUP_MCS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MCS); \
\
{ \
  const void * l_objects[] = {&TARGET_MCS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 0; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_ERROR_MSS_GROUPING_ATTRS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ERROR_MSS_GROUPING_ATTRS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_ERROR_MSS_GROUPING_ATTRS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&_ATTR_PROC_POS, &_ATTR_CEN_POS, &_ATTR_CHIP_UNIT_POS_MBA0, &_ATTR_CHIP_UNIT_POS_MBA1, &_ATTR_EFF_DIMM_SIZE0, &_ATTR_EFF_DIMM_SIZE1, &_ATTR_MSS_INTERLEAVE_ENABLE, &_ATTR_ALL_MCS_IN_INTERLEAVING_GROUP, &_ATTR_PROC_MEM_BASE, &_ATTR_PROC_MIRROR_BASE, &_ATTR_MSS_MEM_MC_IN_GROUP, &_ATTR_PROC_MEM_BASES, &_ATTR_PROC_MEM_SIZES, &_ATTR_MSS_MCS_GROUP_32, &_ATTR_PROC_MIRROR_BASES, &_ATTR_PROC_MIRROR_SIZES}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[16]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_POS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_POS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_CEN_POS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_CEN_POS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_CHIP_UNIT_POS_MBA0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_CHIP_UNIT_POS_MBA0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_CHIP_UNIT_POS_MBA1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_CHIP_UNIT_POS_MBA1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_EFF_DIMM_SIZE0; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_EFF_DIMM_SIZE0); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_EFF_DIMM_SIZE1; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_EFF_DIMM_SIZE1); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_MSS_INTERLEAVE_ENABLE; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_MSS_INTERLEAVE_ENABLE); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_ALL_MCS_IN_INTERLEAVING_GROUP; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_ALL_MCS_IN_INTERLEAVING_GROUP); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MEM_BASE; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_MEM_BASE); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MIRROR_BASE; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_MIRROR_BASE); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[10].ffdc.iv_ffdcObjIndex = 10; \
  l_entries[10].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_MSS_MEM_MC_IN_GROUP; \
  l_entries[10].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_MSS_MEM_MC_IN_GROUP); \
  l_entries[11].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[11].ffdc.iv_ffdcObjIndex = 11; \
  l_entries[11].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MEM_BASES; \
  l_entries[11].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_MEM_BASES); \
  l_entries[12].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[12].ffdc.iv_ffdcObjIndex = 12; \
  l_entries[12].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MEM_SIZES; \
  l_entries[12].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_MEM_SIZES); \
  l_entries[13].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[13].ffdc.iv_ffdcObjIndex = 13; \
  l_entries[13].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_MSS_MCS_GROUP_32; \
  l_entries[13].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_MSS_MCS_GROUP_32); \
  l_entries[14].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[14].ffdc.iv_ffdcObjIndex = 14; \
  l_entries[14].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MIRROR_BASES; \
  l_entries[14].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_MIRROR_BASES); \
  l_entries[15].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[15].ffdc.iv_ffdcObjIndex = 15; \
  l_entries[15].ffdc.iv_ffdcId = fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MIRROR_SIZES; \
  l_entries[15].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_MIRROR_SIZES); \
  RC.addErrorInfo(l_objects, l_entries, 16); \
}

#define RC_ERROR_MSS_FIRS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ERROR_MSS_FIRS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CENCHIP, fapi::REG_FFDC_DMI_FIR_REGS, RC); fapiCollectRegFfdc(CENCHIP, fapi::REG_FFDC_MBI_FIR_REGS, RC); fapiCollectRegFfdc(CENCHIP, fapi::REG_FFDC_MBS_FIR_REGS, RC); fapiCollectRegFfdc(CENCHIP, fapi::REG_FFDC_SCAC_FIR_REGS, RC); 
#define RC_ERROR_MSS_FIRS_ADD_ERROR_INFO(RC) 

#define RC_ERROR_MBA_FIRS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ERROR_MBA_FIRS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CENCHIP_MBA, fapi::REG_FFDC_MBA_FIR_REGS, RC); fapiCollectRegFfdc(CENCHIP_MBA, fapi::REG_FFDC_DDR_PHY_FIR_REGS, RC); 
#define RC_ERROR_MBA_FIRS_ADD_ERROR_INFO(RC) 

#define RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&STATUS_REG, &EXPECTED_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_STATUS_REG; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS_REG); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_EXPECTED_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_REG); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&STATUS_REG, &EXPECTED_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_STATUS_REG; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS_REG); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_EXPECTED_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_REG); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&STATUS_REG, &EXPECTED_REG, &CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_STATUS_REG; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS_REG); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_EXPECTED_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_REG); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FIR_REG, &FIR_EXP_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_FIR_REG; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_FIR_EXP_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_EXP_REG); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FIR_REG, &FIR_EXP_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_FIR_REG; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_FIR_EXP_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_EXP_REG); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&FIR_REG, &FIR_EXP_REG, &CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_FIR_REG; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_FIR_EXP_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_EXP_REG); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_START_CLOCKS_CHIPLETS_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_CHIPLETS_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_CHIPLETS_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIPLET_BASE_SCOM_ADDR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_START_CLOCKS_CHIPLETS_PARTIAL_GOOD_ERR_CHIPLET_BASE_SCOM_ADDR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_BASE_SCOM_ADDR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &ATTR_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_ATTR_DATA; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &ATTR_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_ATTR_DATA; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &ATTR_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_ATTR_DATA; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_ATTR_DATA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_ATTR_DATA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_ATTR_DATA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_ATTR_DATA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_ATTR_DATA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_ATTR_DATA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_REPAIR_RING_INVALID_RINGBUF_PTR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_RINGBUF_PTR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_RINGBUF_PTR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_REPAIR_RING_ALLOC_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_ALLOC_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_ALLOC_FAIL_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_REPAIR_RING_INVALID_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_SIZE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_REPAIR_RING_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_NOT_FOUND_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&RING_MODIFIER, &CHIPLET_ID, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_REPAIR_RING_NOT_FOUND_RING_MODIFIER; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RING_MODIFIER); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_REPAIR_RING_NOT_FOUND_CHIPLET_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MVPD_RING_FUNC_INVALID_PARAMETER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MVPD_RING_FUNC_INVALID_PARAMETER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MVPD_RING_FUNC_INVALID_PARAMETER_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MVPD_RING_FUNC_INSUFFICIENT_RECORD_SPACE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MVPD_RING_FUNC_INSUFFICIENT_RECORD_SPACE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MVPD_RING_FUNC_INSUFFICIENT_RECORD_SPACE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MVPD_EX_L2_SINGLE_MEMBER_ENABLE_BAD_FIELD_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MVPD_EX_L2_SINGLE_MEMBER_ENABLE_BAD_FIELD_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MVPD_EX_L2_SINGLE_MEMBER_ENABLE_BAD_FIELD_SIZE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FIELD_SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MVPD_EX_L2_SINGLE_MEMBER_ENABLE_BAD_FIELD_SIZE_FIELD_SIZE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIELD_SIZE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MBVPD_INVALID_ATTRIBUTE_ID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_INVALID_ATTRIBUTE_ID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_INVALID_ATTRIBUTE_ID_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_INVALID_ATTRIBUTE_ID_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID, &EXPECTED_SIZE, &PASSED_SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_EXPECTED_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_PASSED_SIZE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PASSED_SIZE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MBVPD_INSUFFICIENT_VPD_RETURNED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_INSUFFICIENT_VPD_RETURNED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_INSUFFICIENT_VPD_RETURNED_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&KEYWORD, &RETURNED_SIZE, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_INSUFFICIENT_VPD_RETURNED_KEYWORD; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(KEYWORD); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MBVPD_INSUFFICIENT_VPD_RETURNED_RETURNED_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURNED_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MBVPD_SUPPLIER_ID_NOT_IN_MV_VPD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_SUPPLIER_ID_NOT_IN_MV_VPD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_SUPPLIER_ID_NOT_IN_MV_VPD_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_TARGET); \
\
{ \
  const void * l_objects[] = {&MODULE_ID, &MEMBUF_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_SUPPLIER_ID_NOT_IN_MV_VPD_MODULE_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODULE_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MBVPD_RING_FUNC_INVALID_PARAMETER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_RING_FUNC_INVALID_PARAMETER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_RING_FUNC_INVALID_PARAMETER_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MBVPD_TERM_DATA_UNSUPPORTED_VPD_ENCODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_TERM_DATA_UNSUPPORTED_VPD_ENCODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_TERM_DATA_UNSUPPORTED_VPD_ENCODE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID, &VPD_VALUE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_TERM_DATA_UNSUPPORTED_VPD_ENCODE_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MBVPD_TERM_DATA_UNSUPPORTED_VPD_ENCODE_VPD_VALUE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VPD_VALUE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MBVPD_DRAM_2N_MODE_NOT_EQUAL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_DRAM_2N_MODE_NOT_EQUAL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_DRAM_2N_MODE_NOT_EQUAL_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_TARGET); \
\
{ \
  const void * l_objects[] = {&PORT0, &PORT1, &MBA_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_DRAM_2N_MODE_NOT_EQUAL_PORT0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MBVPD_DRAM_2N_MODE_NOT_EQUAL_PORT1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MBVPD_INVALID_MODE_PARAMETER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_INVALID_MODE_PARAMETER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_INVALID_MODE_PARAMETER_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_INVALID_MODE_PARAMETER_MODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MBVPD_UNEXPECTED_MEM_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_UNEXPECTED_MEM_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_UNEXPECTED_MEM_TYPE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_TARGET); \
\
{ \
  const void * l_objects[] = {&MEM_TYPE, &MEMBUF_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_UNEXPECTED_MEM_TYPE_MEM_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MEM_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MBVPD_INVALID_MT_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_INVALID_MT_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_INVALID_MT_DATA_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RANK_NUM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_INVALID_MT_DATA_RANK_NUM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK_NUM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MBVPD_INVALID_DQ_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_INVALID_DQ_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_INVALID_DQ_DATA_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DQ_COPY}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_INVALID_DQ_DATA_DQ_COPY; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DQ_COPY); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MBVPD_DIMMS_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_DIMMS_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_DIMMS_NOT_FOUND_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DIMM_P0S0, &DIMM_P0S1, &DIMM_P1S0, &DIMM_P1S1}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_DIMMS_NOT_FOUND_DIMM_P0S0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_P0S0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MBVPD_DIMMS_NOT_FOUND_DIMM_P0S1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_P0S1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MBVPD_DIMMS_NOT_FOUND_DIMM_P1S0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_P1S0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MBVPD_DIMMS_NOT_FOUND_DIMM_P1S1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_P1S1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MBVPD_INVALID_DIMM_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_INVALID_DIMM_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_INVALID_DIMM_FOUND_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); \
\
{ \
  const void * l_objects[] = {&INVALID_DIMM_P0S0, &INVALID_DIMM_P0S1, &INVALID_DIMM_P1S0, &INVALID_DIMM_P1S1, &MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_INVALID_DIMM_FOUND_INVALID_DIMM_P0S0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_DIMM_P0S0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MBVPD_INVALID_DIMM_FOUND_INVALID_DIMM_P0S1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_DIMM_P0S1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MBVPD_INVALID_DIMM_FOUND_INVALID_DIMM_P1S0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_DIMM_P1S0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MBVPD_INVALID_DIMM_FOUND_INVALID_DIMM_P1S1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_DIMM_P1S1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 1; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MBVPD_INVALID_M0_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_INVALID_M0_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_INVALID_M0_DATA_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&M0_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_INVALID_M0_DATA_M0_DATA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(M0_DATA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MBVPD_INVALID_DQS_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_INVALID_DQS_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_INVALID_DQS_DATA_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DQS_COPY}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_INVALID_DQS_DATA_DQS_COPY; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DQS_COPY); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MBVPD_UNEXPECTED_ISDIMM_KEYWORD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_UNEXPECTED_ISDIMM_KEYWORD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_UNEXPECTED_ISDIMM_KEYWORD_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID, &KEYWORD}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_UNEXPECTED_ISDIMM_KEYWORD_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MBVPD_UNEXPECTED_ISDIMM_KEYWORD_KEYWORD; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(KEYWORD); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID, &DIMM_TYPE, &OUTPUT_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE_DIMM_TYPE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_TYPE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE_OUTPUT_TYPE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OUTPUT_TYPE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID, &DIMM_TYPE, &OUTPUT_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE_DIMM_TYPE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_TYPE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE_OUTPUT_TYPE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OUTPUT_TYPE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MBVPD_UNEXPECTED_OUTPUT_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_UNEXPECTED_OUTPUT_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_UNEXPECTED_OUTPUT_TYPE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID, &DIMM_TYPE, &OUTPUT_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_UNEXPECTED_OUTPUT_TYPE_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MBVPD_UNEXPECTED_OUTPUT_TYPE_DIMM_TYPE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_TYPE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MBVPD_UNEXPECTED_OUTPUT_TYPE_OUTPUT_TYPE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OUTPUT_TYPE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MBVPD_ATTRIBUTE_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_ATTRIBUTE_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_ATTRIBUTE_NOT_FOUND_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID, &DIMM_TYPE, &VERSION}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MBVPD_ATTRIBUTE_NOT_FOUND_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MBVPD_ATTRIBUTE_NOT_FOUND_DIMM_TYPE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_TYPE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MBVPD_ATTRIBUTE_NOT_FOUND_VERSION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VERSION); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_GET_SPD_ACCESSOR_INVALID_ATTRIBUTE_ID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_SPD_ACCESSOR_INVALID_ATTRIBUTE_ID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_SPD_ACCESSOR_INVALID_ATTRIBUTE_ID_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_SPD_ACCESSOR_INVALID_ATTRIBUTE_ID_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_GET_SPD_ACCESSOR_INVALID_OUTPUT_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_SPD_ACCESSOR_INVALID_OUTPUT_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_SPD_ACCESSOR_INVALID_OUTPUT_SIZE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID, &ACTUAL_SIZE, &EXPECTED_SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_SPD_ACCESSOR_INVALID_OUTPUT_SIZE_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_SPD_ACCESSOR_INVALID_OUTPUT_SIZE_ACTUAL_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ACTUAL_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_GET_SPD_ACCESSOR_INVALID_OUTPUT_SIZE_EXPECTED_SIZE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_SIZE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_GET_SPD_ACCESSOR_INVALID_DDR_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_SPD_ACCESSOR_INVALID_DDR_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_SPD_ACCESSOR_INVALID_DDR_TYPE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM); \
\
{ \
  const void * l_objects[] = {&DIMM, &TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_SPD_ACCESSOR_INVALID_DDR_TYPE_DIMM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_SPD_ACCESSOR_INVALID_DDR_TYPE_TYPE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TYPE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 0; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_GET_L3_DELTA_DATA_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_L3_DELTA_DATA_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_L3_DELTA_DATA_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP_NAME, &CHIP_EC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_L3_DELTA_DATA_ERR_CHIP_NAME; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_NAME); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_L3_DELTA_DATA_ERR_CHIP_EC; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_EC); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_GET_L3_DELTA_DATA_PARAMETER_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_L3_DELTA_DATA_PARAMETER_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_L3_DELTA_DATA_PARAMETER_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_L3_DELTA_DATA_PARAMETER_ERR_TARGET_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_GET_L3_DELTA_DATA_SELECT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_L3_DELTA_DATA_SELECT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_L3_DELTA_DATA_SELECT_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&SELECT_VAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_L3_DELTA_DATA_SELECT_ERR_SELECT_VAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SELECT_VAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_GET_PLL_RING_INFO_ATTR_INVALID_ATTRIBUTE_ID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_PLL_RING_INFO_ATTR_INVALID_ATTRIBUTE_ID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_PLL_RING_INFO_ATTR_INVALID_ATTRIBUTE_ID_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_INFO_ATTR_INVALID_ATTRIBUTE_ID_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_GET_PLL_RING_INFO_ATTR_INVALID_OUTPUT_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_PLL_RING_INFO_ATTR_INVALID_OUTPUT_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_PLL_RING_INFO_ATTR_INVALID_OUTPUT_SIZE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID, &ACTUAL_SIZE, &EXPECTED_SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_INFO_ATTR_INVALID_OUTPUT_SIZE_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_INFO_ATTR_INVALID_OUTPUT_SIZE_ACTUAL_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ACTUAL_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_INFO_ATTR_INVALID_OUTPUT_SIZE_EXPECTED_SIZE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_SIZE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_GET_PROC_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_PROC_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_PROC_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PROC_CHIP, &CHIP_NAME, &CHIP_EC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_PROC_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_PROC_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PROC_CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_PROC_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CHIP_NAME; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_NAME); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_GET_PROC_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CHIP_EC; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_EC); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_GET_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PROC_CHIP, &CHIP_NAME, &CHIP_EC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_PROC_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PROC_CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CHIP_NAME; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_NAME); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_GET_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CHIP_EC; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_EC); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_GET_PROC_ABUS_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_PROC_ABUS_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_PROC_ABUS_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PROC_CHIP, &CHIP_NAME, &CHIP_EC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_PROC_ABUS_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_PROC_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PROC_CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_PROC_ABUS_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CHIP_NAME; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_NAME); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_GET_PROC_ABUS_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CHIP_EC; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_EC); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_GET_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PROC_CHIP, &CHIP_NAME, &CHIP_EC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_PROC_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PROC_CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CHIP_NAME; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_NAME); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_GET_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CHIP_EC; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_EC); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_GET_MEMB_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_MEMB_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_MEMB_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MEMBUF_CHIP, &CHIP_NAME, &CHIP_EC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_MEMB_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_MEMBUF_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MEMBUF_CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_MEMB_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CHIP_NAME; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_NAME); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_GET_MEMB_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CHIP_EC; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_EC); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_GET_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MEMBUF_CHIP, &CHIP_NAME, &CHIP_EC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_MEMBUF_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MEMBUF_CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CHIP_NAME; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_NAME); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_GET_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CHIP_EC; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_EC); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_GET_PLL_RING_ATTR_INVALID_ATTRIBUTE_ID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_PLL_RING_ATTR_INVALID_ATTRIBUTE_ID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_PLL_RING_ATTR_INVALID_ATTRIBUTE_ID_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_INVALID_ATTRIBUTE_ID_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID, &PROC_CHIP, &CHIP_NAME, &CHIP_EC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC_PROC_CHIP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PROC_CHIP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC_CHIP_NAME; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_NAME); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC_CHIP_EC; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_EC); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID, &PROC_CHIP, &CHIP_NAME, &CHIP_EC, &FREQ_1}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1_PROC_CHIP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PROC_CHIP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1_CHIP_NAME; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_NAME); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1_CHIP_EC; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_EC); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1_FREQ_1; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_1); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID, &PROC_CHIP, &CHIP_NAME, &CHIP_EC, &FREQ_1, &FREQ_2}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_PROC_CHIP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PROC_CHIP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_CHIP_NAME; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_NAME); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_CHIP_EC; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_EC); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_FREQ_1; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_1); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_FREQ_2; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_2); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[6].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[6].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ATTR_ID, &PROC_CHIP, &CHIP_NAME, &CHIP_EC, &FREQ_1, &FREQ_2, &FREQ_3, &FREQ_4}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[9]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_ATTR_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_PROC_CHIP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PROC_CHIP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_CHIP_NAME; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_NAME); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_CHIP_EC; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_EC); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_FREQ_1; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_1); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_FREQ_2; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_2); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_FREQ_3; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_3); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_FREQ_4; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_4); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[8].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[8].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 9); \
}

#define RC_FAPIPOREVE_FAILED_TO_CREATE_POREVE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_FAILED_TO_CREATE_POREVE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_FAILED_TO_CREATE_POREVE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_FAPIPOREVE_FAILED_TO_OPEN_STATE_FILE_FOR_READING_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_FAILED_TO_OPEN_STATE_FILE_FOR_READING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_FAILED_TO_OPEN_STATE_FILE_FOR_READING_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_FAPIPOREVE_FAILED_TO_INSTALL_STATE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_FAILED_TO_INSTALL_STATE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_FAILED_TO_INSTALL_STATE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_FAILED_TO_INSTALL_STATE_ERROR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_FAPIPOREVE_FAILED_TO_LOAD_HOOKS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_FAILED_TO_LOAD_HOOKS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_FAILED_TO_LOAD_HOOKS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_FAPIPOREVE_UNKNOWN_ARG_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_UNKNOWN_ARG_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_UNKNOWN_ARG_TYPE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_UNKNOWN_ARG_TYPE_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_FAPIPOREVE_ERROR_DETACHING_SLAVE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_ERROR_DETACHING_SLAVE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_ERROR_DETACHING_SLAVE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ERROR, &TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_ERROR_DETACHING_SLAVE_ERROR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_ERROR_DETACHING_SLAVE_TYPE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TYPE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_FAPIPOREVE_ENTRY_POINT_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_ENTRY_POINT_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_ENTRY_POINT_NOT_FOUND_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_ENTRY_POINT_NOT_FOUND_ERROR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_FAPIPOREVE_INVALID_ENTRY_POINT_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_INVALID_ENTRY_POINT_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_INVALID_ENTRY_POINT_TYPE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_INVALID_ENTRY_POINT_TYPE_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_FAPIPOREVE_ERROR_SETTING_PC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_ERROR_SETTING_PC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_ERROR_SETTING_PC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ADDRESS, &ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_ERROR_SETTING_PC_ADDRESS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_ERROR_SETTING_PC_ERROR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_FAPIPOREVE_BREAKPOINT_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_BREAKPOINT_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_BREAKPOINT_NOT_FOUND_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_BREAKPOINT_NOT_FOUND_ERROR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_FAPIPOREVE_INVALID_BREAK_POINT_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_INVALID_BREAK_POINT_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_INVALID_BREAK_POINT_TYPE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_INVALID_BREAK_POINT_TYPE_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_FAPIPOREVE_ERROR_SETTING_BREAKPOINT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_ERROR_SETTING_BREAKPOINT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_ERROR_SETTING_BREAKPOINT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ADDRESS, &ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_ERROR_SETTING_BREAKPOINT_ADDRESS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_ERROR_SETTING_BREAKPOINT_ERROR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_FAPIPOREVE_ERROR_SETTING_MRR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_ERROR_SETTING_MRR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_ERROR_SETTING_MRR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MRR, &ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_ERROR_SETTING_MRR_MRR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MRR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_ERROR_SETTING_MRR_ERROR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_FAPIPOREVE_HALTED_WITH_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_HALTED_WITH_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_HALTED_WITH_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&ERROR, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_HALTED_WITH_ERROR_ERROR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_HALTED_WITH_ERROR_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 1; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_FAPIPOREVE_PIB_ERROR_READING_SBEVITAL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_PIB_ERROR_READING_SBEVITAL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_PIB_ERROR_READING_SBEVITAL_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ERROR, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_PIB_ERROR_READING_SBEVITAL_ERROR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_PIB_ERROR_READING_SBEVITAL_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_FAPIPOREVE_MODEL_ERROR_GETTING_HALT_CODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_MODEL_ERROR_GETTING_HALT_CODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_MODEL_ERROR_GETTING_HALT_CODE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&ERROR, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_MODEL_ERROR_GETTING_HALT_CODE_ERROR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_MODEL_ERROR_GETTING_HALT_CODE_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 1; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_FAPIPOREVE_ARCHITECTED_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_ARCHITECTED_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_ARCHITECTED_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_FAPIPOREVE_MODELING_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_MODELING_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_MODELING_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 0; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_FAPIPOREVE_UNKNOWN_STATUS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_UNKNOWN_STATUS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_UNKNOWN_STATUS_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&STATUS, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_FAPIPOREVE_UNKNOWN_STATUS_ERROR_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 0; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_FAPIPOREVE_FAILED_TO_OPEN_STATE_FILE_FOR_WRITING_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_FAILED_TO_OPEN_STATE_FILE_FOR_WRITING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_FAILED_TO_OPEN_STATE_FILE_FOR_WRITING_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_FAPIPOREVE_ERROR_EXTRACTING_STATE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_FAPIPOREVE_ERROR_EXTRACTING_STATE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_FAPIPOREVE_ERROR_EXTRACTING_STATE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_SETUP_BARS_ATTR_QUERY_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_ATTR_QUERY_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_ATTR_QUERY_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &FAPI_ATTR_ID, &ATTR_ID, &ATTR_IDX1, &ATTR_IDX2}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_QUERY_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_QUERY_ERR_FAPI_ATTR_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FAPI_ATTR_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_QUERY_ERR_ATTR_ID; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_QUERY_ERR_ATTR_IDX1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_IDX1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_QUERY_ERR_ATTR_IDX2; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_IDX2); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &ATTR_ID, &ATTR_IDX1, &ATTR_IDX2, &ERR_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR_ATTR_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR_ATTR_IDX1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_IDX1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR_ATTR_IDX2; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_IDX2); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR_ERR_TYPE; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERR_TYPE); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &ATTR_ID, &ATTR_IDX1, &ATTR_IDX2, &BASE_ADDR, &ENABLED, &SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_ATTR_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_ATTR_IDX1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_IDX1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_ATTR_IDX2; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_IDX2); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_BASE_ADDR; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_ENABLED; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENABLED); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_SIZE; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[7].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[7].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &RANGE_ID, &ATTR_IDX1, &BASE_ADDR1, &END_ADDR1, &ENABLED1, &ATTR_IDX2, &BASE_ADDR2, &END_ADDR2, &ENABLED2}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[11]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_RANGE_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANGE_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_ATTR_IDX1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_IDX1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_BASE_ADDR1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_END_ADDR1; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(END_ADDR1); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_ENABLED1; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENABLED1); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_ATTR_IDX2; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_IDX2); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_BASE_ADDR2; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR2); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_END_ADDR2; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(END_ADDR2); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_ENABLED2; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENABLED2); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[10].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[10].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 11); \
}

#define RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &RANGE_ID, &BASE_ADDR, &END_ADDR, &ENABLED}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR_RANGE_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANGE_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR_BASE_ADDR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR_END_ADDR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(END_ADDR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR_ENABLED; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENABLED); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &NODE_ID}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR_NODE_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &NODE_ID}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR_NODE_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET1, &TARGET2, &NODE_ID, &CHIP_ID}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_TARGET1; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET1); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_TARGET2; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET2); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_NODE_ID; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_ID); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_CHIP_ID; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_ID); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET1, &RANGE_ID1, &BASE_ADDR1, &END_ADDR1, &ENABLED1, &TARGET2, &RANGE_ID2, &BASE_ADDR2, &END_ADDR2, &ENABLED2}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[11]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_TARGET1; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET1); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_RANGE_ID1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANGE_ID1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_BASE_ADDR1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_END_ADDR1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(END_ADDR1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_ENABLED1; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENABLED1); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_TARGET2; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET2); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_RANGE_ID2; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANGE_ID2); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_BASE_ADDR2; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR2); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_END_ADDR2; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(END_ADDR2); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_ENABLED2; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENABLED2); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[10].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[10].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 11); \
}

#define RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &SCOM_ADDR, &BASE_ADDR, &ENABLED, &SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_SCOM_ADDR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SCOM_ADDR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_BASE_ADDR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_ENABLED; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENABLED); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_SIZE; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &SCOM_ADDR, &BASE_ADDR, &ENABLED, &SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_SCOM_ADDR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SCOM_ADDR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_BASE_ADDR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_ENABLED; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENABLED); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_SIZE; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROC_CHIPLET_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CHIPLET_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CHIPLET_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CHIPLET_SCOMINIT_INVALID_TARGET_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE_MAX}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_INP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_MAX; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_SLWB_IMG_PTR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_IMG_PTR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_IMG_PTR_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_BUF1_PTR, &DATA_BUF2_PTR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_IMG_PTR_ERROR_DATA_BUF1_PTR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF1_PTR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_IMG_PTR_ERROR_DATA_BUF2_PTR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF2_PTR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_SLWB_BUF_PTR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_BUF_PTR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_BUF_PTR_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_BUF1_PTR, &DATA_BUF2_PTR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_BUF_PTR_ERROR_DATA_BUF1_PTR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF1_PTR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_BUF_PTR_ERROR_DATA_BUF2_PTR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF2_PTR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_BUF1_SIZE, &DATA_BUF2_SIZE, &DATA_BUF_SIZE_FIXED}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_DATA_BUF1_SIZE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF1_SIZE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_DATA_BUF2_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF2_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_DATA_BUF_SIZE_FIXED; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF_SIZE_FIXED); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_IMG_SIZE_MAX, &DATA_IMG_SIZE_FIXED}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_DATA_IMG_SIZE_MAX; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_DATA_IMG_SIZE_FIXED; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_FIXED); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_RING_BLOCK_SIZEOFTHIS, &DATA_SIZE_OF_BUF1}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_DATA_RING_BLOCK_SIZEOFTHIS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_SIZEOFTHIS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_DATA_SIZE_OF_BUF1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_OF_BUF1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_RING_BLOCK_ENTRYOFFSET, &DATA_RING_BLOCK_SIZEOFTHIS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_ENTRYOFFSET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_ENTRYOFFSET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_SIZEOFTHIS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_SIZEOFTHIS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_SLWB_IMGBUILD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_IMGBUILD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_IMGBUILD_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_IMGBUILD_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_IMG_SIZE_OLD, &DATA_IMG_SIZE_EST, &DATA_IMG_SIZE_MAX}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_OLD; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_OLD); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_EST; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_EST); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_MAX; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_SLWB_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_INTERNAL_IMAGE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_INTERNAL_IMAGE_ERR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&SBE_XIP_SECTION, &RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_SBE_XIP_SECTION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_XIP_SECTION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_RC_LOCAL; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_SLWB_RING_RETRIEVAL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_RING_RETRIEVAL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_RING_RETRIEVAL_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_RING_RETRIEVAL_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_FAIL_BYTE_NO, &DATA_EXISTING_RING_BYTE, &DATA_OVERLAY_RING_BYTE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_DATA_FAIL_BYTE_NO; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_FAIL_BYTE_NO); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_DATA_EXISTING_RING_BYTE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_EXISTING_RING_BYTE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_DATA_OVERLAY_RING_BYTE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_OVERLAY_RING_BYTE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_SLWB_L2_FARY_OVERLAY_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_L2_FARY_OVERLAY_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_L2_FARY_OVERLAY_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_FAIL_BYTE_NO, &DATA_EXISTING_RING_BYTE, &DATA_OVERLAY_RING_BYTE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_L2_FARY_OVERLAY_ERROR_DATA_FAIL_BYTE_NO; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_FAIL_BYTE_NO); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_L2_FARY_OVERLAY_ERROR_DATA_EXISTING_RING_BYTE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_EXISTING_RING_BYTE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_L2_FARY_OVERLAY_ERROR_DATA_OVERLAY_RING_BYTE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_OVERLAY_RING_BYTE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_SLWB_SLEEP_PROCESSING_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_SLEEP_PROCESSING_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_SLEEP_PROCESSING_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CT, &EC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_SLEEP_PROCESSING_ERROR_CT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_SLEEP_PROCESSING_ERROR_EC; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EC); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_SLWB_WF_CREATION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_WF_CREATION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_WF_CREATION_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_WF_CREATION_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_IMAGE_UPDATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_UPDATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_UPDATE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_IMAGE_UPDATE_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_CREATE_FIXED_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_CREATE_FIXED_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_CREATE_FIXED_IMAGE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_CREATE_FIXED_IMAGE_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_UNKNOWN_XIP_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_UNKNOWN_XIP_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_UNKNOWN_XIP_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_UNKNOWN_XIP_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_UNKNOWN_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_UNKNOWN_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_BAD_CODE_OR_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_BAD_CODE_OR_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_BAD_CODE_OR_PARM_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MODE_BUILD}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_BAD_CODE_OR_PARM_MODE_BUILD; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODE_BUILD); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_SLWB_MEMORY_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_MEMORY_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_MEMORY_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_SLWB_MEMORY_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_IMG_SIZE_MAX, &DATA_IMG_SIZE_WORK_SPACE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_DATA_IMG_SIZE_MAX; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_DATA_IMG_SIZE_WORK_SPACE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_WORK_SPACE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_XIPC_IMAGE_SIZE_MESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_SIZE_MESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_SIZE_MESS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_IMG_SIZE, &DATA_IMG_SIZE_MAX}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_IMAGE_SIZE_MESS_DATA_IMG_SIZE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_IMAGE_SIZE_MESS_DATA_IMG_SIZE_MAX; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_XIPC_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_INTERNAL_IMAGE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_INTERNAL_IMAGE_ERR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_XIPC_BUF_PTR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_BUF_PTR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_BUF_PTR_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_BUF1_PTR, &DATA_BUF2_PTR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_BUF_PTR_ERROR_DATA_BUF1_PTR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF1_PTR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_BUF_PTR_ERROR_DATA_BUF2_PTR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF2_PTR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_BUF1_SIZE, &DATA_BUF2_SIZE, &DATA_BUF_SIZE_FIXED}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_DATA_BUF1_SIZE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF1_SIZE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_DATA_BUF2_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF2_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_DATA_BUF_SIZE_FIXED; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF_SIZE_FIXED); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_XIPC_UNEXPECTED_FIELD_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_UNEXPECTED_FIELD_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_UNEXPECTED_FIELD_SIZE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_SIZE_VPD_FIELD}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_UNEXPECTED_FIELD_SIZE_DATA_SIZE_VPD_FIELD; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_VPD_FIELD); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_GEN_SCOM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_GEN_SCOM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_GEN_SCOM_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_GEN_SCOM_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_GEN_RAM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_GEN_RAM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_GEN_RAM_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_GEN_RAM_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_ATTRIBUTE_RING_SIZE, &DATA_MAX_PLL_RING_SIZE, &DATA_SIZE_OF_BUF1}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_ATTRIBUTE_RING_SIZE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_ATTRIBUTE_RING_SIZE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_MAX_PLL_RING_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_MAX_PLL_RING_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_SIZE_OF_BUF1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_OF_BUF1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_XIPC_IMGBUILD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_IMGBUILD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_IMGBUILD_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_IMGBUILD_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_RS4_COMPRESS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_RS4_COMPRESS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_RS4_COMPRESS_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RS4_COMPRESS_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_SIZE_RS4_COMPRESS_RETURN, &DATA_SIZE_RS4_COMPRESS_CONTAINER}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_DATA_SIZE_RS4_COMPRESS_RETURN; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_RS4_COMPRESS_RETURN); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_DATA_SIZE_RS4_COMPRESS_CONTAINER; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_RS4_COMPRESS_CONTAINER); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_XIPC_ILLEGAL_RS4_DECOMPRESS_ADDR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_ILLEGAL_RS4_DECOMPRESS_ADDR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_ILLEGAL_RS4_DECOMPRESS_ADDR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_RS4_DECOMPRESS_ADDR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_ILLEGAL_RS4_DECOMPRESS_ADDR_DATA_RS4_DECOMPRESS_ADDR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RS4_DECOMPRESS_ADDR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_PORE_INLINE_CTX_CREATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PORE_INLINE_CTX_CREATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PORE_INLINE_CTX_CREATE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_PORE_INLINE_CTX_CREATE_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_PORE_INLINE_RS4_LAUNCH_CREATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PORE_INLINE_RS4_LAUNCH_CREATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PORE_INLINE_RS4_LAUNCH_CREATE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_PORE_INLINE_RS4_LAUNCH_CREATE_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_RING_BLOCK_SIZEOFTHIS, &DATA_SIZE_OF_BUF1}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_RING_BLOCK_SIZEOFTHIS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_SIZEOFTHIS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_SIZE_OF_BUF1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_OF_BUF1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_SIZE_OF_RS4_LAUNCH, &DATA_RING_BLOCK_ENTRYOFFSET, &DATA_RING_BLOCK_SIZEOFTHIS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_SIZE_OF_RS4_LAUNCH; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_OF_RS4_LAUNCH); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_ENTRYOFFSET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_ENTRYOFFSET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_SIZEOFTHIS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_SIZEOFTHIS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_XIPC_CHIPLET_ID_MESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_CHIPLET_ID_MESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_CHIPLET_ID_MESS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_CHIPLET_ID_VPD, &DATA_CHIPLET_ID_REQ}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_CHIPLET_ID_MESS_DATA_CHIPLET_ID_VPD; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_CHIPLET_ID_VPD); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_CHIPLET_ID_MESS_DATA_CHIPLET_ID_REQ; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_CHIPLET_ID_REQ); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_XIPC_PG_RING_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PG_RING_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PG_RING_TOO_LARGE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_RING_SIZE_REQ, &DATA_RING_SIZE_MAX}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_PG_RING_TOO_LARGE_DATA_RING_SIZE_REQ; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_SIZE_REQ); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_PG_RING_TOO_LARGE_DATA_RING_SIZE_MAX; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_SIZE_MAX); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_XIPC_PR_RING_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PR_RING_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PR_RING_TOO_LARGE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_RING_SIZE_REQ, &DATA_RING_SIZE_MAX}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_PR_RING_TOO_LARGE_DATA_RING_SIZE_REQ; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_SIZE_REQ); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_PR_RING_TOO_LARGE_DATA_RING_SIZE_MAX; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_SIZE_MAX); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_XIPC_INVALID_VPD_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_INVALID_VPD_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_INVALID_VPD_TYPE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_VPD_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_INVALID_VPD_TYPE_DATA_VPD_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_VPD_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_VPD_KEYWORD_RESOLVE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_VPD_KEYWORD_RESOLVE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_VPD_KEYWORD_RESOLVE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_RING_LIST_VPD_KEYWORD}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_VPD_KEYWORD_RESOLVE_ERROR_DATA_RING_LIST_VPD_KEYWORD; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_LIST_VPD_KEYWORD); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_PERFORM_RING_DATACARE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PERFORM_RING_DATACARE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PERFORM_RING_DATACARE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_PERFORM_RING_DATACARE_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_CHECK_REDUNDANT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_CHECK_REDUNDANT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_CHECK_REDUNDANT_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_CHECK_REDUNDANT_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL, &CHIPLET_ID, &RING_ID, &RING_SIZE, &IMAGE_SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_CHIPLET_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_RING_ID; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RING_ID); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_RING_SIZE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RING_SIZE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_IMAGE_SIZE; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMAGE_SIZE); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&VALID_COUNT, &MINIMUM, &DESIRED_CORES, &BOOT_CORE_MASK}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO_VALID_COUNT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VALID_COUNT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO_MINIMUM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MINIMUM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO_DESIRED_CORES; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DESIRED_CORES); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO_BOOT_CORE_MASK; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BOOT_CORE_MASK); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&VALID_COUNT, &MINIMUM, &DESIRED_CORES, &BOOT_CORE_MASK}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS_VALID_COUNT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VALID_COUNT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS_MINIMUM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MINIMUM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS_DESIRED_CORES; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DESIRED_CORES); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS_BOOT_CORE_MASK; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BOOT_CORE_MASK); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_XIPC_WRITE_VPD_RING_TO_IPL_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_WRITE_VPD_RING_TO_IPL_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_WRITE_VPD_RING_TO_IPL_IMAGE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_WRITE_VPD_RING_TO_IPL_IMAGE_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_WRITE_VPD_RING_TO_SLW_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_WRITE_VPD_RING_TO_SLW_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_WRITE_VPD_RING_TO_SLW_IMAGE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_WRITE_VPD_RING_TO_SLW_IMAGE_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_XIP_DELETE_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_XIP_DELETE_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_XIP_DELETE_SECTION_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_XIP_DELETE_SECTION_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_CREATE_FIXED_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_CREATE_FIXED_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_CREATE_FIXED_IMAGE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_CREATE_FIXED_IMAGE_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_IMG_SIZE_NEW, &DATA_IMG_SIZE_MAX}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_NEW; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_NEW); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_MAX; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_XIPC_APPEND_SLW_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_APPEND_SLW_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_APPEND_SLW_SECTION_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_APPEND_SLW_SECTION_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XIPC_BAD_CODE_OR_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_BAD_CODE_OR_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_BAD_CODE_OR_PARM_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MODE_BUILD}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XIPC_BAD_CODE_OR_PARM_MODE_BUILD; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODE_BUILD); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&i_index, &i_pba_bar_addr, &i_pba_bar_size, &i_pba_cmd_scope, &exp_PBA_CMD_SCOPE_FOREIGN1}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_i_index; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_index); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_i_pba_bar_addr; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_pba_bar_addr); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_i_pba_bar_size; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_pba_bar_size); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_i_pba_cmd_scope; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_pba_cmd_scope); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_exp_PBA_CMD_SCOPE_FOREIGN1; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(exp_PBA_CMD_SCOPE_FOREIGN1); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROC_PBA_ADDR_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_ADDR_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_ADDR_OUT_OF_RANGE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&i_index, &i_pba_bar_addr, &i_pba_bar_size, &i_pba_cmd_scope, &exp_BAR_ADDR_RANGECHECK_HIGH}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_ADDR_OUT_OF_RANGE_i_index; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_index); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_ADDR_OUT_OF_RANGE_i_pba_bar_addr; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_pba_bar_addr); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_ADDR_OUT_OF_RANGE_i_pba_bar_size; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_pba_bar_size); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_ADDR_OUT_OF_RANGE_i_pba_cmd_scope; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_pba_cmd_scope); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_ADDR_OUT_OF_RANGE_exp_BAR_ADDR_RANGECHECK_HIGH; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(exp_BAR_ADDR_RANGECHECK_HIGH); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&i_index, &i_pba_bar_addr, &i_pba_bar_size, &i_pba_cmd_scope, &exp_BAR_ADDR_RANGECHECK_LOW}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_i_index; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_index); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_i_pba_bar_addr; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_pba_bar_addr); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_i_pba_bar_size; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_pba_bar_size); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_i_pba_cmd_scope; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_pba_cmd_scope); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_exp_BAR_ADDR_RANGECHECK_LOW; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(exp_BAR_ADDR_RANGECHECK_LOW); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROC_PBA_BAR_SIZE_INVALID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_BAR_SIZE_INVALID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_BAR_SIZE_INVALID_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&i_index, &i_pba_bar_addr, &i_pba_bar_size, &i_pba_cmd_scope}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_BAR_SIZE_INVALID_i_index; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_index); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_BAR_SIZE_INVALID_i_pba_bar_addr; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_pba_bar_addr); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_BAR_SIZE_INVALID_i_pba_bar_size; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_pba_bar_size); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_PBA_BAR_SIZE_INVALID_i_pba_cmd_scope; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(i_pba_cmd_scope); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_P8_PLL_UTILS_SBE_STOPPED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_P8_PLL_UTILS_SBE_STOPPED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_P8_PLL_UTILS_SBE_STOPPED_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&TARGET, &SBE_CONTROL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_SBE_STOPPED_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_SBE_STOPPED_SBE_CONTROL; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_CONTROL); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 0; \
  l_entries[2].target_cdg.iv_callout = 0; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_P8_PLL_UTILS_SBE_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_P8_PLL_UTILS_SBE_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_P8_PLL_UTILS_SBE_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&TARGET, &POLL_COUNT, &SBE_VITAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_SBE_TIMEOUT_ERROR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_SBE_TIMEOUT_ERROR_POLL_COUNT; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLL_COUNT); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_SBE_TIMEOUT_ERROR_SBE_VITAL; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 0; \
  l_entries[3].target_cdg.iv_callout = 0; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_P8_PLL_UTILS_SBE_SCAN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_P8_PLL_UTILS_SBE_SCAN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_P8_PLL_UTILS_SBE_SCAN_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&TARGET, &PLL_RING_ADDR, &PLL_RING_OP, &PLL_BUS_ID, &MBOX1_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_SBE_SCAN_ERROR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_SBE_SCAN_ERROR_PLL_RING_ADDR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PLL_RING_ADDR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_SBE_SCAN_ERROR_PLL_RING_OP; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PLL_RING_OP); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_SBE_SCAN_ERROR_PLL_BUS_ID; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PLL_BUS_ID); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_SBE_SCAN_ERROR_MBOX1_DATA; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBOX1_DATA); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 0; \
  l_entries[5].target_cdg.iv_callout = 0; \
  l_entries[5].target_cdg.iv_deconfigure = 1; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_P8_PLL_UTILS_INVALID_OPERATION_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_P8_PLL_UTILS_INVALID_OPERATION_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_P8_PLL_UTILS_INVALID_OPERATION_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &PLL_RING_ADDR, &PLL_RING_OP, &PLL_BUS_ID, &INVALID_RING_ADDRESS, &INVALID_RING_OP, &INVALID_BUS_ID}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_INVALID_OPERATION_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_INVALID_OPERATION_PLL_RING_ADDR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PLL_RING_ADDR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_INVALID_OPERATION_PLL_RING_OP; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PLL_RING_OP); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_INVALID_OPERATION_PLL_BUS_ID; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PLL_BUS_ID); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_INVALID_OPERATION_INVALID_RING_ADDRESS; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_RING_ADDRESS); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_INVALID_OPERATION_INVALID_RING_OP; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_RING_OP); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_P8_PLL_UTILS_INVALID_OPERATION_INVALID_BUS_ID; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_BUS_ID); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[7].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[7].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_ABUS_PLL_NO_LOCK_REGISTERS, RC); 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&LOCK_STATUS, &CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK_LOCK_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LOCK_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[1].hw_callout.iv_hw = fapi::HwCallouts::PROC_REF_CLOCK; \
  l_entries[1].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].hw_callout.iv_refObjIndex = 1; \
  l_entries[1].hw_callout.iv_objPosIndex = 0xff; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE ; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 1; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_DMI_PLL_NO_LOCK_REGISTERS, RC); 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&LOCK_STATUS, &CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK_LOCK_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LOCK_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[1].hw_callout.iv_hw = fapi::HwCallouts::PROC_REF_CLOCK; \
  l_entries[1].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].hw_callout.iv_refObjIndex = 1; \
  l_entries[1].hw_callout.iv_objPosIndex = 0xff; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE ; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 1; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PCIE_PLL_NO_LOCK_REGISTERS, RC); 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&LOCK_STATUS, &CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK_LOCK_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LOCK_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[1].hw_callout.iv_hw = fapi::HwCallouts::PCI_REF_CLOCK; \
  l_entries[1].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].hw_callout.iv_refObjIndex = 1; \
  l_entries[1].hw_callout.iv_objPosIndex = 0xff; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE ; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 1; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&SBE_STATUS, &CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_SBE_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&SBE_VITAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_SBE_VITAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&SBE_VITAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_SBE_VITAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_FIR_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_PMC_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_PBA_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_PCBS_REGISTERS, RC, fapi::TARGET_TYPE_NONE, fapi::TARGET_TYPE_EX_CHIPLET, 0x01000000);
#define RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&SBE_RUNNING, &HALT_CODE, &ISTEP_NUM, &SUBSTEP_NUM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE_SBE_RUNNING; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_RUNNING); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE_HALT_CODE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(HALT_CODE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE_ISTEP_NUM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ISTEP_NUM); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE_SUBSTEP_NUM; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SUBSTEP_NUM); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_FIR_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_PMC_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_PBA_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_PCBS_REGISTERS, RC, fapi::TARGET_TYPE_NONE, fapi::TARGET_TYPE_EX_CHIPLET, 0x01000000);
#define RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&SBE_RUNNING, &HALT_CODE, &ISTEP_NUM, &SUBSTEP_NUM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE_SBE_RUNNING; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_RUNNING); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE_HALT_CODE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(HALT_CODE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE_ISTEP_NUM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ISTEP_NUM); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE_SUBSTEP_NUM; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SUBSTEP_NUM); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_BUILD_SMP_CORE_FREQ_RANGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FREQ_RANGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FREQ_RANGE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FREQ_CORE_CEILING, &FREQ_CORE_NOM, &FREQ_CORE_FLOOR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_CORE_FREQ_RANGE_ERR_FREQ_CORE_CEILING; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_CORE_CEILING); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_CORE_FREQ_RANGE_ERR_FREQ_CORE_NOM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_CORE_NOM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_CORE_FREQ_RANGE_ERR_FREQ_CORE_FLOOR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_CORE_FLOOR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FREQ_PB, &FREQ_CORE_FLOOR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_FREQ_PB; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_PB); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_FREQ_CORE_FLOOR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_CORE_FLOOR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_BUILD_SMP_CORE_CEILING_FREQ_RATIO_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_CEILING_FREQ_RATIO_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_CEILING_FREQ_RATIO_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FREQ_PB, &FREQ_CORE_CEILING}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_CORE_CEILING_FREQ_RATIO_ERR_FREQ_PB; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_PB); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_CORE_CEILING_FREQ_RATIO_ERR_FREQ_CORE_CEILING; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_CORE_CEILING); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&OP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_OP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &OP, &MASTER_CHIP_SYS_CURR, &MASTER_CHIP_NODE_CURR, &MASTER_CHIP_SYS_NEXT, &MASTER_CHIP_NODE_NEXT, &SYS_RECONFIG_MASTER_SET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_OP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_SYS_CURR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_SYS_CURR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_NODE_CURR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_NODE_CURR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_SYS_NEXT; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_SYS_NEXT); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_NODE_NEXT; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_NODE_NEXT); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_SYS_RECONFIG_MASTER_SET; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYS_RECONFIG_MASTER_SET); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[7].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[7].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &NODE_ID}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR_NODE_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET1, &TARGET2, &NODE_ID, &CHIP_ID}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_TARGET1; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET1); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_TARGET2; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET2); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_NODE_ID; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_ID); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_CHIP_ID; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_ID); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_BUILD_SMP_NO_MASTER_SPECIFIED_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_NO_MASTER_SPECIFIED_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_NO_MASTER_SPECIFIED_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&OP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_NO_MASTER_SPECIFIED_ERR_OP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &ADU_STATUS_DATA, &ADU_NUM_POLLS, &FFDC_VALID, &NUM_CHIPS, &CHIP_IDS, &PB_MODE_CENT_DATA, &PB_HP_MODE_NEXT_CENT_DATA, &PB_HP_MODE_CURR_CENT_DATA, &PB_HPX_MODE_NEXT_CENT_DATA, &PB_HPX_MODE_CURR_CENT_DATA, &X_GP0_DATA, &PB_X_MODE_DATA, &A_GP0_DATA, &ADU_IOS_LINK_EN_DATA, &PB_A_MODE_DATA, &ADU_PMISC_MODE_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[18]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_ADU_STATUS_DATA; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADU_STATUS_DATA); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_ADU_NUM_POLLS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADU_NUM_POLLS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_FFDC_VALID; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_VALID); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_NUM_CHIPS; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NUM_CHIPS); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_CHIP_IDS; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_IDS); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_MODE_CENT_DATA; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PB_MODE_CENT_DATA); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_HP_MODE_NEXT_CENT_DATA; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PB_HP_MODE_NEXT_CENT_DATA); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_HP_MODE_CURR_CENT_DATA; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PB_HP_MODE_CURR_CENT_DATA); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_HPX_MODE_NEXT_CENT_DATA; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PB_HPX_MODE_NEXT_CENT_DATA); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[10].ffdc.iv_ffdcObjIndex = 10; \
  l_entries[10].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_HPX_MODE_CURR_CENT_DATA; \
  l_entries[10].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PB_HPX_MODE_CURR_CENT_DATA); \
  l_entries[11].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[11].ffdc.iv_ffdcObjIndex = 11; \
  l_entries[11].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_X_GP0_DATA; \
  l_entries[11].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(X_GP0_DATA); \
  l_entries[12].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[12].ffdc.iv_ffdcObjIndex = 12; \
  l_entries[12].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_X_MODE_DATA; \
  l_entries[12].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PB_X_MODE_DATA); \
  l_entries[13].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[13].ffdc.iv_ffdcObjIndex = 13; \
  l_entries[13].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_A_GP0_DATA; \
  l_entries[13].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(A_GP0_DATA); \
  l_entries[14].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[14].ffdc.iv_ffdcObjIndex = 14; \
  l_entries[14].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_ADU_IOS_LINK_EN_DATA; \
  l_entries[14].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADU_IOS_LINK_EN_DATA); \
  l_entries[15].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[15].ffdc.iv_ffdcObjIndex = 15; \
  l_entries[15].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_A_MODE_DATA; \
  l_entries[15].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PB_A_MODE_DATA); \
  l_entries[16].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[16].ffdc.iv_ffdcObjIndex = 16; \
  l_entries[16].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_ADU_PMISC_MODE_DATA; \
  l_entries[16].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADU_PMISC_MODE_DATA); \
  l_entries[17].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[17].proc_callout.iv_procedure = fapi::ProcedureCallouts::LVL_SUPPORT; \
  l_entries[17].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 18); \
}

#define RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&VALUE, &MAX_HW_VALUE, &UNIT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_VALUE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VALUE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_MAX_HW_VALUE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAX_HW_VALUE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_UNIT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_BUILD_SMP_EPSILON_INVALID_TABLE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_EPSILON_INVALID_TABLE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_EPSILON_INVALID_TABLE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TABLE_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_EPSILON_INVALID_TABLE_ERR_TABLE_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TABLE_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &X_NOT_A, &ALLOW_AGGREGATE, &AGGREGATE_DEST_ID1, &AGGREGATE_DEST_ID2}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_X_NOT_A; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(X_NOT_A); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_ALLOW_AGGREGATE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ALLOW_AGGREGATE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_AGGREGATE_DEST_ID1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(AGGREGATE_DEST_ID1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_AGGREGATE_DEST_ID2; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(AGGREGATE_DEST_ID2); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FREQ_PB, &FREQ_X, &X_IS_8B, &X_AGGREGATE, &N, &D, &CMD_RATE, &MIN_CMD_RATE, &MAX_CMD_RATE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[10]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_FREQ_PB; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_PB); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_FREQ_X; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_X); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_X_IS_8B; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(X_IS_8B); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_X_AGGREGATE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(X_AGGREGATE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_N; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(N); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_D; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(D); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_CMD_RATE; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_RATE); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_MIN_CMD_RATE; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MIN_CMD_RATE); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_MAX_CMD_RATE; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAX_CMD_RATE); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[9].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[9].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 10); \
}

#define RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FREQ_PB, &FREQ_A, &A_OW_PACK, &A_OW_PACK_PRIORITY, &A_AGGREGATE, &N, &D, &CMD_RATE, &MIN_CMD_RATE, &MAX_CMD_RATE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[11]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_FREQ_PB; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_PB); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_FREQ_A; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_A); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_A_OW_PACK; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(A_OW_PACK); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_A_OW_PACK_PRIORITY; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(A_OW_PACK_PRIORITY); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_A_AGGREGATE; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(A_AGGREGATE); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_N; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(N); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_D; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(D); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_CMD_RATE; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_RATE); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_MIN_CMD_RATE; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MIN_CMD_RATE); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_MAX_CMD_RATE; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAX_CMD_RATE); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[10].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[10].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 11); \
}

#define RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FREQ_PB, &FREQ_F, &F_OW_PACK, &F_OW_PACK_PRIORITY, &F_AGGREGATE, &N, &D, &CMD_RATE, &MIN_CMD_RATE, &MAX_CMD_RATE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[11]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_FREQ_PB; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_PB); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_FREQ_F; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_F); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_F_OW_PACK; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(F_OW_PACK); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_F_OW_PACK_PRIORITY; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(F_OW_PACK_PRIORITY); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_F_AGGREGATE; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(F_AGGREGATE); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_N; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(N); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_D; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(D); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_CMD_RATE; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_RATE); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_MIN_CMD_RATE; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MIN_CMD_RATE); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_MAX_CMD_RATE; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAX_CMD_RATE); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[10].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[10].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 11); \
}

#define RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ADDRESS0, &ADDRESS1, &DATA0, &DATA1}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADDRESS0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADDRESS1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_DATA0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_DATA1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&SOURCE_CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&SOURCE_CHIP_TARGET, &CHIPLET_ID, &SOURCE_LINK_ID, &REGION_ENABLED, &REGIONS_TO_ENABLE, &REGIONS_TO_ENABLE_VALID, &DEST_LINK_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[9]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_SOURCE_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SOURCE_CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_CHIPLET_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_SOURCE_LINK_ID; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SOURCE_LINK_ID); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_REGION_ENABLED; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REGION_ENABLED); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_REGIONS_TO_ENABLE; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REGIONS_TO_ENABLE); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_REGIONS_TO_ENABLE_VALID; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REGIONS_TO_ENABLE_VALID); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_DEST_LINK_TARGET; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DEST_LINK_TARGET); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[7].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[7].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[8].target_cdg.iv_targetObjIndex = 0; \
  l_entries[8].target_cdg.iv_callout = 1; \
  l_entries[8].target_cdg.iv_deconfigure = 1; \
  l_entries[8].target_cdg.iv_gard = 0; \
  l_entries[8].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 9); \
}

#define RC_PROC_BUILD_SMP_LINK_TARGET_TYPE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_LINK_TARGET_TYPE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_LINK_TARGET_TYPE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&SOURCE_CHIP_TARGET, &SOURCE_LINK_ID, &DEST_LINK_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_LINK_TARGET_TYPE_ERR_SOURCE_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SOURCE_CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_LINK_TARGET_TYPE_ERR_SOURCE_LINK_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SOURCE_LINK_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_LINK_TARGET_TYPE_ERR_DEST_LINK_TARGET; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DEST_LINK_TARGET); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&SOURCE_CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&SOURCE_CHIP_TARGET, &CHIPLET_ID, &SOURCE_LINK_ID, &REGION_ENABLED, &REGIONS_TO_ENABLE, &REGIONS_TO_ENABLE_VALID, &DEST_NODE_ID}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[9]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_SOURCE_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SOURCE_CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_CHIPLET_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_SOURCE_LINK_ID; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SOURCE_LINK_ID); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_REGION_ENABLED; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REGION_ENABLED); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_REGIONS_TO_ENABLE; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REGIONS_TO_ENABLE); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_REGIONS_TO_ENABLE_VALID; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REGIONS_TO_ENABLE_VALID); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_DEST_NODE_ID; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DEST_NODE_ID); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[7].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[7].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[8].target_cdg.iv_targetObjIndex = 0; \
  l_entries[8].target_cdg.iv_callout = 1; \
  l_entries[8].target_cdg.iv_deconfigure = 1; \
  l_entries[8].target_cdg.iv_gard = 0; \
  l_entries[8].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 9); \
}

#define RC_PROC_BUILD_SMP_CORE_CEILING_RATIO_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_CEILING_RATIO_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_CEILING_RATIO_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FREQ_PB, &FREQ_CORE_CEILING, &CORE_CEILING_RATIO}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_CORE_CEILING_RATIO_ERR_FREQ_PB; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_PB); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_CORE_CEILING_RATIO_ERR_FREQ_CORE_CEILING; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_CORE_CEILING); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_CORE_CEILING_RATIO_ERR_CORE_CEILING_RATIO; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CORE_CEILING_RATIO); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FREQ_PB, &FREQ_CORE_FLOOR, &CORE_FLOOR_RATIO}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_FREQ_PB; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_PB); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_FREQ_CORE_FLOOR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_CORE_FLOOR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_CORE_FLOOR_RATIO; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CORE_FLOOR_RATIO); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &GROUP_SIZE, &NODE_ID}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_GROUP_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_NODE_ID; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_ID); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &GROUP_SIZE, &NODE_ID}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_GROUP_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_NODE_ID; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_ID); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_BUILD_SMP_INVALID_TOPOLOGY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_TOPOLOGY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_TOPOLOGY_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &A_CONNECTIONS_OK, &A_CONNECTED_NODE_IDS, &X_CONNECTIONS_OK, &X_CONNECTED_CHIP_IDS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_TOPOLOGY_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_TOPOLOGY_A_CONNECTIONS_OK; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(A_CONNECTIONS_OK); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_TOPOLOGY_A_CONNECTED_NODE_IDS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(A_CONNECTED_NODE_IDS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_TOPOLOGY_X_CONNECTIONS_OK; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(X_CONNECTIONS_OK); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_BUILD_SMP_INVALID_TOPOLOGY_X_CONNECTED_CHIP_IDS; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(X_CONNECTED_CHIP_IDS); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROC_ADU_UTILS_INVALID_LOCK_ATTEMPTS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INVALID_LOCK_ATTEMPTS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INVALID_LOCK_ATTEMPTS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &ATTEMPTS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_ADU_UTILS_INVALID_LOCK_ATTEMPTS_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_ADU_UTILS_INVALID_LOCK_ATTEMPTS_ATTEMPTS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTEMPTS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_ADU_UTILS_INVALID_LOCK_OPERATION_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INVALID_LOCK_OPERATION_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INVALID_LOCK_OPERATION_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &OPERATION}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_ADU_UTILS_INVALID_LOCK_OPERATION_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_ADU_UTILS_INVALID_LOCK_OPERATION_OPERATION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OPERATION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_ADU_UTILS_INVALID_FBC_OP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INVALID_FBC_OP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INVALID_FBC_OP_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &ADDRESS, &FBC_OP, &FBC_OP_HP_CTL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_ADU_UTILS_INVALID_FBC_OP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_ADU_UTILS_INVALID_FBC_OP_ADDRESS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_ADU_UTILS_INVALID_FBC_OP_FBC_OP; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FBC_OP); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_ADU_UTILS_INVALID_FBC_OP_FBC_OP_HP_CTL; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FBC_OP_HP_CTL); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_I2C_FIFO_INCOMPLETE_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_I2C_FIFO_INCOMPLETE_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_I2C_FIFO_INCOMPLETE_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&CHIP_TARGET, &ADDRESS_VAL, &DATA_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_I2C_FIFO_INCOMPLETE_RC_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_I2C_FIFO_INCOMPLETE_RC_ADDRESS_VAL; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS_VAL); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_I2C_FIFO_INCOMPLETE_RC_DATA_REG; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_REG); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 0; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_I2C_ERROR_BIT_PRESENT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_I2C_ERROR_BIT_PRESENT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_I2C_ERROR_BIT_PRESENT_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&CHIP_TARGET, &ADDRESS_VAL, &DATA_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_I2C_ERROR_BIT_PRESENT_RC_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_I2C_ERROR_BIT_PRESENT_RC_ADDRESS_VAL; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS_VAL); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_I2C_ERROR_BIT_PRESENT_RC_DATA_REG; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_REG); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 0; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_I2C_COMPLETE_BIT_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_I2C_COMPLETE_BIT_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_I2C_COMPLETE_BIT_TIMEOUT_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&CHIP_TARGET, &ADDRESS_VAL, &DATA_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_I2C_COMPLETE_BIT_TIMEOUT_RC_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_I2C_COMPLETE_BIT_TIMEOUT_RC_ADDRESS_VAL; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS_VAL); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_I2C_COMPLETE_BIT_TIMEOUT_RC_DATA_REG; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_REG); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 0; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_THREAD_CONTROL_INV_COMMAND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_INV_COMMAND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_INV_COMMAND_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&COMMAND}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_INV_COMMAND_COMMAND; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(COMMAND); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_THREAD_CONTROL_SRESET_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_SRESET_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_SRESET_FAIL_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CORE_TARGET); \
\
{ \
  const void * l_objects[] = {&CORE_TARGET, &THREAD, &RAS_STATUS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_SRESET_FAIL_CORE_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CORE_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_SRESET_FAIL_THREAD; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(THREAD); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_SRESET_FAIL_RAS_STATUS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RAS_STATUS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 0; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CORE_TARGET, &THREAD, &RAS_STATUS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_CORE_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CORE_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_THREAD; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(THREAD); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_RAS_STATUS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RAS_STATUS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_THREAD_CONTROL_START_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_START_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_START_FAIL_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CORE_TARGET, &THREAD, &RAS_STATUS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_START_FAIL_CORE_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CORE_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_START_FAIL_THREAD; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(THREAD); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_START_FAIL_RAS_STATUS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RAS_STATUS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_THREAD_CONTROL_STOP_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STOP_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STOP_FAIL_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CORE_TARGET, &THREAD, &RAS_STATUS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_STOP_FAIL_CORE_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CORE_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_STOP_FAIL_THREAD; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(THREAD); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_STOP_FAIL_RAS_STATUS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RAS_STATUS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CORE_TARGET, &THREAD, &RAS_STATUS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_CORE_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CORE_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_THREAD; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(THREAD); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_RAS_STATUS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RAS_STATUS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_THREAD_CONTROL_STEP_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STEP_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STEP_FAIL_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CORE_TARGET); \
\
{ \
  const void * l_objects[] = {&CORE_TARGET, &THREAD, &RAS_STATUS, &PTC_STEP_COMP_POLL_LIMIT, &PTC_RAS_MODE_SINGLE, &stepCompletePollCount}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_STEP_FAIL_CORE_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CORE_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_STEP_FAIL_THREAD; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(THREAD); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_STEP_FAIL_RAS_STATUS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RAS_STATUS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_STEP_FAIL_PTC_STEP_COMP_POLL_LIMIT; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PTC_STEP_COMP_POLL_LIMIT); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_STEP_FAIL_PTC_RAS_MODE_SINGLE; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PTC_RAS_MODE_SINGLE); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_STEP_FAIL_stepCompletePollCount; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(stepCompletePollCount); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[6].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[6].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[7].target_cdg.iv_targetObjIndex = 0; \
  l_entries[7].target_cdg.iv_callout = 1; \
  l_entries[7].target_cdg.iv_deconfigure = 0; \
  l_entries[7].target_cdg.iv_gard = 0; \
  l_entries[7].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CORE_TARGET); \
\
{ \
  const void * l_objects[] = {&CORE_TARGET, &THREAD, &RAS_STATUS, &thd_activate_bit}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_CORE_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CORE_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_THREAD; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(THREAD); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_RAS_STATUS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RAS_STATUS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_thd_activate_bit; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(thd_activate_bit); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 0; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_ACCESSOR_HWP_INVALID_TARGET_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ACCESSOR_HWP_INVALID_TARGET_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_ACCESSOR_HWP_INVALID_TARGET_TYPE_ADD_ERROR_INFO(RC) 

#define RC_ACCESSOR_HWP_MEMORY_ALLOC_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ACCESSOR_HWP_MEMORY_ALLOC_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_ACCESSOR_HWP_MEMORY_ALLOC_FAIL_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_RESTORE_INVALID_TARGET_PAIR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_RESTORE_INVALID_TARGET_PAIR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_RESTORE_INVALID_TARGET_PAIR_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_RESTORE_FIELD_VPD_NOT_CLEAR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_RESTORE_FIELD_VPD_NOT_CLEAR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_RESTORE_FIELD_VPD_NOT_CLEAR_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_RESTORE_CHARM_THRESHOLD_EXCEED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_RESTORE_CHARM_THRESHOLD_EXCEED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_RESTORE_CHARM_THRESHOLD_EXCEED_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_RESTORE_SPARE_LANES_IN_VPD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_RESTORE_SPARE_LANES_IN_VPD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_RESTORE_SPARE_LANES_IN_VPD_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_EREPAIR_RESTORE_SPARE_LANES_IN_VPD_FFDC_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_TARGET); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_EREPAIR_RESTORE_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_RESTORE_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_RESTORE_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_THRESHOLD_EXCEED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_THRESHOLD_EXCEED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_THRESHOLD_EXCEED_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FFDC_TX_NUM_LANES, &FFDC_RX_NUM_LANES, &FFDC_THRESHOLD}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_EREPAIR_THRESHOLD_EXCEED_FFDC_TX_NUM_LANES; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_TX_NUM_LANES); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_EREPAIR_THRESHOLD_EXCEED_FFDC_RX_NUM_LANES; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_RX_NUM_LANES); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_EREPAIR_THRESHOLD_EXCEED_FFDC_THRESHOLD; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_THRESHOLD); \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_EREPAIR_MVPD_FULL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_MVPD_FULL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_MVPD_FULL_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_MBVPD_FULL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_MBVPD_FULL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_MBVPD_FULL_ADD_ERROR_INFO(RC) 

#define RC_ACCESSOR_HWP_INVALID_MEM_VPD_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ACCESSOR_HWP_INVALID_MEM_VPD_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_ACCESSOR_HWP_INVALID_MEM_VPD_SIZE_ADD_ERROR_INFO(RC) 

#define RC_ACCESSOR_HWP_INVALID_FABRIC_VPD_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ACCESSOR_HWP_INVALID_FABRIC_VPD_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_ACCESSOR_HWP_INVALID_FABRIC_VPD_SIZE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCIE_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCIE_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCIE_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_PCIE_SCOMINIT_INVALID_TARGET_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &ATTR_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR_ATTR_DATA; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &IOP_DATA, &ATTR_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_IOP_DATA; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IOP_DATA); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_ATTR_DATA; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_PCIE_CONFIG_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCIE_CONFIG_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCIE_CONFIG_INVALID_TARGET_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_PCIE_CONFIG_INVALID_TARGET_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP, &IMAGEADDR, &XIPRC, &BRANCHTABLEADDRESS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_IMAGEADDR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMAGEADDR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_XIPRC; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(XIPRC); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_BRANCHTABLEADDRESS; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BRANCHTABLEADDRESS); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_POREBAR_LOC_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_LOC_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_LOC_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP, &MEMLOC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_LOC_ERROR_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_LOC_ERROR_MEMLOC; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MEMLOC); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_POREBAR_PBABAR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_PBABAR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_PBABAR_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP, &MEMBAR, &REGIONMASKEDADDR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_PBABAR_ERROR_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_PBABAR_ERROR_MEMBAR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MEMBAR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_PBABAR_ERROR_REGIONMASKEDADDR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REGIONMASKEDADDR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PBA_SLVRST_TIMED_OUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PBA_SLVRST_TIMED_OUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PBA_SLVRST_TIMED_OUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&POLLCOUNT, &POLLVALUE, &PSR, &SLVID, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PBA_SLVRST_TIMED_OUT_POLLCOUNT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLCOUNT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PBA_SLVRST_TIMED_OUT_POLLVALUE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLVALUE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PBA_SLVRST_TIMED_OUT_PSR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_PBA_SLVRST_TIMED_OUT_SLVID; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLVID); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP, &IMAGEADDR, &XIPRC, &IMAGESIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR_IMAGEADDR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMAGEADDR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR_XIPRC; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(XIPRC); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR_IMAGESIZE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMAGESIZE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&IMAGEADDR, &XIPRC, &BRANCHTABLEADDRESS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_IMAGEADDR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMAGEADDR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_XIPRC; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(XIPRC); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_BRANCHTABLEADDRESS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BRANCHTABLEADDRESS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_POREBAR_SIZE0_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_SIZE0_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_SIZE0_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP, &IMAGEADDR, &MEMSIZE, &MEMBAR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_SIZE0_ERROR_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_SIZE0_ERROR_IMAGEADDR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMAGEADDR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_SIZE0_ERROR_MEMSIZE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MEMSIZE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_SIZE0_ERROR_MEMBAR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MEMBAR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_POREBAR_IMAGE_PLACEMENT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_PLACEMENT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_PLACEMENT_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_POREBAR_IMAGE_ADDR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_ADDR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_ADDR_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP, &IMAGEADDR, &XIPRC, &SLWCONTROLVECTOR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR_IMAGEADDR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMAGEADDR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR_XIPRC; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(XIPRC); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR_SLWCONTROLVECTOR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLWCONTROLVECTOR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP, &IMAGEADDR, &XIPRC, &SLWDEEPWINKLEEXITHALT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR_IMAGEADDR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMAGEADDR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR_XIPRC; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(XIPRC); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR_SLWDEEPWINKLEEXITHALT; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLWDEEPWINKLEEXITHALT); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP, &IMAGEADDR, &XIPRC, &SLWDEEPSLEEPEXITHALT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR_IMAGEADDR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMAGEADDR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR_XIPRC; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(XIPRC); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR_SLWDEEPSLEEPEXITHALT; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLWDEEPSLEEPEXITHALT); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PMPROC_PFETLIB_BAD_DOMAIN_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_PFETLIB_BAD_DOMAIN_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PMPROC_PFETLIB_BAD_DOMAIN_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&EX, &DOMAIN}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PMPROC_PFETLIB_BAD_DOMAIN_EX; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PMPROC_PFETLIB_BAD_DOMAIN_DOMAIN; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DOMAIN); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PMPROC_PFETLIB_BAD_OP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_PFETLIB_BAD_OP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PMPROC_PFETLIB_BAD_OP_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&EX, &DOMAIN, &OPERATION}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PMPROC_PFETLIB_BAD_OP_EX; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PMPROC_PFETLIB_BAD_OP_DOMAIN; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DOMAIN); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PMPROC_PFETLIB_BAD_OP_OPERATION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OPERATION); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PMPROC_PFETLIB_RAIL_ON_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_PFETLIB_RAIL_ON_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PMPROC_PFETLIB_RAIL_ON_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&EX, &DOMAIN, &OPERATION}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PMPROC_PFETLIB_RAIL_ON_EX; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PMPROC_PFETLIB_RAIL_ON_DOMAIN; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DOMAIN); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PMPROC_PFETLIB_RAIL_ON_OPERATION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OPERATION); \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PMPROC_PFETLIB_RAIL_OFF_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_PFETLIB_RAIL_OFF_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PMPROC_PFETLIB_RAIL_OFF_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&EX, &DOMAIN, &OPERATION}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PMPROC_PFETLIB_RAIL_OFF_EX; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PMPROC_PFETLIB_RAIL_OFF_DOMAIN; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DOMAIN); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PMPROC_PFETLIB_RAIL_OFF_OPERATION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OPERATION); \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PFETLIB_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PFETLIB_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PFETLIB_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&PROC_CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&ADDRESS, &PFETCONTROLVALUE, &DOMAIN, &PROC_CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PFETLIB_TIMEOUT_ADDRESS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PFETLIB_TIMEOUT_PFETCONTROLVALUE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PFETCONTROLVALUE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PFETLIB_TIMEOUT_DOMAIN; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DOMAIN); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[3].children_cdg.iv_parentObjIndex = 3; \
  l_entries[3].children_cdg.iv_callout = 1; \
  l_entries[3].children_cdg.iv_deconfigure = 1; \
  l_entries[3].children_cdg.iv_childType = fapi::TARGET_TYPE_EX_CHIPLET; \
  l_entries[3].children_cdg.iv_childPort = 255; \
  l_entries[3].children_cdg.iv_childNumber = EX_NUMBER_IN_ERROR; \
  l_entries[3].children_cdg.iv_gard = 1; \
  l_entries[3].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PORESLW_CODE_BAD_TBA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PORESLW_CODE_BAD_TBA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PORESLW_CODE_BAD_TBA_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_SLW_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SLW_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_FIR_REGISTERS, RC); 
#define RC_PROCPM_SLW_RESET_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&POLLCOUNT, &MAXPOLLS, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_SLW_RESET_TIMEOUT_POLLCOUNT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLCOUNT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_SLW_RESET_TIMEOUT_MAXPOLLS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAXPOLLS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 0; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PORESLW_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PORESLW_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PORESLW_CODE_BAD_MODE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&IMODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PORESLW_CODE_BAD_MODE_IMODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&ISTEP_NUM, &SUBSTEP_NUM, &CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_ISTEP_NUM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ISTEP_NUM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_SUBSTEP_NUM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SUBSTEP_NUM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 0; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&SBE_RUNNING, &HALT_CODE, &ISTEP_NUM, &SUBSTEP_NUM, &CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE_SBE_RUNNING; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_RUNNING); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE_HALT_CODE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(HALT_CODE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE_ISTEP_NUM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ISTEP_NUM); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE_SUBSTEP_NUM; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SUBSTEP_NUM); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 0; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_EXTRACT_SBE_RC_UNRECOVERABLE_ECC_SEEPROM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_UNRECOVERABLE_ECC_SEEPROM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_UNRECOVERABLE_ECC_SEEPROM_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_EXTRACT_SBE_RC_UNRECOVERABLE_ECC_PNOR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_UNRECOVERABLE_ECC_PNOR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_UNRECOVERABLE_ECC_PNOR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_EXTRACT_SBE_RC_INTERNAL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_INTERNAL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_INTERNAL_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&GROUP_PARITY_ERROR_0_4, &SCAN_DATA_CRC_ERROR, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_INTERNAL_ERROR_GROUP_PARITY_ERROR_0_4; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP_PARITY_ERROR_0_4); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_INTERNAL_ERROR_SCAN_DATA_CRC_ERROR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SCAN_DATA_CRC_ERROR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_EXTRACT_SBE_RC_I2C_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_I2C_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_I2C_ERROR_REGS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_I2C_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&I2C_BAD_STATUS_0_3, &FI2C_HANG, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_I2C_ERROR_I2C_BAD_STATUS_0_3; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(I2C_BAD_STATUS_0_3); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_I2C_ERROR_FI2C_HANG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FI2C_HANG); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_EXTRACT_SBE_RC_ENGINE_RETRY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_ENGINE_RETRY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_ENGINE_RETRY_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&SCOM_ADDRESS, &PIB_ERROR_CODE, &PIB_DATA_READ_PARITY_ERROR, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_ENGINE_RETRY_SCOM_ADDRESS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SCOM_ADDRESS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_ENGINE_RETRY_PIB_ERROR_CODE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIB_ERROR_CODE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_ENGINE_RETRY_PIB_DATA_READ_PARITY_ERROR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIB_DATA_READ_PARITY_ERROR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_EXTRACT_SBE_RC_PCI_CLOCK_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_PCI_CLOCK_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_PCI_CLOCK_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&SCOM_ADDRESS, &PIB_ERROR_CODE, &PIB_DATA_READ_PARITY_ERROR, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_PCI_CLOCK_ERROR_SCOM_ADDRESS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SCOM_ADDRESS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_PCI_CLOCK_ERROR_PIB_ERROR_CODE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIB_ERROR_CODE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_PCI_CLOCK_ERROR_PIB_DATA_READ_PARITY_ERROR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIB_DATA_READ_PARITY_ERROR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[3].hw_callout.iv_hw = fapi::HwCallouts::PCI_REF_CLOCK; \
  l_entries[3].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[3].hw_callout.iv_refObjIndex = 3; \
  l_entries[3].hw_callout.iv_objPosIndex = 0xff; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&SCOM_ADDRESS, &PIB_ERROR_CODE, &PIB_DATA_READ_PARITY_ERROR, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_SCOM_ADDRESS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SCOM_ADDRESS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_PIB_ERROR_CODE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIB_ERROR_CODE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_PIB_DATA_READ_PARITY_ERROR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIB_DATA_READ_PARITY_ERROR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_EXTRACT_SBE_RC_OCI_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_OCI_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_OCI_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&OCI_ERROR_CODE, &OCI_DATA_READ_PARITY_ERROR, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_OCI_ERROR_OCI_ERROR_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OCI_ERROR_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_OCI_ERROR_OCI_DATA_READ_PARITY_ERROR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OCI_DATA_READ_PARITY_ERROR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_EXTRACT_SBE_RC_IMAGE_POINTER_NULL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_IMAGE_POINTER_NULL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_IMAGE_POINTER_NULL_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_UNKNOWN_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 0; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_EXTRACT_SBE_RC_FROM_ADDR_CODE_BUG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_FROM_ADDR_CODE_BUG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_FROM_ADDR_CODE_BUG_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&INSTRUCTION_PARITY_ERROR, &INVALID_INSTRUCTION_NON_ROTATE, &PC_OVERFLOW_UNDERFLOW, &PC_STACK_ERROR, &INSTRUCTION_FETCH_ERROR, &INVALID_OPERAND, &I2C_ENGINE_MISS, &INVALID_START_VECTOR, &INVALID_INSTRUCTION_ROTATE, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[10]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_INSTRUCTION_PARITY_ERROR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INSTRUCTION_PARITY_ERROR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_INVALID_INSTRUCTION_NON_ROTATE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_INSTRUCTION_NON_ROTATE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_PC_OVERFLOW_UNDERFLOW; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PC_OVERFLOW_UNDERFLOW); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_PC_STACK_ERROR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PC_STACK_ERROR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_INSTRUCTION_FETCH_ERROR; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INSTRUCTION_FETCH_ERROR); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_INVALID_OPERAND; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_OPERAND); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_I2C_ENGINE_MISS; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(I2C_ENGINE_MISS); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_INVALID_START_VECTOR; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_START_VECTOR); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_INVALID_INSTRUCTION_ROTATE; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_INSTRUCTION_ROTATE); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[9].target_cdg.iv_targetObjIndex = 9; \
  l_entries[9].target_cdg.iv_callout = 1; \
  l_entries[9].target_cdg.iv_deconfigure = 1; \
  l_entries[9].target_cdg.iv_gard = 1; \
  l_entries[9].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 10); \
}

#define RC_PROC_EXTRACT_SBE_RC_BAD_CHIP_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_BAD_CHIP_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_FIRST_OTPROM_INSTRUCTIONS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_BAD_CHIP_TYPE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_EXTRACT_SBE_RC_SEEPROM_MAGIC_NUMBER_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_SEEPROM_MAGIC_NUMBER_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_FIRST_OTPROM_INSTRUCTIONS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_SEEPROM_MAGIC_NUMBER_MISMATCH_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_EXTRACT_SBE_RC_BRANCH_TO_SEEPROM_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_BRANCH_TO_SEEPROM_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_FIRST_OTPROM_INSTRUCTIONS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_BRANCH_TO_SEEPROM_FAIL_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_EXTRACT_SBE_RC_UNEXPECTED_OTPROM_HALT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_UNEXPECTED_OTPROM_HALT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_FIRST_OTPROM_INSTRUCTIONS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_UNEXPECTED_OTPROM_HALT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_EXTRACT_SBE_RC_NEVER_STARTED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_NEVER_STARTED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_FIRST_OTPROM_INSTRUCTIONS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_NEVER_STARTED_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_EXTRACT_SBE_RC_SOFT_ECC_ERROR_SEEPROM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_SOFT_ECC_ERROR_SEEPROM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_SOFT_ECC_ERROR_SEEPROM_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_EXTRACT_SBE_RC_SOFT_ECC_ERROR_PNOR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_SOFT_ECC_ERROR_PNOR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_SOFT_ECC_ERROR_PNOR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_EXTRACT_SBE_RC_SOFT_ECC_ERROR_SEEPROM_AND_PNOR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_SOFT_ECC_ERROR_SEEPROM_AND_PNOR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_SOFT_ECC_ERROR_SEEPROM_AND_PNOR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_EXTRACT_SBE_RC_CODE_BUG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_CODE_BUG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_CODE_BUG_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 0; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_NVLD_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_NVLD_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_NVLD_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_BUS_WRITE_NVLD_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_WRITE_NVLD_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_WRITE_NVLD_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_BUS_READ_NVLD_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_READ_NVLD_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_READ_NVLD_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_PAR_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_PAR_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_PAR_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_BUS_PAR_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_PAR_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_PAR_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_LOCAL_BUS_PAR_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_LOCAL_BUS_PAR_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_LOCAL_BUS_PAR_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_INVALID_COMMAND_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_INVALID_COMMAND_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_INVALID_COMMAND_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_PARITY_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_PARITY_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_PARITY_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_BACK_END_OVERRUN_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_BACK_END_OVERRUN_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_BACK_END_OVERRUN_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_BACK_END_ACCESS_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_BACK_END_ACCESS_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_BACK_END_ACCESS_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_ARBITRATION_LOST_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_ARBITRATION_LOST_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_ARBITRATION_LOST_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_NACK_RECIEVED_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_NACK_RECIEVED_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_NACK_RECIEVED_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_NOT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_NOT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_NOT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_TIME_OUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_TIME_OUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_TIME_OUT_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_STOP_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_STOP_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_STOP_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PARITY_ERROR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PARITY_ERROR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PARITY_ERROR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_CE_COUNTER_OVERFLOW_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_CE_COUNTER_OVERFLOW_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_CE_COUNTER_OVERFLOW_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_MASTER_RESP_INFO_BITS_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_MASTER_RESP_INFO_BITS_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_MASTER_RESP_INFO_BITS_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_DATA_LGT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_DATA_LGT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_DATA_LGT_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADD_LGT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADD_LGT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADD_LGT_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADDR_BDY_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADDR_BDY_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADDR_BDY_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_ECCADDR_REG_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_ECCADDR_REG_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_ECCADDR_REG_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_EFF_PIBM_RESET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_EFF_PIBM_RESET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_EFF_PIBM_RESET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_UEC_Q_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_UEC_Q_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_UEC_Q_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_SLAVE_RESET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_SLAVE_RESET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_SLAVE_RESET_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_Q_LENGTH_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_Q_LENGTH_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_Q_LENGTH_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_ITP_TYPE_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_ITP_TYPE_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_ITP_TYPE_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_Q_OVER_UNDERFLOW_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_Q_OVER_UNDERFLOW_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_Q_OVER_UNDERFLOW_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_CHAN_NUM_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN_NUM_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN_NUM_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_CHAN_TYPE_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN_TYPE_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN_TYPE_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_CHAN3_TYPE_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN3_TYPE_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN3_TYPE_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_CONTROL_BAD_405RESET_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_405RESET_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_405RESET_PARM_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RESET_PARM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_OCC_CONTROL_BAD_405RESET_PARM_RESET_PARM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RESET_PARM); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_OCC_CONTROL_BAD_405BOOT_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_405BOOT_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_405BOOT_PARM_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&BOOT_PARM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_OCC_CONTROL_BAD_405BOOT_PARM_BOOT_PARM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BOOT_PARM); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_OCCSRAM_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCCSRAM_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCCSRAM_CODE_BAD_MODE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_OCCSRAM_CODE_BAD_MODE_MODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODE); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_OHA_CODE_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_OHA_CODE_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_OHA_CODE_PUTGETSCOM_FAILED_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ERRORS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_OHA_CODE_PUTGETSCOM_FAILED_ERRORS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERRORS); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_OHA_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_OHA_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_OHA_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROC_OHA_CODE_BITOP_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_OHA_CODE_BITOP_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_OHA_CODE_BITOP_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&PROC_CHIP); \
\
{ \
  const void * l_objects[] = {&LOOPCOUNT, &PMSR, &PCBSPM_MON1, &PCBSPM_MON2, &PMGP0, &PMGP1, &PMERR, &IVRM_CTRL, &IVRM_VAL, &PCBSMODE, &PROC_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[11]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_LOOPCOUNT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LOOPCOUNT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PMSR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMSR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PCBSPM_MON1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PCBSPM_MON1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PCBSPM_MON2; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PCBSPM_MON2); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PMGP0; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP0); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PMGP1; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP1); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PMERR; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMERR); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_IVRM_CTRL; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IVRM_CTRL); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_IVRM_VAL; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IVRM_VAL); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PCBSMODE; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PCBSMODE); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[10].target_cdg.iv_targetObjIndex = 10; \
  l_entries[10].target_cdg.iv_callout = 1; \
  l_entries[10].target_cdg.iv_deconfigure = 0; \
  l_entries[10].target_cdg.iv_gard = 0; \
  l_entries[10].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 11); \
}

#define RC_PROC_PCBS_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_CODE_BAD_MODE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_PCBS_CODE_BAD_MODE_MODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODE); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_PREP_UNSUPPORTED_MODE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_UNSUPPORTED_MODE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_UNSUPPORTED_MODE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PREP_UNSUPPORTED_MODE_ERR_MODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PREP_TARGET_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_TARGET_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_TARGET_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PRIMARY_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PREP_TARGET_ERR_PRIMARY_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PRIMARY_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_VLT_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_VLT_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(THISCHIP, fapi::REG_FFDC_PSTATE_REGISTERS, RC); fapiCollectRegFfdc(THISCHIP, fapi::REG_FFDC_SPIVID_REGISTERS, RC); fapiCollectRegFfdc(DCMCHIP, fapi::REG_FFDC_PSTATE_REGISTERS, RC); fapiCollectRegFfdc(DCMCHIP, fapi::REG_FFDC_SPIVID_REGISTERS, RC); fapiCollectRegFfdc(THISCHIP, fapi::REG_FFDC_PCBS_PSSTATE_MONITOR_REGISTERS, RC, fapi::TARGET_TYPE_NONE, fapi::TARGET_TYPE_EX_CHIPLET, 0x01000000);fapiCollectRegFfdc(DCMCHIP, fapi::REG_FFDC_PCBS_PSSTATE_MONITOR_REGISTERS, RC, fapi::TARGET_TYPE_NONE, fapi::TARGET_TYPE_EX_CHIPLET, 0x01000000);
#define RC_PROCPM_VLT_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&THISCHIP); \
\
{ \
  const void * l_objects[] = {&PSTATETARGET, &PSTATESTEPTARGET, &PSTATEACTUAL, &THISCHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_VLT_TIMEOUT_PSTATETARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATETARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_VLT_TIMEOUT_PSTATESTEPTARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATESTEPTARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_VLT_TIMEOUT_PSTATEACTUAL; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATEACTUAL); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PSTATE_MONITOR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_MONITOR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(THISCHIP, fapi::REG_FFDC_PSTATE_REGISTERS, RC); fapiCollectRegFfdc(THISCHIP, fapi::REG_FFDC_SPIVID_REGISTERS, RC); fapiCollectRegFfdc(DCMCHIP, fapi::REG_FFDC_PSTATE_REGISTERS, RC); fapiCollectRegFfdc(DCMCHIP, fapi::REG_FFDC_SPIVID_REGISTERS, RC); 
#define RC_PROCPM_PSTATE_MONITOR_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&THISCHIP); \
\
{ \
  const void * l_objects[] = {&THISCHIP, &PSTATETARGET, &PSTATESTEPTARGET, &PSTATEACTUAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_MONITOR_ERR_THISCHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(THISCHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_MONITOR_ERR_PSTATETARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATETARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_MONITOR_ERR_PSTATESTEPTARGET; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATESTEPTARGET); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_MONITOR_ERR_PSTATEACTUAL; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATEACTUAL); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 0; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_VOLTAGE_CHANGE_MODE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_VOLTAGE_CHANGE_MODE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_VOLTAGE_CHANGE_MODE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP, &PMCMODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_VOLTAGE_CHANGE_MODE_ERR_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_VOLTAGE_CHANGE_MODE_ERR_PMCMODE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMCMODE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_MST_SEQUENCER_STATE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_MST_SEQUENCER_STATE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_MST_SEQUENCER_STATE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP, &PMCMODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_MST_SEQUENCER_STATE_ERR_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_MST_SEQUENCER_STATE_ERR_PMCMODE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMCMODE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PMC_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMC_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMC_CODE_BAD_MODE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMC_CODE_BAD_MODE_MODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PMCINIT_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCINIT_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCINIT_TIMEOUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CHIP_IN_ERROR; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_PMCRESET_SPIVID_CONFIG_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCRESET_SPIVID_CONFIG_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCRESET_SPIVID_CONFIG_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MASTER_TARGET, &ATTR_SPIVID_PORT_ENABLE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_SPIVID_CONFIG_ERROR_MASTER_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_SPIVID_CONFIG_ERROR_ATTR_SPIVID_PORT_ENABLE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_SPIVID_PORT_ENABLE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MASTER_TARGET, &SLAVE_TARGET, &DCM_INSTALLED_1, &DCM_INSTALLED_2}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR_MASTER_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR_SLAVE_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR_DCM_INSTALLED_1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DCM_INSTALLED_1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR_DCM_INSTALLED_2; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DCM_INSTALLED_2); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MASTER_TARGET, &SLAVE_TARGET, &DCM_INSTALLED_1, &DCM_INSTALLED_2}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_MASTER_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_SLAVE_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_DCM_INSTALLED_1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DCM_INSTALLED_1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_DCM_INSTALLED_2; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DCM_INSTALLED_2); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_PMC_MASTER_CONFIG_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMC_MASTER_CONFIG_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMC_MASTER_CONFIG_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MASTERPMCMODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMC_MASTER_CONFIG_ERROR_MASTERPMCMODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTERPMCMODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PMC_SLAVE_CONFIG_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMC_SLAVE_CONFIG_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMC_SLAVE_CONFIG_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&SLAVEPMCMODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMC_SLAVE_CONFIG_ERROR_SLAVEPMCMODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVEPMCMODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PMC_INTERCHIP_CONFIG_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMC_INTERCHIP_CONFIG_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMC_INTERCHIP_CONFIG_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MASTERPMCMODE, &SLAVEPMCMODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMC_INTERCHIP_CONFIG_ERROR_MASTERPMCMODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTERPMCMODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMC_INTERCHIP_CONFIG_ERROR_SLAVEPMCMODE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVEPMCMODE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PMC_FW_MODE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMC_FW_MODE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMC_FW_MODE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MASTERPMCMODE, &SLAVEPMCMODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMC_FW_MODE_ERROR_MASTERPMCMODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTERPMCMODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMC_FW_MODE_ERROR_SLAVEPMCMODE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVEPMCMODE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PMCRESET_IDLE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCRESET_IDLE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCRESET_IDLE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &PORR, &PMCSTATUS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_IDLE_ERROR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_IDLE_ERROR_PORR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_IDLE_ERROR_PMCSTATUS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMCSTATUS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PMCRESET_IDLE_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCRESET_IDLE_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCRESET_IDLE_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &PORR, &PMCSTATUS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_IDLE_TIMEOUT_ERROR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_IDLE_TIMEOUT_ERROR_PORR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_IDLE_TIMEOUT_ERROR_PMCSTATUS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMCSTATUS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PMCRESET_SPIVID_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCRESET_SPIVID_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_SPIVID_REGISTERS, RC); 
#define RC_PROCPM_PMCRESET_SPIVID_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PMCRESET_INTCHP_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCRESET_INTCHP_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(THISTARGET, fapi::REG_FFDC_PSTATE_REGISTERS, RC); fapiCollectRegFfdc(THISTARGET, fapi::REG_FFDC_SPIVID_REGISTERS, RC); fapiCollectRegFfdc(DCMTARGET, fapi::REG_FFDC_PSTATE_REGISTERS, RC); fapiCollectRegFfdc(DCMTARGET, fapi::REG_FFDC_SPIVID_REGISTERS, RC); 
#define RC_PROCPM_PMCRESET_INTCHP_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PMCRESET_O2P_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCRESET_O2P_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCRESET_O2P_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &O2PSTATUS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_O2P_TIMEOUT_ERROR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCRESET_O2P_TIMEOUT_ERROR_O2PSTATUS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(O2PSTATUS); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MASTER_TARGET, &SLAVE_TARGET, &DCM_INSTALLED_1, &DCM_INSTALLED_2}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR_MASTER_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR_SLAVE_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR_DCM_INSTALLED_1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DCM_INSTALLED_1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR_DCM_INSTALLED_2; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DCM_INSTALLED_2); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MASTER_TARGET, &SLAVE_TARGET, &DCM_INSTALLED_1, &DCM_INSTALLED_2}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR_MASTER_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR_SLAVE_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR_DCM_INSTALLED_1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DCM_INSTALLED_1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR_DCM_INSTALLED_2; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DCM_INSTALLED_2); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_PSS_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSS_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSS_CODE_BAD_MODE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&IMODE, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSS_CODE_BAD_MODE_IMODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSS_CODE_BAD_MODE_CHIP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PSS_ADC_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSS_ADC_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PSS_REGISTERS, RC); 
#define RC_PROCPM_PSS_ADC_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_PSS_P2S_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSS_P2S_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PSS_REGISTERS, RC); 
#define RC_PROCPM_PSS_P2S_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_SPCWKUP_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(EX_IN_ERROR, fapi::REG_FFDC_PROC_SLW_PCBS_REGISTERS, RC); fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_FIR_REGISTERS, RC); fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_PMC_REGISTERS, RC); fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_PBA_REGISTERS, RC); 
#define RC_PROCPM_SPCWKUP_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&I_OPERATION, &EX, &ENTITY, &POLLCOUNT, &PMGP0, &SP_WKUP_REG_ADDRESS, &SP_WKUP_REG_VALUE, &HISTORY_ADDRESS, &HISTORY_VALUE, &EX_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[10]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_TIMEOUT_I_OPERATION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(I_OPERATION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_TIMEOUT_EX; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_TIMEOUT_ENTITY; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENTITY); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_TIMEOUT_POLLCOUNT; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLCOUNT); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_TIMEOUT_PMGP0; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP0); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_TIMEOUT_SP_WKUP_REG_ADDRESS; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SP_WKUP_REG_ADDRESS); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_TIMEOUT_SP_WKUP_REG_VALUE; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SP_WKUP_REG_VALUE); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_TIMEOUT_HISTORY_ADDRESS; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(HISTORY_ADDRESS); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_TIMEOUT_HISTORY_VALUE; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(HISTORY_VALUE); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[9].target_cdg.iv_targetObjIndex = 9; \
  l_entries[9].target_cdg.iv_callout = 1; \
  l_entries[9].target_cdg.iv_deconfigure = 0; \
  l_entries[9].target_cdg.iv_gard = 0; \
  l_entries[9].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 10); \
}

#define RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&I_ENTITY}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY_I_ENTITY; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(I_ENTITY); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_SPCWKUP_CODE_BAD_OP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_CODE_BAD_OP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_CODE_BAD_OP_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&I_OPERATION}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_CODE_BAD_OP_I_OPERATION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(I_OPERATION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_CHKSTOP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_CHKSTOP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_CHKSTOP_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PCBSINTRTYPE, &ATTRIGNOREXSTOP, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_CHKSTOP_PCBSINTRTYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PCBSINTRTYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_CHKSTOP_ATTRIGNOREXSTOP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTRIGNOREXSTOP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_CHKSTOP_EX_TARGET; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX_TARGET); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_SPCWKUP_SLW_IN_CHKSTOP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_SLW_IN_CHKSTOP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_SLW_IN_CHKSTOP_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_SLW_IN_CHKSTOP_EX_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_SPCWKUP_NOT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_NOT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_NOT_SET_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_TARGET); \
\
{ \
  const void * l_objects[] = {&PMGP0, &ENTITY_COUNT, &I_ENTITY, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_NOT_SET_PMGP0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_NOT_SET_ENTITY_COUNT; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENTITY_COUNT); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_NOT_SET_I_ENTITY; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(I_ENTITY); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&I_OPERATION, &EX, &ENTITY, &PHYP_SPCWKUP_COUNT, &FSP_SPCWKUP_COUNT, &OCC_SPCWKUP_COUNT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_I_OPERATION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(I_OPERATION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_EX; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_ENTITY; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENTITY); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_PHYP_SPCWKUP_COUNT; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PHYP_SPCWKUP_COUNT); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_FSP_SPCWKUP_COUNT; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FSP_SPCWKUP_COUNT); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_OCC_SPCWKUP_COUNT; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OCC_SPCWKUP_COUNT); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[6].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[6].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROCPM_SPCWKUP_INVALID_PMHISTORY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_INVALID_PMHISTORY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_INVALID_PMHISTORY_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&PMHIST, &EX_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_SPCWKUP_INVALID_PMHISTORY_PMHIST; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMHIST); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 0; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_GPE_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_GPE_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_GPE_REGISTERS, RC); 
#define RC_PROCPM_GPE_RESET_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&POLLCOUNT, &MAXPOLLS, &IENGINE, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_GPE_RESET_TIMEOUT_POLLCOUNT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLCOUNT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_GPE_RESET_TIMEOUT_MAXPOLLS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAXPOLLS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_GPE_RESET_TIMEOUT_IENGINE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IENGINE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_GPE_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_GPE_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_GPE_CODE_BAD_MODE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&IMODE, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_GPE_CODE_BAD_MODE_IMODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_GPE_CODE_BAD_MODE_CHIP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_GPE_BAD_ENGINE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_GPE_BAD_ENGINE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_GPE_BAD_ENGINE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&IENGINE, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_GPE_BAD_ENGINE_IENGINE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IENGINE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_GPE_BAD_ENGINE_CHIP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PMPROC_PBA_INIT_INCORRECT_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_PBA_INIT_INCORRECT_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PMPROC_PBA_INIT_INCORRECT_MODE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PM_MODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PMPROC_PBA_INIT_INCORRECT_MODE_PM_MODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PM_MODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PMPROC_PBA_SLAVE_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_PBA_SLAVE_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PBA_REGISTERS, RC); 
#define RC_PMPROC_PBA_SLAVE_RESET_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&POLLCOUNT, &SLAVENUM, &PBASLVREG, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PMPROC_PBA_SLAVE_RESET_TIMEOUT_POLLCOUNT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLCOUNT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PMPROC_PBA_SLAVE_RESET_TIMEOUT_SLAVENUM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVENUM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PMPROC_PBA_SLAVE_RESET_TIMEOUT_PBASLVREG; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PBASLVREG); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PBA_REGISTERS, RC); 
#define RC_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&POLLCOUNT, &SLAVENUM, &PBASLVREG, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET_POLLCOUNT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLCOUNT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET_SLAVENUM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVENUM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET_PBASLVREG; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PBASLVREG); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PBA_BCDE_STOP_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PBA_BCDE_STOP_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PBA_REGISTERS, RC); 
#define RC_PROCPM_PBA_BCDE_STOP_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&POLLCOUNT, &POLLVALUE, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PBA_BCDE_STOP_TIMEOUT_POLLCOUNT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLCOUNT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PBA_BCDE_STOP_TIMEOUT_POLLVALUE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLVALUE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 0; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PBA_BCUE_STOP_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PBA_BCUE_STOP_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PBA_REGISTERS, RC); 
#define RC_PROCPM_PBA_BCUE_STOP_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&POLLCOUNT, &POLLVALUE, &CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PBA_BCUE_STOP_TIMEOUT_POLLCOUNT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLCOUNT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PBA_BCUE_STOP_TIMEOUT_POLLVALUE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLVALUE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 0; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_OCB_ACCESS_PUT_SCOM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_PUT_SCOM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_PUT_SCOM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_GET_SCOM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_GET_SCOM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_GET_SCOM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_LENGTH_CHECK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_LENGTH_CHECK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_LENGTH_CHECK_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_CHANNEL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_CHANNEL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_CHANNEL_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_OP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_OP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_OP_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_PUT_DATA_LENGTH_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_PUT_DATA_LENGTH_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_PUT_DATA_LENGTH_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_GET_BUFFER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_GET_BUFFER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_GET_BUFFER_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_PUT_DATA_POLL_NOT_FULL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_PUT_DATA_POLL_NOT_FULL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_PUT_DATA_POLL_NOT_FULL_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MPIPL_MCD_RECOVERY_NOT_DISABLED_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MPIPL_MCD_RECOVERY_NOT_DISABLED_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MPIPL_MCD_RECOVERY_NOT_DISABLED_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP_TARGET, &MCD_RECOV_CTRL_REG_ADDR, &MCD_RECOV_CTRL_REG_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MPIPL_MCD_RECOVERY_NOT_DISABLED_RC_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MPIPL_MCD_RECOVERY_NOT_DISABLED_RC_MCD_RECOV_CTRL_REG_ADDR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCD_RECOV_CTRL_REG_ADDR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MPIPL_MCD_RECOVERY_NOT_DISABLED_RC_MCD_RECOV_CTRL_REG_DATA; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCD_RECOV_CTRL_REG_DATA); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PFET_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PFET_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PFET_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PFET_GET_ATTR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PFET_GET_ATTR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PFET_GET_ATTR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_NO_PIB_MODEL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_NO_PIB_MODEL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_NO_PIB_MODEL_ADD_ERROR_INFO(RC) 

#define RC_POREVE_NO_OCI_MODEL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_NO_OCI_MODEL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_NO_OCI_MODEL_ADD_ERROR_INFO(RC) 

#define RC_POREVE_PORE_OPERATION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_PORE_OPERATION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_PORE_OPERATION_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_PORE_NOT_MAPPED_ON_BUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_PORE_NOT_MAPPED_ON_BUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_PORE_NOT_MAPPED_ON_BUS_ADD_ERROR_INFO(RC) 

#define RC_POREVE_BUS_SLAVE_PERMISSION_DENIED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_BUS_SLAVE_PERMISSION_DENIED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_BUS_SLAVE_PERMISSION_DENIED_ADD_ERROR_INFO(RC) 

#define RC_POREVE_HOOKMANAGER_INCONSISTENCY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_HOOKMANAGER_INCONSISTENCY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_HOOKMANAGER_INCONSISTENCY_ADD_ERROR_INFO(RC) 

#define RC_POREVE_PIB2CFAM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_PIB2CFAM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_PIB2CFAM_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_FASTI2C_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_FASTI2C_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_FASTI2C_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_LPC_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_LPC_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_LPC_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_PIBMEM_CONTROL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_PIBMEM_CONTROL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_PIBMEM_CONTROL_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_PIB_MEMORY_ACCESS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_PIB_MEMORY_ACCESS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_PIB_MEMORY_ACCESS_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_OCI_MEMORY_ACCESS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_OCI_MEMORY_ACCESS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_OCI_MEMORY_ACCESS_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_OCI_SLAVE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_OCI_SLAVE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_OCI_SLAVE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROC_FAB_IOVALID_X_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_IOVALID_X_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_IOVALID_X_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_IOVALID_X_PARTIAL_GOOD_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_FAB_IOVALID_A_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_IOVALID_A_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_IOVALID_A_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_FAB_IOVALID_A_PARTIAL_GOOD_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_ABUS_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ABUS_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ABUS_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&THIS_ABUS_TARGET, &CONNECTED_ABUS_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_ABUS_SCOMINIT_INVALID_TARGET_THIS_ABUS_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(THIS_ABUS_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_ABUS_SCOMINIT_INVALID_TARGET_CONNECTED_ABUS_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CONNECTED_ABUS_TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_ABUS_SCOMINIT_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ABUS_SCOMINIT_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ABUS_SCOMINIT_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_ABUS_SCOMINIT_PARTIAL_GOOD_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_XBUS_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XBUS_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XBUS_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&THIS_XBUS_TARGET, &CONNECTED_XBUS_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XBUS_SCOMINIT_INVALID_TARGET_THIS_XBUS_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(THIS_XBUS_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_XBUS_SCOMINIT_INVALID_TARGET_CONNECTED_XBUS_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CONNECTED_XBUS_TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_XBUS_SCOMINIT_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XBUS_SCOMINIT_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XBUS_SCOMINIT_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_XBUS_SCOMINIT_PARTIAL_GOOD_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_DMI_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_DMI_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_DMI_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MCS_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_DMI_SCOMINIT_INVALID_TARGET_MCS_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCS_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_CEN_DMI_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_DMI_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_DMI_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CEN_DMI_SCOMINIT_INVALID_TARGET_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_CEN_XIPC_UNSPECIFIED_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_XIPC_UNSPECIFIED_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_XIPC_UNSPECIFIED_IMAGE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CEN_XIPC_UNSPECIFIED_IMAGE_ERR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_ATTRIBUTE_RING_SIZE, &DATA_MAX_PLL_RING_SIZE, &DATA_SIZE_OF_BUF1}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_ATTRIBUTE_RING_SIZE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_ATTRIBUTE_RING_SIZE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_MAX_PLL_RING_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_MAX_PLL_RING_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_SIZE_OF_BUF1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_OF_BUF1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_CEN_XIPC_IMGBUILD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_XIPC_IMGBUILD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_XIPC_IMGBUILD_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CEN_XIPC_IMGBUILD_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_RING_BLOCK_SIZEOFTHIS, &DATA_SIZE_OF_BUF1}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_RING_BLOCK_SIZEOFTHIS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_SIZEOFTHIS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_SIZE_OF_BUF1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_OF_BUF1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_RING_BLOCK_ENTRYOFFSET, &DATA_RING_BLOCK_SIZEOFTHIS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_ENTRYOFFSET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_ENTRYOFFSET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_SIZEOFTHIS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_SIZEOFTHIS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_CEN_XIPC_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_XIPC_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_XIPC_KEYWORD_NOT_FOUND_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RC_LOCAL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CEN_XIPC_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_TOD_SETUP_INVALID_TOPOLOGY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_SETUP_INVALID_TOPOLOGY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_SETUP_INVALID_TOPOLOGY_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_TOD_SETUP_INVALID_NODE_DELAY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_SETUP_INVALID_NODE_DELAY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_SETUP_INVALID_NODE_DELAY_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_TOD_INIT_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_INIT_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_INIT_NOT_RUNNING_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_TOD_INIT_NOT_RUNNING_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 0; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_TOD_INIT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_INIT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_INIT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&CHIP_TARGET, &TOD_ERROR_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_TOD_INIT_ERROR_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_TOD_INIT_ERROR_TOD_ERROR_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TOD_ERROR_REG); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 0; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP_TARGET, &TOD_ERROR_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR_TOD_ERROR_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TOD_ERROR_REG); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP_TARGET, &TOD_ERROR_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR_TOD_ERROR_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TOD_ERROR_REG); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_TOD_NULL_NODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_NULL_NODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_NULL_NODE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_OPT_MEMMAP_MEM_BASE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OPT_MEMMAP_MEM_BASE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OPT_MEMMAP_MEM_BASE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ADDR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_OPT_MEMMAP_MEM_BASE_ERR_ADDR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_OPT_MEMMAP_MIRROR_BASE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OPT_MEMMAP_MIRROR_BASE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OPT_MEMMAP_MIRROR_BASE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ADDR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_OPT_MEMMAP_MIRROR_BASE_ERR_ADDR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_OPT_MEMMAP_GROUP_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OPT_MEMMAP_GROUP_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OPT_MEMMAP_GROUP_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&GROUP_ID, &MATCH_COUNT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_OPT_MEMMAP_GROUP_ERR_GROUP_ID; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP_ID); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_OPT_MEMMAP_GROUP_ERR_MATCH_COUNT; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MATCH_COUNT); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_NO_CORES_PRESENT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_NO_CORES_PRESENT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_NO_CORES_PRESENT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&PRESENT_CHIPLETS, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_NO_CORES_PRESENT_ERROR_PRESENT_CHIPLETS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PRESENT_CHIPLETS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PDV_BUFFER_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PDV_BUFFER_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PDV_BUFFER_SIZE_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&BUFFER_SIZE, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PDV_BUFFER_SIZE_ERROR_BUFFER_SIZE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BUFFER_SIZE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PDM_BUFFER_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PDM_BUFFER_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PDM_BUFFER_SIZE_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&BUFFER_SIZE, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PDM_BUFFER_SIZE_ERROR_BUFFER_SIZE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BUFFER_SIZE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&ATTR_MVPD_DATA_0, &ATTR_MVPD_DATA_1, &ATTR_MVPD_DATA_2, &ATTR_MVPD_DATA_3, &ATTR_MVPD_DATA_4, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL_ATTR_MVPD_DATA_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_MVPD_DATA_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL_ATTR_MVPD_DATA_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_MVPD_DATA_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL_ATTR_MVPD_DATA_2; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_MVPD_DATA_2); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL_ATTR_MVPD_DATA_3; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_MVPD_DATA_3); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL_ATTR_MVPD_DATA_4; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_MVPD_DATA_4); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 5; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 1; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_ATTR_DPLL_DIV_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_ATTR_DPLL_DIV_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_ATTR_DPLL_DIV_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_FREQ_BIAS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_FREQ_BIAS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_FREQ_BIAS_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_EXT_VDD_VOLTAGE_BIAS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_EXT_VDD_VOLTAGE_BIAS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_EXT_VDD_VOLTAGE_BIAS_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_EXT_VCS_VOLTAGE_BIAS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_EXT_VCS_VOLTAGE_BIAS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_EXT_VCS_VOLTAGE_BIAS_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_INT_VDD_VOLTAGE_BIAS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_INT_VDD_VOLTAGE_BIAS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_INT_VDD_VOLTAGE_BIAS_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_INT_VCS_VOLTAGE_BIAS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_INT_VCS_VOLTAGE_BIAS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_INT_VCS_VOLTAGE_BIAS_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_OBJECT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_OBJECT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_OBJECT_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHAR_RETURN_CODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_OBJECT_ERROR_CHAR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHAR_RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define  RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ARGUMENT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define  RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ARGUMENT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define  RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ARGUMENT_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHAR_RETURN_CODE, &POINTS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi:: RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ARGUMENT_ERROR_CHAR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHAR_RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi:: RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ARGUMENT_ERROR_POINTS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POINTS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define  RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define  RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define  RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHAR_RETURN_CODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi:: RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ERROR_CHAR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHAR_RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_OBJECT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_OBJECT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_OBJECT_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&GPST_RETURN_CODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_OBJECT_ERROR_GPST_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GPST_RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ARGUMENT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ARGUMENT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ARGUMENT_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&GPST_RETURN_CODE, &OPS_PMIN, &OPS_PMAX}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ARGUMENT_ERROR_GPST_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GPST_RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ARGUMENT_ERROR_OPS_PMIN; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OPS_PMIN); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ARGUMENT_ERROR_OPS_PMAX; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OPS_PMAX); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ENTRY_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ENTRY_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ENTRY_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&GPST_RETURN_CODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ENTRY_ERROR_GPST_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GPST_RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&GPST_RETURN_CODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ERROR_GPST_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GPST_RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_OBJECT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_OBJECT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_OBJECT_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&LPST_RETURN_CODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_OBJECT_ERROR_LPST_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LPST_RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_IVID_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_IVID_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_IVID_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&LPST_RETURN_CODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_IVID_ERROR_LPST_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LPST_RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_VID_INCR_CLIP_INREG_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_VID_INCR_CLIP_INREG_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_VID_INCR_CLIP_INREG_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&LPST_RETURN_CODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_VID_INCR_CLIP_INREG_ERROR_LPST_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LPST_RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&LPST_RETURN_CODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_ERROR_LPST_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LPST_RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PM_RES_CLOCK_LOW_BAND_LOWER_FREQ, &PM_RES_CLOCK_LOW_BAND_UPPER_FREQ, &PM_RES_CLOCK_HIGH_BAND_LOWER_FREQ, &PM_RES_CLOCK_HIGH_BAND_UPPER_FREQ}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR_PM_RES_CLOCK_LOW_BAND_LOWER_FREQ; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PM_RES_CLOCK_LOW_BAND_LOWER_FREQ); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR_PM_RES_CLOCK_LOW_BAND_UPPER_FREQ; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PM_RES_CLOCK_LOW_BAND_UPPER_FREQ); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR_PM_RES_CLOCK_HIGH_BAND_LOWER_FREQ; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PM_RES_CLOCK_HIGH_BAND_LOWER_FREQ); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR_PM_RES_CLOCK_HIGH_BAND_UPPER_FREQ; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PM_RES_CLOCK_HIGH_BAND_UPPER_FREQ); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&OP_POINT, &CHIPLET_NUM, &BUCKET_ID, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_ERROR_OP_POINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OP_POINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_ERROR_CHIPLET_NUM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_NUM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_ERROR_BUCKET_ID; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BUCKET_ID); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PDV_OPPOINT_ORDER_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PDV_OPPOINT_ORDER_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PDV_OPPOINT_ORDER_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&OP_POINT, &CHIPLET_NUM, &BUCKET_ID, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PDV_OPPOINT_ORDER_ERROR_OP_POINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OP_POINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PDV_OPPOINT_ORDER_ERROR_CHIPLET_NUM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_NUM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PDV_OPPOINT_ORDER_ERROR_BUCKET_ID; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BUCKET_ID); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PSTATE_MINMAX_BOUNDS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PSTATE_MINMAX_BOUNDS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PSTATE_MINMAX_BOUNDS_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RETURN_CODE, &PSTATE, &FREQ_KHZ}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSTATE_MINMAX_BOUNDS_ERROR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSTATE_MINMAX_BOUNDS_ERROR_PSTATE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSTATE_MINMAX_BOUNDS_ERROR_FREQ_KHZ; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_KHZ); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_PSTATE_MINMAX_BOUNDS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_PSTATE_MINMAX_BOUNDS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_PSTATE_MINMAX_BOUNDS_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RETURN_CODE, &PSTATE, &FREQ_KHZ}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_PSTATE_MINMAX_BOUNDS_ERROR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_PSTATE_MINMAX_BOUNDS_ERROR_PSTATE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_PSTATE_MINMAX_BOUNDS_ERROR_FREQ_KHZ; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_KHZ); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PSTATE_GT_GPSTPMAX_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PSTATE_GT_GPSTPMAX_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PSTATE_GT_GPSTPMAX_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RETURN_CODE, &PSTATE, &FREQ_KHZ}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSTATE_GT_GPSTPMAX_ERROR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSTATE_GT_GPSTPMAX_ERROR_PSTATE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSTATE_GT_GPSTPMAX_ERROR_FREQ_KHZ; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_KHZ); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RETURN_CODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_ERROR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RETURN_CODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_ERROR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PSAFE_MINMAX_BOUNDS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PSAFE_MINMAX_BOUNDS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PSAFE_MINMAX_BOUNDS_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RETURN_CODE, &PSTATE, &FREQ_KHZ}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSAFE_MINMAX_BOUNDS_ERROR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSAFE_MINMAX_BOUNDS_ERROR_PSTATE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSAFE_MINMAX_BOUNDS_ERROR_FREQ_KHZ; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_KHZ); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PSAFE_GT_GPSTPMAX_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PSAFE_GT_GPSTPMAX_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PSAFE_GT_GPSTPMAX_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RETURN_CODE, &PSTATE, &FREQ_KHZ}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSAFE_GT_GPSTPMAX_ERROR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSAFE_GT_GPSTPMAX_ERROR_PSTATE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSAFE_GT_GPSTPMAX_ERROR_FREQ_KHZ; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_KHZ); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PSAFE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PSAFE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PSAFE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RETURN_CODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSAFE_ERROR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_MINMAX_BOUNDS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_MINMAX_BOUNDS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_MINMAX_BOUNDS_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RETURN_CODE, &PSTATE, &FREQ_KHZ}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_MINMAX_BOUNDS_ERROR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_MINMAX_BOUNDS_ERROR_PSTATE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_MINMAX_BOUNDS_ERROR_FREQ_KHZ; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_KHZ); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_GT_GPSTPMAX_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_GT_GPSTPMAX_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_GT_GPSTPMAX_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RETURN_CODE, &PSTATE, &FREQ_KHZ}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_GT_GPSTPMAX_ERROR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_GT_GPSTPMAX_ERROR_PSTATE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_GT_GPSTPMAX_ERROR_FREQ_KHZ; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_KHZ); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&RETURN_CODE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_ERROR_RETURN_CODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURN_CODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PSTATEDIFF, &BOOSTEDFREQKHZ, &PSTATE0FREQKHZ, &FREQSTEPKHZ, &ATTRBOOSTPERCENT, &BOOSTEDPCT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_PSTATEDIFF; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATEDIFF); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_BOOSTEDFREQKHZ; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BOOSTEDFREQKHZ); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_PSTATE0FREQKHZ; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PSTATE0FREQKHZ); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_FREQSTEPKHZ; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQSTEPKHZ); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_ATTRBOOSTPERCENT; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTRBOOSTPERCENT); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_BOOSTEDPCT; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BOOSTEDPCT); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[6].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[6].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_INVALID_BOOST_PERCENTAGE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_INVALID_BOOST_PERCENTAGE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_INVALID_BOOST_PERCENTAGE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MAXBOOSTPERCENT, &ATTRBOOSTPERCENT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_INVALID_BOOST_PERCENTAGE_ERROR_MAXBOOSTPERCENT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAXBOOSTPERCENT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_INVALID_BOOST_PERCENTAGE_ERROR_ATTRBOOSTPERCENT; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTRBOOSTPERCENT); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_IQ_BUFFER_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_IQ_BUFFER_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_IQ_BUFFER_SIZE_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&BUFFER_SIZE, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_IQ_BUFFER_SIZE_ERROR_BUFFER_SIZE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BUFFER_SIZE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_IQ_MVPD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_IQ_MVPD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_IQ_MVPD_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&CHIPLET_NUMBER, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_IQ_MVPD_ERROR_CHIPLET_NUMBER; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_NUMBER); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VDD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VDD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VDD_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&RAW_VALUE, &LRP_NUMBER, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VDD_ERROR_RAW_VALUE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RAW_VALUE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VDD_ERROR_LRP_NUMBER; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LRP_NUMBER); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VCS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VCS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VCS_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&RAW_VALUE, &LRP_NUMBER, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VCS_ERROR_RAW_VALUE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RAW_VALUE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VCS_ERROR_LRP_NUMBER; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LRP_NUMBER); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VIO_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VIO_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VIO_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&RAW_VALUE, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VIO_ERROR_RAW_VALUE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RAW_VALUE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_UT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_UT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_UT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&OP_POINT, &CHIPLET_NUM, &BUCKET_ID, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_UT_ERROR_OP_POINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OP_POINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_UT_ERROR_CHIPLET_NUM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_NUM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_UT_ERROR_BUCKET_ID; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BUCKET_ID); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FREQ_PSTATE, &PMAX, &PMIN, &ENTRIES}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR_FREQ_PSTATE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_PSTATE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR_PMAX; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMAX); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR_PMIN; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMIN); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR_ENTRIES; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENTRIES); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROCPM_GET_VOLTAGE_FREQ2PSTATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_GET_VOLTAGE_FREQ2PSTATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_GET_VOLTAGE_FREQ2PSTATE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&FREQ_MHZ, &FREQ2PSTATE_RC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_GET_VOLTAGE_FREQ2PSTATE_ERROR_FREQ_MHZ; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_MHZ); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_GET_VOLTAGE_FREQ2PSTATE_ERROR_FREQ2PSTATE_RC; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ2PSTATE_RC); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); \
\
{ \
  const void * l_objects[] = {&MBMCC, &MBMSR, &CMD_TYPE, &MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_MBMCC; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCC); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_MBMSR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMSR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_CMD_TYPE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_MAINT_START_NOT_RESET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_START_NOT_RESET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_START_NOT_RESET_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); \
\
{ \
  const void * l_objects[] = {&MBMCC, &CMD_TYPE, &MBMCT, &MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_START_NOT_RESET_MBMCC; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCC); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_START_NOT_RESET_CMD_TYPE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_START_NOT_RESET_MBMCT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_MAINT_STOP_NOT_RESET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_STOP_NOT_RESET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_STOP_NOT_RESET_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); \
\
{ \
  const void * l_objects[] = {&MBMCC, &CMD_TYPE, &MBMCT, &MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_STOP_NOT_RESET_MBMCC; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCC); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_STOP_NOT_RESET_CMD_TYPE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_STOP_NOT_RESET_MBMCT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_MAINT_CMD_IN_PROGRESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_CMD_IN_PROGRESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_CMD_IN_PROGRESS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); \
\
{ \
  const void * l_objects[] = {&MBMSR, &CMD_TYPE, &MBMCT, &MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_CMD_IN_PROGRESS_MBMSR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMSR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_CMD_IN_PROGRESS_CMD_TYPE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_CMD_IN_PROGRESS_MBMCT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_MAINT_NO_MEM_CNFG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_NO_MEM_CNFG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_NO_MEM_CNFG_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &MBAXCR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_NO_MEM_CNFG_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_NO_MEM_CNFG_MBAXCR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBAXCR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &CCS_MODE, &CMD_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CCS_MODE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CCS_MODE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CMD_TYPE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_MAINT_ECC_DISABLED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_ECC_DISABLED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_ECC_DISABLED_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &MBSECC, &CMD_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_ECC_DISABLED_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_ECC_DISABLED_MBSECC; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBSECC); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_ECC_DISABLED_CMD_TYPE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_MAINT_INVALID_CMD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_CMD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_CMD_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &MBAFIR, &CMD_TYPE, &MBMCT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_CMD_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_CMD_MBAFIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBAFIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_CMD_CMD_TYPE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_CMD_MBMCT; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCT); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_MAINT_INVALID_ADDR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_ADDR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(MBA, fapi::REG_FFDC_INVALID_ADDR, RC); 
#define RC_MSS_MAINT_INVALID_ADDR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &MBAFIR, &CMD_TYPE, &MBMCT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_ADDR_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_ADDR_MBAFIR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBAFIR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_ADDR_CMD_TYPE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_ADDR_MBMCT; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCT); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_MAINT_CMD_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_CMD_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(MBA, fapi::REG_FFDC_CMD_TIMEOUT_MBA_REGS, RC); fapiCollectRegFfdc(CENTAUR, fapi::REG_FFDC_CMD_TIMEOUT_MBS_REGS, RC); 
#define RC_MSS_MAINT_CMD_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); \
\
{ \
  const void * l_objects[] = {&CMD_TYPE, &MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_CMD_TIMEOUT_CMD_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_MAINT_ZERO_DDR_FREQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_ZERO_DDR_FREQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_ZERO_DDR_FREQ_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &CMD_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_ZERO_DDR_FREQ_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_ZERO_DDR_FREQ_CMD_TYPE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &MBAXCR, &DRAM_WIDTH, &DRAM_GEN}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_MBAXCR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBAXCR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_DRAM_WIDTH; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_DRAM_GEN; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_GEN); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_MAINT_INVALID_DIMM_CNFG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_DIMM_CNFG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_DIMM_CNFG_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &MBAXCR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_DIMM_CNFG_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_DIMM_CNFG_MBAXCR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBAXCR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &RANK}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_RANK; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &RANK}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_RANK; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_MAINT_X4_SYMBOL_ON_READ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_X4_SYMBOL_ON_READ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_X4_SYMBOL_ON_READ_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &MARKSTORE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_X4_SYMBOL_ON_READ_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_X4_SYMBOL_ON_READ_DRAM_WIDTH; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_X4_SYMBOL_ON_READ_RANK; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_X4_SYMBOL_ON_READ_MARKSTORE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MARKSTORE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_MAINT_INVALID_MARKSTORE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_MARKSTORE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_MARKSTORE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &MARKSTORE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_MARKSTORE_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_MARKSTORE_DRAM_WIDTH; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_MARKSTORE_RANK; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_MARKSTORE_MARKSTORE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MARKSTORE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &RANK}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_RANK; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &SYMBOL_MARK, &CHIP_MARK}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_DRAM_WIDTH; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_RANK; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_SYMBOL_MARK; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL_MARK); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_CHIP_MARK; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_MARK); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_MAINT_INVALID_SYMBOL_INDEX_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_SYMBOL_INDEX_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_SYMBOL_INDEX_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &SYMBOL_MARK, &CHIP_MARK}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_SYMBOL_INDEX_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_SYMBOL_INDEX_DRAM_WIDTH; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_SYMBOL_INDEX_RANK; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_SYMBOL_INDEX_SYMBOL_MARK; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL_MARK); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_SYMBOL_INDEX_CHIP_MARK; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_MARK); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_MAINT_INVALID_CHIP_INDEX_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_CHIP_INDEX_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_CHIP_INDEX_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &SYMBOL_MARK, &CHIP_MARK}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_CHIP_INDEX_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_CHIP_INDEX_DRAM_WIDTH; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_CHIP_INDEX_RANK; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_CHIP_INDEX_SYMBOL_MARK; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL_MARK); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_CHIP_INDEX_CHIP_MARK; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_MARK); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &SYMBOL_MARK, &CHIP_MARK, &MBECCFIR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_DRAM_WIDTH; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_RANK; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_SYMBOL_MARK; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL_MARK); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_CHIP_MARK; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_MARK); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_MBECCFIR; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBECCFIR); \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &RANK, &MUX_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_RANK; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_MUX_TYPE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MUX_TYPE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_MAINT_INVALID_STEER_MUX_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_STEER_MUX_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_STEER_MUX_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &MUX_TYPE, &STEER_MUX}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_STEER_MUX_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_STEER_MUX_DRAM_WIDTH; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_STEER_MUX_RANK; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_STEER_MUX_MUX_TYPE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MUX_TYPE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_STEER_MUX_STEER_MUX; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STEER_MUX); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &RANK, &MUX_TYPE, &STEER_TYPE, &SYMBOL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_RANK; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_MUX_TYPE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MUX_TYPE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_STEER_TYPE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STEER_TYPE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_SYMBOL; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &MUX_TYPE, &STEER_TYPE, &SYMBOL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_DRAM_WIDTH; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_RANK; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_MUX_TYPE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MUX_TYPE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_STEER_TYPE; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STEER_TYPE); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_SYMBOL; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[6].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[6].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_MSS_MAINT_NO_X8_ECC_SPARE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_NO_X8_ECC_SPARE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_NO_X8_ECC_SPARE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &MUX_TYPE, &STEER_TYPE, &SYMBOL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_NO_X8_ECC_SPARE_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_NO_X8_ECC_SPARE_DRAM_WIDTH; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_NO_X8_ECC_SPARE_RANK; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_NO_X8_ECC_SPARE_MUX_TYPE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MUX_TYPE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_NO_X8_ECC_SPARE_STEER_TYPE; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STEER_TYPE); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_NO_X8_ECC_SPARE_SYMBOL; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[6].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[6].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &RANK, &SYMBOL, &X4ECCSPARE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_RANK; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_SYMBOL; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_X4ECCSPARE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(X4ECCSPARE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_MAINT_NO_UE_TRAP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_NO_UE_TRAP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_NO_UE_TRAP_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); \
\
{ \
  const void * l_objects[] = {&UE_TRAP0, &UE_TRAP1, &MBMCT, &MBMMR, &MBSTR, &MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_NO_UE_TRAP_UE_TRAP0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UE_TRAP0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_NO_UE_TRAP_UE_TRAP1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UE_TRAP1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_NO_UE_TRAP_MBMCT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_NO_UE_TRAP_MBMMR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMMR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_MAINT_NO_UE_TRAP_MBSTR; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBSTR); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 5; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 1; \
  l_entries[5].target_cdg.iv_gard = 1; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROC_MPIPL_FORCE_WINKLE_TARGET_TYPE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_MPIPL_FORCE_WINKLE_TARGET_TYPE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_MPIPL_FORCE_WINKLE_TARGET_TYPE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_MPIPL_FORCE_WINKLE_TARGET_TYPE_ERR_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_MPIPL_FORCE_WINKLE_CANNOT_UNLOCK_IPMS_STATE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_MPIPL_FORCE_WINKLE_CANNOT_UNLOCK_IPMS_STATE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_MPIPL_FORCE_WINKLE_CANNOT_UNLOCK_IPMS_STATE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_TARGET); \
\
{ \
  const void * l_objects[] = {&IPMS_STATE, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_MPIPL_FORCE_WINKLE_CANNOT_UNLOCK_IPMS_STATE_IPMS_STATE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IPMS_STATE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 0; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_TARGET); \
\
{ \
  const void * l_objects[] = {&OHAMODEADDR, &OHAMODEREG, &OHAROADDR, &OHAROREG, &OHAAISSIOADDR, &OHAAISSIOREG, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_OHAMODEADDR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAMODEADDR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_OHAMODEREG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAMODEREG); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_OHAROADDR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAROADDR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_OHAROREG; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAROREG); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_OHAAISSIOADDR; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAAISSIOADDR); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_OHAAISSIOREG; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAAISSIOREG); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[6].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[6].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[7].target_cdg.iv_targetObjIndex = 6; \
  l_entries[7].target_cdg.iv_callout = 1; \
  l_entries[7].target_cdg.iv_deconfigure = 0; \
  l_entries[7].target_cdg.iv_gard = 1; \
  l_entries[7].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_TARGET); \
\
{ \
  const void * l_objects[] = {&OHAMODEADDR, &OHAMODEREG, &OHAROADDR, &OHAROREG, &OHAAISSIOADDR, &OHAAISSIOREG, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_OHAMODEADDR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAMODEADDR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_OHAMODEREG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAMODEREG); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_OHAROADDR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAROADDR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_OHAROREG; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAROREG); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_OHAAISSIOADDR; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAAISSIOADDR); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_OHAAISSIOREG; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAAISSIOREG); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[6].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[6].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[7].target_cdg.iv_targetObjIndex = 6; \
  l_entries[7].target_cdg.iv_callout = 1; \
  l_entries[7].target_cdg.iv_deconfigure = 0; \
  l_entries[7].target_cdg.iv_gard = 1; \
  l_entries[7].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_TARGET); \
\
{ \
  const void * l_objects[] = {&OHAMODEADDR, &OHAMODEREG, &OHAROADDR, &OHAROREG, &OHAAISSIOADDR, &OHAAISSIOREG, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_OHAMODEADDR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAMODEADDR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_OHAMODEREG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAMODEREG); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_OHAROADDR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAROADDR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_OHAROREG; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAROREG); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_OHAAISSIOADDR; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAAISSIOADDR); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_OHAAISSIOREG; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OHAAISSIOREG); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[6].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[6].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[7].target_cdg.iv_targetObjIndex = 6; \
  l_entries[7].target_cdg.iv_callout = 1; \
  l_entries[7].target_cdg.iv_deconfigure = 0; \
  l_entries[7].target_cdg.iv_gard = 1; \
  l_entries[7].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define RC_EX_CHIPLET_AISS_WA_INACCESSIBLE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_INACCESSIBLE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_INACCESSIBLE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&GP3ADDR, &GP3REG, &PMGP0ADDR, &PMGP0REG, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_INACCESSIBLE_GP3ADDR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GP3ADDR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_INACCESSIBLE_GP3REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GP3REG); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_INACCESSIBLE_PMGP0ADDR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP0ADDR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_INACCESSIBLE_PMGP0REG; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP0REG); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_EX_CHIPLET_AISS_WA_INACCESSIBLE_CHIP_TARGET; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_IPMS_EXNUMBER_CODE_BUG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_IPMS_EXNUMBER_CODE_BUG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_IPMS_EXNUMBER_CODE_BUG_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_TARGET); \
\
{ \
  const void * l_objects[] = {&EX_NUMBER, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_IPMS_EXNUMBER_CODE_BUG_EX_NUMBER; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX_NUMBER); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 0; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_IPMS_PMHIST_CODE_BUG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_IPMS_PMHIST_CODE_BUG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_IPMS_PMHIST_CODE_BUG_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_TARGET); \
\
{ \
  const void * l_objects[] = {&PMHIST_STATE, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_IPMS_PMHIST_CODE_BUG_PMHIST_STATE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMHIST_STATE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 0; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_IPMS_PIRRX_NO_QUEUE_REQUEST_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_IPMS_PIRRX_NO_QUEUE_REQUEST_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_IPMS_PIRRX_NO_QUEUE_REQUEST_ADD_ERROR_INFO(RC) 

#define RC_IPMS_PIRRX_CODE_BUG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_IPMS_PIRRX_CODE_BUG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_IPMS_PIRRX_CODE_BUG_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_TARGET); \
\
{ \
  const void * l_objects[] = {&PCBS_FSM, &PMC_QUEUE_STATE, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_IPMS_PIRRX_CODE_BUG_PCBS_FSM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PCBS_FSM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_IPMS_PIRRX_CODE_BUG_PMC_QUEUE_STATE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMC_QUEUE_STATE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_IPMS_UNSUPPORTED_SV_VALUE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_IPMS_UNSUPPORTED_SV_VALUE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_IPMS_UNSUPPORTED_SV_VALUE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_TARGET); \
\
{ \
  const void * l_objects[] = {&PCBS_FSM, &PMHIST_STATE, &PMC_QUEUE_STATE, &TRANS_SV, &TRANS_SV_ETR, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_IPMS_UNSUPPORTED_SV_VALUE_PCBS_FSM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PCBS_FSM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_IPMS_UNSUPPORTED_SV_VALUE_PMHIST_STATE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMHIST_STATE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_IPMS_UNSUPPORTED_SV_VALUE_PMC_QUEUE_STATE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMC_QUEUE_STATE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_IPMS_UNSUPPORTED_SV_VALUE_TRANS_SV; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TRANS_SV); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_IPMS_UNSUPPORTED_SV_VALUE_TRANS_SV_ETR; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TRANS_SV_ETR); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 5; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_IPMS_SUSPICIOUS_PCBS_FSM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_IPMS_SUSPICIOUS_PCBS_FSM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_IPMS_SUSPICIOUS_PCBS_FSM_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_TARGET); \
\
{ \
  const void * l_objects[] = {&PCBS_FSM, &PMHIST_STATE, &PMC_QUEUE_STATE, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_IPMS_SUSPICIOUS_PCBS_FSM_PCBS_FSM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PCBS_FSM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_IPMS_SUSPICIOUS_PCBS_FSM_PMHIST_STATE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMHIST_STATE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_IPMS_SUSPICIOUS_PCBS_FSM_PMC_QUEUE_STATE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMC_QUEUE_STATE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_IPMS_PIRRX_UNSUPPORTED_IDLE_REQUEST_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_IPMS_PIRRX_UNSUPPORTED_IDLE_REQUEST_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_IPMS_PIRRX_UNSUPPORTED_IDLE_REQUEST_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_TARGET); \
\
{ \
  const void * l_objects[] = {&PMC_QUEUE_STATE, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_IPMS_PIRRX_UNSUPPORTED_IDLE_REQUEST_PMC_QUEUE_STATE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMC_QUEUE_STATE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 0; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_IPMS_STATE_NOT_FOUND_BUG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_IPMS_STATE_NOT_FOUND_BUG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_IPMS_STATE_NOT_FOUND_BUG_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_TARGET); \
\
{ \
  const void * l_objects[] = {&PORRR0_REG, &PORRR1_REG, &ETR_REG, &PCBS_FSM_PREV, &PCBS_FSM, &PMHIST_STATE, &PMC_QUEUE_STATE, &IPMS_STATE, &PIRR0_REG, &PIRR1_REG, &PIRR2_REG, &PIRR3_REG, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[14]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_IPMS_STATE_NOT_FOUND_BUG_PORRR0_REG; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORRR0_REG); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_IPMS_STATE_NOT_FOUND_BUG_PORRR1_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORRR1_REG); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_IPMS_STATE_NOT_FOUND_BUG_ETR_REG; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ETR_REG); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_IPMS_STATE_NOT_FOUND_BUG_PCBS_FSM_PREV; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PCBS_FSM_PREV); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_IPMS_STATE_NOT_FOUND_BUG_PCBS_FSM; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PCBS_FSM); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_IPMS_STATE_NOT_FOUND_BUG_PMHIST_STATE; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMHIST_STATE); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_IPMS_STATE_NOT_FOUND_BUG_PMC_QUEUE_STATE; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMC_QUEUE_STATE); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_IPMS_STATE_NOT_FOUND_BUG_IPMS_STATE; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IPMS_STATE); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_IPMS_STATE_NOT_FOUND_BUG_PIRR0_REG; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIRR0_REG); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::RC_IPMS_STATE_NOT_FOUND_BUG_PIRR1_REG; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIRR1_REG); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[10].ffdc.iv_ffdcObjIndex = 10; \
  l_entries[10].ffdc.iv_ffdcId = fapi::RC_IPMS_STATE_NOT_FOUND_BUG_PIRR2_REG; \
  l_entries[10].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIRR2_REG); \
  l_entries[11].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[11].ffdc.iv_ffdcObjIndex = 11; \
  l_entries[11].ffdc.iv_ffdcId = fapi::RC_IPMS_STATE_NOT_FOUND_BUG_PIRR3_REG; \
  l_entries[11].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIRR3_REG); \
  l_entries[12].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[12].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[12].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[13].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[13].target_cdg.iv_targetObjIndex = 12; \
  l_entries[13].target_cdg.iv_callout = 1; \
  l_entries[13].target_cdg.iv_deconfigure = 0; \
  l_entries[13].target_cdg.iv_gard = 0; \
  l_entries[13].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 14); \
}

#define RC_IPMS_CONFLICTING_IDLE_STATES_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_IPMS_CONFLICTING_IDLE_STATES_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_IPMS_CONFLICTING_IDLE_STATES_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_TARGET); \
\
{ \
  const void * l_objects[] = {&PORRR0_REG, &PORRR1_REG, &ETR_REG, &PCBS_FSM_PREV, &PCBS_FSM, &PMHIST_STATE, &PMC_QUEUE_STATE, &IPMS_STATE, &PIRR0_REG, &PIRR1_REG, &PIRR2_REG, &PIRR3_REG, &EX_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[14]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_IPMS_CONFLICTING_IDLE_STATES_PORRR0_REG; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORRR0_REG); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_IPMS_CONFLICTING_IDLE_STATES_PORRR1_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORRR1_REG); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_IPMS_CONFLICTING_IDLE_STATES_ETR_REG; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ETR_REG); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_IPMS_CONFLICTING_IDLE_STATES_PCBS_FSM_PREV; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PCBS_FSM_PREV); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_IPMS_CONFLICTING_IDLE_STATES_PCBS_FSM; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PCBS_FSM); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_IPMS_CONFLICTING_IDLE_STATES_PMHIST_STATE; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMHIST_STATE); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_IPMS_CONFLICTING_IDLE_STATES_PMC_QUEUE_STATE; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMC_QUEUE_STATE); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_IPMS_CONFLICTING_IDLE_STATES_IPMS_STATE; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IPMS_STATE); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_IPMS_CONFLICTING_IDLE_STATES_PIRR0_REG; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIRR0_REG); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::RC_IPMS_CONFLICTING_IDLE_STATES_PIRR1_REG; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIRR1_REG); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[10].ffdc.iv_ffdcObjIndex = 10; \
  l_entries[10].ffdc.iv_ffdcId = fapi::RC_IPMS_CONFLICTING_IDLE_STATES_PIRR2_REG; \
  l_entries[10].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIRR2_REG); \
  l_entries[11].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[11].ffdc.iv_ffdcObjIndex = 11; \
  l_entries[11].ffdc.iv_ffdcId = fapi::RC_IPMS_CONFLICTING_IDLE_STATES_PIRR3_REG; \
  l_entries[11].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIRR3_REG); \
  l_entries[12].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[12].proc_callout.iv_procedure = fapi::ProcedureCallouts::LVL_SUPPORT; \
  l_entries[12].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[13].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[13].target_cdg.iv_targetObjIndex = 12; \
  l_entries[13].target_cdg.iv_callout = 1; \
  l_entries[13].target_cdg.iv_deconfigure = 0; \
  l_entries[13].target_cdg.iv_gard = 0; \
  l_entries[13].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 14); \
}

#define RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM_TARGET); \
\
{ \
  const void * l_objects[] = {&DEVICE_TYPE, &DIMM_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_DEVICE_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DEVICE_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM_DDR4_TARGET); \
\
{ \
  const void * l_objects[] = {&DEVICE_TYPE, &DIMM_DDR4_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED_DEVICE_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DEVICE_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM_UV_TARGET); \
\
{ \
  const void * l_objects[] = {&DIMM_VOLTAGE, &DIMM_UV_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE_DIMM_VOLTAGE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_VOLTAGE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_VOLT_DDR_TYPE_COMPLIANT_VOLTAGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_COMPLIANT_VOLTAGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_COMPLIANT_VOLTAGE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM_CV_TARGET); \
\
{ \
  const void * l_objects[] = {&DIMM_VOLTAGE, &DIMM_CV_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_DDR_TYPE_COMPLIANT_VOLTAGE_DIMM_VOLTAGE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_VOLTAGE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&DIMM_VOLTAGE, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION_DIMM_VOLTAGE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_VOLTAGE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 0; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_VOLT_OVERIDE_MIXING_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_OVERIDE_MIXING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_OVERIDE_MIXING_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEMB_TARGET); \
\
{ \
  const void * l_objects[] = {&OVERRIDE_TYPE, &OVERRIDE_DOMAIN_TYPE, &MEMB_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_OVERIDE_MIXING_OVERRIDE_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OVERRIDE_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_OVERIDE_MIXING_OVERRIDE_DOMAIN_TYPE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OVERRIDE_DOMAIN_TYPE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 0; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_VOLT_OVERIDE_UKNOWN_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_OVERIDE_UKNOWN_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_OVERIDE_UKNOWN_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&OVERRIDE_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_OVERIDE_UKNOWN_OVERRIDE_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OVERRIDE_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_VOLT_AVDD_OFFSET_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_AVDD_OFFSET_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_AVDD_OFFSET_VALUE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&AVDD_SLOPE_ACTIVE, &AVDD_SLOPE_INACTIVE, &AVDD_SLOPE_INTERCEPT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_AVDD_OFFSET_VALUE_ERROR_AVDD_SLOPE_ACTIVE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(AVDD_SLOPE_ACTIVE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_AVDD_OFFSET_VALUE_ERROR_AVDD_SLOPE_INACTIVE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(AVDD_SLOPE_INACTIVE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_AVDD_OFFSET_VALUE_ERROR_AVDD_SLOPE_INTERCEPT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(AVDD_SLOPE_INTERCEPT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_VOLT_VDD_OFFSET_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_VDD_OFFSET_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_VDD_OFFSET_VALUE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&VDD_SLOPE_ACTIVE, &VDD_SLOPE_INACTIVE, &VDD_SLOPE_INTERCEPT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VDD_OFFSET_VALUE_ERROR_VDD_SLOPE_ACTIVE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VDD_SLOPE_ACTIVE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VDD_OFFSET_VALUE_ERROR_VDD_SLOPE_INACTIVE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VDD_SLOPE_INACTIVE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VDD_OFFSET_VALUE_ERROR_VDD_SLOPE_INTERCEPT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VDD_SLOPE_INTERCEPT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_VOLT_VCS_OFFSET_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_VCS_OFFSET_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_VCS_OFFSET_VALUE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&VCS_SLOPE_ACTIVE, &VCS_SLOPE_INACTIVE, &VCS_SLOPE_INTERCEPT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VCS_OFFSET_VALUE_ERROR_VCS_SLOPE_ACTIVE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VCS_SLOPE_ACTIVE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VCS_OFFSET_VALUE_ERROR_VCS_SLOPE_INACTIVE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VCS_SLOPE_INACTIVE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VCS_OFFSET_VALUE_ERROR_VCS_SLOPE_INTERCEPT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VCS_SLOPE_INTERCEPT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_VOLT_VPP_FUNCTIONAL_CENTAUR_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_VOLT_VPP_FUNCTIONAL_CENTAUR_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_VOLT_VPP_FUNCTIONAL_CENTAUR_NOT_FOUND_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DRAM_GEN_MISCOMPARE, &DRAM_GEN_START, &CEN_MBA_NUM, &CEN_TARGET_NUM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE_DRAM_GEN_MISCOMPARE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_GEN_MISCOMPARE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE_DRAM_GEN_START; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_GEN_START); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE_CEN_MBA_NUM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CEN_MBA_NUM); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE_CEN_TARGET_NUM; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CEN_TARGET_NUM); \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&TARGET_DIMM_ERROR); \
\
{ \
  const void * l_objects[] = {&TARGET_POSITION, &MBA_POSITION, &DIMM_POSITION, &FAILING_ATTRIBUTE, &MBA_TARGET, &TARGET_DIMM_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR_TARGET_POSITION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET_POSITION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR_MBA_POSITION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POSITION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR_DIMM_POSITION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_POSITION); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR_FAILING_ATTRIBUTE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FAILING_ATTRIBUTE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 0; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 5; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 0; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_VPP_FUNCTIONAL_CENTAUR_VPD_READ_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_VPP_FUNCTIONAL_CENTAUR_VPD_READ_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_VPP_FUNCTIONAL_CENTAUR_VPD_READ_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_CEN_ERROR); \
fapi::fapiCheckType<const fapi::Target *>(&MBA_TARGET); \
\
{ \
  const void * l_objects[] = {&TARGET_POSITION, &MBA_POSITION, &FAILING_ATTRIBUTE, &TARGET_CEN_ERROR, &MBA_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_VPP_FUNCTIONAL_CENTAUR_VPD_READ_ERROR_TARGET_POSITION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET_POSITION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_VPP_FUNCTIONAL_CENTAUR_VPD_READ_ERROR_MBA_POSITION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POSITION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_VPP_FUNCTIONAL_CENTAUR_VPD_READ_ERROR_FAILING_ATTRIBUTE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FAILING_ATTRIBUTE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 0; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_VOLT_VPP_DRAM_GEN_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_VOLT_VPP_DRAM_GEN_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_VOLT_VPP_DRAM_GEN_NOT_FOUND_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_VOLT_VPP_OFFSET_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_VPP_OFFSET_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_VPP_OFFSET_VALUE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&VPP_SLOPE, &VPP_INTERCEPT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VPP_OFFSET_VALUE_ERROR_VPP_SLOPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VPP_SLOPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VPP_OFFSET_VALUE_ERROR_VPP_INTERCEPT; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VPP_INTERCEPT); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DRAM_GEN_MISCOMPARE, &DRAM_GEN_START, &CEN_MBA_NUM, &CEN_TARGET_NUM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE_DRAM_GEN_MISCOMPARE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_GEN_MISCOMPARE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE_DRAM_GEN_START; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_GEN_START); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE_CEN_MBA_NUM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CEN_MBA_NUM); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE_CEN_TARGET_NUM; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CEN_TARGET_NUM); \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&TARGET_DIMM_ERROR); \
\
{ \
  const void * l_objects[] = {&TARGET_POSITION, &MBA_POSITION, &DIMM_POSITION, &MBA_TARGET, &TARGET_DIMM_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR_TARGET_POSITION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET_POSITION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR_MBA_POSITION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POSITION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR_DIMM_POSITION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_POSITION); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 0; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_VOLT_VDDR_FUNCTIONAL_CENTAUR_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_VOLT_VDDR_FUNCTIONAL_CENTAUR_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_VOLT_VDDR_FUNCTIONAL_CENTAUR_NOT_FOUND_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_VOLT_VDDR_DRAM_GEN_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_VOLT_VDDR_DRAM_GEN_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_VOLT_VDDR_DRAM_GEN_NOT_FOUND_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&VPD_MASTER_POWER_SLOPE, &VPD_MASTER_POWER_INTERCEPT, &CEN_TARGET_NUM, &CHIP_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR_VPD_MASTER_POWER_SLOPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VPD_MASTER_POWER_SLOPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR_VPD_MASTER_POWER_INTERCEPT; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VPD_MASTER_POWER_INTERCEPT); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR_CEN_TARGET_NUM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CEN_TARGET_NUM); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 0; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&VDDR_SLOPE_ACTIVE, &VDDR_SLOPE_INACTIVE, &VDDR_SLOPE_INTERCEPT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR_VDDR_SLOPE_ACTIVE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VDDR_SLOPE_ACTIVE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR_VDDR_SLOPE_INACTIVE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VDDR_SLOPE_INACTIVE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR_VDDR_SLOPE_INTERCEPT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VDDR_SLOPE_INTERCEPT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_UNSUPPORTED_SPD_DATA_DDR4_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_SPD_DATA_DDR4_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_SPD_DATA_DDR4_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM_TARGET); \
\
{ \
  const void * l_objects[] = {&MTB_DDR4, &FTB_DDR4, &DIMM_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_UNSUPPORTED_SPD_DATA_DDR4_MTB_DDR4; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MTB_DDR4); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_UNSUPPORTED_SPD_DATA_DDR4_FTB_DDR4; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FTB_DDR4); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_UNSUPPORTED_SPD_DATA_DDR3_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_SPD_DATA_DDR3_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_SPD_DATA_DDR3_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM_TARGET); \
\
{ \
  const void * l_objects[] = {&MTB_DIVIDEND, &MTB_DIVISOR, &FTB_DIVIDEND, &FTB_DIVISOR, &DIMM_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_UNSUPPORTED_SPD_DATA_DDR3_MTB_DIVIDEND; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MTB_DIVIDEND); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_UNSUPPORTED_SPD_DATA_DDR3_MTB_DIVISOR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MTB_DIVISOR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_UNSUPPORTED_SPD_DATA_DDR3_FTB_DIVIDEND; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FTB_DIVIDEND); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_UNSUPPORTED_SPD_DATA_DDR3_FTB_DIVISOR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FTB_DIVISOR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_UNSUPPORTED_SPD_DATA_COMMON_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_SPD_DATA_COMMON_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_SPD_DATA_COMMON_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&MIN_TCK, &MIN_TAA, &DIMM_TARGET, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_UNSUPPORTED_SPD_DATA_COMMON_MIN_TCK; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MIN_TCK); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_UNSUPPORTED_SPD_DATA_COMMON_MIN_TAA; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MIN_TAA); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 0; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_MODULE_TYPE_MIX_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MODULE_TYPE_MIX_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MODULE_TYPE_MIX_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM_TARGET); \
\
{ \
  const void * l_objects[] = {&MODULE_TYPE, &DIMM_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_MODULE_TYPE_MIX_MODULE_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODULE_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_NO_COMMON_SUPPORTED_CL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_NO_COMMON_SUPPORTED_CL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_NO_COMMON_SUPPORTED_CL_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM_TARGET); \
\
{ \
  const void * l_objects[] = {&CL_SUPPORTED, &DIMM_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_NO_COMMON_SUPPORTED_CL_CL_SUPPORTED; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CL_SUPPORTED); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EXCEED_TAA_MAX_NO_CL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EXCEED_TAA_MAX_NO_CL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EXCEED_TAA_MAX_NO_CL_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM_TARGET); \
\
{ \
  const void * l_objects[] = {&CL_SUPPORTED, &DIMM_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EXCEED_TAA_MAX_NO_CL_CL_SUPPORTED; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CL_SUPPORTED); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_UNSUPPORTED_FREQ_CALCULATED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_FREQ_CALCULATED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_FREQ_CALCULATED_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DIMM_MIN_FREQ}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_UNSUPPORTED_FREQ_CALCULATED_DIMM_MIN_FREQ; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_MIN_FREQ); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_CONFIG_MIRROR_DISABLED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_MIRROR_DISABLED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_MIRROR_DISABLED_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MIRROR_PLACEMENT_POLICY}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MIRROR_DISABLED_MIRROR_PLACEMENT_POLICY; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MIRROR_PLACEMENT_POLICY); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_INTERLEAVE_MODE_INVALID_MCS_PER_GROUP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INTERLEAVE_MODE_INVALID_MCS_PER_GROUP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INTERLEAVE_MODE_INVALID_MCS_PER_GROUP_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ALL_MCS_IN_INTERLEAVING_GROUP, &MSS_INTERLEAVE_ENABLE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INTERLEAVE_MODE_INVALID_MCS_PER_GROUP_ALL_MCS_IN_INTERLEAVING_GROUP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ALL_MCS_IN_INTERLEAVING_GROUP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INTERLEAVE_MODE_INVALID_MCS_PER_GROUP_MSS_INTERLEAVE_ENABLE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MSS_INTERLEAVE_ENABLE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_CHECKERBOARD_MODE_INVALID_MCS_PER_GROUP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_CHECKERBOARD_MODE_INVALID_MCS_PER_GROUP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_CHECKERBOARD_MODE_INVALID_MCS_PER_GROUP_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ALL_MCS_IN_INTERLEAVING_GROUP, &MSS_INTERLEAVE_ENABLE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_CHECKERBOARD_MODE_INVALID_MCS_PER_GROUP_ALL_MCS_IN_INTERLEAVING_GROUP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ALL_MCS_IN_INTERLEAVING_GROUP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_CHECKERBOARD_MODE_INVALID_MCS_PER_GROUP_MSS_INTERLEAVE_ENABLE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MSS_INTERLEAVE_ENABLE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_GROUPING_SELCTIVE_MODE_HTM_OCC_BAR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_GROUPING_SELCTIVE_MODE_HTM_OCC_BAR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_GROUPING_SELCTIVE_MODE_HTM_OCC_BAR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&HTM_BAR_SIZE, &OCC_SANDBOX_BAR_SIZE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_SELCTIVE_MODE_HTM_OCC_BAR_HTM_BAR_SIZE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(HTM_BAR_SIZE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_SELCTIVE_MODE_HTM_OCC_BAR_OCC_SANDBOX_BAR_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OCC_SANDBOX_BAR_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_MCS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_MCS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_MCS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEMBUF); \
\
{ \
  const void * l_objects[] = {&MEMBUF}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[1].children_cdg.iv_parentObjIndex = 0; \
  l_entries[1].children_cdg.iv_callout = 1; \
  l_entries[1].children_cdg.iv_deconfigure = 1; \
  l_entries[1].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[1].children_cdg.iv_childPort = 255; \
  l_entries[1].children_cdg.iv_childNumber = 255; \
  l_entries[1].children_cdg.iv_gard = 0; \
  l_entries[1].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PROC_CHIP, &MEM_BASE_ADDR, &MIRROR_BASE_ADDR, &SIZE_NON_MIRROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_PROC_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PROC_CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_MEM_BASE_ADDR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MEM_BASE_ADDR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_MIRROR_BASE_ADDR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MIRROR_BASE_ADDR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_SIZE_NON_MIRROR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE_NON_MIRROR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TOTAL_SIZE, &HTM_BAR_SIZE, &OCC_SANDBOX_BAR_SIZE, &MIRROR_PLACEMENT_POLICY}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR_TOTAL_SIZE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TOTAL_SIZE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR_HTM_BAR_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(HTM_BAR_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR_OCC_SANDBOX_BAR_SIZE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OCC_SANDBOX_BAR_SIZE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR_MIRROR_PLACEMENT_POLICY; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MIRROR_PLACEMENT_POLICY); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TOTAL_SIZE, &HTM_BAR_SIZE, &OCC_SANDBOX_BAR_SIZE, &MIRROR_PLACEMENT_POLICY}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE_TOTAL_SIZE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TOTAL_SIZE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE_HTM_BAR_SIZE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(HTM_BAR_SIZE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE_OCC_SANDBOX_BAR_SIZE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OCC_SANDBOX_BAR_SIZE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE_MIRROR_PLACEMENT_POLICY; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MIRROR_PLACEMENT_POLICY); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEM_CHIP); \
\
{ \
  const void * l_objects[] = {&FFDC_DATA_1, &FFDC_DATA_2, &FFDC_DATA_3, &FFDC_DATA_4, &MEM_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_1; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_1); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_2; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_2); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_3; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_3); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_4; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_4); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEM_DIMM); \
\
{ \
  const void * l_objects[] = {&FFDC_DATA_1, &FFDC_DATA_2, &FFDC_DATA_3, &MEM_DIMM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_FFDC_DATA_1; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_1); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_FFDC_DATA_2; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_2); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_FFDC_DATA_3; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_3); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 0; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEM_MBA); \
\
{ \
  const void * l_objects[] = {&PAIR_POWER, &PAIR_WATT_TARGET, &MEM_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_PAIR_POWER; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PAIR_POWER); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_PAIR_WATT_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PAIR_WATT_TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[3].children_cdg.iv_parentObjIndex = 2; \
  l_entries[3].children_cdg.iv_callout = 1; \
  l_entries[3].children_cdg.iv_deconfigure = 1; \
  l_entries[3].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[3].children_cdg.iv_childPort = 255; \
  l_entries[3].children_cdg.iv_childNumber = 255; \
  l_entries[3].children_cdg.iv_gard = 0; \
  l_entries[3].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_CCS_READ_MISCOMPARE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCS_READ_MISCOMPARE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_CCS_FAILURE, RC); 
#define RC_MSS_CCS_READ_MISCOMPARE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&REG_CONTENTS, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_CCS_READ_MISCOMPARE_REG_CONTENTS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REG_CONTENTS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_CCS_UE_SUE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCS_UE_SUE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_CCS_FAILURE, RC); 
#define RC_MSS_CCS_UE_SUE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&REG_CONTENTS, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_CCS_UE_SUE_REG_CONTENTS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REG_CONTENTS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_CCS_CAL_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCS_CAL_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_CCS_FAILURE, RC); 
#define RC_MSS_CCS_CAL_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&REG_CONTENTS, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_CCS_CAL_TIMEOUT_REG_CONTENTS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REG_CONTENTS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_CCS_HUNG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCS_HUNG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_CCS_FAILURE, RC); 
#define RC_MSS_CCS_HUNG_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_RCD_PARITY_ERROR_LIMIT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_LIMIT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_RCD_PARITY_FAILURE, RC); 
#define RC_MSS_RCD_PARITY_ERROR_LIMIT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_RCD_PARITY_ERROR_PORT0_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_PORT0_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_RCD_PARITY_FAILURE, RC); 
#define RC_MSS_RCD_PARITY_ERROR_PORT0_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_RCD_PARITY_ERROR_PORT1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_PORT1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_RCD_PARITY_FAILURE, RC); 
#define RC_MSS_RCD_PARITY_ERROR_PORT1_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_SETBBM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_SETBBM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_SETBBM_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&WIDTH, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_SETBBM_WIDTH; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(WIDTH); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_GETBBM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_GETBBM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_GETBBM_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&WIDTH, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_GETBBM_WIDTH; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(WIDTH); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&PORT, &DIMM, &RANK, &SPARE, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR_PORT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR_DIMM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR_RANK; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR_SPARE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SPARE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 4; \
  l_entries[5].target_cdg.iv_callout = 1; \
  l_entries[5].target_cdg.iv_deconfigure = 1; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&PORT, &BLOCK, &QUAD, &PHYLANE, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR_PORT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR_BLOCK; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BLOCK); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR_QUAD; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(QUAD); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR_PHYLANE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PHYLANE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_DRAMINIT_TRAINING_FAILURE_DISABLE_REGS, RC); 
#define RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&MBA_POSITION, &PORT_POSITION, &RANKGROUP_POSITION, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR_MBA_POSITION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POSITION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR_PORT_POSITION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_POSITION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR_RANKGROUP_POSITION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANKGROUP_POSITION); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_DRAMINIT_TRAINING_FAILURE_DISABLE_REGS, RC); 
#define RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&MBA_POSITION, &PORT_POSITION, &RANKGROUP_POSITION, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR_MBA_POSITION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POSITION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR_PORT_POSITION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_POSITION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR_RANKGROUP_POSITION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANKGROUP_POSITION); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_DRAMINIT_TRAINING_FAILURE_DISABLE_REGS, RC); 
#define RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&MBA_POSITION, &PORT_POSITION, &RANKGROUP_POSITION, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR_MBA_POSITION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POSITION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR_PORT_POSITION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_POSITION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR_RANKGROUP_POSITION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANKGROUP_POSITION); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_DRAMINIT_TRAINING_FAILURE_DISABLE_REGS, RC); 
#define RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&MBA_POSITION, &PORT_POSITION, &RANKGROUP_POSITION, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR_MBA_POSITION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POSITION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR_PORT_POSITION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_POSITION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR_RANKGROUP_POSITION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANKGROUP_POSITION); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_DRAMINIT_TRAINING_FAILURE_DISABLE_REGS, RC); 
#define RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&MBA_POSITION, &PORT_POSITION, &RANKGROUP_POSITION, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR_MBA_POSITION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POSITION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR_PORT_POSITION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_POSITION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR_RANKGROUP_POSITION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANKGROUP_POSITION); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_DRAMINIT_TRAINING_FAILURE_DISABLE_REGS, RC); 
#define RC_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&MBA_POSITION, &PORT_POSITION, &RANKGROUP_POSITION, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR_MBA_POSITION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POSITION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR_PORT_POSITION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_POSITION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR_RANKGROUP_POSITION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANKGROUP_POSITION); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_DRAMINIT_TRAINING_FAILURE_DISABLE_REGS, RC); 
#define RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&MBA_POSITION, &PORT_POSITION, &RANKGROUP_POSITION, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR_MBA_POSITION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POSITION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR_PORT_POSITION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_POSITION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR_RANKGROUP_POSITION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANKGROUP_POSITION); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_DRAMINIT_TRAINING_FAILURE_DISABLE_REGS, RC); 
#define RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&MBA_POSITION, &PORT_POSITION, &RANKGROUP_POSITION, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR_MBA_POSITION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POSITION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR_PORT_POSITION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_POSITION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR_RANKGROUP_POSITION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANKGROUP_POSITION); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET_MBA_ERROR, fapi::REG_FFDC_MSS_DRAMINIT_TRAINING_FAILURE_DISABLE_REGS, RC); 
#define RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&MBA_POSITION, &PORT_POSITION, &RANKGROUP_POSITION, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR_MBA_POSITION; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POSITION); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR_PORT_POSITION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_POSITION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR_RANKGROUP_POSITION; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANKGROUP_POSITION); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 0; \
  l_entries[4].target_cdg.iv_gard = 0; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DP18_0_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DP18_0_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DP18_0_PLL_FAILED_TO_LOCK_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&EXPECTED_STATUS, &ACTUAL_STATUS, &MEMBUF_CHIP_IN_ERROR, &MBA_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DP18_0_PLL_FAILED_TO_LOCK_EXPECTED_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DP18_0_PLL_FAILED_TO_LOCK_ACTUAL_STATUS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ACTUAL_STATUS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[2].hw_callout.iv_hw = fapi::HwCallouts::MEM_REF_CLOCK; \
  l_entries[2].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[2].hw_callout.iv_refObjIndex = 2; \
  l_entries[2].hw_callout.iv_objPosIndex = 0xff; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_DP18_1_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DP18_1_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DP18_1_PLL_FAILED_TO_LOCK_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&EXPECTED_STATUS, &ACTUAL_STATUS, &MEMBUF_CHIP_IN_ERROR, &MBA_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DP18_1_PLL_FAILED_TO_LOCK_EXPECTED_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DP18_1_PLL_FAILED_TO_LOCK_ACTUAL_STATUS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ACTUAL_STATUS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[2].hw_callout.iv_hw = fapi::HwCallouts::MEM_REF_CLOCK; \
  l_entries[2].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[2].hw_callout.iv_refObjIndex = 2; \
  l_entries[2].hw_callout.iv_objPosIndex = 0xff; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&EXPECTED_STATUS, &ACTUAL_STATUS, &MEMBUF_CHIP_IN_ERROR, &MBA_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK_EXPECTED_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK_ACTUAL_STATUS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ACTUAL_STATUS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[2].hw_callout.iv_hw = fapi::HwCallouts::MEM_REF_CLOCK; \
  l_entries[2].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[2].hw_callout.iv_refObjIndex = 2; \
  l_entries[2].hw_callout.iv_objPosIndex = 0xff; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&EXPECTED_STATUS, &ACTUAL_STATUS, &MEMBUF_CHIP_IN_ERROR, &MBA_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK_EXPECTED_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK_ACTUAL_STATUS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ACTUAL_STATUS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[2].hw_callout.iv_hw = fapi::HwCallouts::MEM_REF_CLOCK; \
  l_entries[2].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[2].hw_callout.iv_refObjIndex = 2; \
  l_entries[2].hw_callout.iv_objPosIndex = 0xff; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_CONFIG_DRV_IMP_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CONFIG_DRV_IMP_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CONFIG_DRV_IMP_INVALID_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PORT_PARAM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CONFIG_DRV_IMP_INVALID_INPUT_PORT_PARAM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_PARAM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_CONFIG_RCV_IMP_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CONFIG_RCV_IMP_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CONFIG_RCV_IMP_INVALID_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PORT_PARAM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CONFIG_RCV_IMP_INVALID_INPUT_PORT_PARAM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_PARAM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_CONFIG_SLEW_RATE_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CONFIG_SLEW_RATE_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CONFIG_SLEW_RATE_INVALID_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PORT_PARAM, &SLEW_TYPE_PARAM, &SLEW_IMP_PARAM, &SLEW_RATE_PARAM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CONFIG_SLEW_RATE_INVALID_INPUT_PORT_PARAM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_PARAM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_CONFIG_SLEW_RATE_INVALID_INPUT_SLEW_TYPE_PARAM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLEW_TYPE_PARAM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_CONFIG_SLEW_RATE_INVALID_INPUT_SLEW_IMP_PARAM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLEW_IMP_PARAM); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_CONFIG_SLEW_RATE_INVALID_INPUT_SLEW_RATE_PARAM; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLEW_RATE_PARAM); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_CONFIG_WR_DRAM_VREF_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CONFIG_WR_DRAM_VREF_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CONFIG_WR_DRAM_VREF_INVALID_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PORT_PARAM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CONFIG_WR_DRAM_VREF_INVALID_INPUT_PORT_PARAM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_PARAM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_CONFIG_RD_CEN_VREF_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CONFIG_RD_CEN_VREF_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CONFIG_RD_CEN_VREF_INVALID_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PORT_PARAM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CONFIG_RD_CEN_VREF_INVALID_INPUT_PORT_PARAM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_PARAM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_SLEW_CAL_INVALID_DRAM_GEN_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SLEW_CAL_INVALID_DRAM_GEN_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SLEW_CAL_INVALID_DRAM_GEN_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DRAM_GEN}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_INVALID_DRAM_GEN_DRAM_GEN; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_GEN); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_SLEW_CAL_INVALID_FREQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SLEW_CAL_INVALID_FREQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SLEW_CAL_INVALID_FREQ_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_SLEW_CAL_TIMEOUT_PORT0_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SLEW_CAL_TIMEOUT_PORT0_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(MBA_IN_ERROR, fapi::REG_FFDC_MSS_SLEW_CAL_FAILURE_PORT0, RC); 
#define RC_MSS_SLEW_CAL_TIMEOUT_PORT0_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&DATA_ADR, &IMP, &SLEW, &STAT_REG, &MBA_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_TIMEOUT_PORT0_DATA_ADR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_ADR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_TIMEOUT_PORT0_IMP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_TIMEOUT_PORT0_SLEW; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLEW); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_TIMEOUT_PORT0_STAT_REG; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STAT_REG); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_SLEW_CAL_TIMEOUT_PORT1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SLEW_CAL_TIMEOUT_PORT1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(MBA_IN_ERROR, fapi::REG_FFDC_MSS_SLEW_CAL_FAILURE_PORT1, RC); 
#define RC_MSS_SLEW_CAL_TIMEOUT_PORT1_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&DATA_ADR, &IMP, &SLEW, &STAT_REG, &MBA_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_TIMEOUT_PORT1_DATA_ADR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_ADR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_TIMEOUT_PORT1_IMP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_TIMEOUT_PORT1_SLEW; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLEW); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_TIMEOUT_PORT1_STAT_REG; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STAT_REG); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_SLEW_CAL_ERROR_PORT0_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SLEW_CAL_ERROR_PORT0_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(MBA_IN_ERROR, fapi::REG_FFDC_MSS_SLEW_CAL_FAILURE_PORT0, RC); 
#define RC_MSS_SLEW_CAL_ERROR_PORT0_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&DATA_ADR, &IMP, &SLEW, &STAT_REG, &MBA_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_ERROR_PORT0_DATA_ADR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_ADR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_ERROR_PORT0_IMP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_ERROR_PORT0_SLEW; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLEW); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_ERROR_PORT0_STAT_REG; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STAT_REG); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_SLEW_CAL_ERROR_PORT1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SLEW_CAL_ERROR_PORT1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(MBA_IN_ERROR, fapi::REG_FFDC_MSS_SLEW_CAL_FAILURE_PORT1, RC); 
#define RC_MSS_SLEW_CAL_ERROR_PORT1_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&DATA_ADR, &IMP, &SLEW, &STAT_REG, &MBA_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_ERROR_PORT1_DATA_ADR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_ADR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_ERROR_PORT1_IMP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_ERROR_PORT1_SLEW; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLEW); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_SLEW_CAL_ERROR_PORT1_STAT_REG; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STAT_REG); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_IMP_INPUT_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_UNEXPECTED_MEM_CLOCK_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNEXPECTED_MEM_CLOCK_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(MEMBUF_CHIP_IN_ERROR, fapi::REG_FFDC_CLOCK_STOP_BAD_STATUS_REGS, RC); 
#define RC_MSS_UNEXPECTED_MEM_CLOCK_STATUS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&EXPECTED_STATUS, &ACTUAL_STATUS, &MEMBUF_CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_UNEXPECTED_MEM_CLOCK_STATUS_EXPECTED_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_UNEXPECTED_MEM_CLOCK_STATUS_ACTUAL_STATUS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ACTUAL_STATUS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 0; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_UNEXPECTED_NEST_CLOCK_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNEXPECTED_NEST_CLOCK_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(MEMBUF_CHIP_IN_ERROR, fapi::REG_FFDC_CLOCK_STOP_BAD_STATUS_REGS, RC); 
#define RC_MSS_UNEXPECTED_NEST_CLOCK_STATUS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&EXPECTED_STATUS, &ACTUAL_STATUS, &MEMBUF_CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_UNEXPECTED_NEST_CLOCK_STATUS_EXPECTED_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_UNEXPECTED_NEST_CLOCK_STATUS_ACTUAL_STATUS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ACTUAL_STATUS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 0; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_UNEXPECTED_TP_CLOCK_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNEXPECTED_TP_CLOCK_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(MEMBUF_CHIP_IN_ERROR, fapi::REG_FFDC_CLOCK_STOP_BAD_STATUS_REGS, RC); 
#define RC_MSS_UNEXPECTED_TP_CLOCK_STATUS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&EXPECTED_STATUS, &ACTUAL_STATUS, &MEMBUF_CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_UNEXPECTED_TP_CLOCK_STATUS_EXPECTED_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_UNEXPECTED_TP_CLOCK_STATUS_ACTUAL_STATUS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ACTUAL_STATUS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 0; \
  l_entries[2].target_cdg.iv_gard = 0; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_SCOMINIT_NUM_MBA_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SCOMINIT_NUM_MBA_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SCOMINIT_NUM_MBA_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&NUM_MBAS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_SCOMINIT_NUM_MBA_ERROR_NUM_MBAS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NUM_MBAS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_SCOMINIT_NUM_L4_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SCOMINIT_NUM_L4_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SCOMINIT_NUM_L4_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&NUM_L4S}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_SCOMINIT_NUM_L4_ERROR_NUM_L4S; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NUM_L4S); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_MCBIST_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MCBIST_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MCBIST_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_CHIPLET); \
\
{ \
  const void * l_objects[] = {&MBA_CHIPLET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ALT_BASE_INDEX, &BASE_INDEX, &SIZE_INDEX}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR_ALT_BASE_INDEX; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ALT_BASE_INDEX); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR_BASE_INDEX; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_INDEX); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR_SIZE_INDEX; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE_INDEX); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_SETUP_BARS_M_ALT_BAR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SETUP_BARS_M_ALT_BAR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SETUP_BARS_M_ALT_BAR_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ALT_BASE_INDEX, &BASE_INDEX, &SIZE_INDEX}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_SETUP_BARS_M_ALT_BAR_ERR_ALT_BASE_INDEX; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ALT_BASE_INDEX); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_SETUP_BARS_M_ALT_BAR_ERR_BASE_INDEX; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_INDEX); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_SETUP_BARS_M_ALT_BAR_ERR_SIZE_INDEX; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE_INDEX); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MCS_POS, &GROUP_INDEX_A, &GROUP_INDEX_B}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_MCS_POS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCS_POS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_GROUP_INDEX_A; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP_INDEX_A); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_GROUP_INDEX_B; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP_INDEX_B); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_CEN_REF_CLK_ENABLE_SWIZZLE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_REF_CLK_ENABLE_SWIZZLE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_REF_CLK_ENABLE_SWIZZLE_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PROC_TARGET, &CENTAUR_POSITION, &REFCLOCK_BIT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_REF_CLK_ENABLE_SWIZZLE_ERR_PROC_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PROC_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_REF_CLK_ENABLE_SWIZZLE_ERR_CENTAUR_POSITION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CENTAUR_POSITION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_REF_CLK_ENABLE_SWIZZLE_ERR_REFCLOCK_BIT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REFCLOCK_BIT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_CEN_REF_CLK_ENABLE_CONFIG_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_REF_CLK_ENABLE_CONFIG_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_REF_CLK_ENABLE_CONFIG_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PROC_TARGET, &CONFIGURED_CENTAUR_POSITIONS, &ATTACHED_CENTAUR_POSITIONS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_REF_CLK_ENABLE_CONFIG_ERR_PROC_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PROC_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_REF_CLK_ENABLE_CONFIG_ERR_CONFIGURED_CENTAUR_POSITIONS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CONFIGURED_CENTAUR_POSITIONS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_CEN_REF_CLK_ENABLE_CONFIG_ERR_ATTACHED_CENTAUR_POSITIONS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTACHED_CENTAUR_POSITIONS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_CDIMM_INVALID_NUMBER_SENSORS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CDIMM_INVALID_NUMBER_SENSORS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_CDIMM_INVALID_NUMBER_SENSORS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEM_CHIP); \
\
{ \
  const void * l_objects[] = {&FFDC_DATA_1, &FFDC_DATA_2, &MEM_CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_CDIMM_INVALID_NUMBER_SENSORS_FFDC_DATA_1; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_1); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_CDIMM_INVALID_NUMBER_SENSORS_FFDC_DATA_2; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_2); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&IMP, &PORT, &DIMM, &RANK, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR_IMP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR_PORT; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR_DIMM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR_RANK; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA_ERROR); \
\
{ \
  const void * l_objects[] = {&IMP, &PORT, &DIMM, &RANK, &TARGET_MBA_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR_IMP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR_PORT; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR_DIMM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR_RANK; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 4; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA, &MBMACA, &MBAFIR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR_MBA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR_MBMACA; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMACA); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR_MBAFIR; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBAFIR); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[3].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[3].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); \
\
{ \
  const void * l_objects[] = {&MBMCT, &MBMACA, &MBASCTL, &MBMCC, &MBMSR, &MBAFIR, &MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_MBMCT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_MBMACA; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMACA); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_MBASCTL; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBASCTL); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_MBMCC; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCC); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_MBMSR; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMSR); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_MBAFIR; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBAFIR); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[6].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[6].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[7].target_cdg.iv_targetObjIndex = 6; \
  l_entries[7].target_cdg.iv_callout = 1; \
  l_entries[7].target_cdg.iv_deconfigure = 1; \
  l_entries[7].target_cdg.iv_gard = 1; \
  l_entries[7].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); \
fapi::fapiCheckType<const fapi::Target *>(&DIMM); \
\
{ \
  const void * l_objects[] = {&PORT_SELECT, &DIMM_SELECT, &CFG_WRDONE_DLY, &CFG_RDTAG_DLY, &MAX_CFG_RCD_PROTECTION_TIME, &MBA_FARB0, &MBACALFIR, &MBA, &DIMM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[9]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_PORT_SELECT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_SELECT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_DIMM_SELECT; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_SELECT); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_CFG_WRDONE_DLY; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CFG_WRDONE_DLY); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_CFG_RDTAG_DLY; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CFG_RDTAG_DLY); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_MAX_CFG_RCD_PROTECTION_TIME; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAX_CFG_RCD_PROTECTION_TIME); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_MBA_FARB0; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_FARB0); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_MBACALFIR; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBACALFIR); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[7].target_cdg.iv_targetObjIndex = 7; \
  l_entries[7].target_cdg.iv_callout = 1; \
  l_entries[7].target_cdg.iv_deconfigure = 1; \
  l_entries[7].target_cdg.iv_gard = 1; \
  l_entries[7].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[8].target_cdg.iv_targetObjIndex = 8; \
  l_entries[8].target_cdg.iv_callout = 1; \
  l_entries[8].target_cdg.iv_deconfigure = 1; \
  l_entries[8].target_cdg.iv_gard = 1; \
  l_entries[8].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 9); \
}

#define RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA_TARGET, &ACCESS_TYPE_PARAM, &PORT_PARAM, &RANK_PARAM, &TYPE_PARAM, &INDEX_PARAM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_MBA_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_ACCESS_TYPE_PARAM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ACCESS_TYPE_PARAM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_PORT_PARAM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_PARAM); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_RANK_PARAM; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK_PARAM); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_TYPE_PARAM; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TYPE_PARAM); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_INDEX_PARAM; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INDEX_PARAM); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[6].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[6].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_MSS_ACCESS_DELAY_REG_BAD_MBA_POS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ACCESS_DELAY_REG_BAD_MBA_POS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ACCESS_DELAY_REG_BAD_MBA_POS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA_TARGET, &MBA_POS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_BAD_MBA_POS_MBA_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_BAD_MBA_POS_MBA_POS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_ACCESS_DELAY_REG_BAD_DRAM_WIDTH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ACCESS_DELAY_REG_BAD_DRAM_WIDTH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ACCESS_DELAY_REG_BAD_DRAM_WIDTH_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA_TARGET, &DRAM_WIDTH}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_BAD_DRAM_WIDTH_MBA_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_BAD_DRAM_WIDTH_DRAM_WIDTH; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_CROSS_COUPLED_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CROSS_COUPLED_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CROSS_COUPLED_INVALID_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TYPE_PARAM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CROSS_COUPLED_INVALID_INPUT_TYPE_PARAM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TYPE_PARAM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_CROSS_COUPLED_INVALID_DQS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CROSS_COUPLED_INVALID_DQS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CROSS_COUPLED_INVALID_DQS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&INVALID_DQS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CROSS_COUPLED_INVALID_DQS_INVALID_DQS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_DQS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_ROSETTA_MAP_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ROSETTA_MAP_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_ROSETTA_MAP_INVALID_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA_TARGET, &PORT_PARAM, &TYPE_PARAM, &INDEX_PARAM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_ROSETTA_MAP_INVALID_INPUT_MBA_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_ROSETTA_MAP_INVALID_INPUT_PORT_PARAM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_PARAM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_ROSETTA_MAP_INVALID_INPUT_TYPE_PARAM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TYPE_PARAM); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_ROSETTA_MAP_INVALID_INPUT_INDEX_PARAM; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INDEX_PARAM); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_ROSETTA_MAP_BAD_SWIZZLE_VALUE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ROSETTA_MAP_BAD_SWIZZLE_VALUE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_ROSETTA_MAP_BAD_SWIZZLE_VALUE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&SWIZZLE_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_ROSETTA_MAP_BAD_SWIZZLE_VALUE_SWIZZLE_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SWIZZLE_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_ROSETTA_MAP_BAD_MBA_POS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ROSETTA_MAP_BAD_MBA_POS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_ROSETTA_MAP_BAD_MBA_POS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA_TARGET, &MBA_POS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_ROSETTA_MAP_BAD_MBA_POS_MBA_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_ROSETTA_MAP_BAD_MBA_POS_MBA_POS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_C4_PHY_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_C4_PHY_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_C4_PHY_INVALID_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TYPE_PARAM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_C4_PHY_INVALID_INPUT_TYPE_PARAM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TYPE_PARAM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA_TARGET, &ACCESS_TYPE_PARAM, &PORT_PARAM, &RANK_PARAM, &TYPE_PARAM, &INDEX_PARAM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_MBA_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_ACCESS_TYPE_PARAM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ACCESS_TYPE_PARAM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_PORT_PARAM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_PARAM); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_RANK_PARAM; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK_PARAM); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_TYPE_PARAM; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TYPE_PARAM); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_INDEX_PARAM; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INDEX_PARAM); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[6].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[6].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_MBA_POS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_MBA_POS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_MBA_POS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA_TARGET, &MBA_POS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_MBA_POS_MBA_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_MBA_POS_MBA_POS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_POS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_DRAM_WIDTH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_DRAM_WIDTH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_DRAM_WIDTH_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MBA_TARGET, &DRAM_WIDTH}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_DRAM_WIDTH_MBA_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_DRAM_WIDTH_DRAM_WIDTH; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_DRV_IMPED_SHMOO_INVALID_MARGIN_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_DRV_IMPED_SHMOO_INVALID_MARGIN_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_DRV_IMPED_SHMOO_INVALID_MARGIN_DATA_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&COUNT_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_DRV_IMPED_SHMOO_INVALID_MARGIN_DATA_COUNT_DATA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(COUNT_DATA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SLEW_RATE_SHMOO_INVALID_MARGIN_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLEW_RATE_SHMOO_INVALID_MARGIN_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLEW_RATE_SHMOO_INVALID_MARGIN_DATA_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&COUNT_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_SLEW_RATE_SHMOO_INVALID_MARGIN_DATA_COUNT_DATA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(COUNT_DATA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_WR_VREF_SHMOO_INVALID_MARGIN_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_WR_VREF_SHMOO_INVALID_MARGIN_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_WR_VREF_SHMOO_INVALID_MARGIN_DATA_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&COUNT_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_WR_VREF_SHMOO_INVALID_MARGIN_DATA_COUNT_DATA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(COUNT_DATA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_RD_VREF_SHMOO_INVALID_MARGIN_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_RD_VREF_SHMOO_INVALID_MARGIN_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_RD_VREF_SHMOO_INVALID_MARGIN_DATA_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&COUNT_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_RD_VREF_SHMOO_INVALID_MARGIN_DATA_COUNT_DATA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(COUNT_DATA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_RCV_IMP_SHMOO_INVALID_MARGIN_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_RCV_IMP_SHMOO_INVALID_MARGIN_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_RCV_IMP_SHMOO_INVALID_MARGIN_DATA_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&COUNT_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_RCV_IMP_SHMOO_INVALID_MARGIN_DATA_COUNT_DATA; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(COUNT_DATA); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_PDA_NONMRS_ATTR_NAME_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_PDA_NONMRS_ATTR_NAME_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_PDA_NONMRS_ATTR_NAME_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&NONMRS_ATTR_NAME, &MBA_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_PDA_NONMRS_ATTR_NAME_NONMRS_ATTR_NAME; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NONMRS_ATTR_NAME); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_PDA_NONMRS_ATTR_NAME_MBA_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_PDA_MRS_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_PDA_MRS_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_PDA_MRS_NOT_FOUND_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MRS_VALUE, &MBA_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_PDA_MRS_NOT_FOUND_MRS_VALUE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MRS_VALUE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_PDA_MRS_NOT_FOUND_MBA_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_PDA_DRAM_DNE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_PDA_DRAM_DNE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_PDA_DRAM_DNE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PORT_VALUE, &DIMM_VALUE, &RANK_VALUE, &DRAM_VALUE, &MBA_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_PDA_DRAM_DNE_PORT_VALUE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORT_VALUE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_PDA_DRAM_DNE_DIMM_VALUE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DIMM_VALUE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_PDA_DRAM_DNE_RANK_VALUE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK_VALUE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_PDA_DRAM_DNE_DRAM_VALUE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_VALUE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_MSS_PDA_DRAM_DNE_MBA_TARGET; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA_TARGET); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_GENERIC_SHMOO_MCBIST_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GENERIC_SHMOO_MCBIST_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GENERIC_SHMOO_MCBIST_FAILED_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_CHIPLET); \
\
{ \
  const void * l_objects[] = {&MBA_CHIPLET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[0].children_cdg.iv_parentObjIndex = 0; \
  l_entries[0].children_cdg.iv_callout = 1; \
  l_entries[0].children_cdg.iv_deconfigure = 1; \
  l_entries[0].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[0].children_cdg.iv_childPort = MBA_PORT_NUMBER; \
  l_entries[0].children_cdg.iv_childNumber = MBA_DIMM_NUMBER; \
  l_entries[0].children_cdg.iv_gard = 0; \
  l_entries[0].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_CFG_MCB_TEST_MEM_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CFG_MCB_TEST_MEM_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CFG_MCB_TEST_MEM_INVALID_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TEST_TYPE_PARAM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CFG_MCB_TEST_MEM_INVALID_INPUT_TEST_TYPE_PARAM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TEST_TYPE_PARAM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_CFG_MCB_DGEN_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CFG_MCB_DGEN_INVALID_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CFG_MCB_DGEN_INVALID_INPUT_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&DATA_MODE_PARAM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CFG_MCB_DGEN_INVALID_INPUT_DATA_MODE_PARAM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_MODE_PARAM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_INVALID_DDR4_SPD_TB_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INVALID_DDR4_SPD_TB_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INVALID_DDR4_SPD_TB_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_DIMM); \
\
{ \
  const void * l_objects[] = {&TARGET_DIMM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_INCOMPATABLE_SPD_DRAM_GEN_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_SPD_DRAM_GEN_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_SPD_DRAM_GEN_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_DIMM); \
\
{ \
  const void * l_objects[] = {&TARGET_DIMM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_INVALID_RDIMM_FREQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INVALID_RDIMM_FREQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INVALID_RDIMM_FREQ_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&INVALID_RDIMM_FREQ, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INVALID_RDIMM_FREQ_INVALID_RDIMM_FREQ; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_RDIMM_FREQ); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_INVALID_RDIMM_VOLT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INVALID_RDIMM_VOLT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INVALID_RDIMM_VOLT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&INVALID_RDIMM_VOLT, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INVALID_RDIMM_VOLT_INVALID_RDIMM_VOLT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_RDIMM_VOLT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&INVALID_RDIMM_RCD_IBT_U32ARRAY_0_0, &INVALID_RDIMM_RCD_IBT_U32ARRAY_0_1, &INVALID_RDIMM_RCD_IBT_U32ARRAY_1_0, &INVALID_RDIMM_RCD_IBT_U32ARRAY_1_1, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT_INVALID_RDIMM_RCD_IBT_U32ARRAY_0_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_RDIMM_RCD_IBT_U32ARRAY_0_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT_INVALID_RDIMM_RCD_IBT_U32ARRAY_0_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_RDIMM_RCD_IBT_U32ARRAY_0_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT_INVALID_RDIMM_RCD_IBT_U32ARRAY_1_0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_RDIMM_RCD_IBT_U32ARRAY_1_0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT_INVALID_RDIMM_RCD_IBT_U32ARRAY_1_1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_RDIMM_RCD_IBT_U32ARRAY_1_1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[5].children_cdg.iv_parentObjIndex = 4; \
  l_entries[5].children_cdg.iv_callout = 1; \
  l_entries[5].children_cdg.iv_deconfigure = 1; \
  l_entries[5].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[5].children_cdg.iv_childPort = 255; \
  l_entries[5].children_cdg.iv_childNumber = 255; \
  l_entries[5].children_cdg.iv_gard = 0; \
  l_entries[5].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_0_0, &INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_0_1, &INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_1_0, &INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_1_1, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING_INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_0_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_0_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING_INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_0_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_0_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING_INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_1_0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_1_0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING_INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_1_1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_1_1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[5].children_cdg.iv_parentObjIndex = 4; \
  l_entries[5].children_cdg.iv_callout = 1; \
  l_entries[5].children_cdg.iv_deconfigure = 1; \
  l_entries[5].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[5].children_cdg.iv_childPort = 255; \
  l_entries[5].children_cdg.iv_childNumber = 255; \
  l_entries[5].children_cdg.iv_gard = 0; \
  l_entries[5].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_EFF_CONFIG_LRDIMM_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_LRDIMM_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_LRDIMM_INVALID_EXEC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_CONFIG_INVALID_TERM_EXEC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INVALID_TERM_EXEC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INVALID_TERM_EXEC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_CONFIG_DDR4_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DDR4_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DDR4_INVALID_EXEC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_CONFIG_MISMATCH_EMPTY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_MISMATCH_EMPTY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_MISMATCH_EMPTY_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&CUR_DIMM_SPD_VALID_U8ARRAY_0_0, &CUR_DIMM_SPD_VALID_U8ARRAY_0_1, &CUR_DIMM_SPD_VALID_U8ARRAY_1_0, &CUR_DIMM_SPD_VALID_U8ARRAY_1_1, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MISMATCH_EMPTY_CUR_DIMM_SPD_VALID_U8ARRAY_0_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CUR_DIMM_SPD_VALID_U8ARRAY_0_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MISMATCH_EMPTY_CUR_DIMM_SPD_VALID_U8ARRAY_0_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CUR_DIMM_SPD_VALID_U8ARRAY_0_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MISMATCH_EMPTY_CUR_DIMM_SPD_VALID_U8ARRAY_1_0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CUR_DIMM_SPD_VALID_U8ARRAY_1_0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MISMATCH_EMPTY_CUR_DIMM_SPD_VALID_U8ARRAY_1_1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CUR_DIMM_SPD_VALID_U8ARRAY_1_1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[5].children_cdg.iv_parentObjIndex = 4; \
  l_entries[5].children_cdg.iv_callout = 1; \
  l_entries[5].children_cdg.iv_deconfigure = 1; \
  l_entries[5].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[5].children_cdg.iv_childPort = 255; \
  l_entries[5].children_cdg.iv_childNumber = 255; \
  l_entries[5].children_cdg.iv_gard = 0; \
  l_entries[5].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_EFF_CONFIG_MISMATCH_SIDE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_MISMATCH_SIDE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_MISMATCH_SIDE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&CUR_DIMM_SPD_VALID_U8ARRAY_0_0, &CUR_DIMM_SPD_VALID_U8ARRAY_0_1, &CUR_DIMM_SPD_VALID_U8ARRAY_1_0, &CUR_DIMM_SPD_VALID_U8ARRAY_1_1, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MISMATCH_SIDE_CUR_DIMM_SPD_VALID_U8ARRAY_0_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CUR_DIMM_SPD_VALID_U8ARRAY_0_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MISMATCH_SIDE_CUR_DIMM_SPD_VALID_U8ARRAY_0_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CUR_DIMM_SPD_VALID_U8ARRAY_0_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MISMATCH_SIDE_CUR_DIMM_SPD_VALID_U8ARRAY_1_0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CUR_DIMM_SPD_VALID_U8ARRAY_1_0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MISMATCH_SIDE_CUR_DIMM_SPD_VALID_U8ARRAY_1_1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CUR_DIMM_SPD_VALID_U8ARRAY_1_1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[5].children_cdg.iv_parentObjIndex = 4; \
  l_entries[5].children_cdg.iv_callout = 1; \
  l_entries[5].children_cdg.iv_deconfigure = 1; \
  l_entries[5].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[5].children_cdg.iv_childPort = 255; \
  l_entries[5].children_cdg.iv_childNumber = 255; \
  l_entries[5].children_cdg.iv_gard = 0; \
  l_entries[5].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_EFF_CONFIG_MISMATCH_TOP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_MISMATCH_TOP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_MISMATCH_TOP_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&CUR_DIMM_SPD_VALID_U8ARRAY_0_0, &CUR_DIMM_SPD_VALID_U8ARRAY_0_1, &CUR_DIMM_SPD_VALID_U8ARRAY_1_0, &CUR_DIMM_SPD_VALID_U8ARRAY_1_1, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MISMATCH_TOP_CUR_DIMM_SPD_VALID_U8ARRAY_0_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CUR_DIMM_SPD_VALID_U8ARRAY_0_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MISMATCH_TOP_CUR_DIMM_SPD_VALID_U8ARRAY_0_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CUR_DIMM_SPD_VALID_U8ARRAY_0_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MISMATCH_TOP_CUR_DIMM_SPD_VALID_U8ARRAY_1_0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CUR_DIMM_SPD_VALID_U8ARRAY_1_0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MISMATCH_TOP_CUR_DIMM_SPD_VALID_U8ARRAY_1_1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CUR_DIMM_SPD_VALID_U8ARRAY_1_1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[5].children_cdg.iv_parentObjIndex = 4; \
  l_entries[5].children_cdg.iv_callout = 1; \
  l_entries[5].children_cdg.iv_deconfigure = 1; \
  l_entries[5].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[5].children_cdg.iv_childPort = 255; \
  l_entries[5].children_cdg.iv_childNumber = 255; \
  l_entries[5].children_cdg.iv_gard = 0; \
  l_entries[5].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&DRAM_DEVICE_TYPE_0_0, &DRAM_DEVICE_TYPE_0_1, &DRAM_DEVICE_TYPE_1_0, &DRAM_DEVICE_TYPE_1_1, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN_DRAM_DEVICE_TYPE_0_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_DEVICE_TYPE_0_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN_DRAM_DEVICE_TYPE_0_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_DEVICE_TYPE_0_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN_DRAM_DEVICE_TYPE_1_0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_DEVICE_TYPE_1_0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN_DRAM_DEVICE_TYPE_1_1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_DEVICE_TYPE_1_1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[5].children_cdg.iv_parentObjIndex = 4; \
  l_entries[5].children_cdg.iv_callout = 1; \
  l_entries[5].children_cdg.iv_deconfigure = 1; \
  l_entries[5].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[5].children_cdg.iv_childPort = 255; \
  l_entries[5].children_cdg.iv_childNumber = 255; \
  l_entries[5].children_cdg.iv_gard = 0; \
  l_entries[5].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&MODULE_TYPE_0_0, &MODULE_TYPE_0_1, &MODULE_TYPE_1_0, &MODULE_TYPE_1_1, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE_MODULE_TYPE_0_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODULE_TYPE_0_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE_MODULE_TYPE_0_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODULE_TYPE_0_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE_MODULE_TYPE_1_0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODULE_TYPE_1_0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE_MODULE_TYPE_1_1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODULE_TYPE_1_1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[5].children_cdg.iv_parentObjIndex = 4; \
  l_entries[5].children_cdg.iv_callout = 1; \
  l_entries[5].children_cdg.iv_deconfigure = 1; \
  l_entries[5].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[5].children_cdg.iv_childPort = 255; \
  l_entries[5].children_cdg.iv_childNumber = 255; \
  l_entries[5].children_cdg.iv_gard = 0; \
  l_entries[5].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&NUM_RANKS_0_0, &NUM_RANKS_0_1, &NUM_RANKS_1_0, &NUM_RANKS_1_1, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS_NUM_RANKS_0_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NUM_RANKS_0_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS_NUM_RANKS_0_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NUM_RANKS_0_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS_NUM_RANKS_1_0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NUM_RANKS_1_0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS_NUM_RANKS_1_1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NUM_RANKS_1_1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[5].children_cdg.iv_parentObjIndex = 4; \
  l_entries[5].children_cdg.iv_callout = 1; \
  l_entries[5].children_cdg.iv_deconfigure = 1; \
  l_entries[5].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[5].children_cdg.iv_childPort = 255; \
  l_entries[5].children_cdg.iv_childNumber = 255; \
  l_entries[5].children_cdg.iv_gard = 0; \
  l_entries[5].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&SDRAM_BANKS_0_0, &SDRAM_BANKS_0_1, &SDRAM_BANKS_1_0, &SDRAM_BANKS_1_1, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS_SDRAM_BANKS_0_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_BANKS_0_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS_SDRAM_BANKS_0_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_BANKS_0_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS_SDRAM_BANKS_1_0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_BANKS_1_0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS_SDRAM_BANKS_1_1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_BANKS_1_1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[5].children_cdg.iv_parentObjIndex = 4; \
  l_entries[5].children_cdg.iv_callout = 1; \
  l_entries[5].children_cdg.iv_deconfigure = 1; \
  l_entries[5].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[5].children_cdg.iv_childPort = 255; \
  l_entries[5].children_cdg.iv_childNumber = 255; \
  l_entries[5].children_cdg.iv_gard = 0; \
  l_entries[5].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&SDRAM_ROWS_0_0, &SDRAM_ROWS_0_1, &SDRAM_ROWS_1_0, &SDRAM_ROWS_1_1, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS_SDRAM_ROWS_0_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_ROWS_0_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS_SDRAM_ROWS_0_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_ROWS_0_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS_SDRAM_ROWS_1_0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_ROWS_1_0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS_SDRAM_ROWS_1_1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_ROWS_1_1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[5].children_cdg.iv_parentObjIndex = 4; \
  l_entries[5].children_cdg.iv_callout = 1; \
  l_entries[5].children_cdg.iv_deconfigure = 1; \
  l_entries[5].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[5].children_cdg.iv_childPort = 255; \
  l_entries[5].children_cdg.iv_childNumber = 255; \
  l_entries[5].children_cdg.iv_gard = 0; \
  l_entries[5].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&SDRAM_COLS_0_0, &SDRAM_COLS_0_1, &SDRAM_COLS_1_0, &SDRAM_COLS_1_1, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS_SDRAM_COLS_0_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_COLS_0_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS_SDRAM_COLS_0_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_COLS_0_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS_SDRAM_COLS_1_0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_COLS_1_0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS_SDRAM_COLS_1_1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_COLS_1_1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[5].children_cdg.iv_parentObjIndex = 4; \
  l_entries[5].children_cdg.iv_callout = 1; \
  l_entries[5].children_cdg.iv_deconfigure = 1; \
  l_entries[5].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[5].children_cdg.iv_childPort = 255; \
  l_entries[5].children_cdg.iv_childNumber = 255; \
  l_entries[5].children_cdg.iv_gard = 0; \
  l_entries[5].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&BUS_WIDTH_0_0, &BUS_WIDTH_0_1, &BUS_WIDTH_1_0, &BUS_WIDTH_1_1, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH_BUS_WIDTH_0_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BUS_WIDTH_0_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH_BUS_WIDTH_0_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BUS_WIDTH_0_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH_BUS_WIDTH_1_0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BUS_WIDTH_1_0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH_BUS_WIDTH_1_1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BUS_WIDTH_1_1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[5].children_cdg.iv_parentObjIndex = 4; \
  l_entries[5].children_cdg.iv_callout = 1; \
  l_entries[5].children_cdg.iv_deconfigure = 1; \
  l_entries[5].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[5].children_cdg.iv_childPort = 255; \
  l_entries[5].children_cdg.iv_childNumber = 255; \
  l_entries[5].children_cdg.iv_gard = 0; \
  l_entries[5].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_EFF_CONFIG_UNSUPPORTED_MODULE_MEMORY_BUS_WIDTH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_UNSUPPORTED_MODULE_MEMORY_BUS_WIDTH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_UNSUPPORTED_MODULE_MEMORY_BUS_WIDTH_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&MODULE_MEMORY_BUS_WIDTH, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_UNSUPPORTED_MODULE_MEMORY_BUS_WIDTH_MODULE_MEMORY_BUS_WIDTH; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODULE_MEMORY_BUS_WIDTH); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&DRAM_WIDTH_0_0, &DRAM_WIDTH_0_1, &DRAM_WIDTH_1_0, &DRAM_WIDTH_1_1, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH_DRAM_WIDTH_0_0; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH_0_0); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH_DRAM_WIDTH_0_1; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH_0_1); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH_DRAM_WIDTH_1_0; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH_1_0); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH_DRAM_WIDTH_1_1; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH_1_1); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[5].children_cdg.iv_parentObjIndex = 4; \
  l_entries[5].children_cdg.iv_callout = 1; \
  l_entries[5].children_cdg.iv_deconfigure = 1; \
  l_entries[5].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[5].children_cdg.iv_childPort = 255; \
  l_entries[5].children_cdg.iv_childNumber = 255; \
  l_entries[5].children_cdg.iv_gard = 0; \
  l_entries[5].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_MSS_EFF_CONFIG_DRAM_DEVICE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DRAM_DEVICE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DRAM_DEVICE_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&DRAM_DEVICE_TYPE, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_DRAM_DEVICE_ERROR_DRAM_DEVICE_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_DEVICE_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_MOD_TYPE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_MOD_TYPE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_MOD_TYPE_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&MOD_TYPE, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MOD_TYPE_ERROR_MOD_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MOD_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_SDRAM_BANK_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_SDRAM_BANK_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_SDRAM_BANK_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&SDRAM_BANKS, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_SDRAM_BANK_ERROR_SDRAM_BANKS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_BANKS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_SDRAM_ROWS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_SDRAM_ROWS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_SDRAM_ROWS_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&SDRAM_ROWS, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_SDRAM_ROWS_ERROR_SDRAM_ROWS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_ROWS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_SDRAM_COLS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_SDRAM_COLS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_SDRAM_COLS_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&SDRAM_COLS, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_SDRAM_COLS_ERROR_SDRAM_COLS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_COLS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_DRAM_WIDTH_16_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DRAM_WIDTH_16_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DRAM_WIDTH_16_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&DRAM_WIDTH, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_DRAM_WIDTH_16_ERROR_DRAM_WIDTH; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_DRAM_WIDTH_32_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DRAM_WIDTH_32_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DRAM_WIDTH_32_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&DRAM_WIDTH, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_DRAM_WIDTH_32_ERROR_DRAM_WIDTH; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_DRAM_WIDTH_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DRAM_WIDTH_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DRAM_WIDTH_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[1].children_cdg.iv_parentObjIndex = 0; \
  l_entries[1].children_cdg.iv_callout = 1; \
  l_entries[1].children_cdg.iv_deconfigure = 1; \
  l_entries[1].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[1].children_cdg.iv_childPort = 255; \
  l_entries[1].children_cdg.iv_childNumber = 255; \
  l_entries[1].children_cdg.iv_gard = 0; \
  l_entries[1].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_DRAM_DENSITY_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DRAM_DENSITY_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DRAM_DENSITY_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&SDRAM_DENSITY, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_DRAM_DENSITY_ERR_SDRAM_DENSITY; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SDRAM_DENSITY); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_CWL_CALC_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_CWL_CALC_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_CWL_CALC_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&CWL_VAL, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_CWL_CALC_ERR_CWL_VAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CWL_VAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_RDIMM_UNSUPPORTED_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RDIMM_UNSUPPORTED_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RDIMM_UNSUPPORTED_TYPE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&UNSUPPORTED_VAL, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_RDIMM_UNSUPPORTED_TYPE_UNSUPPORTED_VAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNSUPPORTED_VAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_UDIMM_UNSUPPORTED_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_UDIMM_UNSUPPORTED_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_UDIMM_UNSUPPORTED_TYPE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&UNSUPPORTED_VAL, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_UDIMM_UNSUPPORTED_TYPE_UNSUPPORTED_VAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNSUPPORTED_VAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_DIMM_UNSUPPORTED_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DIMM_UNSUPPORTED_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_DIMM_UNSUPPORTED_TYPE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&UNSUPPORTED_VAL, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_DIMM_UNSUPPORTED_TYPE_UNSUPPORTED_VAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNSUPPORTED_VAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_MSS_FREQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_MSS_FREQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_MSS_FREQ_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&FREQ_VAL, &TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_CONFIG_MSS_FREQ_FREQ_VAL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_VAL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CHILDREN_CDG; \
  l_entries[2].children_cdg.iv_parentObjIndex = 1; \
  l_entries[2].children_cdg.iv_callout = 1; \
  l_entries[2].children_cdg.iv_deconfigure = 1; \
  l_entries[2].children_cdg.iv_childType = fapi::TARGET_TYPE_DIMM; \
  l_entries[2].children_cdg.iv_childPort = 255; \
  l_entries[2].children_cdg.iv_childNumber = 255; \
  l_entries[2].children_cdg.iv_gard = 0; \
  l_entries[2].children_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_EFF_CONFIG_RANK_GROUP_NON_MATCH_RANKS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RANK_GROUP_NON_MATCH_RANKS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RANK_GROUP_NON_MATCH_RANKS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_RANK_GROUP_NUM_RANKS_NEQ1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RANK_GROUP_NUM_RANKS_NEQ1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RANK_GROUP_NUM_RANKS_NEQ1_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_RANK_GROUP_NO_MATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RANK_GROUP_NO_MATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RANK_GROUP_NO_MATCH_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::MEMORY_PLUGGING_ERROR; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_REWRITE_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_REWRITE_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_REWRITE_INVALID_EXEC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_TERM_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_TERM_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_TERM_INVALID_EXEC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_DDR4_TERM_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_DDR4_TERM_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_DDR4_TERM_INVALID_EXEC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_DDR4_TERM_ATTS_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_DDR4_TERM_ATTS_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_DDR4_TERM_ATTS_INVALID_EXEC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_CREATE_DB_DDR4_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_CREATE_DB_DDR4_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_CREATE_DB_DDR4_INVALID_EXEC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_CREATE_RCD_DDR4_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_CREATE_RCD_DDR4_INVALID_EXEC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_CREATE_RCD_DDR4_INVALID_EXEC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_FREQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_FREQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_FREQ_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_DIMM_USE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_DIMM_USE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_DIMM_USE_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1333Mbps_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1333Mbps_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1333Mbps_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1600Mbps_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1600Mbps_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1600Mbps_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1333Mbps_MBA1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1333Mbps_MBA1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1333Mbps_MBA1_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1600Mbps_MBA1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1600Mbps_MBA1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1600Mbps_MBA1_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_B4_1600Mbps_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_B4_1600Mbps_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_B4_1600Mbps_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_1600Mbps_MBA0_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_1600Mbps_MBA0_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_1600Mbps_MBA0_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_MBA0_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_MBA0_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_MBA0_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_1600Mbps_MBA1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_1600Mbps_MBA1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_1600Mbps_MBA1_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_MBA1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_MBA1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_MBA1_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA0_1333Mbps_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA0_1333Mbps_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA0_1333Mbps_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA0_1600Mbps_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA0_1600Mbps_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA0_1600Mbps_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1066Mbps_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1066Mbps_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1066Mbps_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1333Mbps_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1333Mbps_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1333Mbps_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1600Mbps_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1600Mbps_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1600Mbps_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_LRDIMM_MBA1_1333Mbps_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_LRDIMM_MBA1_1333Mbps_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_LRDIMM_MBA1_1333Mbps_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_LRDIMM_MBA1_1600Mbps_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_LRDIMM_MBA1_1600Mbps_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_LRDIMM_MBA1_1600Mbps_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_ERROR_RETRIEVING_DIMMS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_ERROR_RETRIEVING_DIMMS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_ERROR_RETRIEVING_DIMMS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_SETTING_LRDIMM_TERM_ATTRS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_SETTING_LRDIMM_TERM_ATTRS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_SETTING_LRDIMM_TERM_ATTRS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_ODT_RD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_ODT_RD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_ODT_RD_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_DDR4_RCD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_DDR4_RCD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_DDR4_RCD_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_TYPE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_FREQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_FREQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_FREQ_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_VOLT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_VOLT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_VOLT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_RCD_IBT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_RCD_IBT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_RCD_IBT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_RCD_MIRROR_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_RCD_MIRROR_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_RCD_MIRROR_MODE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_CARD_TYPE_RLO_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_CARD_TYPE_RLO_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_CARD_TYPE_RLO_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1333Mbps_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1333Mbps_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1333Mbps_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1600Mbps_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1600Mbps_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1600Mbps_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1333Mbps_MBA1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1333Mbps_MBA1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1333Mbps_MBA1_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1600Mbps_MBA1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1600Mbps_MBA1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1600Mbps_MBA1_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MBA); \
\
{ \
  const void * l_objects[] = {&TARGET_MBA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROCPM_BLKWKUP_CODE_BAD_OP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_BLKWKUP_CODE_BAD_OP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_BLKWKUP_CODE_BAD_OP_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&EX_TARGET, &OPERATION}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROCPM_BLKWKUP_CODE_BAD_OP_EX_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROCPM_BLKWKUP_CODE_BAD_OP_OPERATION; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OPERATION); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_P8_MAILBOX_UTILS_PROC_REFCLK_ZERO_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_P8_MAILBOX_UTILS_PROC_REFCLK_ZERO_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_P8_MAILBOX_UTILS_PROC_REFCLK_ZERO_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&REF_FREQ}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_P8_MAILBOX_UTILS_PROC_REFCLK_ZERO_ERROR_REF_FREQ; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REF_FREQ); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&BOOT_FREQ, &REF_FREQ, &DPLL_DIV, &FREQ_MULT, &MAX_BITS}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR_BOOT_FREQ; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BOOT_FREQ); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR_REF_FREQ; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REF_FREQ); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR_DPLL_DIV; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DPLL_DIV); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR_FREQ_MULT; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_MULT); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR_MAX_BITS; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAX_BITS); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[5].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[5].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define PROC_ENABLE_RECONFIG_CLEANUP_INVALID_MCS_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define PROC_ENABLE_RECONFIG_CLEANUP_INVALID_MCS_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define PROC_ENABLE_RECONFIG_CLEANUP_INVALID_MCS_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MASTER_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::PROC_ENABLE_RECONFIG_CLEANUP_INVALID_MCS_RC_MASTER_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_ENABLE_RECONFIG_CLEANUP_UNSUPPORTED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ENABLE_RECONFIG_CLEANUP_UNSUPPORTED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ENABLE_RECONFIG_CLEANUP_UNSUPPORTED_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&PROC); \
\
{ \
  const void * l_objects[] = {&PROC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define PROC_ENABLE_RECONFIG_CLEANUP_POST_RESET_MCS_UNIT_ID_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define PROC_ENABLE_RECONFIG_CLEANUP_POST_RESET_MCS_UNIT_ID_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define PROC_ENABLE_RECONFIG_CLEANUP_POST_RESET_MCS_UNIT_ID_FAIL_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::PROC_ENABLE_RECONFIG_CLEANUP_POST_RESET_MCS_UNIT_ID_FAIL_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_CEN_MEM_STARTCLOCKS_UNEXPECTED_CLOCK_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_MEM_STARTCLOCKS_UNEXPECTED_CLOCK_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_MEM_STARTCLOCKS_UNEXPECTED_CLOCK_STATUS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&MEM_CLK_STATUS_REG, &MEM_CLK_STATUS_REG_EXP_DATA, &MEMBUF_CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CEN_MEM_STARTCLOCKS_UNEXPECTED_CLOCK_STATUS_MEM_CLK_STATUS_REG; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MEM_CLK_STATUS_REG); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_CEN_MEM_STARTCLOCKS_UNEXPECTED_CLOCK_STATUS_MEM_CLK_STATUS_REG_EXP_DATA; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MEM_CLK_STATUS_REG_EXP_DATA); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[2].hw_callout.iv_hw = fapi::HwCallouts::MEM_REF_CLOCK; \
  l_entries[2].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[2].hw_callout.iv_refObjIndex = 2; \
  l_entries[2].hw_callout.iv_objPosIndex = 0xff; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_CEN_MEM_PLL_INITF_UNSUPPORTED_MSS_FREQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_MEM_PLL_INITF_UNSUPPORTED_MSS_FREQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_MEM_PLL_INITF_UNSUPPORTED_MSS_FREQ_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MSS_FREQ}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CEN_MEM_PLL_INITF_UNSUPPORTED_MSS_FREQ_MSS_FREQ; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MSS_FREQ); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_CEN_MEM_PLL_INITF_UNSUPPORTED_NEST_FREQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_MEM_PLL_INITF_UNSUPPORTED_NEST_FREQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_MEM_PLL_INITF_UNSUPPORTED_NEST_FREQ_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&NEST_FREQ}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CEN_MEM_PLL_INITF_UNSUPPORTED_NEST_FREQ_NEST_FREQ; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NEST_FREQ); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_CEN_MEM_PLL_SETUP_PLL_LOCK_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_MEM_PLL_SETUP_PLL_LOCK_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_MEM_PLL_SETUP_PLL_LOCK_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEMBUF_CHIP_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&CFAM_FSI_STATUS, &MEMBUF_CHIP_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CEN_MEM_PLL_SETUP_PLL_LOCK_TIMEOUT_CFAM_FSI_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CFAM_FSI_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[1].hw_callout.iv_hw = fapi::HwCallouts::MEM_REF_CLOCK; \
  l_entries[1].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[1].hw_callout.iv_refObjIndex = 1; \
  l_entries[1].hw_callout.iv_objPosIndex = 0xff; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PMPROC_CHKSLW_INVALID_STATE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_CHKSLW_INVALID_STATE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_PMPROC_CHKSLW_INVALID_STATE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&EX}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_INVALID_STATE_EX; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PMPROC_CHKSLW_NOT_IN_ETR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_CHKSLW_NOT_IN_ETR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_PMPROC_CHKSLW_NOT_IN_ETR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&GP3, &PMGP0, &PMGP1, &PMERR, &PMHIST, &EX, &EX_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_NOT_IN_ETR_GP3; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GP3); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_NOT_IN_ETR_PMGP0; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP0); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_NOT_IN_ETR_PMGP1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_NOT_IN_ETR_PMERR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMERR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_NOT_IN_ETR_PMHIST; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMHIST); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_NOT_IN_ETR_EX; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 6; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&EX_IN_ERROR); \
\
{ \
  const void * l_objects[] = {&GP3, &PMGP0, &PMGP1, &PMERR, &PMHIST, &GOODHALTADDR, &EX, &EX_IN_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_GP3; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GP3); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_PMGP0; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP0); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_PMGP1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_PMERR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMERR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_PMHIST; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMHIST); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_GOODHALTADDR; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GOODHALTADDR); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_EX; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[7].target_cdg.iv_targetObjIndex = 7; \
  l_entries[7].target_cdg.iv_callout = 1; \
  l_entries[7].target_cdg.iv_deconfigure = 1; \
  l_entries[7].target_cdg.iv_gard = 1; \
  l_entries[7].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&GP3, &PMGP0, &PMGP1, &PMERR, &PMCLFIR, &EX}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_GP3; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GP3); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_PMGP0; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP0); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_PMGP1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_PMERR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMERR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_PMCLFIR; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMCLFIR); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_EX; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX); \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PMPROC_CHKSLW_EX_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_CHKSLW_EX_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_PMPROC_CHKSLW_EX_NOT_RUNNING_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&GP3, &PMGP0, &PMGP1, &PMERR, &PMHIST, &EX}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_EX_NOT_RUNNING_GP3; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GP3); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_EX_NOT_RUNNING_PMGP0; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP0); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_EX_NOT_RUNNING_PMGP1; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP1); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_EX_NOT_RUNNING_PMERR; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMERR); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_EX_NOT_RUNNING_PMHIST; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMHIST); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PMPROC_CHKSLW_EX_NOT_RUNNING_EX; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX); \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

#define RC_PROC_MCSYNC_THERMAL_RETRY_EXCEEDED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_MCSYNC_THERMAL_RETRY_EXCEEDED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_MCSYNC_THERMAL_RETRY_EXCEEDED_ADD_ERROR_INFO(RC) 

#define RC_MSS_POWER_CLEANUP_MBA0_UNEXPECTED_BAD_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_POWER_CLEANUP_MBA0_UNEXPECTED_BAD_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_POWER_CLEANUP_MBA0_UNEXPECTED_BAD_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_CHIPLET); \
\
{ \
  const void * l_objects[] = {&MBA_CHIPLET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_POWER_CLEANUP_MBA1_UNEXPECTED_BAD_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_POWER_CLEANUP_MBA1_UNEXPECTED_BAD_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_POWER_CLEANUP_MBA1_UNEXPECTED_BAD_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA_CHIPLET); \
\
{ \
  const void * l_objects[] = {&MBA_CHIPLET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_POWER_CLEANUP_FENCING_UNEXPECTED_BAD_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_POWER_CLEANUP_FENCING_UNEXPECTED_BAD_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_POWER_CLEANUP_FENCING_UNEXPECTED_BAD_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CENTAUR); \
\
{ \
  const void * l_objects[] = {&CENTAUR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_POWER_CLEANUP_CENTAUR_UNEXPECTED_BAD_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_POWER_CLEANUP_CENTAUR_UNEXPECTED_BAD_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_POWER_CLEANUP_CENTAUR_UNEXPECTED_BAD_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CENTAUR); \
\
{ \
  const void * l_objects[] = {&CENTAUR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_MSS_EFF_MB_INTERLEAVE_PLUG_DECONFIG_DIMM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_MB_INTERLEAVE_PLUG_DECONFIG_DIMM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_MB_INTERLEAVE_PLUG_DECONFIG_DIMM_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM); \
\
{ \
  const void * l_objects[] = {&CASE, &DIMM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_EFF_MB_INTERLEAVE_PLUG_DECONFIG_DIMM_CASE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CASE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 0; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_MSS_LRDIMM_UNSUPPORTED_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_LRDIMM_UNSUPPORTED_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_LRDIMM_UNSUPPORTED_TYPE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&DIMM); \
\
{ \
  const void * l_objects[] = {&IBM_TYPE, &TARGET, &DIMM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_LRDIMM_UNSUPPORTED_TYPE_IBM_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IBM_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_LRDIMM_UNSUPPORTED_TYPE_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_LRDIMM_INVALID_MSS_FREQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_MSS_FREQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_MSS_FREQ_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&L_MSS_FREQ, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_LRDIMM_INVALID_MSS_FREQ_L_MSS_FREQ; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(L_MSS_FREQ); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_LRDIMM_INVALID_MSS_VOLT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_MSS_VOLT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_MSS_VOLT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&L_MSS_VOLT, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_LRDIMM_INVALID_MSS_VOLT_L_MSS_VOLT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(L_MSS_VOLT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&L_LRDIMM_RANK_MULT_MODE, &L_DRAM_DENSITY, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_L_LRDIMM_RANK_MULT_MODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(L_LRDIMM_RANK_MULT_MODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_L_DRAM_DENSITY; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(L_DRAM_DENSITY); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_MULT_2_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_MULT_2_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_MULT_2_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&L_LRDIMM_RANK_MULT_MODE, &L_DRAM_DENSITY, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_MULT_2_L_LRDIMM_RANK_MULT_MODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(L_LRDIMM_RANK_MULT_MODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_MULT_2_L_DRAM_DENSITY; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(L_DRAM_DENSITY); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 2; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_MSS_LRDIMM_INVALID_SPD_DRV_IMP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_SPD_DRV_IMP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_SPD_DRV_IMP_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&L_DRAM_RON, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_LRDIMM_INVALID_SPD_DRV_IMP_L_DRAM_RON; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(L_DRAM_RON); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_LRDIMM_INVALID_SPD_RTT_NOM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_SPD_RTT_NOM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_SPD_RTT_NOM_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&L_DRAM_RTT_NOM, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_LRDIMM_INVALID_SPD_RTT_NOM_L_DRAM_RTT_NOM; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(L_DRAM_RTT_NOM); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_LRDIMM_INVALID_SPD_RTT_WR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_SPD_RTT_WR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_SPD_RTT_WR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&L_DRAM_RTT_WR, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_LRDIMM_INVALID_SPD_RTT_WR_L_DRAM_RTT_WR; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(L_DRAM_RTT_WR); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_MSS_LRDIMM_INVALID_RANK_MULT_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_RANK_MULT_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_LRDIMM_INVALID_RANK_MULT_MODE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&L_LRDIMM_RANK_MULT_MODE, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_MSS_LRDIMM_INVALID_RANK_MULT_MODE_L_LRDIMM_RANK_MULT_MODE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(L_LRDIMM_RANK_MULT_MODE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 1; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define IO_GCR_WRITE_MISMATCH_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_GCR_WRITE_MISMATCH_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_GCR_WRITE_MISMATCH_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&READ_BUF, &WRITE_BUF}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_GCR_WRITE_MISMATCH_RC_READ_BUF; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(READ_BUF); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_GCR_WRITE_MISMATCH_RC_WRITE_BUF; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(WRITE_BUF); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define IO_RUN_TRAINING_SET_PLL_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_SET_PLL_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_SET_PLL_INVALID_INVOCATION_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_RUN_TRAINING_SET_PLL_INVALID_INVOCATION_RC_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_RUN_TRAINING_POST_TRAINING_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_POST_TRAINING_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_POST_TRAINING_INVALID_INVOCATION_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_RUN_TRAINING_POST_TRAINING_INVALID_INVOCATION_RC_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_RUN_TRAINING_CHECK_DLL_VAL_OUT_OF_BOUND_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_CHECK_DLL_VAL_OUT_OF_BOUND_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_CHECK_DLL_VAL_OUT_OF_BOUND_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&DLL_REG, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_RUN_TRAINING_CHECK_DLL_VAL_OUT_OF_BOUND_RC_DLL_REG; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DLL_REG); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_RUN_TRAINING_CHECK_DLL_WORKAROUND_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_CHECK_DLL_WORKAROUND_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_CHECK_DLL_WORKAROUND_FAIL_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&DLL_REG, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_RUN_TRAINING_CHECK_DLL_WORKAROUND_FAIL_DLL_REG; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DLL_REG); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_RUN_TRAINING_FIR_MAX_SPARES_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FIR_MAX_SPARES_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FIR_MAX_SPARES_EXCEEDED_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_TARGET); \
\
{ \
  const void * l_objects[] = {&CHIP_TARGET, &SPARE_ERROR_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_RUN_TRAINING_FIR_MAX_SPARES_EXCEEDED_RC_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_RUN_TRAINING_FIR_MAX_SPARES_EXCEEDED_RC_SPARE_ERROR_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SPARE_ERROR_REG); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 0; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define IO_RUN_TRAINING_INVALID_TARGET_PAIR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_INVALID_TARGET_PAIR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_INVALID_TARGET_PAIR_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&MASTER_TARGET, &SLAVE_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_RUN_TRAINING_INVALID_TARGET_PAIR_RC_MASTER_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_RUN_TRAINING_INVALID_TARGET_PAIR_RC_SLAVE_TARGET; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_TARGET); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define IO_FUNCS_WIRETEST_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_WIRETEST_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_WIRETEST_TIMEOUT_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
\
{ \
  const void * l_objects[] = {&FFDC_NUM_CYCLES, &MASTER_CHIP_INTERFACE, &MASTER_GROUP, &SLAVE_CHIP_INTERFACE, &SLAVE_GROUP, &MASTER_TARGET, &SLAVE_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_TIMEOUT_RC_FFDC_NUM_CYCLES; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_NUM_CYCLES); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_TIMEOUT_RC_MASTER_CHIP_INTERFACE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_INTERFACE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_TIMEOUT_RC_MASTER_GROUP; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_GROUP); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_TIMEOUT_RC_SLAVE_CHIP_INTERFACE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_CHIP_INTERFACE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_TIMEOUT_RC_SLAVE_GROUP; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_GROUP); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[5].bus_callout.iv_endpoint1ObjIndex = 5; \
  l_entries[5].bus_callout.iv_endpoint2ObjIndex = 6; \
  l_entries[5].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 6; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[7].target_cdg.iv_targetObjIndex = 5; \
  l_entries[7].target_cdg.iv_callout = 1; \
  l_entries[7].target_cdg.iv_deconfigure = 1; \
  l_entries[7].target_cdg.iv_gard = 1; \
  l_entries[7].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define IO_FUNCS_DESKEW_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_DESKEW_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_DESKEW_TIMEOUT_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
\
{ \
  const void * l_objects[] = {&FFDC_NUM_CYCLES, &MASTER_CHIP_INTERFACE, &MASTER_GROUP, &SLAVE_CHIP_INTERFACE, &SLAVE_GROUP, &MASTER_TARGET, &SLAVE_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_TIMEOUT_RC_FFDC_NUM_CYCLES; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_NUM_CYCLES); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_TIMEOUT_RC_MASTER_CHIP_INTERFACE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_INTERFACE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_TIMEOUT_RC_MASTER_GROUP; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_GROUP); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_TIMEOUT_RC_SLAVE_CHIP_INTERFACE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_CHIP_INTERFACE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_TIMEOUT_RC_SLAVE_GROUP; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_GROUP); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[5].bus_callout.iv_endpoint1ObjIndex = 5; \
  l_entries[5].bus_callout.iv_endpoint2ObjIndex = 6; \
  l_entries[5].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 6; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[7].target_cdg.iv_targetObjIndex = 5; \
  l_entries[7].target_cdg.iv_callout = 1; \
  l_entries[7].target_cdg.iv_deconfigure = 1; \
  l_entries[7].target_cdg.iv_gard = 1; \
  l_entries[7].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define IO_FUNCS_EYEOPT_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_EYEOPT_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_EYEOPT_TIMEOUT_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
\
{ \
  const void * l_objects[] = {&FFDC_NUM_CYCLES, &MASTER_CHIP_INTERFACE, &MASTER_GROUP, &SLAVE_CHIP_INTERFACE, &SLAVE_GROUP, &MASTER_TARGET, &SLAVE_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_TIMEOUT_RC_FFDC_NUM_CYCLES; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_NUM_CYCLES); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_TIMEOUT_RC_MASTER_CHIP_INTERFACE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_INTERFACE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_TIMEOUT_RC_MASTER_GROUP; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_GROUP); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_TIMEOUT_RC_SLAVE_CHIP_INTERFACE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_CHIP_INTERFACE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_TIMEOUT_RC_SLAVE_GROUP; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_GROUP); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[5].bus_callout.iv_endpoint1ObjIndex = 5; \
  l_entries[5].bus_callout.iv_endpoint2ObjIndex = 6; \
  l_entries[5].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 6; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[7].target_cdg.iv_targetObjIndex = 5; \
  l_entries[7].target_cdg.iv_callout = 1; \
  l_entries[7].target_cdg.iv_deconfigure = 1; \
  l_entries[7].target_cdg.iv_gard = 1; \
  l_entries[7].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define IO_FUNCS_REPAIR_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_REPAIR_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_REPAIR_TIMEOUT_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
\
{ \
  const void * l_objects[] = {&FFDC_NUM_CYCLES, &MASTER_CHIP_INTERFACE, &MASTER_GROUP, &SLAVE_CHIP_INTERFACE, &SLAVE_GROUP, &MASTER_TARGET, &SLAVE_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_TIMEOUT_RC_FFDC_NUM_CYCLES; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_NUM_CYCLES); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_TIMEOUT_RC_MASTER_CHIP_INTERFACE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_INTERFACE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_TIMEOUT_RC_MASTER_GROUP; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_GROUP); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_TIMEOUT_RC_SLAVE_CHIP_INTERFACE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_CHIP_INTERFACE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_TIMEOUT_RC_SLAVE_GROUP; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_GROUP); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[5].bus_callout.iv_endpoint1ObjIndex = 5; \
  l_entries[5].bus_callout.iv_endpoint2ObjIndex = 6; \
  l_entries[5].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 6; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[7].target_cdg.iv_targetObjIndex = 5; \
  l_entries[7].target_cdg.iv_callout = 1; \
  l_entries[7].target_cdg.iv_deconfigure = 1; \
  l_entries[7].target_cdg.iv_gard = 1; \
  l_entries[7].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define IO_FUNCS_FUNC_MODE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_FUNC_MODE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_FUNC_MODE_TIMEOUT_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
\
{ \
  const void * l_objects[] = {&FFDC_NUM_CYCLES, &MASTER_CHIP_INTERFACE, &MASTER_GROUP, &SLAVE_CHIP_INTERFACE, &SLAVE_GROUP, &MASTER_TARGET, &SLAVE_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[8]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_FUNC_MODE_TIMEOUT_RC_FFDC_NUM_CYCLES; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_NUM_CYCLES); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_FUNC_MODE_TIMEOUT_RC_MASTER_CHIP_INTERFACE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_INTERFACE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_FUNC_MODE_TIMEOUT_RC_MASTER_GROUP; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_GROUP); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_FUNC_MODE_TIMEOUT_RC_SLAVE_CHIP_INTERFACE; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_CHIP_INTERFACE); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_FUNC_MODE_TIMEOUT_RC_SLAVE_GROUP; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_GROUP); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[5].bus_callout.iv_endpoint1ObjIndex = 5; \
  l_entries[5].bus_callout.iv_endpoint2ObjIndex = 6; \
  l_entries[5].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[6].target_cdg.iv_targetObjIndex = 6; \
  l_entries[6].target_cdg.iv_callout = 1; \
  l_entries[6].target_cdg.iv_deconfigure = 1; \
  l_entries[6].target_cdg.iv_gard = 1; \
  l_entries[6].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[7].target_cdg.iv_targetObjIndex = 5; \
  l_entries[7].target_cdg.iv_callout = 1; \
  l_entries[7].target_cdg.iv_deconfigure = 1; \
  l_entries[7].target_cdg.iv_gard = 1; \
  l_entries[7].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 8); \
}

#define IO_FUNCS_WIRETEST_FAIL_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_WIRETEST_FAIL_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_WIRETEST_FAIL_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
\
{ \
  const void * l_objects[] = {&MASTER_CHIP_INTERFACE, &MASTER_GROUP, &SLAVE_CHIP_INTERFACE, &SLAVE_GROUP, &MASTER_RX_LANE_DISABLED_VEC_0_15_PG, &MASTER_RX_LANE_DISABLED_VEC_16_31_PG, &MASTER_RX_LANE_SWAPPED_VEC_0_15_PG, &MASTER_RX_INIT_STATE_PG, &MASTER_RX_WIRETEST_STATE_PG, &MASTER_RX_WIRETEST_LANEINFO_PG, &MASTER_RX_TRAINING_STATUS_PG, &MASTER_RX_WT_CLK_STATUS_PG, &SLAVE_RX_LANE_DISABLED_VEC_0_15_PG, &SLAVE_RX_LANE_DISABLED_VEC_16_31_PG, &SLAVE_RX_LANE_SWAPPED_VEC_0_15_PG, &SLAVE_RX_INIT_STATE_PG, &SLAVE_RX_WIRETEST_STATE_PG, &SLAVE_RX_WIRETEST_LANEINFO_PG, &SLAVE_RX_TRAINING_STATUS_PG, &SLAVE_RX_WT_CLK_STATUS_PG, &MASTER_TARGET, &SLAVE_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[23]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_MASTER_CHIP_INTERFACE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_INTERFACE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_MASTER_GROUP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_GROUP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_CHIP_INTERFACE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_CHIP_INTERFACE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_GROUP; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_GROUP); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_LANE_DISABLED_VEC_0_15_PG; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_LANE_DISABLED_VEC_0_15_PG); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_LANE_DISABLED_VEC_16_31_PG; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_LANE_DISABLED_VEC_16_31_PG); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_LANE_SWAPPED_VEC_0_15_PG; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_LANE_SWAPPED_VEC_0_15_PG); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_INIT_STATE_PG; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_INIT_STATE_PG); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_WIRETEST_STATE_PG; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_WIRETEST_STATE_PG); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_WIRETEST_LANEINFO_PG; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_WIRETEST_LANEINFO_PG); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[10].ffdc.iv_ffdcObjIndex = 10; \
  l_entries[10].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_TRAINING_STATUS_PG; \
  l_entries[10].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_TRAINING_STATUS_PG); \
  l_entries[11].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[11].ffdc.iv_ffdcObjIndex = 11; \
  l_entries[11].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_WT_CLK_STATUS_PG; \
  l_entries[11].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_WT_CLK_STATUS_PG); \
  l_entries[12].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[12].ffdc.iv_ffdcObjIndex = 12; \
  l_entries[12].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_LANE_DISABLED_VEC_0_15_PG; \
  l_entries[12].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_LANE_DISABLED_VEC_0_15_PG); \
  l_entries[13].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[13].ffdc.iv_ffdcObjIndex = 13; \
  l_entries[13].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_LANE_DISABLED_VEC_16_31_PG; \
  l_entries[13].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_LANE_DISABLED_VEC_16_31_PG); \
  l_entries[14].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[14].ffdc.iv_ffdcObjIndex = 14; \
  l_entries[14].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_LANE_SWAPPED_VEC_0_15_PG; \
  l_entries[14].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_LANE_SWAPPED_VEC_0_15_PG); \
  l_entries[15].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[15].ffdc.iv_ffdcObjIndex = 15; \
  l_entries[15].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_INIT_STATE_PG; \
  l_entries[15].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_INIT_STATE_PG); \
  l_entries[16].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[16].ffdc.iv_ffdcObjIndex = 16; \
  l_entries[16].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_WIRETEST_STATE_PG; \
  l_entries[16].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_WIRETEST_STATE_PG); \
  l_entries[17].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[17].ffdc.iv_ffdcObjIndex = 17; \
  l_entries[17].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_WIRETEST_LANEINFO_PG; \
  l_entries[17].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_WIRETEST_LANEINFO_PG); \
  l_entries[18].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[18].ffdc.iv_ffdcObjIndex = 18; \
  l_entries[18].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_TRAINING_STATUS_PG; \
  l_entries[18].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_TRAINING_STATUS_PG); \
  l_entries[19].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[19].ffdc.iv_ffdcObjIndex = 19; \
  l_entries[19].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_WT_CLK_STATUS_PG; \
  l_entries[19].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_WT_CLK_STATUS_PG); \
  l_entries[20].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[20].bus_callout.iv_endpoint1ObjIndex = 20; \
  l_entries[20].bus_callout.iv_endpoint2ObjIndex = 21; \
  l_entries[20].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[21].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[21].target_cdg.iv_targetObjIndex = 21; \
  l_entries[21].target_cdg.iv_callout = 1; \
  l_entries[21].target_cdg.iv_deconfigure = 1; \
  l_entries[21].target_cdg.iv_gard = 1; \
  l_entries[21].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[22].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[22].target_cdg.iv_targetObjIndex = 20; \
  l_entries[22].target_cdg.iv_callout = 1; \
  l_entries[22].target_cdg.iv_deconfigure = 1; \
  l_entries[22].target_cdg.iv_gard = 1; \
  l_entries[22].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 23); \
}

#define IO_FUNCS_WIRETEST_FAIL_LANE_MASTER_DATA_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_WIRETEST_FAIL_LANE_MASTER_DATA_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_WIRETEST_FAIL_LANE_MASTER_DATA_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP_TARGET, &LANEID, &RX_WT_STATUS_PL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_LANE_MASTER_DATA_RC_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_LANE_MASTER_DATA_RC_LANEID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LANEID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_LANE_MASTER_DATA_RC_RX_WT_STATUS_PL; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_WT_STATUS_PL); \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define IO_FUNCS_WIRETEST_FAIL_LANE_SLAVE_DATA_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_WIRETEST_FAIL_LANE_SLAVE_DATA_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_WIRETEST_FAIL_LANE_SLAVE_DATA_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP_TARGET, &LANEID, &RX_WT_STATUS_PL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_LANE_SLAVE_DATA_RC_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_LANE_SLAVE_DATA_RC_LANEID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LANEID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_WIRETEST_FAIL_LANE_SLAVE_DATA_RC_RX_WT_STATUS_PL; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_WT_STATUS_PL); \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define IO_FUNCS_DESKEW_FAIL_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_DESKEW_FAIL_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_DESKEW_FAIL_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
\
{ \
  const void * l_objects[] = {&MASTER_CHIP_INTERFACE, &MASTER_GROUP, &SLAVE_CHIP_INTERFACE, &SLAVE_GROUP, &MASTER_RX_INIT_STATE_PG, &MASTER_RX_TRAINING_STATUS_PG, &MASTER_RX_DESKEW_STATE_PG, &MASTER_RX_LANE_BAD_0_15_PG, &MASTER_RX_LANE_BAD_16_31_PG, &SLAVE_RX_INIT_STATE_PG, &SLAVE_RX_TRAINING_STATUS_PG, &SLAVE_RX_DESKEW_STATE_PG, &SLAVE_RX_LANE_BAD_0_15_PG, &SLAVE_RX_LANE_BAD_16_31_PG, &MASTER_TARGET, &SLAVE_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[17]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_MASTER_CHIP_INTERFACE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_INTERFACE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_MASTER_GROUP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_GROUP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_SLAVE_CHIP_INTERFACE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_CHIP_INTERFACE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_SLAVE_GROUP; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_GROUP); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_MASTER_RX_INIT_STATE_PG; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_INIT_STATE_PG); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_MASTER_RX_TRAINING_STATUS_PG; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_TRAINING_STATUS_PG); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_MASTER_RX_DESKEW_STATE_PG; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_DESKEW_STATE_PG); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_MASTER_RX_LANE_BAD_0_15_PG; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_LANE_BAD_0_15_PG); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_MASTER_RX_LANE_BAD_16_31_PG; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_LANE_BAD_16_31_PG); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_SLAVE_RX_INIT_STATE_PG; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_INIT_STATE_PG); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[10].ffdc.iv_ffdcObjIndex = 10; \
  l_entries[10].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_SLAVE_RX_TRAINING_STATUS_PG; \
  l_entries[10].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_TRAINING_STATUS_PG); \
  l_entries[11].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[11].ffdc.iv_ffdcObjIndex = 11; \
  l_entries[11].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_SLAVE_RX_DESKEW_STATE_PG; \
  l_entries[11].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_DESKEW_STATE_PG); \
  l_entries[12].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[12].ffdc.iv_ffdcObjIndex = 12; \
  l_entries[12].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_SLAVE_RX_LANE_BAD_0_15_PG; \
  l_entries[12].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_LANE_BAD_0_15_PG); \
  l_entries[13].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[13].ffdc.iv_ffdcObjIndex = 13; \
  l_entries[13].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_RC_SLAVE_RX_LANE_BAD_16_31_PG; \
  l_entries[13].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_LANE_BAD_16_31_PG); \
  l_entries[14].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[14].bus_callout.iv_endpoint1ObjIndex = 14; \
  l_entries[14].bus_callout.iv_endpoint2ObjIndex = 15; \
  l_entries[14].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[15].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[15].target_cdg.iv_targetObjIndex = 15; \
  l_entries[15].target_cdg.iv_callout = 1; \
  l_entries[15].target_cdg.iv_deconfigure = 1; \
  l_entries[15].target_cdg.iv_gard = 1; \
  l_entries[15].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[16].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[16].target_cdg.iv_targetObjIndex = 14; \
  l_entries[16].target_cdg.iv_callout = 1; \
  l_entries[16].target_cdg.iv_deconfigure = 1; \
  l_entries[16].target_cdg.iv_gard = 1; \
  l_entries[16].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 17); \
}

#define IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP_TARGET, &LANEID, &RX_DESKEW_STAT_PL, &RX_STAT_PL, &RX_VREF_PL, &RX_FIFO_STAT_PL, &RX_PROT_STATUS_PL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_LANEID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LANEID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_RX_DESKEW_STAT_PL; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_DESKEW_STAT_PL); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_RX_STAT_PL; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_STAT_PL); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_RX_VREF_PL; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_VREF_PL); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_RX_FIFO_STAT_PL; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_FIFO_STAT_PL); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_RX_PROT_STATUS_PL; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_PROT_STATUS_PL); \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP_TARGET, &LANEID, &RX_DESKEW_STAT_PL, &RX_STAT_PL, &RX_VREF_PL, &RX_FIFO_STAT_PL, &RX_PROT_STATUS_PL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[7]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_LANEID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LANEID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_RX_DESKEW_STAT_PL; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_DESKEW_STAT_PL); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_RX_STAT_PL; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_STAT_PL); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_RX_VREF_PL; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_VREF_PL); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_RX_FIFO_STAT_PL; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_FIFO_STAT_PL); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_RX_PROT_STATUS_PL; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_PROT_STATUS_PL); \
  RC.addErrorInfo(l_objects, l_entries, 7); \
}

#define IO_FUNCS_EYEOPT_FAIL_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_EYEOPT_FAIL_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_EYEOPT_FAIL_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
\
{ \
  const void * l_objects[] = {&MASTER_CHIP_INTERFACE, &MASTER_GROUP, &SLAVE_CHIP_INTERFACE, &SLAVE_GROUP, &MASTER_RX_TRAINING_STATUS_PG, &MASTER_RX_EO_RECAL_PG, &MASTER_RX_LANE_BAD_0_15_PG, &MASTER_RX_LANE_BAD_16_31_PG, &SLAVE_RX_TRAINING_STATUS_PG, &SLAVE_RX_EO_RECAL_PG, &SLAVE_RX_LANE_BAD_0_15_PG, &SLAVE_RX_LANE_BAD_16_31_PG, &MASTER_TARGET, &SLAVE_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[15]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_RC_MASTER_CHIP_INTERFACE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_INTERFACE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_RC_MASTER_GROUP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_GROUP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_RC_SLAVE_CHIP_INTERFACE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_CHIP_INTERFACE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_RC_SLAVE_GROUP; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_GROUP); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_RC_MASTER_RX_TRAINING_STATUS_PG; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_TRAINING_STATUS_PG); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_RC_MASTER_RX_EO_RECAL_PG; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_EO_RECAL_PG); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_RC_MASTER_RX_LANE_BAD_0_15_PG; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_LANE_BAD_0_15_PG); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_RC_MASTER_RX_LANE_BAD_16_31_PG; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_LANE_BAD_16_31_PG); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_RC_SLAVE_RX_TRAINING_STATUS_PG; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_TRAINING_STATUS_PG); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_RC_SLAVE_RX_EO_RECAL_PG; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_EO_RECAL_PG); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[10].ffdc.iv_ffdcObjIndex = 10; \
  l_entries[10].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_RC_SLAVE_RX_LANE_BAD_0_15_PG; \
  l_entries[10].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_LANE_BAD_0_15_PG); \
  l_entries[11].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[11].ffdc.iv_ffdcObjIndex = 11; \
  l_entries[11].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_RC_SLAVE_RX_LANE_BAD_16_31_PG; \
  l_entries[11].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_LANE_BAD_16_31_PG); \
  l_entries[12].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[12].bus_callout.iv_endpoint1ObjIndex = 12; \
  l_entries[12].bus_callout.iv_endpoint2ObjIndex = 13; \
  l_entries[12].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[13].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[13].target_cdg.iv_targetObjIndex = 13; \
  l_entries[13].target_cdg.iv_callout = 1; \
  l_entries[13].target_cdg.iv_deconfigure = 1; \
  l_entries[13].target_cdg.iv_gard = 1; \
  l_entries[13].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[14].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[14].target_cdg.iv_targetObjIndex = 12; \
  l_entries[14].target_cdg.iv_callout = 1; \
  l_entries[14].target_cdg.iv_deconfigure = 1; \
  l_entries[14].target_cdg.iv_gard = 1; \
  l_entries[14].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 15); \
}

#define IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP_TARGET, &LANEID, &RX_AP_PL, &RX_AN_PL, &RX_AMIN_PL, &RX_H1_EVEN_PL, &RX_H1_ODD_PL, &RX_EYE_OPT_STATE_PL, &RX_EYE_WIDTH_STATUS_PL, &RX_DCD_ADJ_PL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[10]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_LANEID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LANEID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_AP_PL; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_AP_PL); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_AN_PL; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_AN_PL); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_AMIN_PL; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_AMIN_PL); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_H1_EVEN_PL; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_H1_EVEN_PL); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_H1_ODD_PL; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_H1_ODD_PL); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_EYE_OPT_STATE_PL; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_EYE_OPT_STATE_PL); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_EYE_WIDTH_STATUS_PL; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_EYE_WIDTH_STATUS_PL); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_DCD_ADJ_PL; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_DCD_ADJ_PL); \
  RC.addErrorInfo(l_objects, l_entries, 10); \
}

#define IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP_TARGET, &LANEID, &RX_AP_PL, &RX_AN_PL, &RX_AMIN_PL, &RX_H1_EVEN_PL, &RX_H1_ODD_PL, &RX_EYE_OPT_STATE_PL, &RX_EYE_WIDTH_STATUS_PL, &RX_DCD_ADJ_PL}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[10]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_CHIP_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_LANEID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LANEID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_AP_PL; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_AP_PL); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_AN_PL; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_AN_PL); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_AMIN_PL; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_AMIN_PL); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_H1_EVEN_PL; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_H1_EVEN_PL); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_H1_ODD_PL; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_H1_ODD_PL); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_EYE_OPT_STATE_PL; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_EYE_OPT_STATE_PL); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_EYE_WIDTH_STATUS_PL; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_EYE_WIDTH_STATUS_PL); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_DCD_ADJ_PL; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_DCD_ADJ_PL); \
  RC.addErrorInfo(l_objects, l_entries, 10); \
}

#define IO_FUNCS_REPAIR_FAIL_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_REPAIR_FAIL_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_REPAIR_FAIL_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
\
{ \
  const void * l_objects[] = {&MASTER_CHIP_INTERFACE, &MASTER_GROUP, &SLAVE_CHIP_INTERFACE, &SLAVE_GROUP, &MASTER_RX_STATIC_REPAIR_STATE_PG, &MASTER_RX_TRAINING_STATUS_PG, &MASTER_RX_BAD_LANE_ENC_GCRMSG_PG, &SLAVE_RX_STATIC_REPAIR_STATE_PG, &SLAVE_RX_TRAINING_STATUS_PG, &SLAVE_RX_BAD_LANE_ENC_GCRMSG_PG, &MASTER_TARGET, &SLAVE_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[13]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_FAIL_RC_MASTER_CHIP_INTERFACE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_INTERFACE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_FAIL_RC_MASTER_GROUP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_GROUP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_FAIL_RC_SLAVE_CHIP_INTERFACE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_CHIP_INTERFACE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_FAIL_RC_SLAVE_GROUP; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_GROUP); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_FAIL_RC_MASTER_RX_STATIC_REPAIR_STATE_PG; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_STATIC_REPAIR_STATE_PG); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_FAIL_RC_MASTER_RX_TRAINING_STATUS_PG; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_TRAINING_STATUS_PG); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_FAIL_RC_MASTER_RX_BAD_LANE_ENC_GCRMSG_PG; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_BAD_LANE_ENC_GCRMSG_PG); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_FAIL_RC_SLAVE_RX_STATIC_REPAIR_STATE_PG; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_STATIC_REPAIR_STATE_PG); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_FAIL_RC_SLAVE_RX_TRAINING_STATUS_PG; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_TRAINING_STATUS_PG); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::IO_FUNCS_REPAIR_FAIL_RC_SLAVE_RX_BAD_LANE_ENC_GCRMSG_PG; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_BAD_LANE_ENC_GCRMSG_PG); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[10].bus_callout.iv_endpoint1ObjIndex = 10; \
  l_entries[10].bus_callout.iv_endpoint2ObjIndex = 11; \
  l_entries[10].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[11].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[11].target_cdg.iv_targetObjIndex = 11; \
  l_entries[11].target_cdg.iv_callout = 1; \
  l_entries[11].target_cdg.iv_deconfigure = 1; \
  l_entries[11].target_cdg.iv_gard = 1; \
  l_entries[11].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[12].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[12].target_cdg.iv_targetObjIndex = 10; \
  l_entries[12].target_cdg.iv_callout = 1; \
  l_entries[12].target_cdg.iv_deconfigure = 1; \
  l_entries[12].target_cdg.iv_gard = 1; \
  l_entries[12].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 13); \
}

#define IO_FUNCS_FUNC_FAIL_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FUNCS_FUNC_FAIL_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FUNCS_FUNC_FAIL_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&SLAVE_TARGET); \
fapi::fapiCheckType<const fapi::Target *>(&MASTER_TARGET); \
\
{ \
  const void * l_objects[] = {&MASTER_CHIP_INTERFACE, &MASTER_GROUP, &SLAVE_CHIP_INTERFACE, &SLAVE_GROUP, &MASTER_RX_FUNC_STATE_PG, &MASTER_RX_TRAINING_STATUS_PG, &SLAVE_RX_FUNC_STATE_PG, &SLAVE_RX_TRAINING_STATUS_PG, &MASTER_TARGET, &SLAVE_TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[11]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FUNCS_FUNC_FAIL_RC_MASTER_CHIP_INTERFACE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_INTERFACE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FUNCS_FUNC_FAIL_RC_MASTER_GROUP; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_GROUP); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FUNCS_FUNC_FAIL_RC_SLAVE_CHIP_INTERFACE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_CHIP_INTERFACE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_FUNCS_FUNC_FAIL_RC_SLAVE_GROUP; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_GROUP); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::IO_FUNCS_FUNC_FAIL_RC_MASTER_RX_FUNC_STATE_PG; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_FUNC_STATE_PG); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::IO_FUNCS_FUNC_FAIL_RC_MASTER_RX_TRAINING_STATUS_PG; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_RX_TRAINING_STATUS_PG); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::IO_FUNCS_FUNC_FAIL_RC_SLAVE_RX_FUNC_STATE_PG; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_FUNC_STATE_PG); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::IO_FUNCS_FUNC_FAIL_RC_SLAVE_RX_TRAINING_STATUS_PG; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLAVE_RX_TRAINING_STATUS_PG); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_BUS_CALLOUT; \
  l_entries[8].bus_callout.iv_endpoint1ObjIndex = 8; \
  l_entries[8].bus_callout.iv_endpoint2ObjIndex = 9; \
  l_entries[8].bus_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[9].target_cdg.iv_targetObjIndex = 9; \
  l_entries[9].target_cdg.iv_callout = 1; \
  l_entries[9].target_cdg.iv_deconfigure = 1; \
  l_entries[9].target_cdg.iv_gard = 1; \
  l_entries[9].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[10].target_cdg.iv_targetObjIndex = 8; \
  l_entries[10].target_cdg.iv_callout = 1; \
  l_entries[10].target_cdg.iv_deconfigure = 1; \
  l_entries[10].target_cdg.iv_gard = 1; \
  l_entries[10].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 11); \
}

#define IO_DCCAL_OFFCAL_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_OFFCAL_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_OFFCAL_ERROR_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&CHIP_INTERFACE, &DATA_BUFFER, &FAIL_BIT, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_DCCAL_OFFCAL_ERROR_RC_CHIP_INTERFACE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_INTERFACE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_DCCAL_OFFCAL_ERROR_RC_DATA_BUFFER; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUFFER); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_DCCAL_OFFCAL_ERROR_RC_FAIL_BIT; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FAIL_BIT); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::IO_DCCAL_OFFCAL_ERROR_RC_TARGET; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[4].target_cdg.iv_targetObjIndex = 3; \
  l_entries[4].target_cdg.iv_callout = 1; \
  l_entries[4].target_cdg.iv_deconfigure = 1; \
  l_entries[4].target_cdg.iv_gard = 1; \
  l_entries[4].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define IO_DCCAL_OFFCAL_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_OFFCAL_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_OFFCAL_TIMEOUT_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&TIMEOUTCNT, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_DCCAL_OFFCAL_TIMEOUT_RC_TIMEOUTCNT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TIMEOUTCNT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_DCCAL_ZCAL_K2_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_K2_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_K2_EXCEEDED_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&K2}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_DCCAL_ZCAL_K2_EXCEEDED_RC_K2; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(K2); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_DCCAL_ZCAL_M_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_M_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_M_EXCEEDED_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&M}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_DCCAL_ZCAL_M_EXCEEDED_RC_M; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(M); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_DCCAL_ZCAL_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_ERROR_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&FAIL, &DATA_BUFFER, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_DCCAL_ZCAL_ERROR_RC_FAIL; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FAIL); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_DCCAL_ZCAL_ERROR_RC_DATA_BUFFER; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUFFER); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 2; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define IO_DCCAL_ZCAL_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_TIMEOUT_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&TIMEOUTCNT, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_DCCAL_ZCAL_TIMEOUT_RC_TIMEOUTCNT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TIMEOUTCNT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 1; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&ZCAL_N, &MIN, &MAX, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_ZCAL_N; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ZCAL_N); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_MIN; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MIN); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_MAX; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAX); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&ZCAL_P, &MIN, &MAX, &TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_ZCAL_P; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ZCAL_P); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_MIN; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MIN); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_MAX; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAX); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 3; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define IO_DCCAL_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_INVALID_INVOCATION_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_DCCAL_INVALID_INVOCATION_RC_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_POWER_DOWN_LANES_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_POWER_DOWN_LANES_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_POWER_DOWN_LANES_INVALID_INVOCATION_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_POWER_DOWN_LANES_INVALID_INVOCATION_RC_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_READ_EREPAIR_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_READ_EREPAIR_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_READ_EREPAIR_INVALID_INVOCATION_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_READ_EREPAIR_INVALID_INVOCATION_RC_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_FIR_TOO_MANY_BUS_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_TOO_MANY_BUS_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_TOO_MANY_BUS_ERROR_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ENDPOINT, &BUS_ERROR_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FIR_TOO_MANY_BUS_ERROR_RC_ENDPOINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENDPOINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FIR_TOO_MANY_BUS_ERROR_RC_BUS_ERROR_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BUS_ERROR_REG); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_FIR_RECALIBRATION_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_RECALIBRATION_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_RECALIBRATION_ERROR_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ENDPOINT, &RECAL_ERROR_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FIR_RECALIBRATION_ERROR_RC_ENDPOINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENDPOINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FIR_RECALIBRATION_ERROR_RC_RECAL_ERROR_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RECAL_ERROR_REG); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ENDPOINT, &SPARE_ERROR_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_ENDPOINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENDPOINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_SPARE_ERROR_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SPARE_ERROR_REG); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_FIR_SPARES_DEPLOYED_FIR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_SPARES_DEPLOYED_FIR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_SPARES_DEPLOYED_FIR_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ENDPOINT, &SPARE_ERROR_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FIR_SPARES_DEPLOYED_FIR_RC_ENDPOINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENDPOINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FIR_SPARES_DEPLOYED_FIR_RC_SPARE_ERROR_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SPARE_ERROR_REG); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_FIR_LANE_TX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_LANE_TX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_LANE_TX_PARITY_ERROR_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ENDPOINT, &LANE_ID, &TX_ERROR_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FIR_LANE_TX_PARITY_ERROR_RC_ENDPOINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENDPOINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FIR_LANE_TX_PARITY_ERROR_RC_LANE_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LANE_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FIR_LANE_TX_PARITY_ERROR_RC_TX_ERROR_REG; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TX_ERROR_REG); \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define IO_FIR_GROUP_TX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_GROUP_TX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_GROUP_TX_PARITY_ERROR_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ENDPOINT, &TX_ERROR_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FIR_GROUP_TX_PARITY_ERROR_RC_ENDPOINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENDPOINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FIR_GROUP_TX_PARITY_ERROR_RC_TX_ERROR_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TX_ERROR_REG); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_FIR_LANE_RX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_LANE_RX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_LANE_RX_PARITY_ERROR_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ENDPOINT, &LANE_ID, &RX_ERROR_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FIR_LANE_RX_PARITY_ERROR_RC_ENDPOINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENDPOINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FIR_LANE_RX_PARITY_ERROR_RC_LANE_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LANE_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::IO_FIR_LANE_RX_PARITY_ERROR_RC_RX_ERROR_REG; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_ERROR_REG); \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define IO_FIR_GROUP_RX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_GROUP_RX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_GROUP_RX_PARITY_ERROR_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ENDPOINT, &RX_ERROR_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FIR_GROUP_RX_PARITY_ERROR_RC_ENDPOINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENDPOINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FIR_GROUP_RX_PARITY_ERROR_RC_RX_ERROR_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_ERROR_REG); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_FIR_BUS_RX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_BUS_RX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_BUS_RX_PARITY_ERROR_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ENDPOINT, &RX_ERROR_REG}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FIR_BUS_RX_PARITY_ERROR_RC_ENDPOINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENDPOINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::IO_FIR_BUS_RX_PARITY_ERROR_RC_RX_ERROR_REG; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_ERROR_REG); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_FIR_GCR_HANG_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_GCR_HANG_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_GCR_HANG_ERROR_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ENDPOINT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FIR_GCR_HANG_ERROR_RC_ENDPOINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENDPOINT); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define IO_FIR_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_INVALID_INVOCATION_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ENDPOINT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_FIR_INVALID_INVOCATION_RC_ENDPOINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENDPOINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_CLEAR_FIRS_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_CLEAR_FIRS_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_CLEAR_FIRS_INVALID_INVOCATION_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&ENDPOINT}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_CLEAR_FIRS_INVALID_INVOCATION_RC_ENDPOINT; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENDPOINT); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define IO_RESTORE_EREPAIR_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RESTORE_EREPAIR_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RESTORE_EREPAIR_INVALID_INVOCATION_RC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::IO_RESTORE_EREPAIR_INVALID_INVOCATION_RC_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_CHECK_MASTER_NO_VALID_MCS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_CHECK_MASTER_NO_VALID_MCS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_SBE_CHECK_MASTER, RC); 
#define RC_SBE_CHECK_MASTER_NO_VALID_MCS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_MPIPL_CLOCK_START_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_USE_P1, RC); }
#define RC_SBE_MPIPL_CLOCK_START_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_MPIPL_CLOCK_START_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_MPIPL_PBC_FENCE_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_MPIPL_PBC_FENCE_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_MPIPL_PBC_FENCE_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_MPIPL_SECURITY_UNLOCK_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_USE_P1, RC); }
#define RC_SBE_MPIPL_SECURITY_UNLOCK_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_MPIPL_SECURITY_UNLOCK_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_SCAN_MULTICAST_TYPE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_MULTICAST_TYPE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN_MULTICAST_TYPE_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_SCAN_MAGIC_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_MAGIC_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN_MAGIC_MISMATCH_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_SCAN_HEADER_VERSION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_USE_P0, RC); }
#define RC_SBE_SCAN_HEADER_VERSION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN_HEADER_VERSION_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_SCAN_DATA_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_USE_P0, RC); }
#define RC_SBE_SCAN_DATA_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN_DATA_SIZE_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_SCAN_RING_LENGTH_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_USE_P0, RC); }
#define RC_SBE_SCAN_RING_LENGTH_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN_RING_LENGTH_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_SCAN_CHECKWORD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_USE_P0, RC); }
#define RC_SBE_SCAN_CHECKWORD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN_CHECKWORD_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_DPLL_SETUP_NOLOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_DPLL_LOCK_FAIL, POR_FFDC_OFFSET_USE_P0, RC); }
#define RC_SBE_DPLL_SETUP_NOLOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_DPLL_SETUP_NOLOCK_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE ; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_EX_STARTCLOCKS_CLOCKS_NOT_STARTED_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_USE_P0, RC); }
#define RC_SBE_EX_STARTCLOCKS_CLOCKS_NOT_STARTED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_EX_STARTCLOCKS_CLOCKS_NOT_STARTED_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_EX_STARTCLOCKS_CHIP_XSTOPPED_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE, RC); FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_USE_P0, RC); }
#define RC_SBE_EX_STARTCLOCKS_CHIP_XSTOPPED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_EX_STARTCLOCKS_CHIP_XSTOPPED_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_FABRICINIT_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE, RC); }
#define RC_SBE_FABRICINIT_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_SBE_FABRICINIT, RC); 
#define RC_SBE_FABRICINIT_FBC_STOPPED_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_FABRICINIT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE, RC); }
#define RC_SBE_FABRICINIT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_SBE_FABRICINIT, RC); 
#define RC_SBE_FABRICINIT_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_INSTR_START_SPWU_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_INSTRUCT_FAIL, POR_FFDC_OFFSET_USE_P0, RC); }
#define RC_SBE_INSTR_START_SPWU_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_INSTR_START_SPWU_FAILED_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_INSTR_START_THREAD0_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_INSTRUCT_FAIL, POR_FFDC_OFFSET_USE_P0, RC); }
#define RC_SBE_INSTR_START_THREAD0_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_INSTR_START_THREAD0_NOT_RUNNING_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_INSTR_START_MAINT_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_INSTRUCT_FAIL, POR_FFDC_OFFSET_USE_P0, RC); }
#define RC_SBE_INSTR_START_MAINT_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_INSTR_START_MAINT_MODE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_LCO_LOADER_MULTICAST_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LCO_LOADER_MULTICAST_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_LCO_LOADER_MULTICAST_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_LCO_LOADER_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE, RC); }
#define RC_SBE_LCO_LOADER_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_SBE_FABRICINIT, RC); 
#define RC_SBE_LCO_LOADER_FBC_STOPPED_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_LCO_LOADER_IMAGE_SIZE_PAD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LCO_LOADER_IMAGE_SIZE_PAD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_LCO_LOADER_IMAGE_SIZE_PAD_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 0; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_LCO_LOADER_IMAGE_SIZE_OVERFLOW_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LCO_LOADER_IMAGE_SIZE_OVERFLOW_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_LCO_LOADER_IMAGE_SIZE_OVERFLOW_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 0; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_LCO_LOADER_IMAGE_WRAP_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LCO_LOADER_IMAGE_WRAP_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_LCO_LOADER_IMAGE_WRAP_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 0; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_LCO_LOADER_IMAGE_ALIGN_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LCO_LOADER_IMAGE_ALIGN_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_LCO_LOADER_IMAGE_ALIGN_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 0; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_LCO_LOADER_PBA_RESET_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LCO_LOADER_PBA_RESET_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PBA_UTILS_REGISTERS, RC); 
#define RC_SBE_LCO_LOADER_PBA_RESET_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_LCO_LOADER_LPCM_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE, RC); }
#define RC_SBE_LCO_LOADER_LPCM_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PBA_UTILS_REGISTERS, RC); 
#define RC_SBE_LCO_LOADER_LPCM_FIR_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_LCO_LOADER_OCB_STATUS_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE, RC); }
#define RC_SBE_LCO_LOADER_OCB_STATUS_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PBA_UTILS_REGISTERS, RC); 
#define RC_SBE_LCO_LOADER_OCB_STATUS_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_LCO_LOADER_PBA_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE, RC); }
#define RC_SBE_LCO_LOADER_PBA_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PBA_UTILS_REGISTERS, RC); 
#define RC_SBE_LCO_LOADER_PBA_FIR_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_LCO_LOADER_PBA_WBUF0_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE, RC); }
#define RC_SBE_LCO_LOADER_PBA_WBUF0_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PBA_UTILS_REGISTERS, RC); 
#define RC_SBE_LCO_LOADER_PBA_WBUF0_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_LCO_LOADER_PBA_WBUF1_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE, RC); }
#define RC_SBE_LCO_LOADER_PBA_WBUF1_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PBA_UTILS_REGISTERS, RC); 
#define RC_SBE_LCO_LOADER_PBA_WBUF1_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_NPLL_SETUP_CPFILT_NOLOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_NPLL_SETUP_CPFILT_NOLOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SBE_NPLL_SETUP_FILTER_PLL, RC); 
#define RC_SBE_NPLL_SETUP_CPFILT_NOLOCK_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[0].hw_callout.iv_hw = fapi::HwCallouts::PROC_REF_CLOCK; \
  l_entries[0].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[0].hw_callout.iv_refObjIndex = 0; \
  l_entries[0].hw_callout.iv_objPosIndex = 0xff; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE ; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 0; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_SBE_NPLL_SETUP_EMFILT_NOLOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_NPLL_SETUP_EMFILT_NOLOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SBE_NPLL_SETUP_FILTER_PLL, RC); 
#define RC_SBE_NPLL_SETUP_EMFILT_NOLOCK_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[0].hw_callout.iv_hw = fapi::HwCallouts::PROC_REF_CLOCK; \
  l_entries[0].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[0].hw_callout.iv_refObjIndex = 0; \
  l_entries[0].hw_callout.iv_objPosIndex = 0xff; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE ; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 0; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_SBE_NPLL_SETUP_XBUS_NOLOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_NPLL_SETUP_XBUS_NOLOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SBE_NPLL_SETUP_XBUS_PLL, RC); 
#define RC_SBE_NPLL_SETUP_XBUS_NOLOCK_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[0].hw_callout.iv_hw = fapi::HwCallouts::PROC_REF_CLOCK; \
  l_entries[0].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[0].hw_callout.iv_refObjIndex = 0; \
  l_entries[0].hw_callout.iv_objPosIndex = 0xff; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE ; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 0; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define PROC_SBE_PB_START_CLOCK_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_NEST_CHIPLET, RC); }
#define PROC_SBE_PB_START_CLOCK_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define PROC_SBE_PB_START_CLOCK_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_PIBMEM_PRE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_PRE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PIBMEM_PRE_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_PIBMEM_POST_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_POST_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PIBMEM_POST_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_PIBMEM_IMAGE_SIZE_ALIGNMENT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_IMAGE_SIZE_ALIGNMENT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PIBMEM_IMAGE_SIZE_ALIGNMENT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_PIBMEM_LOAD_ADDRESS_ALIGNMENT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_LOAD_ADDRESS_ALIGNMENT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PIBMEM_LOAD_ADDRESS_ALIGNMENT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_PIBMEM_OVERFLOW_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_OVERFLOW_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PIBMEM_OVERFLOW_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_WINKLE_STATE_OR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_WINKLE_STATE_OR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_PCBS_REGISTERS, RC, fapi::TARGET_TYPE_NONE, fapi::TARGET_TYPE_EX_CHIPLET, 0x01000000);
#define RC_SBE_WINKLE_STATE_OR_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 0; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_WINKLE_STATE_AND_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_WINKLE_STATE_AND_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_PCBS_REGISTERS, RC, fapi::TARGET_TYPE_NONE, fapi::TARGET_TYPE_EX_CHIPLET, 0x01000000);
#define RC_SBE_WINKLE_STATE_AND_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 0; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_WINKLE_FSM_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_WINKLE_FSM_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_PCBS_REGISTERS, RC, fapi::TARGET_TYPE_NONE, fapi::TARGET_TYPE_EX_CHIPLET, 0x01000000);
#define RC_SBE_WINKLE_FSM_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_WINKLE_PFET_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_WINKLE_PFET_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_PCBS_REGISTERS, RC, fapi::TARGET_TYPE_NONE, fapi::TARGET_TYPE_EX_CHIPLET, 0x01000000);
#define RC_SBE_WINKLE_PFET_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_SELECT_EX_NO_GOOD_BOOT_CORES_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SELECT_EX_NO_GOOD_BOOT_CORES_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_SBE_SELECT_EX, RC); 
#define RC_SBE_SELECT_EX_NO_GOOD_BOOT_CORES_FOUND_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_SELECT_EX_NO_SECOND_GOOD_BOOT_CORE_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SELECT_EX_NO_SECOND_GOOD_BOOT_CORE_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_SBE_SELECT_EX, RC); 
#define RC_SBE_SELECT_EX_NO_SECOND_GOOD_BOOT_CORE_FOUND_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_SET_VID_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SET_VID_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_O2S_REGISTERS, RC); 
#define RC_SBE_SET_VID_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_SPIVID_STATUS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SPIVID_STATUS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_O2S_REGISTERS, RC); 
#define RC_SBE_SPIVID_STATUS_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_SPIVID_WRITE_RETURN_STATUS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SPIVID_WRITE_RETURN_STATUS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_O2S_REGISTERS, RC); 
#define RC_SBE_SPIVID_WRITE_RETURN_STATUS_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_TP_SWITCH_GEARS_XBUS_NOLOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_TP_SWITCH_GEARS_XBUS_NOLOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SBE_NPLL_SETUP_XBUS_PLL, RC); 
#define RC_SBE_TP_SWITCH_GEARS_XBUS_NOLOCK_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_HW_CALLOUT; \
  l_entries[0].hw_callout.iv_hw = fapi::HwCallouts::PROC_REF_CLOCK; \
  l_entries[0].hw_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[0].hw_callout.iv_refObjIndex = 0; \
  l_entries[0].hw_callout.iv_objPosIndex = 0xff; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE ; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[2].target_cdg.iv_targetObjIndex = 0; \
  l_entries[2].target_cdg.iv_callout = 1; \
  l_entries[2].target_cdg.iv_deconfigure = 1; \
  l_entries[2].target_cdg.iv_gard = 1; \
  l_entries[2].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::MEDIUM; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_SBE_TP_SWITCH_GEARS_XBUS_HEADER_CHECK_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FAIL, POR_FFDC_OFFSET_USE_P0, RC); }
#define RC_SBE_TP_SWITCH_GEARS_XBUS_HEADER_CHECK_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_TP_SWITCH_GEARS_XBUS_HEADER_CHECK_FAIL_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_TRIGGER_WINKLE_EX_DID_NOT_ENTER_WINKLE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_TRIGGER_WINKLE_EX_DID_NOT_ENTER_WINKLE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PIBMEM_REGISTERS, RC); 
#define RC_SBE_TRIGGER_WINKLE_EX_DID_NOT_ENTER_WINKLE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_TRIGGER_WINKLE_EX_WAKEUP_DID_NOT_HIT_GOTO_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_TRIGGER_WINKLE_EX_WAKEUP_DID_NOT_HIT_GOTO_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PIBMEM_REGISTERS, RC); 
#define RC_SBE_TRIGGER_WINKLE_EX_WAKEUP_DID_NOT_HIT_GOTO_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_TRIGGER_WINKLE_EX_WAKEUP_DID_NOT_FINISH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_TRIGGER_WINKLE_EX_WAKEUP_DID_NOT_FINISH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PIBMEM_REGISTERS, RC); 
#define RC_SBE_TRIGGER_WINKLE_EX_WAKEUP_DID_NOT_FINISH_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_TRIGGER_WINKLE_HOSTBOOT_DID_NOT_RESPOND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_TRIGGER_WINKLE_HOSTBOOT_DID_NOT_RESPOND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_PIBMEM_REGISTERS, RC); 
#define RC_SBE_TRIGGER_WINKLE_HOSTBOOT_DID_NOT_RESPOND_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_UNDEFINED_SV_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_UNDEFINED_SV_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_UNDEFINED_SV_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SLW_PFET_VDD_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_PFET_VDD_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_PFET_VDD_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_PFET_VCS_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_PFET_VCS_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_PFET_VCS_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_PFET_DECODE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_PFET_DECODE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_PFET_DECODE_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SLW_IVRM_BS_SLEEP_ENTRY_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_IVRM_BS_SLEEP_ENTRY_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_IVRM_BS_SLEEP_ENTRY_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_IVRM_BS_WINKLE_ENTRY_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_IVRM_BS_WINKLE_ENTRY_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_IVRM_BS_WINKLE_ENTRY_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_IVRM_BS_EXIT_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_IVRM_BS_EXIT_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_IVRM_BS_EXIT_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_IVRM_CAL_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_IVRM_CAL_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_IVRM_CAL_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_IVRM_CAL_BS_EXIT_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_IVRM_CAL_BS_EXIT_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_IVRM_CAL_BS_EXIT_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_IVRM_FORCESM_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_IVRM_FORCESM_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_IVRM_FORCESM_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_RAM_THREAD_CHECK_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_RAM_THREAD_CHECK_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_RAM_THREAD_CHECK_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_RAM_THREAD_QUIESCE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_RAM_THREAD_QUIESCE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_RAM_THREAD_QUIESCE_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_RAM_CONTROL_EXCEPTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_RAM_CONTROL_EXCEPTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_RAM_CONTROL_EXCEPTION_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_RAM_STATUS_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_RAM_STATUS_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_RAM_STATUS_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_GOTO_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_GOTO_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_GOTO_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_ERRINJ_NEVER_REACH_HALT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_ERRINJ_NEVER_REACH_HALT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_ERRINJ_NEVER_REACH_HALT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_ERRINJ_SIMPLE_HALT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_ERRINJ_SIMPLE_HALT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_ERRINJ_SIMPLE_HALT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_ERRINJ_INVALID_INSTR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_ERRINJ_INVALID_INSTR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_ERRINJ_INVALID_INSTR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_ERRINJ_INVALID_OCI_ADDRESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_ERRINJ_INVALID_OCI_ADDRESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_ERRINJ_INVALID_OCI_ADDRESS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_ERRINJ_INVALID_PIB_ADDRESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_ERRINJ_INVALID_PIB_ADDRESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_ERRINJ_INVALID_PIB_ADDRESS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_ERRINJ_PC_UNDERFLOW_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_ERRINJ_PC_UNDERFLOW_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_ERRINJ_PC_UNDERFLOW_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_ERRINJ_PC_OVERRFLOW_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_ERRINJ_PC_OVERRFLOW_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_ERRINJ_PC_OVERRFLOW_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_ERRINJ_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_ERRINJ_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_ERRINJ_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 0; \
  l_entries[0].target_cdg.iv_gard = 0; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_EH_PIB_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_EH_PIB_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_EH_PIB_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_EH_OCI_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_EH_OCI_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_EH_OCI_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_EH_INSTRUCTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_EH_INSTRUCTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_EH_INSTRUCTION_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_EH_INTERNAL_DATA_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_EH_INTERNAL_DATA_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_EH_INTERNAL_DATA_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_EH_ERROR_ON_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_EH_ERROR_ON_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_EH_ERROR_ON_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_PMGP1_ENABLE_CONFIG_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_PMGP1_ENABLE_CONFIG_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_PMGP1_ENABLE_CONFIG_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define SLW_RC_ILLEGAL_WINKLE_ENTRY_POWER_DOWN_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define SLW_RC_ILLEGAL_WINKLE_ENTRY_POWER_DOWN_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define SLW_RC_ILLEGAL_WINKLE_ENTRY_POWER_DOWN_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define SLW_RC_OHA_SPWUP_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define SLW_RC_OHA_SPWUP_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define SLW_RC_OHA_SPWUP_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SLW_CPM_SPWKUP_NOT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SLW_CPM_SPWKUP_NOT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SLW_CPM_SPWKUP_NOT_SET_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_SUCCESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SUCCESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SUCCESS_ADD_ERROR_INFO(RC) 

#define RC_SBE_SUCCESS_SLAVE_CHIP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SUCCESS_SLAVE_CHIP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SUCCESS_SLAVE_CHIP_ADD_ERROR_INFO(RC) 

#define RC_SBE_PAUSE_WITH_SUCCESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PAUSE_WITH_SUCCESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PAUSE_WITH_SUCCESS_ADD_ERROR_INFO(RC) 

#define RC_SBE_PROC_ENTRY_HALT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PROC_ENTRY_HALT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PROC_ENTRY_HALT_ADD_ERROR_INFO(RC) 

#define RC_SBE_PROC_EXIT_HALT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PROC_EXIT_HALT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PROC_EXIT_HALT_ADD_ERROR_INFO(RC) 

#define RC_SBE_PROC_CHECKSTOP_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE, RC); }
#define RC_SBE_PROC_CHECKSTOP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PROC_CHECKSTOP_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_PROC_RECOVERABLE_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE, RC); }
#define RC_SBE_PROC_RECOVERABLE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PROC_RECOVERABLE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 0; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_PROC_SPATTN_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE, RC); }
#define RC_SBE_PROC_SPATTN_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PROC_SPATTN_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_PORE_ERROR0_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR0_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PORE_ERROR0_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_PORE_ERROR1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PORE_ERROR1_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_PORE_ERROR2_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR2_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PORE_ERROR2_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_PORE_ERROR3_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR3_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PORE_ERROR3_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_PORE_ERROR4_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR4_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PORE_ERROR4_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 1; \
  l_entries[1].target_cdg.iv_gard = 1; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_SBE_SCAN0_DONE_POLL_THRESHOLD_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FLUSH_FAIL, POR_FFDC_OFFSET_USE_P1, RC); }
#define RC_SBE_SCAN0_DONE_POLL_THRESHOLD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN0_DONE_POLL_THRESHOLD_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_ARRAYINIT_POLL_THRESHOLD_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_ARRAYINIT_FAIL, POR_FFDC_OFFSET_USE_P1, RC); }
#define RC_SBE_ARRAYINIT_POLL_THRESHOLD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_ARRAYINIT_POLL_THRESHOLD_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_LOAD_RING_VEC_EX_ex_time_core_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LOAD_RING_VEC_EX_ex_time_core_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_SBE_SELECT_EX, RC); 
#define RC_SBE_LOAD_RING_VEC_EX_ex_time_core_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_LOAD_RING_VEC_EX_ex_time_eco_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LOAD_RING_VEC_EX_ex_time_eco_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_SBE_SELECT_EX, RC); 
#define RC_SBE_LOAD_RING_VEC_EX_ex_time_eco_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_LOAD_RING_VEC_EX_ex_repr_core_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LOAD_RING_VEC_EX_ex_repr_core_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_SBE_SELECT_EX, RC); 
#define RC_SBE_LOAD_RING_VEC_EX_ex_repr_core_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_SBE_LOAD_RING_VEC_EX_ex_repr_eco_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LOAD_RING_VEC_EX_ex_repr_eco_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_SBE_SELECT_EX, RC); 
#define RC_SBE_LOAD_RING_VEC_EX_ex_repr_eco_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[0].target_cdg.iv_targetObjIndex = 0; \
  l_entries[0].target_cdg.iv_callout = 1; \
  l_entries[0].target_cdg.iv_deconfigure = 1; \
  l_entries[0].target_cdg.iv_gard = 1; \
  l_entries[0].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_TP_COLLECT_DBG_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TP_COLLECT_DBG_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TP_COLLECT_DBG_DATA_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&VITL_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_COLLECT_TRACE; \
  l_entries[0].collect_trace.iv_eieTraceId =  fapi::CollectTraces::FSI; \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_COLLECT_TRACE; \
  l_entries[1].collect_trace.iv_eieTraceId =  fapi::CollectTraces::SCOM; \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_COLLECT_TRACE; \
  l_entries[2].collect_trace.iv_eieTraceId =  fapi::CollectTraces::SCAN; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_COLLECT_TRACE; \
  l_entries[3].collect_trace.iv_eieTraceId =  fapi::CollectTraces::MBOX; \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_TP_COLLECT_DBG_DATA_VITL_DATA; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VITL_DATA); \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_MODEL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_MODEL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_MODEL_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP, &MODEL_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_MODEL_ERROR_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_MODEL_ERROR_MODEL_ERROR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODEL_ERROR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 0; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_PIB_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_PIB_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_PIB_ERROR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP); \
\
{ \
  const void * l_objects[] = {&CHIP, &PIB_ERROR}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_PIB_ERROR_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_PIB_ERROR_PIB_ERROR; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PIB_ERROR); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 0; \
  l_entries[3].target_cdg.iv_callout = 1; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 1; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP, &ENGINE, &VIRTUAL, &VIRTUAL_IS_SUPPORTED}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[5]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION_ENGINE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENGINE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION_VIRTUAL; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VIRTUAL); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION_VIRTUAL_IS_SUPPORTED; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VIRTUAL_IS_SUPPORTED); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[4].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[4].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 5); \
}

#define RC_PROC_EXTRACT_PORE_BASE_FFDC_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_extract_pore_base_ffdc, pore_state, pore_sbe_state, RC); }
#define RC_PROC_EXTRACT_PORE_BASE_FFDC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_BASE_FFDC_ADD_ERROR_INFO(RC) 

#define RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP, &ENGINE, &VIRTUAL, &PORE_VITAL_REG, &PORE_STATUS_REG, &PORE_CONTROL_REG, &PORE_RESET_REG, &PORE_ERR_MASK_REG, &PORE_P0_REG, &PORE_P1_REG, &PORE_A0_REG, &PORE_A1_REG, &PORE_TBL_BASE_REG, &PORE_EXE_TRIGGER_REG, &PORE_CTR_REG, &PORE_D0_REG, &PORE_D1_REG, &PORE_IBUF0_REG, &PORE_IBUF1_REG, &PORE_DEBUG0_REG, &PORE_DEBUG1_REG, &PORE_STACK0_REG, &PORE_STACK1_REG, &PORE_STACK2_REG, &PORE_IDFLAGS_REG, &PORE_SPRG0_REG, &PORE_MRR_REG, &PORE_I2CE0_REG, &PORE_I2CE1_REG, &PORE_I2CE2_REG, &PORE_PC, &PORE_RC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[32]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_CHIP; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_ENGINE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENGINE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_VIRTUAL; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VIRTUAL); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_VITAL_REG; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_VITAL_REG); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_STATUS_REG; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_STATUS_REG); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[5].ffdc.iv_ffdcObjIndex = 5; \
  l_entries[5].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_CONTROL_REG; \
  l_entries[5].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_CONTROL_REG); \
  l_entries[6].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[6].ffdc.iv_ffdcObjIndex = 6; \
  l_entries[6].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_RESET_REG; \
  l_entries[6].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_RESET_REG); \
  l_entries[7].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[7].ffdc.iv_ffdcObjIndex = 7; \
  l_entries[7].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_ERR_MASK_REG; \
  l_entries[7].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_ERR_MASK_REG); \
  l_entries[8].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[8].ffdc.iv_ffdcObjIndex = 8; \
  l_entries[8].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_P0_REG; \
  l_entries[8].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_P0_REG); \
  l_entries[9].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[9].ffdc.iv_ffdcObjIndex = 9; \
  l_entries[9].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_P1_REG; \
  l_entries[9].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_P1_REG); \
  l_entries[10].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[10].ffdc.iv_ffdcObjIndex = 10; \
  l_entries[10].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_A0_REG; \
  l_entries[10].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_A0_REG); \
  l_entries[11].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[11].ffdc.iv_ffdcObjIndex = 11; \
  l_entries[11].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_A1_REG; \
  l_entries[11].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_A1_REG); \
  l_entries[12].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[12].ffdc.iv_ffdcObjIndex = 12; \
  l_entries[12].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_TBL_BASE_REG; \
  l_entries[12].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_TBL_BASE_REG); \
  l_entries[13].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[13].ffdc.iv_ffdcObjIndex = 13; \
  l_entries[13].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_EXE_TRIGGER_REG; \
  l_entries[13].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_EXE_TRIGGER_REG); \
  l_entries[14].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[14].ffdc.iv_ffdcObjIndex = 14; \
  l_entries[14].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_CTR_REG; \
  l_entries[14].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_CTR_REG); \
  l_entries[15].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[15].ffdc.iv_ffdcObjIndex = 15; \
  l_entries[15].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_D0_REG; \
  l_entries[15].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_D0_REG); \
  l_entries[16].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[16].ffdc.iv_ffdcObjIndex = 16; \
  l_entries[16].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_D1_REG; \
  l_entries[16].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_D1_REG); \
  l_entries[17].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[17].ffdc.iv_ffdcObjIndex = 17; \
  l_entries[17].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_IBUF0_REG; \
  l_entries[17].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_IBUF0_REG); \
  l_entries[18].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[18].ffdc.iv_ffdcObjIndex = 18; \
  l_entries[18].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_IBUF1_REG; \
  l_entries[18].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_IBUF1_REG); \
  l_entries[19].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[19].ffdc.iv_ffdcObjIndex = 19; \
  l_entries[19].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_DEBUG0_REG; \
  l_entries[19].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_DEBUG0_REG); \
  l_entries[20].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[20].ffdc.iv_ffdcObjIndex = 20; \
  l_entries[20].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_DEBUG1_REG; \
  l_entries[20].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_DEBUG1_REG); \
  l_entries[21].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[21].ffdc.iv_ffdcObjIndex = 21; \
  l_entries[21].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_STACK0_REG; \
  l_entries[21].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_STACK0_REG); \
  l_entries[22].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[22].ffdc.iv_ffdcObjIndex = 22; \
  l_entries[22].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_STACK1_REG; \
  l_entries[22].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_STACK1_REG); \
  l_entries[23].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[23].ffdc.iv_ffdcObjIndex = 23; \
  l_entries[23].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_STACK2_REG; \
  l_entries[23].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_STACK2_REG); \
  l_entries[24].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[24].ffdc.iv_ffdcObjIndex = 24; \
  l_entries[24].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_IDFLAGS_REG; \
  l_entries[24].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_IDFLAGS_REG); \
  l_entries[25].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[25].ffdc.iv_ffdcObjIndex = 25; \
  l_entries[25].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_SPRG0_REG; \
  l_entries[25].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_SPRG0_REG); \
  l_entries[26].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[26].ffdc.iv_ffdcObjIndex = 26; \
  l_entries[26].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_MRR_REG; \
  l_entries[26].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_MRR_REG); \
  l_entries[27].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[27].ffdc.iv_ffdcObjIndex = 27; \
  l_entries[27].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_I2CE0_REG; \
  l_entries[27].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_I2CE0_REG); \
  l_entries[28].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[28].ffdc.iv_ffdcObjIndex = 28; \
  l_entries[28].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_I2CE1_REG; \
  l_entries[28].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_I2CE1_REG); \
  l_entries[29].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[29].ffdc.iv_ffdcObjIndex = 29; \
  l_entries[29].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_I2CE2_REG; \
  l_entries[29].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_I2CE2_REG); \
  l_entries[30].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[30].ffdc.iv_ffdcObjIndex = 30; \
  l_entries[30].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_PC; \
  l_entries[30].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_PC); \
  l_entries[31].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[31].ffdc.iv_ffdcObjIndex = 31; \
  l_entries[31].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_RC; \
  l_entries[31].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_RC); \
  RC.addErrorInfo(l_objects, l_entries, 32); \
}

#define RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_MBOX_REGISTERS, RC); fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_CFAM_REGISTERS, RC); 
#define RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PNOR_ECCB_STATUS, &SEEPROM_ECCB_STATUS, &SOFT_ERROR_STATUS, &ATTN_REPORTED}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA_PNOR_ECCB_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PNOR_ECCB_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA_SEEPROM_ECCB_STATUS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SEEPROM_ECCB_STATUS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA_SOFT_ERROR_STATUS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SOFT_ERROR_STATUS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA_ATTN_REPORTED; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTN_REPORTED); \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_tp_collect_dbg_data, CHIP, RC); }
#define RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_MBOX_REGISTERS, RC); fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_CFAM_REGISTERS, RC); 
#define RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&PNOR_ECCB_STATUS, &SEEPROM_ECCB_STATUS, &SOFT_ERROR_STATUS, &ATTN_REPORTED}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA_PNOR_ECCB_STATUS; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PNOR_ECCB_STATUS); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA_SEEPROM_ECCB_STATUS; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SEEPROM_ECCB_STATUS); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA_SOFT_ERROR_STATUS; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SOFT_ERROR_STATUS); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA_ATTN_REPORTED; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTN_REPORTED); \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_EXTRACT_PORE_BASE_FFDC_SLW_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_BASE_FFDC_SLW_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_PBA_REGISTERS, RC); fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_FIR_REGISTERS, RC); fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_PMC_REGISTERS, RC); fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_PROC_SLW_PCBS_REGISTERS, RC, fapi::TARGET_TYPE_NONE, fapi::TARGET_TYPE_EX_CHIPLET, 0x01000000);
#define RC_PROC_EXTRACT_PORE_BASE_FFDC_SLW_ADD_ERROR_INFO(RC) 

#define RC_PROC_EXTRACT_PORE_HALT_FFDC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_HALT_FFDC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_HALT_FFDC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &PORE_HALT_TYPE, &FFDC_ADDRESSES, &FFDC_DATA}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_HALT_FFDC_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_HALT_FFDC_PORE_HALT_TYPE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_HALT_TYPE); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_HALT_FFDC_FFDC_ADDRESSES; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_ADDRESSES); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_HALT_FFDC_FFDC_DATA; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA); \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_MULTICAST_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_MULTICAST_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_MULTICAST_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &CHIPLET_ID, &MC_GROUP}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_MULTICAST_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_MULTICAST_CHIPLET_ID; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_ID); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_MULTICAST_MC_GROUP; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MC_GROUP); \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_TYPE_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET, &PORE_HALT_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_TYPE_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_TYPE_PORE_HALT_TYPE; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PORE_HALT_TYPE); \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_FIR_FFDC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FIR_FFDC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CHIP_MASTER_INTERRUPT_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CHIP_GLOB_XFIR_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CHIP_GLOB_RFIR_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CHIP_GLOB_FIR_MASK_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CHIP_GLOB_ATTN_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CHIP_GLOB_ATTN_MASK_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CHIP_LFIR_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CHIP_LFIR_MASK_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_EX_GLOB_XFIR_REGISTERS, RC, fapi::TARGET_TYPE_EX_CHIPLET); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_EX_GLOB_RFIR_REGISTERS, RC, fapi::TARGET_TYPE_EX_CHIPLET); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_EX_GLOB_FIR_MASK_REGISTERS, RC, fapi::TARGET_TYPE_EX_CHIPLET); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_EX_GLOB_ATTN_REGISTERS, RC, fapi::TARGET_TYPE_EX_CHIPLET); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_EX_GLOB_ATTN_MASK_REGISTERS, RC, fapi::TARGET_TYPE_EX_CHIPLET); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_EX_LFIR_REGISTERS, RC, fapi::TARGET_TYPE_EX_CHIPLET); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_EX_LFIR_MASK_REGISTERS, RC, fapi::TARGET_TYPE_EX_CHIPLET); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_MCS_LFIR_REGISTERS, RC, fapi::TARGET_TYPE_MCS_CHIPLET); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_MCS_LFIR_MASK_REGISTERS, RC, fapi::TARGET_TYPE_MCS_CHIPLET); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_XBUS_LFIR_REGISTERS, RC, fapi::TARGET_TYPE_XBUS_ENDPOINT); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_XBUS_LFIR_MASK_REGISTERS, RC, fapi::TARGET_TYPE_XBUS_ENDPOINT); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_ABUS_LFIR_REGISTERS, RC, fapi::TARGET_TYPE_ABUS_ENDPOINT); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_ABUS_LFIR_MASK_REGISTERS, RC, fapi::TARGET_TYPE_ABUS_ENDPOINT); 
#define RC_PROC_FIR_FFDC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_FIR_FFDC_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_CEN_FIR_FFDC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_FIR_FFDC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CEN_CHIP_MASTER_INTERRUPT_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CEN_CHIP_GLOB_XFIR_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CEN_CHIP_GLOB_RFIR_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CEN_CHIP_GLOB_FIR_MASK_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CEN_CHIP_GLOB_ATTN_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CEN_CHIP_GLOB_ATTN_MASK_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CEN_CHIP_LFIR_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CEN_CHIP_LFIR_MASK_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CEN_MBA_LFIR_REGISTERS, RC, fapi::TARGET_TYPE_MBA_CHIPLET); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_CEN_MBA_LFIR_MASK_REGISTERS, RC, fapi::TARGET_TYPE_MBA_CHIPLET); 
#define RC_CEN_FIR_FFDC_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_CEN_FIR_FFDC_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_GET_TP_DBG_DATA_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_TP_DBG_DATA_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_TP_DBG_DATA_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP_NAME, &CHIP_EC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_TP_DBG_DATA_ERR_CHIP_NAME; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_NAME); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_TP_DBG_DATA_ERR_CHIP_EC; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_EC); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_GET_TP_DBG_DATA_PARAMETER_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_TP_DBG_DATA_PARAMETER_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_TP_DBG_DATA_PARAMETER_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&TARGET_TYPE}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_TP_DBG_DATA_PARAMETER_ERR_TARGET_TYPE; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET_TYPE); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[1].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[1].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_GET_TP_DEBUG_DATA_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_GET_TP_DEBUG_DATA_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_GET_TP_DEBUG_DATA_ERR_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {&CHIP_NAME, &CHIP_EC}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[3]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_GET_TP_DEBUG_DATA_ERR_CHIP_NAME; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_NAME); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_GET_TP_DEBUG_DATA_ERR_CHIP_EC; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_EC); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[2].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[2].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 3); \
}

#define RC_PROC_SBE_SCAN_SERVICE_INVALID_OPERATION_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SBE_SCAN_SERVICE_INVALID_OPERATION_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP, fapi::REG_FFDC_SBE_SCAN_SERVICE, RC); 
#define RC_PROC_SBE_SCAN_SERVICE_INVALID_OPERATION_ADD_ERROR_INFO(RC) \
{ \
  const void * l_objects[] = {}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[1]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT; \
  l_entries[0].proc_callout.iv_procedure = fapi::ProcedureCallouts::CODE; \
  l_entries[0].proc_callout.iv_calloutPriority = fapi::CalloutPriorities::HIGH; \
  RC.addErrorInfo(l_objects, l_entries, 1); \
}

#define RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_NOT_STOPPED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_NOT_STOPPED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_NOT_STOPPED_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&TARGET}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[2]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_NOT_STOPPED_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[1].target_cdg.iv_targetObjIndex = 0; \
  l_entries[1].target_cdg.iv_callout = 1; \
  l_entries[1].target_cdg.iv_deconfigure = 0; \
  l_entries[1].target_cdg.iv_gard = 0; \
  l_entries[1].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 2); \
}

#define RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_BAD_HALT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_BAD_HALT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_BAD_HALT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&TARGET, &ISTEP_NUM, &SUBSTEP_NUM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[4]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_BAD_HALT_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_BAD_HALT_ISTEP_NUM; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ISTEP_NUM); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_BAD_HALT_SUBSTEP_NUM; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SUBSTEP_NUM); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[3].target_cdg.iv_targetObjIndex = 0; \
  l_entries[3].target_cdg.iv_callout = 0; \
  l_entries[3].target_cdg.iv_deconfigure = 1; \
  l_entries[3].target_cdg.iv_gard = 0; \
  l_entries[3].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 4); \
}

#define RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(TARGET, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET); \
\
{ \
  const void * l_objects[] = {&TARGET, &SBE_RUNNING, &HALT_CODE, &ISTEP_NUM, &SUBSTEP_NUM}; \
  fapi::ReturnCode::ErrorInfoEntry l_entries[6]; \
  l_entries[0].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[0].ffdc.iv_ffdcObjIndex = 0; \
  l_entries[0].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE_TARGET; \
  l_entries[0].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TARGET); \
  l_entries[1].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[1].ffdc.iv_ffdcObjIndex = 1; \
  l_entries[1].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE_SBE_RUNNING; \
  l_entries[1].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_RUNNING); \
  l_entries[2].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[2].ffdc.iv_ffdcObjIndex = 2; \
  l_entries[2].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE_HALT_CODE; \
  l_entries[2].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(HALT_CODE); \
  l_entries[3].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[3].ffdc.iv_ffdcObjIndex = 3; \
  l_entries[3].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE_ISTEP_NUM; \
  l_entries[3].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ISTEP_NUM); \
  l_entries[4].iv_type = fapi::ReturnCode::EI_TYPE_FFDC; \
  l_entries[4].ffdc.iv_ffdcObjIndex = 4; \
  l_entries[4].ffdc.iv_ffdcId = fapi::RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE_SUBSTEP_NUM; \
  l_entries[4].ffdc.iv_ffdcSize = fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SUBSTEP_NUM); \
  l_entries[5].iv_type = fapi::ReturnCode::EI_TYPE_CDG; \
  l_entries[5].target_cdg.iv_targetObjIndex = 0; \
  l_entries[5].target_cdg.iv_callout = 0; \
  l_entries[5].target_cdg.iv_deconfigure = 1; \
  l_entries[5].target_cdg.iv_gard = 0; \
  l_entries[5].target_cdg.iv_calloutPriority = fapi::CalloutPriorities::LOW; \
  RC.addErrorInfo(l_objects, l_entries, 6); \
}

namespace fapi
{

/**
 * @brief Enumeration of FFDC identifiers
 */
enum HwpFfdcId
{
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_STACK2_REG = 0x3fc9a2c0,
    RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_DATA_EXISTING_RING_BYTE = 0x70590291,
    RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_FFDC_IF_TEST_NUM_MBAS_FOUND = 0xd07646d2,
    RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR_DPLL_DIV = 0x211526c0,
    IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_INIT_STATE_PG = 0xe69aa8a2,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE_MODULE_TYPE_1_1 = 0x28571cb7,
    RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_MBMCC = 0x632db60f,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_TARGET = 0x86337cb7,
    RC_PROCPM_PSTATE_DATABLOCK_PSAFE_MINMAX_BOUNDS_ERROR_FREQ_KHZ = 0xe928af68,
    RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_SBE_STATUS = 0xea4c31d6,
    RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR_REF_FREQ = 0xd03cd1f1,
    RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR_SLAVE_TARGET = 0x8d4f4b9e,
    REG_FFDC_CHIP_GLOB_RFIR_REGISTERS = 0x0dee0f26,
    REG_FFDC_XBUS_LFIR_MASK_REGISTERS = 0x0ab35ef1,
    REG_FFDC_CEN_CHIP_MASTER_INTERRUPT_REGISTERS = 0x1e31409f,
    RC_I2C_FIFO_INCOMPLETE_RC_CHIP_TARGET = 0x5a311533,
    RC_FAPIPOREVE_BREAKPOINT_NOT_FOUND_ERROR = 0xe52eaafa,
    RC_MSS_MAINT_INVALID_CMD_MBA = 0xbad5c4db,
    RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_I_OPERATION = 0xa598b7ab,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_SPRG0_REG = 0xeb6d9508,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS_SDRAM_BANKS_0_0 = 0x895e7c26,
    IO_FUNCS_FUNC_FAIL_RC_SLAVE_RX_FUNC_STATE_PG = 0x344933c9,
    RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_RAS_STATUS = 0xfdcb7922,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH_DRAM_WIDTH_0_1 = 0xb301daed,
    IO_FUNCS_REPAIR_FAIL_RC_SLAVE_GROUP = 0x7b8c05a6,
    RC_MSS_SLEW_CAL_TIMEOUT_PORT1_DATA_ADR = 0xefb33814,
    RC_PMPROC_PFETLIB_RAIL_OFF_OPERATION = 0x01d4da3a,
    RC_MSS_MAINT_X4_SYMBOL_ON_READ_MARKSTORE = 0xed834ffb,
    RC_PROC_SLWB_MEMORY_ERROR_RC_LOCAL = 0xb8accba9,
    REG_FFDC_EX_GLOB_XFIR_REGISTERS = 0xd31b06b2,
    RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR_RANKGROUP_POSITION = 0x2b53b657,
    IO_FUNCS_REPAIR_FAIL_RC_MASTER_GROUP = 0x6e222279,
    IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_CHIP_TARGET = 0x97de2866,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR_MBI_FIR = 0x8d8f840c,
    RC_MSS_VOLT_AVDD_OFFSET_VALUE_ERROR_AVDD_SLOPE_INTERCEPT = 0x90160289,
    RC_MSS_MAINT_START_NOT_RESET_CMD_TYPE = 0x1cb88804,
    RC_IPMS_CONFLICTING_IDLE_STATES_PORRR0_REG = 0x976247e4,
    RC_FAPIPOREVE_ERROR_SETTING_PC_ERROR = 0x69aecc6a,
    RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_PASSED_SIZE = 0xd9ea036e,
    RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_MULTICAST_TARGET = 0x5bc15ba2,
    RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR_MBA_POSITION = 0x7e098a6a,
    RC_PROCPM_CHKSTOP_PCBSINTRTYPE = 0x6da1c78d,
    RC_PROC_XIPC_INTERNAL_IMAGE_ERR_RC_LOCAL = 0x6cfa062b,
    RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_TARGET = 0xb149708b,
    RC_PMPROC_CHKSLW_EX_NOT_RUNNING_PMGP1 = 0xa7be1691,
    RC_MSS_SETUP_BARS_M_ALT_BAR_ERR_SIZE_INDEX = 0x84f89eee,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR_MBI_FIR = 0xe6dc8009,
    RC_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR_MBA_POSITION = 0x40a16727,
    RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR_MBA_POSITION = 0x7bfebbef,
    RC_P8_PLL_UTILS_INVALID_OPERATION_TARGET = 0xd8957cf3,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR_RANGE_ID = 0x752323b2,
    IO_DCCAL_INVALID_INVOCATION_RC_TARGET = 0x33b81910,
    RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_MBA_TARGET = 0xab70075e,
    IO_FUNCS_WIRETEST_FAIL_LANE_SLAVE_DATA_RC_CHIP_TARGET = 0x661da563,
    RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_PSTATEDIFF = 0x44fc7619,
    RC_PROCPM_SPCWKUP_NOT_SET_PMGP0 = 0x39a87562,
    RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING_INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_0_0 = 0xc4b210e8,
    RC_MSS_MAINT_X4_SYMBOL_ON_READ_MBA = 0x5ffd7a23,
    RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_OBJECT_ERROR_LPST_RETURN_CODE = 0x5560798d,
    RC_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET_SLAVENUM = 0x5cfb7d67,
    IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_WIRETEST_LANEINFO_PG = 0xec7de5ea,
    RC_MSS_EFF_CONFIG_INVALID_RDIMM_FREQ_INVALID_RDIMM_FREQ = 0xdac6ff9c,
    RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_EXPECTED_REG = 0xba96e7df,
    RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR_TARGET = 0xe2af01ad,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR_MCI_FIR = 0x470d7d78,
    RC_PROC_EXTRACT_SBE_RC_I2C_ERROR_I2C_BAD_STATUS_0_3 = 0xe9b0f4dc,
    IO_FUNCS_REPAIR_FAIL_RC_MASTER_RX_BAD_LANE_ENC_GCRMSG_PG = 0x433d282c,
    RC_IPMS_CONFLICTING_IDLE_STATES_PCBS_FSM = 0x4ad1c594,
    RC_PROCPM_PSTATE_MONITOR_ERR_THISCHIP = 0xce9e22b9,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR_MBI_FIR = 0xf55d58f2,
    REG_FFDC_ABUS_PLL_NO_LOCK_REGISTERS = 0x95437f1f,
    RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_PMGP1 = 0x977251ea,
    RC_I2C_COMPLETE_BIT_TIMEOUT_RC_CHIP_TARGET = 0xdf4dcca1,
    RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR_XIPRC = 0x21f35a6b,
    RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_F_OW_PACK_PRIORITY = 0xb4917226,
    RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_MAX = 0xd344d648,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1_CHIP_NAME = 0x12fdbed6,
    IO_FIR_LANE_RX_PARITY_ERROR_RC_LANE_ID = 0xcafab7ef,
    RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_EXPECTED_REG = 0xfe7ba21b,
    RC_MSS_SLEW_CAL_ERROR_PORT0_STAT_REG = 0xa873a013,
    RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_IMAGEADDR = 0xfa4eeeb5,
    RC_ROSETTA_MAP_BAD_SWIZZLE_VALUE_SWIZZLE_TYPE = 0x92c44779,
    REG_FFDC_DDR_PHY_FIR_REGS = 0xa4f8cd85,
    IO_FUNCS_WIRETEST_TIMEOUT_RC_FFDC_NUM_CYCLES = 0xb63bfeed,
    REG_FFDC_PROC_SLW_PBA_REGISTERS = 0x7f68245b,
    IO_FUNCS_FUNC_FAIL_RC_SLAVE_RX_TRAINING_STATUS_PG = 0xf5111806,
    RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_MBA = 0xc3560774,
    RC_PROCPM_POREBAR_PBABAR_ERROR_CHIP = 0x7c943c9a,
    RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK_LOCK_STATUS = 0xadc32093,
    RC_MSS_PDA_MRS_NOT_FOUND_MRS_VALUE = 0xd76a40f6,
    RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE_CEN_TARGET_NUM = 0xee92f20d,
    RC_OPT_MEMMAP_GROUP_ERR_MATCH_COUNT = 0xe869ae7d,
    RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_END_ADDR1 = 0xe831322a,
    RC_PROCPM_PSTATE_DATABLOCK_PDV_OPPOINT_ORDER_ERROR_CHIPLET_NUM = 0x1028ffbb,
    RC_PROC_THREAD_CONTROL_START_FAIL_CORE_TARGET = 0x966dd3b2,
    RC_PROCPM_CHKSTOP_ATTRIGNOREXSTOP = 0xc33eed48,
    RC_PROC_XIPC_CHIPLET_ID_MESS_DATA_CHIPLET_ID_REQ = 0x216a28ae,
    RC_GET_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_PROC_CHIP = 0x64f7057d,
    RC_PROCPM_PSTATE_DATABLOCK_PSTATE_GT_GPSTPMAX_ERROR_PSTATE = 0x4e8c3189,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR_MBI_STAT = 0xedb9cd8f,
    REG_FFDC_PROC_CFAM_REGISTERS = 0x5d934cc9,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR_MCI_FIR = 0xe1697b7d,
    IO_FIR_BUS_RX_PARITY_ERROR_RC_RX_ERROR_REG = 0x967befff,
    RC_GET_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CHIP_NAME = 0x19f5e91c,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_HPX_MODE_NEXT_CENT_DATA = 0xd57e8771,
    IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_ZCAL_N = 0xf8eb2566,
    RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_MAX_PLL_RING_SIZE = 0xbacdaf95,
    RC_PROC_XIPC_APPEND_SLW_SECTION_ERROR_RC_LOCAL = 0x8e1e771c,
    RC_MSS_MAINT_INVALID_CMD_CMD_TYPE = 0xd9b279b4,
    RC_PROC_XBUS_SCOMINIT_INVALID_TARGET_CONNECTED_XBUS_TARGET = 0x01ea35f2,
    RC_EX_CHIPLET_AISS_WA_INACCESSIBLE_GP3ADDR = 0x13ec79da,
    RC_MSS_EFF_MB_INTERLEAVE_PLUG_DECONFIG_DIMM_CASE = 0x3bdd0a1c,
    RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_DATA0 = 0x408ef566,
    RC_MSS_EFF_CONFIG_MISMATCH_SIDE_CUR_DIMM_SPD_VALID_U8ARRAY_0_1 = 0x9a4c4a3f,
    RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_REGIONS_TO_ENABLE_VALID = 0x125bcd5c,
    RC_PROCPM_PMCRESET_SPIVID_CONFIG_ERROR_ATTR_SPIVID_PORT_ENABLE = 0x8979e75b,
    RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_ENABLED = 0x65129924,
    RC_MSS_MAINT_ZERO_DDR_FREQ_MBA = 0x8858ad83,
    RC_PROCPM_MST_SEQUENCER_STATE_ERR_CHIP = 0xe9f65875,
    IO_FUNCS_DESKEW_TIMEOUT_RC_MASTER_CHIP_INTERFACE = 0x7a6b056e,
    IO_CLEAR_FIRS_INVALID_INVOCATION_RC_ENDPOINT = 0xd7051fff,
    RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_CMD_RATE = 0x0048cfdd,
    REG_FFDC_PROC_ABUS_CLOCK_CONTROLLER = 0x6efafc00,
    RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE = 0xd6c027ea,
    IO_FUNCS_EYEOPT_FAIL_RC_MASTER_RX_LANE_BAD_0_15_PG = 0xad87c957,
    RC_MBVPD_DRAM_2N_MODE_NOT_EQUAL_PORT1 = 0x4a7da87f,
    RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_PIB_ERROR_CHIP = 0xd1e90841,
    IO_RUN_TRAINING_CHECK_DLL_WORKAROUND_FAIL_DLL_REG = 0x2f4e8db2,
    RC_IPMS_CONFLICTING_IDLE_STATES_PIRR0_REG = 0xfef22c2e,
    RC_PROC_THREAD_CONTROL_STOP_FAIL_THREAD = 0x749ae513,
    RC_PROC_XIPC_CHIPLET_ID_MESS_DATA_CHIPLET_ID_VPD = 0xc77a31e6,
    IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_EYE_OPT_STATE_PL = 0x1d6dbad7,
    RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_MULT_2_L_LRDIMM_RANK_MULT_MODE = 0xa4f89ebc,
    REG_FFDC_MSS_DRAMINIT_TRAINING_FAILURE_DISABLE_REGS = 0x2d8cef6e,
    RC_PROC_SLWB_IMGBUILD_ERROR_RC_LOCAL = 0x41603bd6,
    RC_PROCPM_PSTATE_MONITOR_ERR_PSTATETARGET = 0x8d650d36,
    RC_OPT_MEMMAP_MIRROR_BASE_ERR_ADDR = 0xb46436be,
    RC_INITFILE_EXECUTION_ERROR_FFDC_SCOM_LEN = 0x26a7b51f,
    PROC_ENABLE_RECONFIG_CLEANUP_POST_RESET_MCS_UNIT_ID_FAIL_TARGET = 0x5cef8257,
    RC_PROC_CEN_REF_CLK_ENABLE_CONFIG_ERR_ATTACHED_CENTAUR_POSITIONS = 0x1f93e7ee,
    RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE_MIRROR_PLACEMENT_POLICY = 0x68cf8753,
    RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR_DCM_INSTALLED_2 = 0x1a10f7bf,
    RC_PROCPM_PMCRESET_SPIVID_CONFIG_ERROR_MASTER_TARGET = 0x297193fc,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_OP = 0x70a4f7cf,
    RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE_HALT_CODE = 0xbd9d8234,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_BASE_ADDR1 = 0xca44a13b,
    RC_PROC_PBA_BAR_SIZE_INVALID_i_index = 0xdb6d65f6,
    IO_FUNCS_WIRETEST_TIMEOUT_RC_SLAVE_GROUP = 0xe333f09c,
    RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_EX = 0xc44c8082,
    RC_MSS_MAINT_INVALID_STEER_MUX_RANK = 0x564415b9,
    RC_PROC_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR_TOD_ERROR_REG = 0x964a0f48,
    RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_DATA_BUF2_SIZE = 0xf4175681,
    RC_MSS_SLEW_CAL_INVALID_DRAM_GEN_DRAM_GEN = 0x972b227d,
    RC_MPIPL_MCD_RECOVERY_NOT_DISABLED_RC_MCD_RECOV_CTRL_REG_DATA = 0xa46b2352,
    RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_DATA_OVERLAY_RING_BYTE = 0x1dc83fde,
    IO_FUNCS_WIRETEST_FAIL_LANE_MASTER_DATA_RC_RX_WT_STATUS_PL = 0xc426a271,
    RC_PROC_FAB_IOVALID_A_PARTIAL_GOOD_ERR_TARGET = 0xb512e6dd,
    RC_PROC_THREAD_CONTROL_STEP_FAIL_PTC_STEP_COMP_POLL_LIMIT = 0xfdfe54c8,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO_DESIRED_CORES = 0xc7bdf62b,
    RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE_HALT_CODE = 0x5f3e5c05,
    RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_GT_GPSTPMAX_ERROR_RETURN_CODE = 0x295b1f24,
    RC_MBVPD_INVALID_MT_DATA_RANK_NUM = 0x4010a692,
    IO_RUN_TRAINING_FIR_MAX_SPARES_EXCEEDED_RC_SPARE_ERROR_REG = 0xcb287b98,
    RC_PROC_XIPC_IMGBUILD_ERROR_RC_LOCAL = 0x535916c1,
    RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_DRAM_WIDTH_DRAM_WIDTH = 0xbdb8f5ed,
    RC_MSS_CDIMM_INVALID_NUMBER_SENSORS_FFDC_DATA_1 = 0x117c4384,
    RC_PROCPM_POREBAR_LOC_ERROR_MEMLOC = 0x00b15f9d,
    RC_FAPIPOREVE_HALTED_WITH_ERROR_TARGET = 0xf54b2c1e,
    IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_AN_PL = 0xd1c9ad40,
    IO_FUNCS_DESKEW_FAIL_RC_SLAVE_RX_LANE_BAD_0_15_PG = 0x420a00f4,
    RC_MSS_CDIMM_INVALID_NUMBER_SENSORS_FFDC_DATA_2 = 0x4a2270a7,
    IO_GCR_WRITE_MISMATCH_RC_WRITE_BUF = 0xbc7b90a4,
    RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_SCOM_ADDRESS = 0x23ec41b8,
    RC_MSS_MAINT_INVALID_SYMBOL_INDEX_DRAM_WIDTH = 0x078ce5ed,
    RC_IPMS_UNSUPPORTED_SV_VALUE_TRANS_SV_ETR = 0x883dca05,
    IO_FUNCS_FUNC_MODE_TIMEOUT_RC_MASTER_GROUP = 0xe5a902f4,
    RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_MUX_TYPE = 0xbce1fbea,
    RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_CHIP_ID = 0x61bae87c,
    RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL_ATTR_MVPD_DATA_2 = 0xe19e170b,
    RC_PROCPM_VLT_TIMEOUT_PSTATEACTUAL = 0xf38b662f,
    RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_ERROR_RETURN_CODE = 0x4429cce9,
    RC_RCV_IMP_SHMOO_INVALID_MARGIN_DATA_COUNT_DATA = 0x5add2c1c,
    RC_PROCPM_PSTATE_DATABLOCK_PSAFE_ERROR_RETURN_CODE = 0x9c094156,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CURRENT_BAD_DQ_BITMAP_RANK1 = 0xb2f8340f,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_D0_REG = 0xcb296dc8,
    RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CMD_TYPE = 0xf3ca9411,
    RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_MIN_CMD_RATE = 0x9941a7f3,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_I2CE1_REG = 0x5a971c74,
    RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_BAD_HALT_SUBSTEP_NUM = 0x88b8d893,
    RC_PROCPM_GPE_BAD_ENGINE_CHIP = 0xff26d2c1,
    RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_THREAD = 0x7ed9152f,
    REG_FFDC_CEN_STANDBY_REGION = 0xaa048078,
    RC_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR_MBMACA = 0x5a4efd73,
    RC_PROC_PBA_ADDR_OUT_OF_RANGE_exp_BAR_ADDR_RANGECHECK_HIGH = 0xa3928904,
    RC_PROCPM_GPE_RESET_TIMEOUT_POLLCOUNT = 0xee1d25f6,
    REG_FFDC_PROC_PCIE_CLOCK_CONTROLLER = 0x3f383e12,
    RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_TARGET = 0x7bef746b,
    RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_MBA_TARGET = 0x5935f67b,
    RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_GROUP_SIZE = 0x1ae3f179,
    RC_PROCPM_SLW_RESET_TIMEOUT_MAXPOLLS = 0x4e2bf5da,
    RC_FAPIPOREVE_ERROR_DETACHING_SLAVE_TYPE = 0x942ba86d,
    RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE_DRAM_GEN_START = 0xbdc1c882,
    RC_MSS_VOLT_OVERIDE_MIXING_OVERRIDE_TYPE = 0xd4cbf06f,
    RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR_PORT = 0x40c30703,
    RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS_MINIMUM = 0xd0407337,
    IO_FUNCS_EYEOPT_TIMEOUT_RC_MASTER_GROUP = 0xe058695d,
    REG_FFDC_I2C_ERROR_REGS = 0x9b8b4845,
    RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR_IMP = 0x23b4eac6,
    RC_CEN_FIR_FFDC_TARGET = 0xe8a1ab36,
    RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK_ACTUAL_STATUS = 0xa4158864,
    IO_FUNCS_EYEOPT_FAIL_RC_MASTER_RX_TRAINING_STATUS_PG = 0x0d94a8d5,
    RC_PROC_EXTRACT_SBE_RC_PCI_CLOCK_ERROR_PIB_DATA_READ_PARITY_ERROR = 0x7a91681f,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_CHIP_NAME = 0xcb30245c,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR_MBI_FIR = 0x2cec313a,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_CHIP_UNIT_POS_MBA0 = 0x9261dda2,
    IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_RX_FIFO_STAT_PL = 0x780a008b,
    IO_RUN_TRAINING_FIR_MAX_SPARES_EXCEEDED_RC_CHIP_TARGET = 0x62ec9951,
    RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR_PORT_POSITION = 0xc2c9b67b,
    RC_PROCPM_SPCWKUP_TIMEOUT_ENTITY = 0x4615bbb6,
    RC_MSS_EXCEED_TAA_MAX_NO_CL_CL_SUPPORTED = 0x952f4078,
    RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_RANK = 0xe40808c8,
    RC_MSS_MAINT_CMD_IN_PROGRESS_MBMSR = 0x8578f104,
    RC_MSS_SLEW_CAL_TIMEOUT_PORT0_DATA_ADR = 0x9ad2d043,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS_NUM_RANKS_1_1 = 0x2d9aad49,
    RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_MUX_TYPE = 0x5e0072aa,
    IO_RUN_TRAINING_SET_PLL_INVALID_INVOCATION_RC_TARGET = 0x561db348,
    RC_IPMS_CONFLICTING_IDLE_STATES_IPMS_STATE = 0xb35d3be5,
    RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_FIR_REG = 0x3b2a2cf9,
    RC_CEN_XIPC_IMGBUILD_ERROR_RC_LOCAL = 0xbc2b152e,
    RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR_FAILING_ATTRIBUTE = 0xe24c3d57,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_RC = 0xbc7ce3be,
    RC_PROC_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR_TOD_ERROR_REG = 0x69ad0c19,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_ADU_IOS_LINK_EN_DATA = 0xb5036cb2,
    RC_IPMS_STATE_NOT_FOUND_BUG_PMC_QUEUE_STATE = 0x80cb537e,
    RC_MSS_MAINT_INVALID_ADDR_MBAFIR = 0xa9010474,
    REG_FFDC_PROC_SBE_NPLL_SETUP_FILTER_PLL = 0x49962787,
    RC_PROCPM_POREBAR_PBABAR_ERROR_MEMBAR = 0x9ac3d7b9,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_PROC_CHIP = 0x32e5d63e,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_NUM_CHIPS = 0xee18d917,
    IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_RX_STAT_PL = 0x997bb1b9,
    REG_FFDC_PROC_MBOX_REGISTERS = 0x0a10fb43,
    RC_GET_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CHIP_EC = 0x6b3c328e,
    RC_CEN_MEM_PLL_INITF_UNSUPPORTED_MSS_FREQ_MSS_FREQ = 0xbaf227a9,
    RC_MVPD_EX_L2_SINGLE_MEMBER_ENABLE_BAD_FIELD_SIZE_FIELD_SIZE = 0x98d5b572,
    RC_GET_PLL_RING_INFO_ATTR_INVALID_OUTPUT_SIZE_ATTR_ID = 0xd3164108,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR_MBI_FIR = 0x13070b33,
    RC_PROC_BUILD_SMP_CORE_FREQ_RANGE_ERR_FREQ_CORE_NOM = 0xa70d7ce5,
    REG_FFDC_DMI_FIR_REGS = 0x1ac6556d,
    RC_INITFILE_EXECUTION_ERROR_FFDC_COLUMN = 0x2fcaff51,
    RC_PROC_EXTRACT_SBE_RC_ENGINE_RETRY_SCOM_ADDRESS = 0x92d4dd4e,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_MSS_MEM_MC_IN_GROUP = 0xd9ac1efc,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_VIRTUAL = 0x27a498f0,
    RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_ATTR_IDX2 = 0xe0518eb3,
    RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_TARGET = 0xc65ff977,
    RC_PROC_XIPC_VPD_KEYWORD_RESOLVE_ERROR_DATA_RING_LIST_VPD_KEYWORD = 0xd097cb88,
    RC_VPP_FUNCTIONAL_CENTAUR_VPD_READ_ERROR_TARGET_POSITION = 0x7acde537,
    RC_IPMS_PMHIST_CODE_BUG_PMHIST_STATE = 0x2f39b4bb,
    RC_INSUFFICIENT_VPD_RETURNED_RETURNED_SIZE = 0x80ad402c,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF_MCI_FIR = 0xe0fe6dab,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_CONTROL_REG = 0xb43ebd14,
    RC_PROC_EXTRACT_PORE_HALT_FFDC_FFDC_DATA = 0xcda58470,
    RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_ATTR_DATA = 0x6660e7f8,
    RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_THREAD = 0xf35014d6,
    RC_PROCPM_PFETLIB_TIMEOUT_DOMAIN = 0x88752471,
    RC_FAPIPOREVE_ERROR_DETACHING_SLAVE_ERROR = 0x8952dad8,
    RC_MSS_UNSUPPORTED_SPD_DATA_DDR3_MTB_DIVIDEND = 0xec91c03f,
    RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_OHAAISSIOADDR = 0xfde3a5ed,
    RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_MBMCT = 0xe6c07043,
    RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE_SBE_RUNNING = 0xf7f8814d,
    IO_FUNCS_EYEOPT_FAIL_RC_SLAVE_GROUP = 0x5db535d2,
    REG_FFDC_CEN_MBA_LFIR_MASK_REGISTERS = 0x15b069db,
    RC_ROSETTA_MAP_INVALID_INPUT_MBA_TARGET = 0x29f82b93,
    IO_FUNCS_WIRETEST_TIMEOUT_RC_MASTER_CHIP_INTERFACE = 0x872b881d,
    RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_PC_STACK_ERROR = 0xe8e78dae,
    RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VCS_ERROR_RAW_VALUE = 0x105c674f,
    REG_FFDC_PROC_SBE_REGISTERS = 0xd767afc2,
    RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_i_pba_bar_addr = 0xa7f7f10d,
    RC_PROCPM_SPCWKUP_INVALID_PMHISTORY_PMHIST = 0x94387d8c,
    RC_GET_SPD_ACCESSOR_INVALID_OUTPUT_SIZE_ACTUAL_SIZE = 0xcfea9f61,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_END_ADDR2 = 0x8a2dd5d9,
    RC_GET_TP_DBG_DATA_PARAMETER_ERR_TARGET_TYPE = 0xa3ac6dda,
    RC_PROCPM_PORESLW_CODE_BAD_MODE_IMODE = 0x96db04dd,
    RC_PROC_XIPC_PORE_INLINE_RS4_LAUNCH_CREATE_ERROR_RC_LOCAL = 0x28fbee0e,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1_PROC_CHIP = 0xe66b68ca,
    RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_CFG_RDTAG_DLY = 0xbba08e91,
    RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_SOURCE_CHIP_TARGET = 0xb142534c,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_CHIP_IDS = 0x63730710,
    RC_PROC_PBA_BAR_SIZE_INVALID_i_pba_bar_size = 0x90696e1d,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_EXE_TRIGGER_REG = 0x37b39d29,
    RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_DRAM_WIDTH = 0x24383396,
    RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE_HALT_CODE = 0x347f0b25,
    RC_PROC_ADU_UTILS_INVALID_FBC_OP_ADDRESS = 0xd7abd54e,
    RC_MBVPD_UNEXPECTED_OUTPUT_TYPE_ATTR_ID = 0x89379ae6,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS_SDRAM_COLS_1_0 = 0xb3f1b2a0,
    RC_PROC_BUILD_SMP_NO_MASTER_SPECIFIED_ERR_OP = 0x0f679806,
    RC_PROC_SETUP_BARS_ATTR_QUERY_ERR_ATTR_IDX2 = 0x40fe4cec,
    RC_CEN_MEM_STARTCLOCKS_UNEXPECTED_CLOCK_STATUS_MEM_CLK_STATUS_REG = 0x513f5484,
    RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_ENABLED2 = 0xe5b42727,
    RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_DIMM = 0x965649ec,
    RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_RANK = 0xff72b733,
    RC_MBVPD_SUPPLIER_ID_NOT_IN_MV_VPD_MODULE_ID = 0xd9984f85,
    RC_MSS_MAINT_NO_X8_ECC_SPARE_SYMBOL = 0xb204c9cd,
    RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_IVRM_CTRL = 0x994ef48d,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_I2CE2_REG = 0xf98cba40,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR_MCI_FIR = 0x79d446bb,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR_MCI_FIR = 0xdfe48c7c,
    IO_FUNCS_EYEOPT_FAIL_RC_SLAVE_CHIP_INTERFACE = 0xab916e56,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_CLEAN_BAD_DQ_BITMAP_RANK1 = 0xf28a3701,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MEM_BASES = 0x3b80efb5,
    RC_PMPROC_CHKSLW_EX_NOT_RUNNING_PMHIST = 0xa1f5fbfa,
    RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE_CEN_MBA_NUM = 0xe2015921,
    RC_INITFILE_TGT_NUM_OUT_OF_RANGE_FFDC_IF_NUM_TGTS_PASSED_IN = 0x9e4ca7d3,
    REG_FFDC_TOD_REGISTERS = 0x40c437df,
    RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR_TARGET = 0x9b720cb3,
    RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR_PORT = 0x9cbcb01f,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_RESET_REG = 0xb33d4749,
    RC_PROCPM_SPCWKUP_TIMEOUT_HISTORY_ADDRESS = 0x7e08bce2,
    RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_MODEL_ERROR_CHIP = 0x4e780e12,
    RC_MSS_EFF_CONFIG_MISMATCH_SIDE_CUR_DIMM_SPD_VALID_U8ARRAY_1_1 = 0xf8b50a42,
    RC_MSS_UNSUPPORTED_SPD_DATA_DDR3_MTB_DIVISOR = 0xbbf933c7,
    RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_i_pba_bar_addr = 0xdb298dc5,
    REG_FFDC_INVALID_ADDR = 0x67d6d7a6,
    RC_PROC_EXTRACT_SBE_RC_INTERNAL_ERROR_GROUP_PARITY_ERROR_0_4 = 0x52dd725d,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MEM_SIZES = 0x5a6b4012,
    RC_IPMS_CONFLICTING_IDLE_STATES_PIRR1_REG = 0x69f9ff0c,
    RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION_ENGINE = 0x3aa28685,
    RC_MSS_EFF_CONFIG_SDRAM_ROWS_ERROR_SDRAM_ROWS = 0xc9eef2a3,
    RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR_TARGET = 0x2534cd00,
    RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_ATTR_DATA = 0x18f2de51,
    RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_ISTEP_NUM = 0x3f38555e,
    RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR_MCI_STAT = 0x72d02a4f,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_CEN_POS = 0x0d0eecb6,
    RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL_ATTR_MVPD_DATA_4 = 0x2db5c401,
    REG_FFDC_CEN_CHIP_LFIR_REGISTERS = 0x547f0b22,
    IO_FUNCS_REPAIR_TIMEOUT_RC_MASTER_GROUP = 0x7b7c80ec,
    RC_ROSETTA_MAP_INVALID_INPUT_TYPE_PARAM = 0x51e892bf,
    RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_SYMBOL_MARK = 0xcace50fd,
    RC_MSS_EFF_CONFIG_MISMATCH_TOP_CUR_DIMM_SPD_VALID_U8ARRAY_0_0 = 0xcf1fff72,
    RC_P8_PLL_UTILS_SBE_TIMEOUT_ERROR_TARGET = 0x351a4350,
    RC_CONFIG_RCV_IMP_INVALID_INPUT_PORT_PARAM = 0x90ee59c3,
    RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_VALUE = 0xba62f5bb,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF_MBI_STAT = 0x35200d96,
    RC_MSS_EFF_CONFIG_MISMATCH_TOP_CUR_DIMM_SPD_VALID_U8ARRAY_0_1 = 0xa6e36b55,
    RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_CHIP_MARK = 0x0069d6b3,
    RC_MSS_MAINT_INVALID_ADDR_CMD_TYPE = 0xb820b2e4,
    RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_DEST_NODE_ID = 0x0d4c5870,
    RC_IPMS_STATE_NOT_FOUND_BUG_PORRR0_REG = 0xaa9370d2,
    RC_PROC_BUILD_SMP_INVALID_TOPOLOGY_X_CONNECTED_CHIP_IDS = 0x913f6b33,
    RC_MSS_EFF_CONFIG_MISMATCH_TOP_CUR_DIMM_SPD_VALID_U8ARRAY_1_0 = 0xbcf6c69d,
    RC_CONFIG_SLEW_RATE_INVALID_INPUT_PORT_PARAM = 0x9439a35f,
    RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_MBA = 0xcf0d284b,
    RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_PSTATE_MINMAX_BOUNDS_ERROR_FREQ_KHZ = 0xb49bac84,
    RC_PROCPM_PSTATE_DATABLOCK_PSTATE_GT_GPSTPMAX_ERROR_RETURN_CODE = 0xb0ecb700,
    RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_F_AGGREGATE = 0x9c2d7174,
    RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE_SUBSTEP_NUM = 0xeab1c65b,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA_ATTN_REPORTED = 0x5af9e00c,
    RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_ATTR_ID = 0x4efbc72e,
    RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR_TARGET = 0x2daf03e5,
    REG_FFDC_CHIP_LFIR_REGISTERS = 0x2bd3362f,
    RC_PROC_XIPC_BUF_PTR_ERROR_DATA_BUF2_PTR = 0xb0f1141f,
    RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING_INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_1_1 = 0x84fedb90,
    RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_DEST_LINK_TARGET = 0x08f0ab27,
    RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_MBECCFIR = 0xd2750b08,
    RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_GROUP_INDEX_B = 0xef394c89,
    RC_PROCPM_POREBAR_SIZE0_ERROR_IMAGEADDR = 0x05164a8a,
    RC_MSS_EFF_CONFIG_CHECKERBOARD_MODE_INVALID_MCS_PER_GROUP_ALL_MCS_IN_INTERLEAVING_GROUP = 0xcb488384,
    RC_MSS_MAINT_NO_UE_TRAP_MBMCT = 0x875f4850,
    RC_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED_DEVICE_TYPE = 0xbec81743,
    RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_FREQ_PB = 0xa2ed552e,
    RC_PROCPM_PMCRESET_IDLE_TIMEOUT_ERROR_PORR = 0x9e7194f6,
    RC_MSS_EFF_CONFIG_RDIMM_UNSUPPORTED_TYPE_UNSUPPORTED_VAL = 0x7d3d86d5,
    RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_DATA_IMG_SIZE_MAX = 0xae8aff0e,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS_MBI_STAT = 0xe7207b05,
    RC_I2C_FIFO_INCOMPLETE_RC_DATA_REG = 0xf2ca8c9d,
    RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_SOURCE_LINK_ID = 0xa5c254cd,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR_MBI_FIR = 0xa3acc4ad,
    RC_MSS_EFF_CONFIG_DRAM_DENSITY_ERR_SDRAM_DENSITY = 0xbf2b86b4,
    RC_PROC_BUILD_SMP_LINK_TARGET_TYPE_ERR_DEST_LINK_TARGET = 0xdeca7179,
    RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL = 0x85737c0a,
    RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR_ATTR_IDX2 = 0x1dfd48d8,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_I2CE0_REG = 0xf6849797,
    RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC_PROC_CHIP = 0x23c7fce1,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CLEAN_BAD_DQ_BITMAP_RANK1 = 0xed8f2978,
    RC_PROCPM_PMCRESET_O2P_TIMEOUT_ERROR_O2PSTATUS = 0x821827f8,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF_MBI_FIR = 0xfdbef25f,
    RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR_MCI_FIR = 0x5112eb7f,
    RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION_CHIP = 0x6ee93928,
    REG_FFDC_PROC_SLW_FIR_REGISTERS = 0xfa4ded92,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR_MCI_STAT = 0x1cfbdd60,
    RC_GET_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_PROC_CHIP = 0x8834895a,
    RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR_MBA_POSITION = 0x83bd1243,
    RC_MSS_SLEW_CAL_ERROR_PORT1_STAT_REG = 0x529cb218,
    IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_LANE_DISABLED_VEC_0_15_PG = 0xd5265f6b,
    RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_RC_LOCAL = 0xee1d1c92,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR_MCI_STAT = 0xf91f37a3,
    IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_RX_PROT_STATUS_PL = 0x1e4cf897,
    REG_FFDC_CHIP_GLOB_ATTN_MASK_REGISTERS = 0x3ae1c3c5,
    RC_FAPIPOREVE_INVALID_BREAK_POINT_TYPE_TYPE = 0x05e6ca57,
    RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_MAX = 0x37ce83d3,
    REG_FFDC_TEST_X_EX_REGISTERS = 0xb225f1ca,
    RC_PROC_SLWB_INTERNAL_IMAGE_ERR_RC_LOCAL = 0x733fb976,
    RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR_DIMM = 0xe6e5f6f5,
    RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_SYMBOL = 0xd51ca8e5,
    RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR_NODE_ID = 0x0cc153db,
    RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK_EXPECTED_STATUS = 0xfcf52106,
    RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_GROUP_SIZE = 0x6436246d,
    RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR_PORT_POSITION = 0x31e25761,
    RC_CFG_MCB_DGEN_INVALID_INPUT_DATA_MODE_PARAM = 0x0f19abba,
    IO_FIR_TOO_MANY_BUS_ERROR_RC_BUS_ERROR_REG = 0xe6454293,
    IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_AMIN_PL = 0x583fcc15,
    RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_END_ADDR2 = 0x31085339,
    REG_FFDC_CHIP_LFIR_MASK_REGISTERS = 0xb3f27625,
    RC_IPMS_STATE_NOT_FOUND_BUG_PIRR1_REG = 0x8a82f390,
    RC_PMPROC_PFETLIB_RAIL_OFF_EX = 0x92dbcc6d,
    RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_ATTR_DATA = 0x9e1cb122,
    RC_PROCPM_PSTATE_DATABLOCK_PSAFE_MINMAX_BOUNDS_ERROR_PSTATE = 0xd02ceafa,
    RC_PROC_ADU_UTILS_INVALID_LOCK_ATTEMPTS_TARGET = 0x5369ac59,
    RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_STATUS_REG = 0xb5ad3d7c,
    RC_IPMS_SUSPICIOUS_PCBS_FSM_PMHIST_STATE = 0xc1aaeb23,
    RC_MSS_EFF_CONFIG_CHECKERBOARD_MODE_INVALID_MCS_PER_GROUP_MSS_INTERLEAVE_ENABLE = 0x5dfb7f57,
    RC_IPMS_UNSUPPORTED_SV_VALUE_TRANS_SV = 0xc872b3a0,
    IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_DCD_ADJ_PL = 0x600693f7,
    RC_MSS_VOLT_DDR_TYPE_COMPLIANT_VOLTAGE_DIMM_VOLTAGE = 0x3a62c81d,
    IO_FUNCS_EYEOPT_TIMEOUT_RC_FFDC_NUM_CYCLES = 0xf11be264,
    RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_FFDC_DATA_2 = 0x4dcd0902,
    RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR_QUAD = 0xdf8b3abf,
    RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_GT_GPSTPMAX_ERROR_PSTATE = 0x589b82e4,
    RC_FAPIPOREVE_ERROR_SETTING_BREAKPOINT_ERROR = 0x8129b43e,
    REG_FFDC_ABUS_LFIR_MASK_REGISTERS = 0xc2b0b4c3,
    RC_PROCPM_PBA_SLVRST_TIMED_OUT_POLLCOUNT = 0x98be6155,
    IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_AN_PL = 0xf75aeedf,
    IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_WIRETEST_STATE_PG = 0x9f61b47a,
    IO_FUNCS_WIRETEST_FAIL_RC_MASTER_CHIP_INTERFACE = 0x5af6e4c2,
    RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR_IMAGEADDR = 0x11d77ef9,
    RC_PROC_SLWB_SLEEP_PROCESSING_ERROR_EC = 0x962ed0fe,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_UPDATE_BAD_DQ_BITMAP_RANK2 = 0x1df34769,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_FFDC_VALID = 0x1771785f,
    IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_LANE_SWAPPED_VEC_0_15_PG = 0x43427761,
    RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR_DCM_INSTALLED_1 = 0xbf353d08,
    RC_PROCPM_VOLTAGE_CHANGE_MODE_ERR_PMCMODE = 0x40b734a3,
    RC_CROSS_COUPLED_INVALID_DQS_INVALID_DQS = 0x272ae67d,
    REG_FFDC_CHIP_GLOB_ATTN_REGISTERS = 0x27beca25,
    RC_MSS_MAINT_NO_X8_ECC_SPARE_DRAM_WIDTH = 0x05b91081,
    RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_BOOSTEDPCT = 0x265c1073,
    RC_FAPIPOREVE_PIB_ERROR_READING_SBEVITAL_TARGET = 0xfaa3e88d,
    IO_DCCAL_ZCAL_K2_EXCEEDED_RC_K2 = 0x2ec08102,
    RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_TYPE_TARGET = 0xcee4b946,
    RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR_SLAVE_TARGET = 0x0fe37317,
    IO_FUNCS_REPAIR_TIMEOUT_RC_MASTER_CHIP_INTERFACE = 0xdd7b0bbe,
    RC_MSS_CCS_UE_SUE_REG_CONTENTS = 0xfbeeba20,
    RC_PROC_EXTRACT_SBE_RC_ENGINE_RETRY_PIB_DATA_READ_PARITY_ERROR = 0x427f377c,
    RC_MSS_MAINT_INVALID_CHIP_INDEX_SYMBOL_MARK = 0x3b13bd07,
    RC_PROC_EXTRACT_SBE_RC_PCI_CLOCK_ERROR_PIB_ERROR_CODE = 0x7f04835c,
    IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_LANEID = 0x9a691d37,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS_SDRAM_BANKS_1_0 = 0x975a4ad3,
    RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE_ISTEP_NUM = 0xb35755db,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_POS = 0xdc09f88d,
    RC_PROC_SLWB_L2_FARY_OVERLAY_ERROR_DATA_FAIL_BYTE_NO = 0x01eb31ac,
    REG_FFDC_PROC_SBE_NPLL_SETUP_XBUS_PLL = 0x3e487ad2,
    RC_IPMS_CONFLICTING_IDLE_STATES_PMHIST_STATE = 0x863a472d,
    RC_PROC_SLWB_BUF_PTR_ERROR_DATA_BUF2_PTR = 0x9488ef75,
    RC_PROC_XIPC_UNEXPECTED_FIELD_SIZE_DATA_SIZE_VPD_FIELD = 0x51354ed8,
    RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PMGP0 = 0x45392165,
    RC_MSS_VOLT_VPP_OFFSET_VALUE_ERROR_VPP_SLOPE = 0x1fbfd613,
    RC_PROCPM_PSTATE_MONITOR_ERR_PSTATESTEPTARGET = 0xf7f9b002,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR_MCI_FIR = 0x263f4586,
    RC_FAPIPOREVE_HALTED_WITH_ERROR_ERROR = 0x208d8482,
    RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_REGION_ENABLED = 0xd3e4ab77,
    RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_MAX_HW_VALUE = 0x5e902604,
    RC_PROCPM_OCC_CONTROL_BAD_405RESET_PARM_RESET_PARM = 0xf00899c1,
    RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR_TARGET_POSITION = 0x9cf25ea4,
    RC_EX_CHIPLET_AISS_WA_INACCESSIBLE_PMGP0REG = 0x3a01aa84,
    RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_ERROR_LPST_RETURN_CODE = 0xe8e7ab75,
    RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_NOT_STOPPED_TARGET = 0x890d24ab,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_FREQ_1 = 0x876b895c,
    RC_PROC_BUILD_SMP_CORE_CEILING_RATIO_ERR_FREQ_CORE_CEILING = 0xf019b79f,
    RC_MBVPD_INVALID_ATTRIBUTE_ID_ATTR_ID = 0x1d96f502,
    RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE_OCC_SANDBOX_BAR_SIZE = 0xfb7c2471,
    RC_MSS_MAINT_ZERO_DDR_FREQ_CMD_TYPE = 0x0a1d8195,
    RC_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE_OUTPUT_TYPE = 0x84c042b7,
    RC_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE_OUTPUT_TYPE = 0xd74cb1d7,
    RC_MSS_DP18_0_PLL_FAILED_TO_LOCK_ACTUAL_STATUS = 0x274832d8,
    RC_PROC_BUILD_SMP_INVALID_TOPOLOGY_A_CONNECTIONS_OK = 0x1dfce005,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR_MBI_STAT = 0xdca9c277,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_CTR_REG = 0xc1fb1234,
    RC_MSS_UNSUPPORTED_FREQ_CALCULATED_DIMM_MIN_FREQ = 0x6cf117ba,
    RC_PROCPM_PBA_SLVRST_TIMED_OUT_POLLVALUE = 0x0a843688,
    RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_FIR_EXP_REG = 0x2a518502,
    RC_PROC_PBA_ADDR_OUT_OF_RANGE_i_pba_bar_addr = 0x9204177a,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN_DRAM_DEVICE_TYPE_1_1 = 0xfeab824b,
    RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_i_index = 0x21b7e2c9,
    RC_MSS_MAINT_INVALID_ADDR_MBA = 0xc3b5a390,
    RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_DATA_SIZE_RS4_COMPRESS_RETURN = 0xa335905d,
    REG_FFDC_CLOCK_STOP_BAD_STATUS_REGS = 0x6ca6b21a,
    IO_FUNCS_DESKEW_FAIL_RC_SLAVE_RX_TRAINING_STATUS_PG = 0xc74ce8d6,
    RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_TARGET = 0xc2e56ec7,
    RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_RANK = 0x0c386e0b,
    RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR_MBA_POSITION = 0xa060f1f0,
    RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_IOP_DATA = 0x3e4711ab,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_ENABLED2 = 0x99d6707b,
    RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_MBACALFIR = 0x8e8dcb95,
    IO_FIR_GROUP_RX_PARITY_ERROR_RC_RX_ERROR_REG = 0x87332347,
    RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR_ATTR_IDX1 = 0xca74fcae,
    RC_MSS_EFF_CONFIG_MISMATCH_EMPTY_CUR_DIMM_SPD_VALID_U8ARRAY_1_1 = 0x9c73d7a4,
    RC_ROSETTA_MAP_BAD_MBA_POS_MBA_TARGET = 0x23528603,
    RC_MSS_VOLT_VCS_OFFSET_VALUE_ERROR_VCS_SLOPE_ACTIVE = 0x244ef634,
    RC_PROCPM_PMCRESET_IDLE_ERROR_TARGET = 0x999da668,
    RC_CEN_MEM_PLL_INITF_UNSUPPORTED_NEST_FREQ_NEST_FREQ = 0xa452f9f6,
    RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VDD_ERROR_RAW_VALUE = 0x2df877a6,
    REG_FFDC_SBE_CHECK_MASTER = 0x06326a13,
    RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_CHIP_MARK = 0xaa6d906e,
    RC_PROC_SETUP_BARS_ATTR_QUERY_ERR_ATTR_ID = 0xf075b16d,
    REG_FFDC_CEN_CHIP_GLOB_ATTN_REGISTERS = 0x9a1f5200,
    REG_FFDC_TEST_X_MBA_REGISTERS = 0x44d5b54c,
    RC_PROCPM_GET_VOLTAGE_FREQ2PSTATE_ERROR_FREQ2PSTATE_RC = 0x99999499,
    RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_SBE_VITAL = 0x452274c9,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA_SEEPROM_ECCB_STATUS = 0xc1e1049d,
    RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_MIRROR_BASE_ADDR = 0x9ae9c205,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO_BOOT_CORE_MASK = 0xc47b4949,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR_MCI_FIR = 0xb26e00bb,
    RC_PROC_XIPC_PERFORM_RING_DATACARE_ERROR_RC_LOCAL = 0xbdbd1f51,
    IO_RUN_TRAINING_CHECK_DLL_VAL_OUT_OF_BOUND_RC_DLL_REG = 0xd5d587c7,
    RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR_SLAVE_TARGET = 0xb06b46f2,
    RC_PROC_XIPC_PG_RING_TOO_LARGE_DATA_RING_SIZE_REQ = 0xf6427c80,
    REG_FFDC_EX_GLOB_ATTN_REGISTERS = 0xaef7912a,
    RC_REPAIR_RING_NOT_FOUND_RING_MODIFIER = 0x121ad260,
    RC_MSS_EFF_CONFIG_MISMATCH_EMPTY_CUR_DIMM_SPD_VALID_U8ARRAY_0_0 = 0x27b38fd3,
    REG_FFDC_MSS_RCD_PARITY_FAILURE = 0x106a8a33,
    RC_PROC_PBA_ADDR_OUT_OF_RANGE_i_index = 0x60f61c43,
    RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_IVID_ERROR_LPST_RETURN_CODE = 0x3e854adb,
    RC_PMPROC_CHKSLW_NOT_IN_ETR_GP3 = 0x0fe26e4f,
    RC_PROCPM_PSTATE_DATABLOCK_PDM_BUFFER_SIZE_ERROR_BUFFER_SIZE = 0x414fe2f5,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF_MCI_FIR = 0x0c738482,
    RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_INVALID_START_VECTOR = 0xd8ad3e82,
    IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_LANEID = 0x711a1534,
    IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_MAX = 0x48d027f5,
    REG_FFDC_SPIVID_REGISTERS = 0x8083ec2c,
    IO_FUNCS_EYEOPT_FAIL_RC_MASTER_RX_EO_RECAL_PG = 0x59dd7e91,
    IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_LANEID = 0xcd9fb5eb,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF_MCI_FIR = 0x3fa4b865,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MEM_BASE = 0x1e0b22ac,
    RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_MODEL_ERROR_MODEL_ERROR = 0xf0ac62c3,
    IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_DCD_ADJ_PL = 0x927afd54,
    IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_H1_EVEN_PL = 0xf3f5974a,
    RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_SIZEOFTHIS = 0x4c8ab1d0,
    RC_PROC_PBA_BAR_SIZE_INVALID_i_pba_bar_addr = 0x4dd12c8e,
    RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_PMHIST = 0xcf0a7984,
    RC_FAPIPOREVE_ERROR_SETTING_MRR_ERROR = 0xb560de90,
    RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_ERROR_OP_POINT = 0xabd2cb0c,
    RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_EST = 0xbc82b047,
    RC_GET_TP_DEBUG_DATA_ERR_CHIP_EC = 0x633a9391,
    IO_FUNCS_FUNC_FAIL_RC_MASTER_CHIP_INTERFACE = 0xc396949b,
    RC_MSS_VOLT_VDD_OFFSET_VALUE_ERROR_VDD_SLOPE_INACTIVE = 0x3b9bd159,
    RC_PROCPM_PSTATE_DATABLOCK_INVALID_BOOST_PERCENTAGE_ERROR_ATTRBOOSTPERCENT = 0xda032849,
    RC_MSS_EFF_GROUPING_SELCTIVE_MODE_HTM_OCC_BAR_HTM_BAR_SIZE = 0x925ad3cb,
    RC_PROC_TOD_INIT_ERROR_TOD_ERROR_REG = 0x72cb5b43,
    RC_PROC_XIPC_CREATE_FIXED_IMAGE_ERROR_RC_LOCAL = 0xc3c51f8b,
    IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_LANE_DISABLED_VEC_16_31_PG = 0xf3ff440a,
    RC_IPMS_STATE_NOT_FOUND_BUG_PIRR3_REG = 0xd8a13847,
    RC_MBVPD_DIMMS_NOT_FOUND_DIMM_P1S0 = 0x3314e9a2,
    IO_FUNCS_WIRETEST_TIMEOUT_RC_MASTER_GROUP = 0xa70a4b74,
    RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_ENTITY = 0xd0c26314,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS_SDRAM_ROWS_0_1 = 0xfc453315,
    RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_thd_activate_bit = 0x4bcc9471,
    RC_MBVPD_UNEXPECTED_ISDIMM_KEYWORD_ATTR_ID = 0xb58afa48,
    RC_FAPIPOREVE_ERROR_SETTING_MRR_MRR = 0x446266a0,
    RC_IPMS_PIRRX_CODE_BUG_PCBS_FSM = 0x78504efd,
    RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PMERR = 0xe5545226,
    RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MCS_MCI_STAT = 0x2851048a,
    IO_FIR_LANE_RX_PARITY_ERROR_RC_RX_ERROR_REG = 0x659e3cc4,
    RC_MSS_EFF_CONFIG_UNSUPPORTED_MODULE_MEMORY_BUS_WIDTH_MODULE_MEMORY_BUS_WIDTH = 0x6ff5d32c,
    RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_RANK = 0x1f0a1521,
    RC_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE_DIMM_TYPE = 0x6df6c704,
    RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADDRESS0 = 0x2037586d,
    RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_ATTR_DATA = 0xb8f37507,
    RC_MSS_MAINT_INVALID_MARKSTORE_RANK = 0xa517a607,
    RC_MSS_MAINT_INVALID_MARKSTORE_MBA = 0xd2f36934,
    RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE_TARGET = 0x9a97a3e2,
    RC_MSS_VOLT_VDD_OFFSET_VALUE_ERROR_VDD_SLOPE_INTERCEPT = 0xa502f779,
    RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_N = 0x532d7d10,
    RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR_IMAGEADDR = 0x5456175c,
    RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_exp_BAR_ADDR_RANGECHECK_LOW = 0x50158706,
    RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_TARGET1 = 0x099f826e,
    RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC_ATTR_ID = 0x8c62b127,
    IO_FUNCS_EYEOPT_FAIL_RC_MASTER_RX_LANE_BAD_16_31_PG = 0x68726957,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_HPX_MODE_CURR_CENT_DATA = 0x5d1ddefa,
    RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE_SBE_RUNNING = 0xcdab8b1d,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR_MBI_FIR = 0x2e13dfa6,
    RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_DRAM_WIDTH = 0xa0373d80,
    RC_I2C_ERROR_BIT_PRESENT_RC_ADDRESS_VAL = 0xac5d7c23,
    RC_MSS_MAINT_INVALID_STEER_MUX_MBA = 0x6bcfc305,
    RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_DCM_INSTALLED_1 = 0x03b7e419,
    RC_ROSETTA_MAP_INVALID_INPUT_INDEX_PARAM = 0xbe6d5d90,
    RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_RC_LOCAL = 0xf3d3e245,
    RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_MBA_TARGET = 0x1467ddca,
    RC_IPMS_STATE_NOT_FOUND_BUG_PCBS_FSM_PREV = 0x846dd0e9,
    RC_PROCPM_GPE_BAD_ENGINE_IENGINE = 0xc27e8db8,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_A_MODE_DATA = 0x277d358a,
    RC_PROC_SLWB_IMAGE_UPDATE_ERROR_RC_LOCAL = 0x526e6893,
    RC_VPP_FUNCTIONAL_CENTAUR_VPD_READ_ERROR_FAILING_ATTRIBUTE = 0x77d55152,
    RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR_SLWDEEPSLEEPEXITHALT = 0xdc0bc798,
    IO_DCCAL_OFFCAL_ERROR_RC_FAIL_BIT = 0x15ad7073,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_TARGET = 0x7f6d7c96,
    RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_CORE_FLOOR_RATIO = 0xad8d2c1e,
    RC_MSS_LRDIMM_INVALID_SPD_RTT_NOM_L_DRAM_RTT_NOM = 0xde9f4e1c,
    RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_NODE_ID = 0xef045ec8,
    RC_PROCPM_PMC_FW_MODE_ERROR_MASTERPMCMODE = 0xbeccea3f,
    RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_DATA_IMG_SIZE_MAX = 0x90f9cb4e,
    RC_EX_CHIPLET_AISS_WA_INACCESSIBLE_PMGP0ADDR = 0x72bb2b53,
    RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP = 0xebcd3edf,
    RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE_DIMM_VOLTAGE = 0xcadf671e,
    RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE_SBE_RUNNING = 0x0b83eccd,
    RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MEMBUF_MCI_STAT = 0x7930c630,
    RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_OHAMODEREG = 0x982cb3c6,
    IO_FUNCS_WIRETEST_TIMEOUT_RC_SLAVE_CHIP_INTERFACE = 0xe2c0d4e4,
    RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_MBA = 0x4cac0332,
    RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP = 0xd2e5250e,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR_MCI_STAT = 0xe460b100,
    RC_MSS_MAINT_START_NOT_RESET_MBMCC = 0x7a8498ef,
    RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_DATA_BUF1_SIZE = 0x38da5bfd,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA_PNOR_ECCB_STATUS = 0xbbd7e9bd,
    RC_IPMS_SUSPICIOUS_PCBS_FSM_PCBS_FSM = 0xe2fdc4d0,
    RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR_FREQ_PSTATE = 0xc9f94053,
    RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE = 0x6d7cc1cd,
    RC_GET_MEMB_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_MEMBUF_CHIP = 0xd39707a3,
    REG_FFDC_TEST_X_PROC_REGISTERS = 0x975d53e4,
    RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_L_LRDIMM_RANK_MULT_MODE = 0x24c5cb6b,
    REG_FFDC_XBUS_LFIR_REGISTERS = 0x28a41f2b,
    RC_PROCPM_SPCWKUP_TIMEOUT_I_OPERATION = 0x592c11e6,
    RC_TEST_DQ_BAD_DATA_FFDC_DATA2 = 0x4d059579,
    RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_A_AGGREGATE = 0xfefa1b47,
    RC_PROCPM_PFETLIB_TIMEOUT_PFETCONTROLVALUE = 0x2036cc42,
    RC_OPT_MEMMAP_MEM_BASE_ERR_ADDR = 0xef0614d5,
    RC_I2C_ERROR_BIT_PRESENT_RC_CHIP_TARGET = 0xf45e4256,
    RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_SLAVE_TARGET = 0xaa6c287c,
    RC_PROCPM_PFETLIB_TIMEOUT_ADDRESS = 0x77d4dceb,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR_MBI_FIR = 0xeb5d5a47,
    RC_PROC_BUILD_SMP_CORE_CEILING_RATIO_ERR_FREQ_PB = 0xd97b69d4,
    RC_GET_MEMB_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CHIP_EC = 0xba23c235,
    RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR_MBA_POSITION = 0x057628fa,
    RC_PROC_ABUS_SCOMINIT_INVALID_TARGET_THIS_ABUS_TARGET = 0x6be304ed,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR_MBI_STAT = 0xa199c676,
    RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR_PORT_POSITION = 0x55cd1a2d,
    REG_FFDC_MSS_CCS_FAILURE = 0x2a24ec79,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_STACK1_REG = 0x9da5a218,
    RC_PROC_XBUS_SCOMINIT_INVALID_TARGET_THIS_XBUS_TARGET = 0x80be5be9,
    RC_PROCPM_POREBAR_SIZE0_ERROR_MEMBAR = 0xa0c80927,
    RC_PROCPM_PSTATE_DATABLOCK_PSAFE_GT_GPSTPMAX_ERROR_RETURN_CODE = 0x90055716,
    RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION_VIRTUAL_IS_SUPPORTED = 0x0325ff14,
    REG_FFDC_CMD_TIMEOUT_MBS_REGS = 0x65d21927,
    RC_PROC_SLWB_L2_FARY_OVERLAY_ERROR_DATA_EXISTING_RING_BYTE = 0x159d4b88,
    RC_PROCPM_GPE_RESET_TIMEOUT_IENGINE = 0x559ef851,
    RC_FAPIPOREVE_MODEL_ERROR_GETTING_HALT_CODE_TARGET = 0x39c018b4,
    RC_PROC_XIPC_BUF_PTR_ERROR_DATA_BUF1_PTR = 0x81839a59,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH_BUS_WIDTH_1_1 = 0x8f5ea45f,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_X_GP0_DATA = 0x2a184199,
    RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_SIZE_OF_BUF1 = 0xb8120534,
    RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR_MAX_BITS = 0x1f5e9be2,
    RC_PROCPM_PBA_BCDE_STOP_TIMEOUT_POLLCOUNT = 0xc89d9573,
    IO_FUNCS_EYEOPT_FAIL_RC_MASTER_CHIP_INTERFACE = 0x4bacd106,
    RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_MBMACA = 0x94d8c7c7,
    RC_MSS_MAINT_INVALID_MARKSTORE_DRAM_WIDTH = 0x66c1b88f,
    RC_GET_PROC_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CHIP_EC = 0xf0e81ad0,
    RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_MINMAX_BOUNDS_ERROR_PSTATE = 0x24ae9c31,
    RC_MSS_PDA_NONMRS_ATTR_NAME_NONMRS_ATTR_NAME = 0x51a7bc72,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_PC = 0x4f197596,
    RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ERROR_GPST_RETURN_CODE = 0x545236b0,
    RC_PROC_XIPC_ILLEGAL_RS4_DECOMPRESS_ADDR_DATA_RS4_DECOMPRESS_ADDR = 0x442de850,
    RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_ENTRYOFFSET = 0xfd1c9c0f,
    RC_PROCPM_PREP_TARGET_ERR_PRIMARY_TARGET = 0xf10d04e8,
    RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR_MCI_FIR = 0x1f05b797,
    RC_MBVPD_INVALID_DIMM_FOUND_INVALID_DIMM_P1S1 = 0x4caed18a,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_ATTR_ID = 0x0a6dc524,
    RC_MSS_EFF_CONFIG_INTERLEAVE_MODE_INVALID_MCS_PER_GROUP_ALL_MCS_IN_INTERLEAVING_GROUP = 0x119c30d8,
    RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_MAX_CMD_RATE = 0x661635f8,
    RC_MSS_VOLT_VDD_OFFSET_VALUE_ERROR_VDD_SLOPE_ACTIVE = 0x784fd9d7,
    RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_FIR_EXP_REG = 0x9a539c16,
    RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_MAX = 0x3bbf309d,
    RC_MSS_VOLT_OVERIDE_MIXING_OVERRIDE_DOMAIN_TYPE = 0x47050cb5,
    RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_SBE_VITAL = 0x973c13b2,
    RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_RAS_STATUS = 0xac18f374,
    RC_PROC_XBUS_SCOMINIT_PARTIAL_GOOD_ERR_TARGET = 0xc0c99304,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_SYS_RECONFIG_MASTER_SET = 0xd1495c9f,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_CHIP_EC = 0xe397714a,
    RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR_SIZE_INDEX = 0x6e7a12ad,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS_MBI_FIR = 0x99b93be3,
    RC_MBVPD_UNEXPECTED_OUTPUT_TYPE_DIMM_TYPE = 0xedb29442,
    RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_PIB_ERROR_PIB_ERROR = 0xa8228c8c,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR_MBI_STAT = 0xe5f3dd94,
    RC_PMPROC_CHKSLW_EX_NOT_RUNNING_GP3 = 0x887e70f4,
    REG_FFDC_MCS_LFIR_REGISTERS = 0xe339b3d7,
    IO_DCCAL_OFFCAL_ERROR_RC_TARGET = 0x3b0cd1ba,
    RC_PROC_CEN_REF_CLK_ENABLE_CONFIG_ERR_CONFIGURED_CENTAUR_POSITIONS = 0x20f70acc,
    IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_ENDPOINT = 0x5e4072e9,
    RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_TARGET2 = 0x990a849a,
    RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR_BLOCK = 0x60547aa8,
    RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_REGION_ENABLED = 0x6bea7161,
    RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR_PORT = 0xb1aa1471,
    RC_PROCPM_SLW_RESET_TIMEOUT_POLLCOUNT = 0xf0101bef,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR_MCI_STAT = 0xcfa0ba40,
    RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_EX = 0x7ab5ca96,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_ADU_PMISC_MODE_DATA = 0x9b91e7ee,
    RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_MUX_TYPE = 0x00f45ccd,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_FREQ_2 = 0x8d9f1be5,
    RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR_RANKGROUP_POSITION = 0x5861718e,
    RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR_MBA_POSITION = 0x75f8f236,
    RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_TARGET = 0x33c69a3f,
    RC_IPMS_STATE_NOT_FOUND_BUG_IPMS_STATE = 0xf99e5c8b,
    RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_FREQ_F = 0x845a3e45,
    IO_FIR_BUS_RX_PARITY_ERROR_RC_ENDPOINT = 0xc0eeaca8,
    RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_ATTRIBUTE_RING_SIZE = 0x4ed4b521,
    REG_FFDC_PROC_EX_CLOCK_CONTROLLER = 0xf03a2975,
    RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_MBAXCR = 0x828373d2,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_MODE_CENT_DATA = 0x12008797,
    RC_FAPIPOREVE_FAILED_TO_INSTALL_STATE_ERROR = 0x903dfa3e,
    RC_P8_PLL_UTILS_SBE_SCAN_ERROR_PLL_BUS_ID = 0x53a58f49,
    RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_FIR_EXP_REG = 0xe1054038,
    RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_DRAM_WIDTH = 0x22b4d203,
    RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_FSP_SPCWKUP_COUNT = 0x0a011f9d,
    REG_FFDC_MSS_SLEW_CAL_FAILURE_PORT1 = 0x1207119d,
    IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_EYE_OPT_STATE_PL = 0x63802ce5,
    RC_PMPROC_CHKSLW_NOT_IN_ETR_PMGP0 = 0x735d232c,
    RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_INDEX_PARAM = 0x3e55e3bd,
    RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_RING_BLOCK_SIZEOFTHIS = 0x562a2e28,
    RC_OSC_SWITCH_UNEXPECTED_CHIP_POSITION_FFDC_CHIP_POSITION = 0x9186a805,
    IO_FUNCS_FUNC_FAIL_RC_MASTER_GROUP = 0xac134e6c,
    RC_IPMS_CONFLICTING_IDLE_STATES_PCBS_FSM_PREV = 0x0313054a,
    RC_MBVPD_INVALID_DQS_DATA_DQS_COPY = 0xd22c8b93,
    IO_FIR_RECALIBRATION_ERROR_RC_ENDPOINT = 0x14b63ece,
    RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_STEER_TYPE = 0x98dd93bf,
    RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MEMBUF_MCI_STAT = 0x82decab0,
    RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_4 = 0x3e86e8b4,
    RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_OHAMODEADDR = 0xd590b1dd,
    RC_PROC_ADU_UTILS_INVALID_LOCK_ATTEMPTS_ATTEMPTS = 0x517e68b1,
    RC_PROC_SLWB_UNKNOWN_ERROR_RC_LOCAL = 0xfd3729c2,
    IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_LANE_DISABLED_VEC_16_31_PG = 0xe7b580fd,
    IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_RX_PROT_STATUS_PL = 0x69b9b6d4,
    RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR_PORT = 0xb5134f6b,
    RC_PROCPM_GET_VOLTAGE_FREQ2PSTATE_ERROR_FREQ_MHZ = 0x72cd7bd3,
    RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_IVRM_VAL = 0xdf463aec,
    RC_MSS_UNEXPECTED_NEST_CLOCK_STATUS_ACTUAL_STATUS = 0xeca9e687,
    RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_RANK = 0xb2d644e3,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_CLEAN_BAD_DQ_BITMAP_RANK2 = 0xe569429d,
    RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION_VIRTUAL = 0x01cf1a49,
    RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_GP3 = 0xad3366fa,
    RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_MBMSR = 0x7a5dcd74,
    RC_CEN_MEM_PLL_SETUP_PLL_LOCK_TIMEOUT_CFAM_FSI_STATUS = 0x50027c2c,
    RC_PROC_CHIPLET_SCOMINIT_INVALID_TARGET_TARGET = 0x3b43ab27,
    RC_PROC_XIPC_BAD_CODE_OR_PARM_MODE_BUILD = 0x33de9a75,
    RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PCBSPM_MON2 = 0xae20e43d,
    RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR_CHIP = 0x72b29a97,
    RC_PROC_BUILD_SMP_CORE_CEILING_RATIO_ERR_CORE_CEILING_RATIO = 0xf598e354,
    REG_FFDC_O2S_REGISTERS = 0x7c9ccf32,
    RC_PROC_XIPC_IMAGE_SIZE_MESS_DATA_IMG_SIZE_MAX = 0x2ea95396,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_STACK0_REG = 0xfb2d919c,
    IO_DCCAL_ZCAL_M_EXCEEDED_RC_M = 0x31bb9ae5,
    IO_DCCAL_OFFCAL_TIMEOUT_RC_TIMEOUTCNT = 0x7f541787,
    IO_DCCAL_OFFCAL_ERROR_RC_CHIP_INTERFACE = 0x58b9b8eb,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS_SDRAM_COLS_0_0 = 0x9ce18074,
    RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_CHIPLET_ID = 0xa1e6f175,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR_MBI_FIR = 0x5b9d4a73,
    IO_FUNCS_DESKEW_FAIL_RC_MASTER_RX_LANE_BAD_16_31_PG = 0xa506c112,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_CHIPLET_ID = 0x029ab904,
    RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_PSTATE_MINMAX_BOUNDS_ERROR_PSTATE = 0xc6535932,
    RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE_CEN_TARGET_NUM = 0x12e3067a,
    RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_EXPECTED_SIZE = 0x55c488ab,
    RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_PAIR_POWER = 0xe06d81fc,
    IO_FUNCS_DESKEW_FAIL_RC_MASTER_RX_TRAINING_STATUS_PG = 0x5d3a17b8,
    IO_FUNCS_WIRETEST_FAIL_RC_MASTER_GROUP = 0xd4b9f660,
    RC_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR_MBA_POSITION = 0xde95e0b4,
    RC_MSS_LRDIMM_INVALID_MSS_VOLT_L_MSS_VOLT = 0x5baf1a91,
    RC_PROC_THREAD_CONTROL_STEP_FAIL_PTC_RAS_MODE_SINGLE = 0x1623e9ad,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS_MCI_STAT = 0xe98fe968,
    REG_FFDC_CHIP_GLOB_FIR_MASK_REGISTERS = 0x87426611,
    RC_PROC_TOD_INIT_NOT_RUNNING_CHIP_TARGET = 0x4439bc37,
    RC_CFG_MCB_TEST_MEM_INVALID_INPUT_TEST_TYPE_PARAM = 0x4f284b71,
    IO_FUNCS_FUNC_MODE_TIMEOUT_RC_FFDC_NUM_CYCLES = 0xd85e50fd,
    REG_FFDC_PROC_SLW_SPWKUP_REGISTERS = 0xe1507a70,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_SYS_CURR = 0xad1d23d1,
    RC_MSS_UNSUPPORTED_SPD_DATA_DDR3_FTB_DIVIDEND = 0x06bc7897,
    RC_PROCPM_PSTATE_DATABLOCK_IQ_BUFFER_SIZE_ERROR_BUFFER_SIZE = 0x05f8b472,
    RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_OHAMODEREG = 0xb2e271d0,
    RC_MSS_MAINT_STOP_NOT_RESET_CMD_TYPE = 0x0e7b7a5c,
    RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_FREQ_CORE_FLOOR = 0xfd2ebc65,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS_MCI_FIR = 0x01574777,
    RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_PMERR = 0x1fd8cb19,
    RC_MSS_UNEXPECTED_MEM_CLOCK_STATUS_EXPECTED_STATUS = 0xe36df9e7,
    RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_1 = 0x37c03a2a,
    RC_PROC_BUILD_SMP_CORE_FREQ_RANGE_ERR_FREQ_CORE_CEILING = 0xb40a46c6,
    RC_PMPROC_CHKSLW_EX_NOT_RUNNING_EX = 0x473c3561,
    RC_P8_MAILBOX_UTILS_PROC_REFCLK_ZERO_ERROR_REF_FREQ = 0x8e9d4f20,
    IO_FIR_LANE_TX_PARITY_ERROR_RC_TX_ERROR_REG = 0x5d6acf80,
    RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_ATTR_DATA = 0xd1b045f1,
    RC_PROC_THREAD_CONTROL_STEP_FAIL_CORE_TARGET = 0xf9737c97,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR_MBI_STAT = 0xb2178888,
    RC_MPIPL_MCD_RECOVERY_NOT_DISABLED_RC_CHIP_TARGET = 0x61fd7737,
    RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_BAD_HALT_TARGET = 0x7a77e1d5,
    RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_PAIR_WATT_TARGET = 0x6c575f91,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_BASE_ADDR2 = 0x5c3a34d0,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN_DRAM_DEVICE_TYPE_0_1 = 0x85efb37e,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_FREQ_1 = 0x31f14125,
    RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING_INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_1_0 = 0x8d6fde41,
    RC_MSS_SLEW_CAL_ERROR_PORT0_IMP = 0x84863987,
    REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS = 0xb7d0b9a0,
    RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_D = 0xa99b21d5,
    RC_PROC_START_CLOCKS_CHIPLETS_PARTIAL_GOOD_ERR_CHIPLET_BASE_SCOM_ADDR = 0xbfd3b640,
    RC_MSS_UNSUPPORTED_SPD_DATA_COMMON_MIN_TCK = 0x3411a192,
    RC_PROCPM_SPCWKUP_CODE_BAD_OP_I_OPERATION = 0xcc7fe5a4,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA_SOFT_ERROR_STATUS = 0xbf8fa7c7,
    RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_AGGREGATE_DEST_ID2 = 0xf9260dab,
    RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_AGGREGATE_DEST_ID1 = 0x34391fb0,
    RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_TYPE_PORE_HALT_TYPE = 0x4cadb1a7,
    IO_FUNCS_DESKEW_FAIL_RC_SLAVE_RX_DESKEW_STATE_PG = 0x167d84c2,
    RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_OCC_SPCWKUP_COUNT = 0x2f60eb17,
    RC_PROC_XIPC_WRITE_VPD_RING_TO_IPL_IMAGE_ERROR_RC_LOCAL = 0x6cbdca8e,
    RC_PMPROC_PFETLIB_BAD_DOMAIN_EX = 0x3dbbadc1,
    RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_MBMSR = 0x00fcafc5,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE_MODULE_TYPE_1_0 = 0x8d723041,
    RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC_CHIP_EC = 0xfc7dd93e,
    RC_PROC_EXTRACT_SBE_RC_INTERNAL_ERROR_SCAN_DATA_CRC_ERROR = 0x8a29470e,
    RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR_BASE_INDEX = 0xf154ccac,
    RC_MBVPD_UNEXPECTED_OUTPUT_TYPE_OUTPUT_TYPE = 0xdf11618e,
    RC_MSS_SLEW_CAL_ERROR_PORT1_SLEW = 0x9513494e,
    RC_PROCPM_PSTATE_DATABLOCK_INVALID_BOOST_PERCENTAGE_ERROR_MAXBOOSTPERCENT = 0xcb0f48ba,
    REG_FFDC_PROC_PSS_REGISTERS = 0x17659d84,
    RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_OHAMODEADDR = 0x70c3d724,
    RC_PROC_SLWB_BUF_PTR_ERROR_DATA_BUF1_PTR = 0x9e214ed0,
    RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR_PMIN = 0xbce93888,
    RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_D = 0x54a69d6d,
    RC_MSS_EFF_CONFIG_DRAM_DEVICE_ERROR_DRAM_DEVICE_TYPE = 0xfedc1ce4,
    RC_MBVPD_ATTRIBUTE_NOT_FOUND_ATTR_ID = 0xedce5230,
    IO_FUNCS_EYEOPT_FAIL_RC_SLAVE_RX_LANE_BAD_0_15_PG = 0xca0e136a,
    RC_MSS_EFF_CONFIG_INVALID_RDIMM_VOLT_INVALID_RDIMM_VOLT = 0x2bd4c9a9,
    RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_MINMAX_BOUNDS_ERROR_RETURN_CODE = 0xa60f5308,
    RC_IPMS_STATE_NOT_FOUND_BUG_PIRR0_REG = 0x95fbd208,
    RC_PROCPM_PSTATE_DATABLOCK_PSTATE_MINMAX_BOUNDS_ERROR_PSTATE = 0x2f040ce9,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS_MCI_FIR = 0x63e7e120,
    RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_RANGE_ID1 = 0x476d7d6b,
    RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_CMD_RATE = 0x0928073f,
    IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_CHIP_INTERFACE = 0x2fc599ae,
    RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR_MCI_FIR = 0x519cd8e2,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_ATTR_IDX1 = 0xda990787,
    IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_WT_CLK_STATUS_PG = 0x7497bf0b,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS_MCI_STAT = 0xbb8b022a,
    RC_PROC_XIPC_CHECK_REDUNDANT_ERROR_RC_LOCAL = 0x43bdf227,
    RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_SIZE_NON_MIRROR = 0xd9ab18f4,
    RC_PMPROC_PFETLIB_BAD_DOMAIN_DOMAIN = 0x5e9fd070,
    RC_P8_PLL_UTILS_SBE_SCAN_ERROR_PLL_RING_ADDR = 0xd388c4a5,
    IO_FUNCS_DESKEW_FAIL_RC_MASTER_CHIP_INTERFACE = 0x1f15bfe2,
    RC_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR_RANKGROUP_POSITION = 0xf53bc98e,
    RC_PROC_THREAD_CONTROL_INV_COMMAND_COMMAND = 0xe11d850f,
    RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_UNIT = 0x82a34d56,
    RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL = 0x90b26d5f,
    RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR_IMAGESIZE = 0x8da1c3e8,
    IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_WIRETEST_STATE_PG = 0x8c89a326,
    IO_FUNCS_REPAIR_TIMEOUT_RC_SLAVE_GROUP = 0x038c0b2d,
    RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_MBA = 0xcba817c9,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA_SOFT_ERROR_STATUS = 0xf9950311,
    RC_MSS_SLEW_CAL_TIMEOUT_PORT0_IMP = 0xd3c21343,
    RC_EREPAIR_THRESHOLD_EXCEED_FFDC_RX_NUM_LANES = 0xf936fe91,
    IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_SPARE_ERROR_REG = 0x8c5cb972,
    RC_PROCPM_PMC_CODE_BAD_MODE_MODE = 0x294b335f,
    RC_PROCPM_PMCRESET_IDLE_TIMEOUT_ERROR_TARGET = 0x931660b8,
    RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_MBA_POS_MBA_POS = 0xa1c94d65,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR_MCI_FIR = 0xe4e6faa4,
    RC_CEN_MEM_STARTCLOCKS_UNEXPECTED_CLOCK_STATUS_MEM_CLK_STATUS_REG_EXP_DATA = 0xbcff43ce,
    RC_PROC_SETUP_BARS_ATTR_QUERY_ERR_TARGET = 0xe1e6aaf9,
    RC_MSS_SLEW_CAL_ERROR_PORT1_IMP = 0x3f3b87a7,
    RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_ATTR_DATA = 0x6a16785a,
    RC_TEST_COLLECT_TRACE_FFDC_VALUE = 0xc5d7b0de,
    RC_PMPROC_PFETLIB_RAIL_OFF_DOMAIN = 0x63fae357,
    RC_PROC_CEN_REF_CLK_ENABLE_CONFIG_ERR_PROC_TARGET = 0x94e471f2,
    RC_CONFIG_RD_CEN_VREF_INVALID_INPUT_PORT_PARAM = 0x97d9103c,
    RC_IPMS_CONFLICTING_IDLE_STATES_PORRR1_REG = 0x74bd281e,
    REG_FFDC_PROC_PBA_REGISTERS = 0xf95b3cc1,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE_MODULE_TYPE_0_0 = 0x27458849,
    RC_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE_DIMM_TYPE = 0x2a783bb1,
    RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_MASTER_TARGET = 0xc4a8c20e,
    RC_MBVPD_TERM_DATA_UNSUPPORTED_VPD_ENCODE_VPD_VALUE = 0xb3edda13,
    RC_MSS_MAINT_START_NOT_RESET_MBMCT = 0xed0bb517,
    RC_GET_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CHIP_NAME = 0x1379b922,
    RC_PROC_SETUP_BARS_ATTR_QUERY_ERR_FAPI_ATTR_ID = 0xc58b4d75,
    RC_CONFIG_SLEW_RATE_INVALID_INPUT_SLEW_RATE_PARAM = 0x0a2bd317,
    RC_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR_PORT_POSITION = 0x4f6dc0c2,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_MRR_REG = 0xbe5b4779,
    RC_GET_SPD_ACCESSOR_INVALID_OUTPUT_SIZE_EXPECTED_SIZE = 0x1d01eb3d,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS_MCI_FIR = 0x34a141c8,
    REG_FFDC_CEN_CHIP_LFIR_MASK_REGISTERS = 0xab8a108d,
    RC_MSS_LRDIMM_INVALID_SPD_RTT_WR_L_DRAM_RTT_WR = 0xd018c2b2,
    RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_MBA = 0xb6e00ecf,
    RC_PROC_ADU_UTILS_INVALID_LOCK_OPERATION_OPERATION = 0x310e6c13,
    RC_OSC_SWITCH_UNEXPECTED_CHIP_TYPE_FFDC_CHIP_TYPE = 0x6e9d28ff,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR_MCI_FIR = 0xffb81369,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH_DRAM_WIDTH_1_1 = 0xa9d73d54,
    RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_BRANCHTABLEADDRESS = 0x6d30da7a,
    RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MEMBUF_MCI_FIR = 0x0aabf54d,
    RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_INVALID_INSTRUCTION_NON_ROTATE = 0xaefd01ae,
    RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_ENTRYOFFSET = 0xc6e19582,
    RC_PROCPM_PMC_MASTER_CONFIG_ERROR_MASTERPMCMODE = 0x98a5ab6b,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CURRENT_BAD_DQ_BITMAP_RANK0 = 0x3790497b,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS_NUM_RANKS_0_1 = 0xa3b675a9,
    RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR_PM_RES_CLOCK_HIGH_BAND_LOWER_FREQ = 0xe21110fc,
    RC_MSS_VOLT_AVDD_OFFSET_VALUE_ERROR_AVDD_SLOPE_ACTIVE = 0xe33ffed1,
    RC_PROCPM_PMCRESET_O2P_TIMEOUT_ERROR_TARGET = 0xc5ea6306,
    RC_OSC_SWITCH_CTL_UNEXPECTED_CHIP_TYPE_FFDC_CHIP_TYPE = 0xe094f2ed,
    RC_MSS_DP18_1_PLL_FAILED_TO_LOCK_ACTUAL_STATUS = 0x9bec7bd8,
    RC_MBVPD_INSUFFICIENT_VPD_RETURNED_RETURNED_SIZE = 0x508e64d8,
    RC_MSS_PDA_DRAM_DNE_PORT_VALUE = 0xbd2077f8,
    RC_PROCPM_SPCWKUP_TIMEOUT_SP_WKUP_REG_VALUE = 0xfa629e9c,
    RC_PROC_THREAD_CONTROL_STEP_FAIL_THREAD = 0xe89d9e1a,
    RC_PROCPM_SPCWKUP_NOT_SET_ENTITY_COUNT = 0xc40999a3,
    RC_GET_PLL_RING_ATTR_INVALID_ATTRIBUTE_ID_ATTR_ID = 0x90da6699,
    RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_PMERR = 0xf39ecd4f,
    RC_PROC_CEN_REF_CLK_ENABLE_SWIZZLE_ERR_CENTAUR_POSITION = 0x991d2e48,
    IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_LANE_SWAPPED_VEC_0_15_PG = 0x14cc5220,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_STATUS_REG = 0xfc704a11,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF_MCI_STAT = 0xfdef4bdd,
    RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_RANK = 0x761698e1,
    IO_FUNCS_DESKEW_FAIL_RC_SLAVE_RX_INIT_STATE_PG = 0x67e3ecc9,
    IO_FIR_GROUP_RX_PARITY_ERROR_RC_ENDPOINT = 0xcc09de91,
    RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_SIZE_OF_BUF1 = 0x19f9cda2,
    RC_MSS_MAINT_INVALID_DIMM_CNFG_MBAXCR = 0xfc37f457,
    RC_PROC_THREAD_CONTROL_SRESET_FAIL_RAS_STATUS = 0x9e14cc6b,
    RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_REGIONS_TO_ENABLE_VALID = 0xe6ee4324,
    RC_P8_PLL_UTILS_SBE_STOPPED_SBE_CONTROL = 0xb88398c4,
    IO_FUNCS_WIRETEST_FAIL_LANE_MASTER_DATA_RC_CHIP_TARGET = 0xb5482261,
    RC_GET_PLL_RING_INFO_ATTR_INVALID_OUTPUT_SIZE_ACTUAL_SIZE = 0x4869485a,
    RC_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR_MBA = 0x9ca7813c,
    RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR_FREQ_MULT = 0xe9a3aeec,
    IO_FUNCS_REPAIR_FAIL_RC_SLAVE_CHIP_INTERFACE = 0x942c1eec,
    RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_PMGP1 = 0x32ec1bdc,
    IO_FIR_SPARES_DEPLOYED_FIR_RC_SPARE_ERROR_REG = 0xf5b87e97,
    RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_BASE_ADDR1 = 0xe203648f,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS_SDRAM_ROWS_1_1 = 0x5f6cf989,
    RC_MSS_ACCESS_DELAY_REG_BAD_DRAM_WIDTH_MBA_TARGET = 0xabea25dc,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA_SEEPROM_ECCB_STATUS = 0x06d56dc3,
    RC_GET_SPD_ACCESSOR_INVALID_DDR_TYPE_DIMM = 0x5886daf3,
    RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_SIZEOFTHIS = 0x89f5fbdf,
    RC_CONFIG_WR_DRAM_VREF_INVALID_INPUT_PORT_PARAM = 0x64391d88,
    RC_I2C_COMPLETE_BIT_TIMEOUT_RC_ADDRESS_VAL = 0x946a526d,
    IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_WIRETEST_LANEINFO_PG = 0xab5ec216,
    RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR_MBA_POSITION = 0x4c8f2237,
    RC_MBVPD_ATTRIBUTE_NOT_FOUND_DIMM_TYPE = 0xe7ba4e95,
    RC_IPMS_CONFLICTING_IDLE_STATES_PIRR2_REG = 0x4da85025,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_HP_MODE_NEXT_CENT_DATA = 0xa510caa0,
    IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_AMIN_PL = 0xd483277c,
    RC_PROC_THREAD_CONTROL_STEP_FAIL_RAS_STATUS = 0xd58202d1,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_VITAL_REG = 0x220c3a3b,
    REG_FFDC_MBS_FIR_REGS = 0xfb8d9f71,
    IO_FUNCS_DESKEW_FAIL_RC_MASTER_RX_LANE_BAD_0_15_PG = 0x618d565d,
    RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_PMGP0 = 0x648a6f6a,
    RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_GP3 = 0xc9abec3c,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_EFF_DIMM_SIZE0 = 0x0b65b4f2,
    RC_PROC_XIPC_RS4_COMPRESS_ERROR_RC_LOCAL = 0xedce541d,
    RC_PROC_EXTRACT_PORE_HALT_FFDC_TARGET = 0x9c152b7b,
    RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_STATUS_REG = 0xd5280d51,
    RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_ATTR_DATA = 0x8337f2a5,
    RC_PROCPM_PSS_CODE_BAD_MODE_IMODE = 0x7c8c6711,
    RC_GET_TP_DBG_DATA_ERR_CHIP_EC = 0x5fbc735e,
    IO_FUNCS_DESKEW_TIMEOUT_RC_SLAVE_CHIP_INTERFACE = 0xef3413cb,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR_MCI_STAT = 0x370c9274,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_DEBUG0_REG = 0xd079ac61,
    RC_GET_PLL_RING_INFO_ATTR_INVALID_OUTPUT_SIZE_EXPECTED_SIZE = 0xc67306ec,
    RC_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR_VDDR_SLOPE_ACTIVE = 0x21ea9d38,
    RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY_I_ENTITY = 0xd81da3dc,
    RC_MSS_SCOMINIT_NUM_L4_ERROR_NUM_L4S = 0x54f0800e,
    RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_XIPRC = 0x5532f076,
    RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_i_pba_cmd_scope = 0x87643951,
    RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE_CEN_MBA_NUM = 0x5be879e4,
    RC_GET_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CHIP_EC = 0x5ba426ef,
    RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_BRANCHTABLEADDRESS = 0x0247abf3,
    RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_MULT_2_L_DRAM_DENSITY = 0xd0bfed99,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_RING_SIZE = 0xf03580fe,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_IDFLAGS_REG = 0x9aebd3b3,
    RC_MBVPD_DRAM_2N_MODE_NOT_EQUAL_PORT0 = 0x49ec27de,
    RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_PROC_CHIP = 0x3074a890,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CURRENT_BAD_DQ_BITMAP_RANK3 = 0x67ef0e3f,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR_MBI_STAT = 0x7b64e807,
    RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_ERROR_RETURN_CODE = 0x41ffd490,
    RC_PROCPM_PSTATE_DATABLOCK_NO_CORES_PRESENT_ERROR_PRESENT_CHIPLETS = 0xc23f27a0,
    IO_FUNCS_DESKEW_FAIL_RC_MASTER_RX_INIT_STATE_PG = 0x66c83dea,
    RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_SBE_XIP_SECTION = 0x387da335,
    REG_FFDC_SBE_SCAN_SERVICE = 0xc490544c,
    RC_PROCPM_SPCWKUP_SLW_IN_CHKSTOP_EX_TARGET = 0x3b1ac62b,
    RC_PROC_EXTRACT_PORE_HALT_FFDC_PORE_HALT_TYPE = 0x7430c87b,
    REG_FFDC_PROC_FIRST_OTPROM_INSTRUCTIONS = 0xb19e9faf,
    RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_MAX_CFG_RCD_PROTECTION_TIME = 0xb440ec81,
    IO_RUN_TRAINING_INVALID_TARGET_PAIR_RC_MASTER_TARGET = 0xf80e0ada,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR_MBI_STAT = 0xe7364f42,
    RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_OHAAISSIOADDR = 0x99064fc4,
    RC_PROC_PCIE_CONFIG_INVALID_TARGET_TARGET = 0xa3ae0ae8,
    RC_WR_VREF_SHMOO_INVALID_MARGIN_DATA_COUNT_DATA = 0x49c125ff,
    RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_ENTRYOFFSET = 0x5a947850,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR_MCI_FIR = 0x143ba4b2,
    RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_MBA = 0x8f52e7af,
    RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_THREAD = 0xc07c7139,
    RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_RANK = 0x6dd2d2a7,
    RC_PROC_XIPC_GEN_SCOM_ERROR_RC_LOCAL = 0xbbe42699,
    RC_PROCPM_GPE_CODE_BAD_MODE_CHIP = 0x8a7ff11e,
    RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_ATTR_DATA = 0x5f17eb4c,
    RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_SIZE_OF_BUF1 = 0x798b8a19,
    RC_PROC_XIPC_PG_RING_TOO_LARGE_DATA_RING_SIZE_MAX = 0x31757138,
    IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_WT_CLK_STATUS_PG = 0x2424ee1b,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS_MCI_STAT = 0x5142c9a8,
    RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_MBA = 0x4dd51821,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_A_GP0_DATA = 0x7728f517,
    RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR_MCI_STAT = 0xd0deeaac,
    RC_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR_VPD_MASTER_POWER_SLOPE = 0xfcdd0325,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_P0_REG = 0x44a40670,
    RC_MSS_NO_COMMON_SUPPORTED_CL_CL_SUPPORTED = 0x6b645890,
    RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_BAD_HALT_ISTEP_NUM = 0xb64b76cf,
    REG_FFDC_CEN_CHIP_GLOB_ATTN_MASK_REGISTERS = 0xa38be1df,
    RC_PROC_EXTRACT_SBE_RC_I2C_ERROR_FI2C_HANG = 0xc7dfa830,
    RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_VID_INCR_CLIP_INREG_ERROR_LPST_RETURN_CODE = 0xaa4a0500,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS_SDRAM_BANKS_1_1 = 0xa4f155ea,
    RC_MSS_MAINT_INVALID_CHIP_INDEX_MBA = 0x34a020f5,
    RC_PROCPM_PMC_FW_MODE_ERROR_SLAVEPMCMODE = 0x646a24ed,
    RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_INDEX_PARAM = 0xa149a83d,
    RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL_ATTR_MVPD_DATA_1 = 0x489bb9c4,
    IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_H1_ODD_PL = 0x79a73652,
    IO_FIR_TOO_MANY_BUS_ERROR_RC_ENDPOINT = 0x295571ef,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_MSS_INTERLEAVE_ENABLE = 0xf8468e45,
    RC_GET_SPD_ACCESSOR_INVALID_OUTPUT_SIZE_ATTR_ID = 0x01a55415,
    RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_CMD_TYPE = 0x610dbf11,
    RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR_DIMM = 0xa01deff4,
    RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR_MIRROR_PLACEMENT_POLICY = 0xf7c97e86,
    IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_RX_VREF_PL = 0xcb1bc681,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1_ATTR_ID = 0xfa95d2dd,
    RC_PROC_BUILD_SMP_EPSILON_INVALID_TABLE_ERR_TABLE_TYPE = 0x5c982bb9,
    RC_PROC_XIPC_PR_RING_TOO_LARGE_DATA_RING_SIZE_REQ = 0xbf4b9853,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_IBUF0_REG = 0xe00b7659,
    RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR_CHIP = 0x320c59f7,
    RC_PMPROC_PBA_INIT_INCORRECT_MODE_PM_MODE = 0x816287e6,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS_MBI_FIR = 0x3414d7bb,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR_ENABLED = 0x0a553475,
    RC_PROCPM_SPCWKUP_TIMEOUT_HISTORY_VALUE = 0x634db6ae,
    RC_INITFILE_EXECUTION_ERROR_FFDC_SCOM_OFFSET = 0xed0eac6f,
    RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MCS_MCI_FIR = 0x8710bc0c,
    IO_FIR_GROUP_TX_PARITY_ERROR_RC_TX_ERROR_REG = 0xca53bfcb,
    RC_IPMS_PIRRX_UNSUPPORTED_IDLE_REQUEST_PMC_QUEUE_STATE = 0x42baa798,
    RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_i_pba_bar_size = 0x47d8a46f,
     RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ARGUMENT_ERROR_CHAR_RETURN_CODE = 0x422729ba,
    RC_RD_VREF_SHMOO_INVALID_MARGIN_DATA_COUNT_DATA = 0xaef0b49f,
    RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_F_OW_PACK = 0x848995c2,
    RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_DATA_IMG_SIZE_FIXED = 0x3fe29fa0,
    RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_MCS_POS = 0x1f419391,
    RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_CORE_TARGET = 0x15928d35,
    RC_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR_VDDR_SLOPE_INTERCEPT = 0x2a6d86f5,
    RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR_MASTER_TARGET = 0x291ea81a,
    RC_MSS_UNEXPECTED_NEST_CLOCK_STATUS_EXPECTED_STATUS = 0xbe511aec,
    RC_OSC_SWITCH_CTL_INVALID_ATTR_SIZE_FFDC_ATTR = 0x9defc140,
    RC_MBVPD_DIMMS_NOT_FOUND_DIMM_P0S0 = 0xb2baccc9,
    RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_FREQ_PB = 0x3e466821,
    RC_PMPROC_PBA_SLAVE_RESET_TIMEOUT_PBASLVREG = 0xa7c0b6f9,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR_MCI_STAT = 0x33a572c6,
    RC_GET_PLL_RING_INFO_ATTR_INVALID_ATTRIBUTE_ID_ATTR_ID = 0xcce2e332,
    RC_PROCPM_PBA_SLVRST_TIMED_OUT_PSR = 0x87427b21,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CLEAN_BAD_DQ_BITMAP_RANK0 = 0x594e14d9,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MIRROR_BASES = 0xcd2a6259,
    IO_FUNCS_DESKEW_FAIL_RC_MASTER_RX_DESKEW_STATE_PG = 0x1359a58c,
    RC_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET_PBASLVREG = 0xf8e7baf2,
    RC_SLEW_RATE_SHMOO_INVALID_MARGIN_DATA_COUNT_DATA = 0x9543ea31,
    RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_SCOM_ADDR = 0x8c216a58,
    REG_FFDC_PROC_XBUS_CLOCK_CONTROLLER = 0x762052bc,
    RC_P8_PLL_UTILS_SBE_TIMEOUT_ERROR_POLL_COUNT = 0xe0c6de1c,
    RC_PROC_BUILD_SMP_INVALID_TOPOLOGY_X_CONNECTIONS_OK = 0x916b3fbb,
    RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_RING_BLOCK_SIZEOFTHIS = 0xeb2c0baf,
    RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK_EXPECTED_STATUS = 0x34551119,
    RC_PROC_SLWB_UNKNOWN_XIP_ERROR_RC_LOCAL = 0xd0c4cc96,
    RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_BASE_ADDR2 = 0x7dc5f214,
    IO_FIR_SPARES_DEPLOYED_FIR_RC_ENDPOINT = 0xd512fafc,
    RC_PROC_SLWB_L2_FARY_OVERLAY_ERROR_DATA_OVERLAY_RING_BYTE = 0x61f4c06f,
    RC_MBVPD_INVALID_M0_DATA_M0_DATA = 0xecf1b52e,
    RC_PROC_EXTRACT_PORE_HALT_FFDC_FFDC_ADDRESSES = 0xb12e0464,
    RC_MSS_EFF_CONFIG_MSS_FREQ_FREQ_VAL = 0x741826f6,
    RC_MSS_UNSUPPORTED_SPD_DATA_COMMON_MIN_TAA = 0x47264ff6,
    RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_XIPRC = 0x9ee04130,
    RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR_ALT_BASE_INDEX = 0x3efa2cf1,
    RC_INSUFFICIENT_VPD_RETURNED_EXPECTED_SIZE = 0x95c66f93,
    RC_IPMS_CONFLICTING_IDLE_STATES_ETR_REG = 0x02090fda,
    RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_ERROR_CHIPLET_NUM = 0xc07bb47d,
    RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_RANK_PARAM = 0x94cc2635,
    RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_INSTRUCTION_PARITY_ERROR = 0x5c972d5a,
    RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_i_pba_bar_size = 0xbcc6541d,
    IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_MAX = 0x5e43e82c,
    IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_RX_DESKEW_STAT_PL = 0x3a902666,
    RC_MSS_VOLT_OVERIDE_UKNOWN_OVERRIDE_TYPE = 0xea3eef61,
    RC_EREPAIR_THRESHOLD_EXCEED_FFDC_TX_NUM_LANES = 0x5634fd4b,
    RC_MBVPD_INSUFFICIENT_VPD_RETURNED_KEYWORD = 0xcfdb2d97,
    RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL_ATTR_MVPD_DATA_0 = 0xbf089c37,
    RC_MBVPD_INVALID_MODE_PARAMETER_MODE = 0x6b6f0bee,
    RC_PROC_XIPC_XIP_DELETE_SECTION_ERROR_RC_LOCAL = 0x218e0f83,
    IO_DCCAL_ZCAL_ERROR_RC_FAIL = 0x832a37bb,
    RC_MSS_EFF_CONFIG_MISMATCH_TOP_CUR_DIMM_SPD_VALID_U8ARRAY_1_1 = 0xb78c711e,
    RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_CHIP_ID = 0xa36cab2d,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_X_MODE_DATA = 0xc990047c,
    RC_PROC_ADU_UTILS_INVALID_FBC_OP_TARGET = 0x54ca6a26,
    REG_FFDC_MBA_FIR_REGS = 0x499487ab,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1_FREQ_1 = 0x93ad6297,
    RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR_ENTRIES = 0x1b3a24ec,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_CHIP_NAME = 0xbfd71d8c,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_UPDATE_BAD_DQ_BITMAP_RANK0 = 0xf9ddd40b,
    RC_MSS_SLEW_CAL_TIMEOUT_PORT0_STAT_REG = 0x294a2133,
    RC_VPP_FUNCTIONAL_CENTAUR_VPD_READ_ERROR_MBA_POSITION = 0x778cbba7,
    RC_FAPIPOREVE_PIB_ERROR_READING_SBEVITAL_ERROR = 0xcb8b2acb,
    RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE_ISTEP_NUM = 0xab5c78fc,
    RC_PROC_XIPC_WRITE_VPD_RING_TO_SLW_IMAGE_ERROR_RC_LOCAL = 0x15ffc277,
    RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_OHAMODEREG = 0x68c020c4,
    RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_MULTICAST_CHIPLET_ID = 0xeb610934,
    RC_OSC_SWITCH_CTL_INVALID_ATTR_SIZE_FFDC_PASSED_SIZE = 0x7c69ed6f,
    RC_CEN_XIPC_UNSPECIFIED_IMAGE_ERR_RC_LOCAL = 0x6c4ebfdc,
    RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_TARGET2 = 0xa50ced6f,
    RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_MBA = 0x85f0b0ac,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS_MBI_STAT = 0xba247d31,
    RC_I2C_ERROR_BIT_PRESENT_RC_DATA_REG = 0x965c37ec,
    RC_PMPROC_PFETLIB_RAIL_ON_DOMAIN = 0xf185c4b2,
    RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_SIZE_OF_BUF1 = 0x0631ac08,
    RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_CFG_WRDONE_DLY = 0x56385dfc,
    RC_IPMS_CONFLICTING_IDLE_STATES_PIRR3_REG = 0x5d0f55ea,
    RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_RC_LOCAL = 0xa79bbe0d,
    RC_MSS_EFF_CONFIG_DRAM_WIDTH_16_ERROR_DRAM_WIDTH = 0x1ab9a6aa,
    RC_PROCPM_PSTATE_DATABLOCK_ERROR_RETURN_CODE = 0x4f014440,
    RC_FAPIPOREVE_UNKNOWN_STATUS_ERROR_STATUS = 0xccf0075e,
    RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR_BOOT_FREQ = 0xdc04ddca,
    RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE_HTM_BAR_SIZE = 0x96f27df5,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_END_ADDR1 = 0x2eecece9,
    RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_ACCESS_TYPE_PARAM = 0x70b30a80,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MIRROR_BASE = 0x482fd223,
    RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK_LOCK_STATUS = 0x1a630cb6,
    RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_TARGET = 0xb7f85ed5,
    RC_MBVPD_INVALID_DIMM_FOUND_INVALID_DIMM_P0S0 = 0x1eb4c89c,
    RC_PROCPM_SPCWKUP_TIMEOUT_EX = 0xea3e3932,
    RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_OHAROADDR = 0xa45931de,
    RC_PROC_CEN_REF_CLK_ENABLE_SWIZZLE_ERR_PROC_TARGET = 0x6169b28e,
    RC_MSS_MAINT_INVALID_DIMM_CNFG_MBA = 0xf7221f0a,
    RC_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET_POLLCOUNT = 0xf056a915,
    REG_FFDC_PROC_SLW_REGISTERS = 0x01da27ff,
    RC_MSS_MAINT_CMD_IN_PROGRESS_CMD_TYPE = 0x502d5a72,
    RC_GET_L3_DELTA_DATA_ERR_CHIP_NAME = 0x8c9b44f3,
    RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_IMAGEADDR = 0xd53298c3,
    IO_FUNCS_DESKEW_FAIL_RC_SLAVE_RX_LANE_BAD_16_31_PG = 0x2bd7f665,
    RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_FIR_REG = 0xcd023ceb,
    RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_MBA = 0x553bd9e3,
    RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_OHAROREG = 0xf32ea035,
    RC_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE_ATTR_ID = 0x5c5333dd,
    RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_INVALID_INSTRUCTION_ROTATE = 0x02934e12,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_CLEAN_BAD_DQ_BITMAP_RANK0 = 0xedd4da8c,
    RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_CMD_RATE = 0xa5c9d9ef,
    RC_PROC_BUILD_SMP_INVALID_TOPOLOGY_TARGET = 0x274436e3,
    RC_PROCPM_GPE_RESET_TIMEOUT_MAXPOLLS = 0x56378bd3,
    IO_FUNCS_DESKEW_FAIL_RC_SLAVE_GROUP = 0xcbd7b469,
    RC_P8_PLL_UTILS_INVALID_OPERATION_PLL_BUS_ID = 0xaed6807b,
    RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_MAX_PLL_RING_SIZE = 0x86c5c24b,
    RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_OP = 0x8e9931be,
    RC_PROCPM_PBA_BCDE_STOP_TIMEOUT_POLLVALUE = 0x54afef8a,
    RC_DRV_IMPED_SHMOO_INVALID_MARGIN_DATA_COUNT_DATA = 0x8fd269fb,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS_SDRAM_BANKS_0_1 = 0x848f9575,
    RC_GET_TP_DBG_DATA_ERR_CHIP_NAME = 0xb283f369,
    RC_PROC_EXTRACT_SBE_RC_PCI_CLOCK_ERROR_SCOM_ADDRESS = 0x70e5ee43,
    RC_TEST_ERROR_A_UNIT_TEST_FFDC_DATA_INTEGER = 0x8e6db82f,
    RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_DATA1 = 0x08628ff9,
    RC_MSS_MAINT_INVALID_CMD_MBAFIR = 0xd81d755c,
    RC_MSS_SLEW_CAL_ERROR_PORT0_DATA_ADR = 0x50f71a68,
    RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_X_IS_8B = 0xb0f6aaad,
    RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE_DRAM_GEN_MISCOMPARE = 0xbf1e69c8,
    RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS_DESIRED_CORES = 0x2dc12207,
    REG_FFDC_PROC_SLW_PCBS_REGISTERS = 0xcc4c8511,
    RC_IPMS_CONFLICTING_IDLE_STATES_PMC_QUEUE_STATE = 0xfb4b278f,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR_MCI_FIR = 0x09755475,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_ATTR_ID = 0xe6dde7f4,
    RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_BOOSTEDFREQKHZ = 0xa768eb15,
    RC_MSS_MAINT_INVALID_ADDR_MBMCT = 0xedf546e1,
    RC_GET_PROC_ABUS_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CHIP_NAME = 0xcdefcb67,
    RC_IPMS_UNSUPPORTED_SV_VALUE_PCBS_FSM = 0x19bf7828,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF_MCI_STAT = 0xda4c2be8,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO_VALID_COUNT = 0x4f77a894,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS_NUM_RANKS_1_0 = 0xd9e6e358,
    RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_DATA_BUF1_SIZE = 0x183611de,
    REG_FFDC_CEN_MBA_LFIR_REGISTERS = 0x7d60a3fd,
    RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR_NODE_ID = 0xf5806cfb,
    RC_MSS_LRDIMM_UNSUPPORTED_TYPE_TARGET = 0x21abb44f,
    RC_ROSETTA_MAP_BAD_MBA_POS_MBA_POS = 0xf9b238b0,
    RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_SCOM_ADDR = 0x747fa75f,
    RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_SYMBOL_MARK = 0x7382998c,
    RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_OHAMODEADDR = 0x823efc7e,
    RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR_IMAGEADDR = 0xf634b53d,
    IO_GCR_WRITE_MISMATCH_RC_READ_BUF = 0x2baf3c63,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS_NUM_RANKS_0_0 = 0x4e4eb2f8,
    RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_GETBBM_WIDTH = 0xe41736b8,
    RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR_RANKGROUP_POSITION = 0x1c119c72,
    RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR_MCI_STAT = 0x5a7a8b14,
    RC_PROCPM_PSTATE_DATABLOCK_PDV_OPPOINT_ORDER_ERROR_BUCKET_ID = 0x6b0bf407,
    IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_GROUP = 0x3b6cf2da,
    RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MCS_MCI_FIR = 0x2cead37c,
    RC_PROC_THREAD_CONTROL_STOP_FAIL_RAS_STATUS = 0xf373949a,
    RC_MSS_EFF_CONFIG_MISMATCH_SIDE_CUR_DIMM_SPD_VALID_U8ARRAY_0_0 = 0xc935152f,
    REG_FFDC_CEN_CHIP_GLOB_FIR_MASK_REGISTERS = 0xd06196f1,
    RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR_PORT_POSITION = 0x252c32a0,
    RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_PSTATE0FREQKHZ = 0x979b4404,
    RC_PROC_XIPC_PR_RING_TOO_LARGE_DATA_RING_SIZE_MAX = 0xe15a6e5c,
    RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_FREQ_CORE_FLOOR = 0xa43e0b38,
    RC_MSS_ACCESS_DELAY_REG_BAD_MBA_POS_MBA_POS = 0x8d760e1c,
    RC_MSS_MAINT_INVALID_SYMBOL_INDEX_SYMBOL_MARK = 0xe95533ee,
    RC_IPMS_EXNUMBER_CODE_BUG_EX_NUMBER = 0xe2156a16,
    RC_MSS_UNSUPPORTED_SPD_DATA_DDR4_FTB_DDR4 = 0x6dc8c31f,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH_BUS_WIDTH_0_0 = 0x38634eee,
    RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_TARGET = 0x360c3856,
    RC_MSS_MAINT_INVALID_STEER_MUX_STEER_MUX = 0x8ae4e8c1,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_UPDATE_BAD_DQ_BITMAP_RANK1 = 0x69b85ca9,
    RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR_PM_RES_CLOCK_HIGH_BAND_UPPER_FREQ = 0xe39349aa,
    RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR_DCM_INSTALLED_2 = 0x29185bc4,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CLEAN_BAD_DQ_BITMAP_RANK2 = 0xa11b433c,
    RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE_DRAM_GEN_MISCOMPARE = 0x4422c4e3,
    RC_MSS_EFF_GROUPING_SELCTIVE_MODE_HTM_OCC_BAR_OCC_SANDBOX_BAR_SIZE = 0x3609e84c,
    RC_PROCPM_SPCWKUP_TIMEOUT_PMGP0 = 0xedeb6fce,
    RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ARGUMENT_ERROR_GPST_RETURN_CODE = 0x51d56156,
    RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR_IMAGEADDR = 0xb4523c27,
    RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_GT_GPSTPMAX_ERROR_FREQ_KHZ = 0x51956fe0,
    IO_RESTORE_EREPAIR_INVALID_INVOCATION_RC_TARGET = 0x72a2a0bd,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR_MBI_STAT = 0xd3e2a34c,
    RC_PROCPM_SPCWKUP_TIMEOUT_POLLCOUNT = 0x55b45e2e,
    RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_DRAM_WIDTH = 0x887dd493,
    RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_TARGET2 = 0xa7b54520,
    IO_FIR_GCR_HANG_ERROR_RC_ENDPOINT = 0x54f1f28d,
    IO_FUNCS_EYEOPT_FAIL_RC_SLAVE_RX_TRAINING_STATUS_PG = 0x799abda6,
    RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR_PORT_POSITION = 0xf81f7804,
    RC_PROCPM_PMCRESET_IDLE_ERROR_PORR = 0xc4ff74de,
    RC_CONFIG_DRV_IMP_INVALID_INPUT_PORT_PARAM = 0x8c088fe9,
    RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_SIZE = 0x29b756ba,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR_MCI_STAT = 0x771e962e,
    RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_DATA_BUF_SIZE_FIXED = 0x20eed4f2,
    RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_RANK_PARAM = 0x2cfdaae4,
    RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_MIN_CMD_RATE = 0x168eb54c,
    RC_PMPROC_PFETLIB_RAIL_ON_OPERATION = 0x334bcfe5,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_A1_REG = 0x1bae1690,
    RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_TARGET1 = 0x89a14b43,
    RC_PMPROC_PFETLIB_BAD_OP_EX = 0x15f5405b,
    RC_PROCPM_OCC_CONTROL_BAD_405BOOT_PARM_BOOT_PARM = 0xdf62c2b1,
    REG_FFDC_CEN_CHIP_GLOB_XFIR_REGISTERS = 0x2d88f844,
    RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_RC_LOCAL = 0x8478d062,
    RC_OSC_SWITCH_CTL_INVALID_ATTR_SIZE_FFDC_EXPECTED_SIZE = 0x25583197,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1_CHIP_EC = 0xd913afe9,
    RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP = 0x4c2a2140,
    REG_FFDC_PROC_NEST_CLOCK_CONTROLLER = 0xfe5c1c9d,
    RC_PROC_THREAD_CONTROL_STOP_FAIL_CORE_TARGET = 0xe0a4e0c9,
    IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_CHIP_TARGET = 0x433eeb70,
     RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ARGUMENT_ERROR_POINTS = 0x7c93a901,
    IO_DCCAL_OFFCAL_ERROR_RC_DATA_BUFFER = 0x6ab565c1,
    RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_MBA = 0xcc7e644f,
    RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_RANK = 0xbc554097,
    RC_PROC_PBA_ADDR_OUT_OF_RANGE_i_pba_cmd_scope = 0xa27572e3,
    RC_MSS_MAINT_X4_SYMBOL_ON_READ_DRAM_WIDTH = 0xdb94dba2,
    RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_TARGET = 0x9c0cc18f,
    RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_FFDC_DATA_1 = 0xc2d4016e,
    RC_MSS_SLEW_CAL_TIMEOUT_PORT1_STAT_REG = 0x7cbc41a1,
    RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_TARGET = 0xf412f2be,
    RC_PROC_PCBS_CODE_BAD_MODE_MODE = 0x63e7c8ce,
    RC_PROCPM_PSTATE_DATABLOCK_IQ_MVPD_ERROR_CHIPLET_NUMBER = 0x2f1e4953,
    RC_MSS_PDA_DRAM_DNE_RANK_VALUE = 0x110948af,
    RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_PORT_SELECT = 0xe48bd3c8,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CURRENT_BAD_DQ_BITMAP_RANK2 = 0xd370d00a,
    RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_PC_OVERFLOW_UNDERFLOW = 0x56fcde3c,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2_CHIP_EC = 0x7b8f99a9,
    RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_TYPE_PARAM = 0xd9993a08,
    RC_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR_TARGET_POSITION = 0x38eef2a4,
    RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_OLD = 0x12ea4e49,
    RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_MBA_POS_MBA_TARGET = 0xd19624c2,
    RC_MSS_SETUP_BARS_M_ALT_BAR_ERR_BASE_INDEX = 0xf7f1f459,
    RC_MSS_MAINT_STOP_NOT_RESET_MBMCC = 0x69f7f099,
    RC_PROC_SLWB_WF_CREATION_ERROR_RC_LOCAL = 0x631c839b,
    RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_DIMM_SELECT = 0x3324dd62,
    RC_PROC_CEN_REF_CLK_ENABLE_SWIZZLE_ERR_REFCLOCK_BIT = 0x4792ff2c,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR_MCI_FIR = 0xd015617f,
    IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_LANEID = 0x39895cf6,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF_MBI_STAT = 0x205530c3,
    RC_PROCPM_PSTATE_DATABLOCK_PSAFE_MINMAX_BOUNDS_ERROR_RETURN_CODE = 0x22acb820,
    RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR_RANK = 0x04783cf4,
    RC_PROCPM_PSTATE_DATABLOCK_PSAFE_GT_GPSTPMAX_ERROR_PSTATE = 0xee768960,
    RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR_PMAX = 0x7dff0bf4,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH_DRAM_WIDTH_0_0 = 0xc906b037,
    IO_POWER_DOWN_LANES_INVALID_INVOCATION_RC_TARGET = 0x81ca1058,
    RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_BASE_ADDR = 0xc2bb390b,
    RC_PROCPM_POREBAR_LOC_ERROR_CHIP = 0x3f54f582,
    IO_FUNCS_FUNC_FAIL_RC_SLAVE_CHIP_INTERFACE = 0x2a0e3ed4,
    RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR_PM_RES_CLOCK_LOW_BAND_UPPER_FREQ = 0xca329780,
    RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_GROUP_INDEX_A = 0x8c4a4994,
    RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_OBJECT_ERROR_CHAR_RETURN_CODE = 0x167d32e4,
    RC_MSS_EFF_CONFIG_INTERLEAVE_MODE_INVALID_MCS_PER_GROUP_MSS_INTERLEAVE_ENABLE = 0xadff1436,
    RC_PMPROC_CHKSLW_ADDRESS_MISMATCH_GOODHALTADDR = 0xf00efb9b,
    RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_DATA_SIZE_OF_BUF1 = 0x73d96070,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_NODE_CURR = 0x6e1220c0,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_TBL_BASE_REG = 0xb86d3141,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_FREQ_3 = 0x2b46a146,
    RC_PROC_MPIPL_FORCE_WINKLE_TARGET_TYPE_ERR_TARGET = 0x4ac66571,
    RC_GET_L3_DELTA_DATA_SELECT_ERR_SELECT_VAL = 0x66739733,
    RC_PROCPM_OCCSRAM_CODE_BAD_MODE_MODE = 0xe2b11602,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_D1_REG = 0xc4826d43,
    RC_PROCPM_PSTATE_DATABLOCK_PSTATE_GT_GPSTPMAX_ERROR_FREQ_KHZ = 0xe7b18d26,
    IO_FUNCS_EYEOPT_TIMEOUT_RC_SLAVE_CHIP_INTERFACE = 0xa366f51b,
    RC_IPMS_STATE_NOT_FOUND_BUG_PORRR1_REG = 0x6167769e,
    RC_MSS_MAINT_NO_UE_TRAP_MBMMR = 0x9d6c8219,
    REG_FFDC_PCIE_PLL_NO_LOCK_REGISTERS = 0x2bd14560,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_DEBUG1_REG = 0xbb42360d,
    RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PCBSPM_MON1 = 0x2a4c1efd,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_CHIP_UNIT_POS_MBA1 = 0xd593b1bb,
    IO_DCCAL_ZCAL_TIMEOUT_RC_TIMEOUTCNT = 0xec7632bb,
    RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR_DCM_INSTALLED_1 = 0x1052dd3b,
    RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE = 0xef5303ba,
    RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_DATA_RING_BLOCK_SIZEOFTHIS = 0x82695fae,
    RC_MSS_EFF_CONFIG_DRAM_WIDTH_32_ERROR_DRAM_WIDTH = 0x16611517,
    RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_FREQ_PB = 0xaca55692,
    REG_FFDC_SBE_FABRICINIT = 0x85ec6e22,
    RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR_RANKGROUP_POSITION = 0xe49cdab1,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_RING_ID = 0xba81479b,
    REG_FFDC_PROC_GPE_REGISTERS = 0x2cad6c2f,
    RC_PROC_BUILD_SMP_LINK_TARGET_TYPE_ERR_SOURCE_CHIP_TARGET = 0xce6c9ea8,
    RC_PROCPM_PSTATE_MONITOR_ERR_PSTATEACTUAL = 0x8994c4ad,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA_PNOR_ECCB_STATUS = 0x3d639727,
    RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR_TARGET = 0x69f60caa,
    RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE_HALT_CODE = 0x1cc9ee29,
    RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_CHIPLET_ID = 0x21d9d9b8,
    RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_OHAROADDR = 0x613845a2,
    RC_TEST_ERROR_A_UNIT_TEST_FFDC_DATA_BUF = 0xbfc180c9,
    RC_PROCPM_POREBAR_SIZE0_ERROR_CHIP = 0xe4210a54,
    RC_PROC_THREAD_CONTROL_SRESET_FAIL_CORE_TARGET = 0x0be8c9bb,
    RC_MSS_MAINT_ECC_DISABLED_MBSECC = 0xb7d0b6bf,
    RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CCS_MODE = 0xd4933fd8,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_ADU_NUM_POLLS = 0x3a248f4a,
    RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_A_OW_PACK = 0x7abaab5e,
    RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR_NODE_ID = 0x92d59f46,
    RC_PROC_SLWB_RING_RETRIEVAL_ERROR_RC_LOCAL = 0xfafdb4b0,
    IO_FUNCS_FUNC_MODE_TIMEOUT_RC_SLAVE_GROUP = 0x1c14504e,
    RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_MIN_CMD_RATE = 0xd98891b2,
    REG_FFDC_MSS_SLEW_CAL_FAILURE_PORT0 = 0xd45f6310,
    RC_INITFILE_EXECUTION_ERROR_FFDC_SCOM_ADDRID = 0xf07c23cd,
    RC_MSS_UNEXPECTED_TP_CLOCK_STATUS_ACTUAL_STATUS = 0xca6e2512,
    RC_I2C_FIFO_INCOMPLETE_RC_ADDRESS_VAL = 0x50b43951,
    RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_MAX_CMD_RATE = 0x7e4c5ea1,
    RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR_OCC_SANDBOX_BAR_SIZE = 0x471ced8f,
    IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_RX_STAT_PL = 0x6ec2f2e9,
    IO_FUNCS_EYEOPT_TIMEOUT_RC_SLAVE_GROUP = 0x6300f426,
    RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR_DCM_INSTALLED_2 = 0x7dbb887a,
     RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ERROR_CHAR_RETURN_CODE = 0x71904d3d,
    RC_MBVPD_INVALID_DQ_DATA_DQ_COPY = 0xd0f8ee1d,
    RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_CHIP = 0x351fae10,
    RC_MSS_MAINT_NO_UE_TRAP_MBSTR = 0xc6f50f95,
    RC_MSS_SLEW_CAL_TIMEOUT_PORT0_SLEW = 0x901962f1,
    RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_ATTRIBUTE_RING_SIZE = 0xff7dc991,
    RC_MSS_MAINT_NO_X8_ECC_SPARE_MUX_TYPE = 0x51861da7,
    RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_NODE_ID = 0x229d7502,
    REG_FFDC_PROC_SLW_OHA_REGISTERS = 0x6efb6473,
    IO_FUNCS_FUNC_FAIL_RC_MASTER_RX_TRAINING_STATUS_PG = 0x27518eba,
    RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_DRAM_WIDTH_MBA_TARGET = 0xd9b769a3,
    RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_RAS_STATUS = 0x891a5d6b,
    RC_IPMS_STATE_NOT_FOUND_BUG_PCBS_FSM = 0xe50b5c5b,
    IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_EYE_WIDTH_STATUS_PL = 0x1e57f513,
    RC_PROC_BUILD_SMP_CORE_FREQ_RANGE_ERR_FREQ_CORE_FLOOR = 0x57efa877,
    RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_PORT = 0xc1843f4c,
    RC_PROCPM_VOLTAGE_CHANGE_MODE_ERR_CHIP = 0xf957c048,
    IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_LANE_DISABLED_VEC_0_15_PG = 0x6921c8b6,
    RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_ACCESS_TYPE_PARAM = 0xb5d72698,
    RC_PMPROC_CHKSLW_EX_NOT_RUNNING_PMGP0 = 0x94d8c372,
    RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_STATUS_REG = 0x836b3f7e,
    RC_FAPIPOREVE_UNKNOWN_ARG_TYPE_TYPE = 0x736c408d,
    IO_FUNCS_EYEOPT_FAIL_RC_SLAVE_RX_EO_RECAL_PG = 0x0c872f1d,
    RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING_INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_0_1 = 0xb2825934,
    RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_ATTR_IDX1 = 0x86d0cff7,
    RC_PMPROC_PBA_SLAVE_RESET_TIMEOUT_POLLCOUNT = 0xe7a2c07b,
    RC_PROC_FIR_FFDC_TARGET = 0x54636b2e,
    RC_PMPROC_CHKSLW_EX_NOT_RUNNING_PMERR = 0xc61fc12d,
    RC_TEST_DQ_BAD_DATA_FFDC_DATA1 = 0xb03bd885,
    RC_P8_PLL_UTILS_SBE_SCAN_ERROR_PLL_RING_OP = 0x083b17b8,
    IO_FUNCS_WIRETEST_FAIL_RC_MASTER_RX_TRAINING_STATUS_PG = 0x27840458,
    RC_MSS_ACCESS_DELAY_REG_BAD_MBA_POS_MBA_TARGET = 0x399fa159,
    RC_MSS_MODULE_TYPE_MIX_MODULE_TYPE = 0xf5ff37f7,
    IO_FIR_LANE_RX_PARITY_ERROR_RC_ENDPOINT = 0x1f0b5fbd,
    RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_SIZE_OF_RS4_LAUNCH = 0x14c00ada,
    RC_MSS_LRDIMM_INVALID_MSS_FREQ_L_MSS_FREQ = 0xa9f1d5f6,
    IO_READ_EREPAIR_INVALID_INVOCATION_RC_TARGET = 0x7a6f6411,
    RC_OSC_SWITCH_UNEXPECTED_CHIP_EC_FFDC_CHIP_EC = 0x232453b7,
    RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_LOOPCOUNT = 0x66729be8,
    RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ENTRY_ERROR_GPST_RETURN_CODE = 0x6d610340,
    RC_P8_PLL_UTILS_INVALID_OPERATION_INVALID_RING_OP = 0x54daa8b3,
    RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_BASE_ADDR = 0x317f12e9,
    RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_DATA_SIZE_RS4_COMPRESS_CONTAINER = 0xb3d3f077,
    RC_PROC_THREAD_CONTROL_SRESET_FAIL_THREAD = 0x11a4e1c0,
    RC_PROCPM_CHKSTOP_EX_TARGET = 0x3ac7dcda,
    RC_PROC_BUILD_SMP_LINK_TARGET_TYPE_ERR_SOURCE_LINK_ID = 0x9c382fe9,
    RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_MULTICAST_MC_GROUP = 0x078ced0c,
    RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_UT_ERROR_CHIPLET_NUM = 0xfc5f8297,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_ENGINE = 0xc14ba2cb,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS_MBI_STAT = 0x94ee9f7a,
    RC_GET_PROC_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_PROC_CHIP = 0x03e31624,
    RC_MPIPL_MCD_RECOVERY_NOT_DISABLED_RC_MCD_RECOV_CTRL_REG_ADDR = 0xa05785d0,
    RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_FREQ_PB = 0x41eb2e50,
    RC_MSS_C4_PHY_INVALID_INPUT_TYPE_PARAM = 0x8c7535ea,
    RC_PROCPM_POREBAR_PBABAR_ERROR_REGIONMASKEDADDR = 0x33987626,
    RC_PROC_SETUP_BARS_ATTR_QUERY_ERR_ATTR_IDX1 = 0x24bac11c,
    RC_PROCPM_PBA_BCUE_STOP_TIMEOUT_POLLCOUNT = 0x97b6b73f,
    RC_MSS_SLEW_CAL_ERROR_PORT0_SLEW = 0xef918e96,
    RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR_CHIP = 0x782b0966,
    RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_OBJECT_ERROR_GPST_RETURN_CODE = 0x22191630,
    RC_MSS_EFF_CONFIG_DIMM_UNSUPPORTED_TYPE_UNSUPPORTED_VAL = 0x69f2a160,
    RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_MEM_BASE_ADDR = 0x0b4a45d1,
    REG_FFDC_PCBS_PSSTATE_MONITOR_REGISTERS = 0x2b00006e,
    RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_ENABLED = 0x84dbd761,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR_TARGET = 0xf7e5b822,
    RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_DATA_BUF_SIZE_FIXED = 0x8d852e31,
    RC_PROCPM_BLKWKUP_CODE_BAD_OP_OPERATION = 0xd2eb4abc,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA_ATTN_REPORTED = 0x440677ec,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR_MCI_STAT = 0x9d7c0624,
    RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR_XIPRC = 0x0c5e7390,
    REG_FFDC_MCS_LFIR_MASK_REGISTERS = 0x187913bd,
    RC_EREPAIR_THRESHOLD_EXCEED_FFDC_THRESHOLD = 0x55ade2d6,
    RC_PMPROC_CHKSLW_NOT_IN_ETR_PMGP1 = 0x48be40e5,
    RC_MSS_UNSUPPORTED_SPD_DATA_DDR4_MTB_DDR4 = 0xdc8de1ba,
    RC_INITFILE_INCORRECT_VER_FFDC_IF_VER = 0x4002ab96,
    RC_MBVPD_UNEXPECTED_MEM_TYPE_MEM_TYPE = 0xed0fc897,
    RC_MSS_MAINT_ECC_DISABLED_CMD_TYPE = 0x2b5f2104,
    RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_SYMBOL = 0xd2bf15db,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE_MODULE_TYPE_0_1 = 0x9ee2d9ff,
    RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_ALLOW_AGGREGATE = 0x6e8fd65e,
    RC_PROCPM_PMCRESET_IDLE_TIMEOUT_ERROR_PMCSTATUS = 0x61d7d590,
    IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_EYE_WIDTH_STATUS_PL = 0x47e2a832,
    IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_CHIP_TARGET = 0x0f047e57,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS_MBI_FIR = 0x58aaf225,
    RC_MSS_VOLT_VCS_OFFSET_VALUE_ERROR_VCS_SLOPE_INTERCEPT = 0xe0b99ef0,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_IMAGE_SIZE = 0x1d35d1b7,
    IO_FIR_INVALID_INVOCATION_RC_ENDPOINT = 0x4669426c,
    RC_CONFIG_SLEW_RATE_INVALID_INPUT_SLEW_IMP_PARAM = 0xa4777288,
    RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_EXPECTED_REG = 0x5959199a,
    RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR_HTM_BAR_SIZE = 0x61f9a754,
    IO_FUNCS_WIRETEST_FAIL_LANE_SLAVE_DATA_RC_LANEID = 0x883a9fe8,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_FREQ_4 = 0xb20f6018,
    RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PMSR = 0xb1e45665,
    RC_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR_VDDR_SLOPE_INACTIVE = 0x38f3b04d,
    RC_MSS_MAINT_CMD_TIMEOUT_CMD_TYPE = 0x8e548b74,
    RC_MSS_MAINT_NO_MEM_CNFG_MBAXCR = 0xf68c7d97,
    RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_SOURCE_CHIP_TARGET = 0x3d209574,
    RC_PROC_OHA_CODE_PUTGETSCOM_FAILED_ERRORS = 0xd1ed366a,
    IO_FUNCS_EYEOPT_FAIL_RC_MASTER_GROUP = 0x8b6e6887,
    RC_MSS_MAINT_CMD_IN_PROGRESS_MBMCT = 0x89e80c30,
    RC_PROC_TOD_INIT_ERROR_CHIP_TARGET = 0x797fcc09,
    RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE_SUBSTEP_NUM = 0x21a17807,
    RC_PROC_EXTRACT_SBE_RC_ENGINE_RETRY_PIB_ERROR_CODE = 0xa60f3930,
    RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE_TOTAL_SIZE = 0x10d3ffe9,
    RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR_MBA_POSITION = 0x7ab09069,
    RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR_MBA_POSITION = 0xc235df55,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_CLEAN_BAD_DQ_BITMAP_RANK3 = 0xd31d9051,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS_SDRAM_COLS_1_1 = 0xf5ccbf42,
    IO_FUNCS_WIRETEST_FAIL_LANE_SLAVE_DATA_RC_RX_WT_STATUS_PL = 0x1e771eeb,
    RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_N = 0x7e67000a,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF_MBI_STAT = 0x39671013,
    RC_MSS_EFF_CONFIG_MIRROR_DISABLED_MIRROR_PLACEMENT_POLICY = 0xbef41dd6,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR_MCI_STAT = 0x8a64b163,
    RC_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR_CEN_TARGET_NUM = 0xd0e2f605,
    RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_X_AGGREGATE = 0x53b312bb,
    RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_DATA_IMG_SIZE_WORK_SPACE = 0x0c01c73b,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR_MBI_FIR = 0x2d8ccdd1,
    RC_PROCPM_PMCRESET_IDLE_ERROR_PMCSTATUS = 0xad7872b0,
    RC_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR_MBAFIR = 0x0c629631,
    RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_CORE_TARGET = 0xef5f18e8,
    RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS_BOOT_CORE_MASK = 0xa5af436e,
    RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADDRESS1 = 0x496c6a84,
    RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_MBMCC = 0x718c94d0,
    RC_MSS_MAINT_ECC_DISABLED_MBA = 0xcdf9108b,
    PROC_ENABLE_RECONFIG_CLEANUP_INVALID_MCS_RC_MASTER_TARGET = 0xc2ac2831,
    RC_MSS_MAINT_INVALID_SYMBOL_INDEX_RANK = 0x30a8a8e9,
    RC_PROC_THREAD_CONTROL_START_FAIL_RAS_STATUS = 0x1a28338c,
    RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_FFDC_DATA_3 = 0x47049850,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_RC_LOCAL = 0x656ac84d,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS_SDRAM_ROWS_0_0 = 0x61b82e9f,
    RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_NEW = 0x5044796d,
    RC_PROCPM_MST_SEQUENCER_STATE_ERR_PMCMODE = 0x5f6777d8,
    REG_FFDC_CEN_CHIP_GLOB_RFIR_REGISTERS = 0x99940760,
    IO_FUNCS_REPAIR_FAIL_RC_MASTER_RX_TRAINING_STATUS_PG = 0xc26e0f54,
    RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_DATA_BUF2_SIZE = 0x46c52ac2,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_PB_HP_MODE_CURR_CENT_DATA = 0x8f9a159a,
    RC_IPMS_UNSUPPORTED_SV_VALUE_PMC_QUEUE_STATE = 0x76d0d799,
    RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_OHAAISSIOADDR = 0x4e2de8d7,
    RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_STEER_TYPE = 0x46825997,
    RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VIO_ERROR_RAW_VALUE = 0x46bf113e,
    IO_FUNCS_REPAIR_FAIL_RC_MASTER_CHIP_INTERFACE = 0xe6c6e418,
    RC_GET_PROC_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CHIP_NAME = 0xa1069956,
    RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_ATTR_DATA = 0x186833da,
    REG_FFDC_CHIP_MASTER_INTERRUPT_REGISTERS = 0x889408e7,
    RC_MBVPD_INVALID_DIMM_FOUND_INVALID_DIMM_P1S0 = 0x166515dc,
    RC_MSS_PDA_NONMRS_ATTR_NAME_MBA_TARGET = 0xd6fcc891,
    RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_REGIONS_TO_ENABLE = 0x42f5f36b,
    RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_FREQ_X = 0xe84f083c,
    RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_PSTATE_MINMAX_BOUNDS_ERROR_RETURN_CODE = 0x0d73c413,
    RC_IPMS_STATE_NOT_FOUND_BUG_PMHIST_STATE = 0x9a1dd94f,
    IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_H1_ODD_PL = 0x3f308ff0,
    RC_MSS_PDA_DRAM_DNE_DRAM_VALUE = 0xb484f4fc,
    RC_OSC_SWITCH_CTL_UNEXPECTED_ATTR_FFDC_UNEXPECTED_ATTR = 0x0d1cae88,
    RC_MBVPD_DIMMS_NOT_FOUND_DIMM_P0S1 = 0x89688e31,
    RC_PROCPM_SPCWKUP_NOT_SET_I_ENTITY = 0x51a55b61,
    RC_MSS_UNEXPECTED_TP_CLOCK_STATUS_EXPECTED_STATUS = 0x1eb7716a,
    RC_IPMS_STATE_NOT_FOUND_BUG_PIRR2_REG = 0x095da29d,
    RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_ERROR_BUCKET_ID = 0xd8b53a83,
    RC_MSS_MAINT_NO_MEM_CNFG_MBA = 0x353b62b4,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH_BUS_WIDTH_0_1 = 0x703d2010,
    RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE_ISTEP_NUM = 0xa756a775,
    RC_PROC_EXTRACT_SBE_RC_OCI_ERROR_OCI_DATA_READ_PARITY_ERROR = 0xf8cb665b,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR_MCI_STAT = 0xcb31500f,
    RC_MSS_VOLT_VPP_OFFSET_VALUE_ERROR_VPP_INTERCEPT = 0xb7d04971,
    RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_FIR_REG = 0x304b1c5f,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR_BASE_ADDR = 0x6a0f191b,
    RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE_DRAM_GEN_START = 0x0d806956,
    RC_P8_PLL_UTILS_INVALID_OPERATION_PLL_RING_ADDR = 0xbaa8e902,
    RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR_RANK = 0x36b7eeaf,
    RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR_SPARE = 0xc6b3f502,
    RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_OHAROREG = 0x045831c7,
    RC_TP_COLLECT_DBG_DATA_VITL_DATA = 0x1e5725c0,
    RC_PROC_BUILD_SMP_CORE_CEILING_FREQ_RATIO_ERR_FREQ_PB = 0xeb69e9d9,
    RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE = 0x840894bc,
    RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_RANK = 0x5295a95e,
    RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_i_pba_cmd_scope = 0x3d261ab4,
    RC_PMPROC_CHKSLW_NOT_IN_ETR_PMHIST = 0xdad0f052,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR_MBI_STAT = 0x27c0f8bf,
    RC_PROCPM_VLT_TIMEOUT_PSTATESTEPTARGET = 0xeae7d53b,
    RC_PROC_SLWB_CREATE_FIXED_IMAGE_ERROR_RC_LOCAL = 0xfaaf44c6,
    RC_PROC_ADU_UTILS_INVALID_LOCK_OPERATION_TARGET = 0xecfdc4cf,
    IO_RUN_TRAINING_INVALID_TARGET_PAIR_RC_SLAVE_TARGET = 0xdab301b3,
    RC_FAPIPOREVE_ERROR_SETTING_BREAKPOINT_ADDRESS = 0x6cb00175,
    RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_SIZE = 0x6a2ea7a2,
    RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR_ATTR_DATA = 0xebf8ee3c,
    IO_FUNCS_REPAIR_TIMEOUT_RC_FFDC_NUM_CYCLES = 0x1ae2bb55,
    RC_REPAIR_RING_NOT_FOUND_CHIPLET_ID = 0xf7283a7e,
    RC_PROCPM_GPE_CODE_BAD_MODE_IMODE = 0xf6695988,
    RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_SYMBOL = 0x6ce9549a,
    RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VCS_ERROR_LRP_NUMBER = 0xf70c121d,
    RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR_RANKGROUP_POSITION = 0xeeaefc89,
    RC_PROC_BUILD_SMP_INVALID_TOPOLOGY_A_CONNECTED_NODE_IDS = 0x6283c2a1,
    RC_MSS_EFF_CONFIG_SDRAM_COLS_ERROR_SDRAM_COLS = 0xe092bd7b,
    REG_FFDC_EX_LFIR_REGISTERS = 0x07fab6b1,
    RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_TARGET = 0x746f6a7d,
    RC_MSS_MAINT_NO_X8_ECC_SPARE_STEER_TYPE = 0x4663bdb9,
    IO_FUNCS_REPAIR_FAIL_RC_MASTER_RX_STATIC_REPAIR_STATE_PG = 0x806cb5b2,
    RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_INVALID_OPERAND = 0x7014ec1f,
    RC_MSS_MAINT_INVALID_STEER_MUX_DRAM_WIDTH = 0xd607d98b,
    RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_DIMM = 0xe6cb4d12,
    RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE_SBE_RUNNING = 0x778fbbd1,
    IO_FIR_LANE_TX_PARITY_ERROR_RC_ENDPOINT = 0x05d99d84,
    IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_RX_FIFO_STAT_PL = 0x5d715f76,
    RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_OHAROADDR = 0x9d6b4fcf,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO_MINIMUM = 0xf1d76aa5,
    RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_ENABLED1 = 0x3b8ad407,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR_MCI_STAT = 0x3e33db64,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_FREQ_2 = 0x5514906d,
    RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_D = 0x831e308d,
    RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR_DIMM_POSITION = 0xd911f380,
    RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK_ACTUAL_STATUS = 0x9fc279ea,
    RC_PMPROC_PBA_SLAVE_RESET_TIMEOUT_SLAVENUM = 0x041d38d4,
    RC_GET_SPD_ACCESSOR_INVALID_DDR_TYPE_TYPE = 0xf5ccc3c8,
    RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PMGP1 = 0x028913bd,
    RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR_XIPRC = 0xc42ba7e8,
    RC_PROC_PBA_ADDR_OUT_OF_RANGE_i_pba_bar_size = 0xa39f38d4,
    RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_CORE_TARGET = 0x60334297,
    RC_PROCPM_PBA_BCUE_STOP_TIMEOUT_POLLVALUE = 0x2e4c0279,
    RC_GET_MEMB_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CHIP_NAME = 0x7e6f2aff,
    RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MCS_MCI_STAT = 0xab261ddc,
    RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_ATTR_DATA = 0x3f7cd63c,
    RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_FREQ_A = 0x56bcb9ce,
    IO_FUNCS_DESKEW_FAIL_RC_SLAVE_CHIP_INTERFACE = 0xfc4a7ff7,
    RC_PROC_ADU_UTILS_INVALID_FBC_OP_FBC_OP_HP_CTL = 0x53a2773e,
    RC_MBVPD_DIMMS_NOT_FOUND_DIMM_P1S1 = 0x73dce582,
    RC_P8_PLL_UTILS_INVALID_OPERATION_PLL_RING_OP = 0x01a9a031,
    RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_ENABLED = 0xfbda800a,
    RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_SOURCE_LINK_ID = 0x922b4c1d,
    IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC_RX_VREF_PL = 0x76335ea7,
    RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR_RANKGROUP_POSITION = 0xc5678501,
    RC_PROCPM_PSTATE_DATABLOCK_PSAFE_GT_GPSTPMAX_ERROR_FREQ_KHZ = 0xccd81abb,
    RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_ATTRBOOSTPERCENT = 0xaff277ae,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN_DRAM_DEVICE_TYPE_1_0 = 0x11c6846a,
    RC_MSS_ACCESS_DELAY_REG_BAD_DRAM_WIDTH_DRAM_WIDTH = 0xe91981c1,
    IO_FUNCS_WIRETEST_FAIL_LANE_MASTER_DATA_RC_LANEID = 0x0e9c9746,
    RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP = 0x147f964c,
    REG_FFDC_PROC_PBA_UTILS_REGISTERS = 0xa79a4960,
    RC_MSS_SCOMINIT_NUM_MBA_ERROR_NUM_MBAS = 0xee40e9e1,
    RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_3 = 0x8a0b6dd3,
    RC_MSS_UNSUPPORTED_SPD_DATA_DDR3_FTB_DIVISOR = 0x7706e1df,
    RC_MSS_EFF_CONFIG_MISMATCH_EMPTY_CUR_DIMM_SPD_VALID_U8ARRAY_0_1 = 0x442dc61b,
    RC_MSS_MAINT_NO_X8_ECC_SPARE_RANK = 0x26ab39e9,
    REG_FFDC_MBI_FIR_REGS = 0xed8fa221,
    RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR_PHYLANE = 0x0b2085b8,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR_MCI_FIR = 0x436be24d,
    IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC_RX_DESKEW_STAT_PL = 0xafc8f38d,
    RC_P8_PLL_UTILS_SBE_SCAN_ERROR_TARGET = 0x0c973a43,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF_MBI_FIR = 0xad6fcb9d,
    RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_RC_LOCAL = 0x7a654e95,
    RC_P8_PLL_UTILS_SBE_SCAN_ERROR_MBOX1_DATA = 0xd83609a4,
    RC_PROCPM_PMC_INTERCHIP_CONFIG_ERROR_SLAVEPMCMODE = 0x5f6c3f18,
    RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_TARGET1 = 0xcc0ec6ba,
    RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_ATTR_ID = 0xc66ccc50,
    RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_PMCLFIR = 0xfd48b803,
    REG_FFDC_CMD_TIMEOUT_MBA_REGS = 0x45611bb6,
    RC_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR_VPD_MASTER_POWER_INTERCEPT = 0xa746aed9,
    RC_MSS_MAINT_STOP_NOT_RESET_MBMCT = 0x858f7a88,
    RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_SETBBM_WIDTH = 0x40b8a798,
    RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_A_OW_PACK_PRIORITY = 0x36eea615,
    RC_MSS_MAINT_NO_X8_ECC_SPARE_MBA = 0xb5fbe5c7,
    RC_PMPROC_CHKSLW_INVALID_STATE_EX = 0x14007cda,
    RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE_ISTEP_NUM = 0x2855f265,
    IO_FIR_RECALIBRATION_ERROR_RC_RECAL_ERROR_REG = 0x3b133b64,
    RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR_MCI_FIR = 0x965aac9c,
    RC_PROCPM_POREBAR_SIZE0_ERROR_MEMSIZE = 0x9c1cd786,
    RC_MBVPD_INVALID_DIMM_FOUND_INVALID_DIMM_P0S1 = 0x283725e0,
    REG_FFDC_PCBS_PSSTATE_REGISTERS = 0x8d6e7cdb,
    RC_MSS_PDA_DRAM_DNE_MBA_TARGET = 0x4f6671b0,
    RC_INSUFFICIENT_VPD_RETURNED_KEYWORD = 0xe71b3bcc,
    RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_UT_ERROR_OP_POINT = 0xdf361f2f,
    RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_X4ECCSPARE = 0x05c091d8,
    RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_PORT = 0x814769c8,
    RC_PMPROC_CHKSLW_NOT_IN_ETR_EX = 0x7edb776a,
    RC_PMPROC_PFETLIB_BAD_OP_DOMAIN = 0xf22af26c,
    RC_PMPROC_PFETLIB_BAD_OP_OPERATION = 0x8505ea95,
    RC_PMPROC_PFETLIB_RAIL_ON_EX = 0x25ec7712,
    RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_DATA_FAIL_BYTE_NO = 0xbc57418c,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR_MBI_FIR = 0xf733de00,
    IO_FUNCS_EYEOPT_TIMEOUT_RC_MASTER_CHIP_INTERFACE = 0x2dea5c5c,
    RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_PORT_PARAM = 0xac9b6d0d,
    RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR_REGIONS_TO_ENABLE = 0x7427849e,
    RC_PROC_SLWB_IMG_PTR_ERROR_DATA_BUF2_PTR = 0xfc9fba2d,
    RC_PROC_DMI_SCOMINIT_INVALID_TARGET_MCS_TARGET = 0x06f9cdd5,
    RC_INITFILE_LIT_ID_OUT_OF_RANGE_FFDC_IF_LIT_ID_OUT_OF_RANGE = 0xd819f781,
    RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_PHYP_SPCWKUP_COUNT = 0x28fe24d3,
    RC_PROC_ABUS_SCOMINIT_INVALID_TARGET_CONNECTED_ABUS_TARGET = 0xbf0d8655,
    RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR_DCM_INSTALLED_1 = 0xb9e86d58,
    RC_MBVPD_ATTRIBUTE_NOT_FOUND_VERSION = 0xac7e887c,
    RC_PROC_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR_CHIP_TARGET = 0xeda5965b,
    RC_MSS_EFF_CONFIG_CWL_CALC_ERR_CWL_VAL = 0xcfced1a3,
    RC_MSS_DP18_0_PLL_FAILED_TO_LOCK_EXPECTED_STATUS = 0x1efa8fb9,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_SYS_NEXT = 0x26918a76,
    IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_AP_PL = 0xe5786753,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_NODE_NEXT = 0x9448af98,
    RC_MSS_EFF_CONFIG_MOD_TYPE_ERROR_MOD_TYPE = 0x5031bc8d,
    REG_FFDC_EX_GLOB_ATTN_MASK_REGISTERS = 0x49de5d5b,
    IO_FUNCS_DESKEW_FAIL_RC_MASTER_GROUP = 0xd45942f6,
    RC_PROCPM_PSTATE_DATABLOCK_PDV_OPPOINT_ORDER_ERROR_OP_POINT = 0xc9b9f211,
    RC_MSS_PDA_DRAM_DNE_DIMM_VALUE = 0xc6d11217,
    IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_TRAINING_STATUS_PG = 0x4a568113,
    IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_MIN = 0xf6bbde43,
    RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR_XIPRC = 0xa5c95dc3,
    RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR_CHIP = 0x3009ecde,
    RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME_MBA_FARB0 = 0x6ba2c16b,
    IO_DCCAL_ZCAL_ERROR_RC_DATA_BUFFER = 0xa6a86cf8,
    RC_MSS_UNEXPECTED_MEM_CLOCK_STATUS_ACTUAL_STATUS = 0x8af77fee,
    RC_MSS_MAINT_INVALID_SYMBOL_INDEX_MBA = 0x73b0c01c,
    RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ARGUMENT_ERROR_OPS_PMIN = 0xbe877fa9,
    RC_PROCPM_BLKWKUP_CODE_BAD_OP_EX_TARGET = 0xb2572bb9,
    RC_MSS_MAINT_NO_UE_TRAP_UE_TRAP1 = 0xb853302e,
    RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT_PORT_PARAM = 0x9a5918a7,
    RC_PROC_THREAD_CONTROL_STEP_FAIL_stepCompletePollCount = 0x26da4fdc,
    RC_IPMS_SUSPICIOUS_PCBS_FSM_PMC_QUEUE_STATE = 0x6a23826c,
    RC_GET_SPD_ACCESSOR_INVALID_ATTRIBUTE_ID_ATTR_ID = 0x27806b4d,
    REG_FFDC_PROC_SLW_PMC_REGISTERS = 0x54122ce5,
    IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_ZCAL_P = 0x6c000784,
    RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL_ATTR_MVPD_DATA_3 = 0x47217e25,
    IO_FUNCS_REPAIR_FAIL_RC_SLAVE_RX_BAD_LANE_ENC_GCRMSG_PG = 0x9466b0ed,
    RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_SIZE = 0xe2e01546,
    REG_FFDC_SBE_SELECT_EX = 0x1de32024,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF_MBI_FIR = 0xf8d9dd1e,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET_DIMM = 0x61ef643e,
    IO_FUNCS_REPAIR_FAIL_RC_SLAVE_RX_STATIC_REPAIR_STATE_PG = 0x8a843a32,
    IO_FUNCS_DESKEW_TIMEOUT_RC_MASTER_GROUP = 0x67948dfa,
    RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_i_index = 0x73a8377d,
    RC_GET_L3_DELTA_DATA_PARAMETER_ERR_TARGET_TYPE = 0x35256b84,
    IO_FIR_LANE_TX_PARITY_ERROR_RC_LANE_ID = 0x9bc3a7ce,
    RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR_PORT_POSITION = 0xd1566b2d,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MIRROR_SIZES = 0xe488b9c6,
    RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC_CHIP_NAME = 0x896a695a,
    RC_MSS_CCS_CAL_TIMEOUT_REG_CONTENTS = 0x4a37a533,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_CHIP = 0xe6e59c0b,
    RC_P8_PLL_UTILS_SBE_STOPPED_TARGET = 0x1896a957,
    RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4_PROC_CHIP = 0x988cf330,
    RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE_SUBSTEP_NUM = 0x6a53139d,
    RC_GET_PROC_ABUS_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_PROC_CHIP = 0x0f3efc0c,
    RC_EREPAIR_RESTORE_SPARE_LANES_IN_VPD_FFDC_TARGET = 0xd8ada35a,
    IO_FUNCS_FUNC_MODE_TIMEOUT_RC_MASTER_CHIP_INTERFACE = 0xebb74203,
    RC_MSS_MAINT_INVALID_CHIP_INDEX_RANK = 0x9cf4d07e,
    IO_FUNCS_FUNC_FAIL_RC_SLAVE_GROUP = 0xce3a44db,
    REG_FFDC_SCAC_FIR_REGS = 0x4659d2c2,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_ATTR_IDX2 = 0x91c1c9a3,
    RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_UT_ERROR_BUCKET_ID = 0x31a329bd,
    RC_PROC_MPIPL_FORCE_WINKLE_CANNOT_UNLOCK_IPMS_STATE_IPMS_STATE = 0xae966c23,
    RC_MSS_MAINT_INVALID_CMD_MBMCT = 0x6489cbe4,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR_MBI_STAT = 0x19f0a5be,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_UPDATE_BAD_DQ_BITMAP_RANK3 = 0xa4419509,
    RC_MSS_LRDIMM_INVALID_SPD_DRV_IMP_L_DRAM_RON = 0x6182338c,
    REG_FFDC_PROC_PIBMEM_REGISTERS = 0x9196873f,
    RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_OHAAISSIOREG = 0x02fd54eb,
    RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_NODE_ID = 0xd8f2c5c8,
    RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR_DIMM = 0x12fd5332,
    RC_MSS_MAINT_INVALID_STEER_MUX_MUX_TYPE = 0x4c3770aa,
    RC_MSS_EFF_CONFIG_MISMATCH_SIDE_CUR_DIMM_SPD_VALID_U8ARRAY_1_0 = 0xf093e230,
    RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT_INVALID_RDIMM_RCD_IBT_U32ARRAY_1_0 = 0x58532056,
    RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR_RANGE_ID2 = 0x3299ae2f,
    RC_CEN_DMI_SCOMINIT_INVALID_TARGET_TARGET = 0x8e48c070,
    RC_OPT_MEMMAP_GROUP_ERR_GROUP_ID = 0x84dad8e0,
    RC_MSS_MAINT_INVALID_CHIP_INDEX_CHIP_MARK = 0x0f6b1155,
    RC_CEN_XIPC_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL = 0x6a3a4d3f,
    RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_MBASCTL = 0x8efdfe8d,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN_DRAM_DEVICE_TYPE_0_0 = 0xea996195,
    RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_DRAM_GEN = 0x1a3a0e40,
    RC_P8_PLL_UTILS_INVALID_OPERATION_INVALID_BUS_ID = 0x201a53d5,
    RC_MSS_PDA_MRS_NOT_FOUND_MBA_TARGET = 0x597ffb4a,
    RC_I2C_COMPLETE_BIT_TIMEOUT_RC_DATA_REG = 0xfe449b41,
    RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS_VALID_COUNT = 0x38c6b752,
    RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR_RANKGROUP_POSITION = 0x4e727775,
    RC_MSS_MAINT_INVALID_MARKSTORE_MARKSTORE = 0x76ff742d,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_RANGE_ID = 0x17bece36,
    RC_PROC_BUILD_SMP_CORE_CEILING_FREQ_RATIO_ERR_FREQ_CORE_CEILING = 0x9e43da6b,
    RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR_MASTER_TARGET = 0x18ef32e5,
    RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ARGUMENT_ERROR_OPS_PMAX = 0x79051039,
    RC_PROC_ABUS_SCOMINIT_PARTIAL_GOOD_ERR_TARGET = 0x3655b767,
    IO_FIR_GROUP_TX_PARITY_ERROR_RC_ENDPOINT = 0xec2cf92a,
    RC_MSS_SLEW_CAL_TIMEOUT_PORT1_SLEW = 0x53cde1ea,
    RC_MSS_MAINT_INVALID_CHIP_INDEX_DRAM_WIDTH = 0x8994e37a,
    RC_PROC_SLWB_SLEEP_PROCESSING_ERROR_CT = 0x37834030,
    RC_FAPIPOREVE_MODEL_ERROR_GETTING_HALT_CODE_ERROR = 0x27329a80,
    RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_SUBSTEP_NUM = 0xd6b7a1e7,
    RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR_PM_RES_CLOCK_LOW_BAND_LOWER_FREQ = 0x0cb85964,
    RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT_TYPE_PARAM = 0x851de8db,
    RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_FREQ_PB = 0xeb903578,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_P1_REG = 0xfb7648e5,
    RC_P8_PLL_UTILS_INVALID_OPERATION_INVALID_RING_ADDRESS = 0x866ad638,
    RC_PROCPM_PSTATE_DATABLOCK_PDV_BUFFER_SIZE_ERROR_BUFFER_SIZE = 0x7921a9ae,
    RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT_MBAFIR = 0x008a3838,
    RC_EX_CHIPLET_AISS_WA_INACCESSIBLE_CHIP_TARGET = 0x08ece8d5,
    RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR_MASTER_TARGET = 0xb0cd874c,
    REG_FFDC_TEST_X_PROC_REGISTERS_PRES_CHILDREN = 0xf335860d,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF_MCI_STAT = 0x73502d9d,
    RC_PROCPM_PMC_SLAVE_CONFIG_ERROR_SLAVEPMCMODE = 0x5ef82730,
    RC_EX_CHIPLET_AISS_WA_INACCESSIBLE_GP3REG = 0xf0aa4e8d,
    RC_PROCPM_PSTATE_DATABLOCK_PSTATE_MINMAX_BOUNDS_ERROR_FREQ_KHZ = 0x076896b2,
    RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR_PORT_POSITION = 0x0ef450b4,
    RC_MSS_MAINT_INVALID_SYMBOL_INDEX_CHIP_MARK = 0x7eb77498,
    RC_CONFIG_SLEW_RATE_INVALID_INPUT_SLEW_TYPE_PARAM = 0xb6558880,
    RC_GET_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_MEMBUF_CHIP = 0x0110c045,
    REG_FFDC_PSTATE_REGISTERS = 0x1efe6d86,
    RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR_BASE_ADDR = 0x3a95fdd6,
    RC_MSS_DP18_1_PLL_FAILED_TO_LOCK_EXPECTED_STATUS = 0x9a8ba389,
    RC_GET_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CHIP_EC = 0x10639763,
    RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_RANK = 0x43bc4d22,
    RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_I2C_ENGINE_MISS = 0x0e38b14d,
    RC_MSS_SLEW_CAL_TIMEOUT_PORT1_IMP = 0x93495739,
    RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MEMBUF_MCI_FIR = 0xdc5dbd19,
    RC_PROC_ADU_UTILS_INVALID_FBC_OP_FBC_OP = 0x2c3f7958,
    RC_PROCPM_PMC_INTERCHIP_CONFIG_ERROR_MASTERPMCMODE = 0x1eeeae0f,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_A0_REG = 0xd49aa885,
    RC_CROSS_COUPLED_INVALID_INPUT_TYPE_PARAM = 0xaf668b10,
    RC_PROC_XIPC_GEN_RAM_ERROR_RC_LOCAL = 0xe92b1213,
    RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR_SLWCONTROLVECTOR = 0x59c1b81c,
    IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_CHIP_TARGET = 0xabf0e5eb,
    RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_EX = 0x5c0e5f76,
    RC_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION_DIMM_VOLTAGE = 0xb3acb424,
    RC_PROCPM_SPCWKUP_TIMEOUT_SP_WKUP_REG_ADDRESS = 0x7eda3623,
    IO_FUNCS_DESKEW_TIMEOUT_RC_FFDC_NUM_CYCLES = 0x3ad80b8e,
    RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_MBA = 0x327e86b9,
    RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_ARGS = 0x772b30bc,
    RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_PIB_ERROR_CODE = 0xe36b735c,
    IO_FUNCS_REPAIR_FAIL_RC_SLAVE_RX_TRAINING_STATUS_PG = 0x83625e59,
    RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_N = 0xfee1d68a,
    RC_PROC_FAB_IOVALID_X_PARTIAL_GOOD_ERR_TARGET = 0xeca8a463,
    RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PCBSMODE = 0x8dd89947,
    RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR_ERR_TYPE = 0xf3812185,
    IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC_RX_H1_EVEN_PL = 0x5fc083db,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_IBUF1_REG = 0x3fdc049d,
    RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_X_NOT_A = 0xed4a074e,
    IO_FUNCS_REPAIR_TIMEOUT_RC_SLAVE_CHIP_INTERFACE = 0xe7a1c893,
    RC_PMPROC_CHKSLW_PMC_FIR_ERRORS_PMGP0 = 0x09c59e23,
    RC_IPMS_UNSUPPORTED_SV_VALUE_PMHIST_STATE = 0x085ebffd,
    RC_GET_TP_DEBUG_DATA_ERR_CHIP_NAME = 0x3b3c6a98,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS_SDRAM_ROWS_1_0 = 0xfa9339cb,
    RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR_ATTR_ID = 0xee9da0a1,
    RC_MSS_VOLT_VCS_OFFSET_VALUE_ERROR_VCS_SLOPE_INACTIVE = 0x83d0ee96,
    RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR_INSTRUCTION_FETCH_ERROR = 0xef92cc96,
    REG_FFDC_EX_LFIR_MASK_REGISTERS = 0x2718d5fb,
    REG_FFDC_DMI_PLL_NO_LOCK_REGISTERS = 0x38353a68,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH_DRAM_WIDTH_1_0 = 0x434d8d60,
    RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR_RANK = 0x343a2e1f,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR_MBI_STAT = 0x7a72ca32,
    RC_MSS_SETUP_BARS_M_ALT_BAR_ERR_ALT_BASE_INDEX = 0xf660d183,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_DIMM = 0x96b13071,
    IO_FUNCS_EYEOPT_FAIL_RC_SLAVE_RX_LANE_BAD_16_31_PG = 0xc7d79960,
    RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK_LOCK_STATUS = 0xc90a9567,
    RC_PMPROC_CHKSLW_NOT_IN_ETR_PMERR = 0xd7ccd03a,
    RC_IPMS_STATE_NOT_FOUND_BUG_ETR_REG = 0x808137cb,
    RC_IPMS_PIRRX_CODE_BUG_PMC_QUEUE_STATE = 0xffdee6ea,
    RC_MSS_MAINT_NO_UE_TRAP_UE_TRAP0 = 0x9749e072,
    RC_PROCPM_PBA_SLVRST_TIMED_OUT_SLVID = 0x2c7d8aef,
    RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE_PORE_ERR_MASK_REG = 0x205a08ea,
    RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_2 = 0x87e515d2,
    RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_PIB_DATA_READ_PARITY_ERROR = 0x870d1b5f,
    IO_RUN_TRAINING_POST_TRAINING_INVALID_INVOCATION_RC_TARGET = 0xe620ceca,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_ALL_MCS_IN_INTERLEAVING_GROUP = 0x655f6b93,
    REG_FFDC_CHIP_GLOB_XFIR_REGISTERS = 0x8e9e983c,
    REG_FFDC_PROC_TP_CLOCK_CONTROLLER = 0xf0ef5248,
    RC_FAPIPOREVE_ERROR_SETTING_PC_ADDRESS = 0xc2c1fc22,
    RC_PROC_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR_CHIP_TARGET = 0x5914f11c,
    RC_MSS_LRDIMM_UNSUPPORTED_TYPE_IBM_TYPE = 0x925a08a2,
    RC_GET_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC_CHIP_NAME = 0x2e26b3c4,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_MSS_MCS_GROUP_32 = 0x72f8622a,
    REG_FFDC_ABUS_LFIR_REGISTERS = 0xf16a6299,
    RC_PROC_XIPC_INVALID_VPD_TYPE_DATA_VPD_TYPE = 0x071c3ea6,
    RC_PROCPM_PREP_UNSUPPORTED_MODE_ERR_MODE = 0x134891f7,
    RC_FAPIPOREVE_ENTRY_POINT_NOT_FOUND_ERROR = 0x20a39a5b,
    RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR_MCI_STAT = 0x3f6176ce,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_EFF_DIMM_SIZE1 = 0x5684567a,
    RC_TEST_ERROR_A_UNIT_TEST_CHIP_TARGET = 0x8453d87f,
    RC_MSS_LRDIMM_INVALID_RANK_MULT_MODE_L_LRDIMM_RANK_MULT_MODE = 0xbf30d275,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR_MCI_STAT = 0x9c1549fa,
    IO_FUNCS_FUNC_FAIL_RC_MASTER_RX_FUNC_STATE_PG = 0x2ff947b2,
    RC_PROCPM_PSTATE_DATABLOCK_PSTATE_MINMAX_BOUNDS_ERROR_RETURN_CODE = 0x159091da,
    RC_PROC_XIPC_IMAGE_SIZE_MESS_DATA_IMG_SIZE = 0x1351ca3d,
    RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_L_DRAM_DENSITY = 0x0817600f,
    RC_INITFILE_ATTR_ID_OUT_OF_RANGE_FFDC_IF_ATTR_ID_OUT_OF_RANGE = 0x2feb6247,
    RC_INITFILE_EXECUTION_ERROR_FFDC_ROW = 0x6f4e6670,
    RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR_MBI_FIR = 0x3cc51521,
    RC_MSS_EFF_CONFIG_MISMATCH_EMPTY_CUR_DIMM_SPD_VALID_U8ARRAY_1_0 = 0xfd18c590,
    REG_FFDC_EX_GLOB_RFIR_REGISTERS = 0xa1c8f7a8,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH_BUS_WIDTH_1_0 = 0xd1beb3e0,
    RC_PROC_SLWB_IMG_PTR_ERROR_DATA_BUF1_PTR = 0x63eeeca1,
    RC_PROC_EXTRACT_SBE_RC_OCI_ERROR_OCI_ERROR_CODE = 0xc27e06c5,
    RC_MSS_EFF_CONFIG_UDIMM_UNSUPPORTED_TYPE_UNSUPPORTED_VAL = 0x64bcea5d,
    RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_OHAROREG = 0xf33064a9,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_ENABLED1 = 0x91f4cd1c,
    RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR_MBI_STAT = 0x69cb4fa9,
    RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR_SLWDEEPWINKLEEXITHALT = 0xe08ef96a,
    RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_MAX_CMD_RATE = 0xe4021a74,
    RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_DCM_INSTALLED_2 = 0xefe66959,
    IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_MIN = 0x00ff2aa3,
    RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET_CLEAN_BAD_DQ_BITMAP_RANK3 = 0xf019ac7f,
    RC_TEST_ERROR_B_UNIT_TEST_FFDC_DATA = 0x5186f9b2,
    IO_FUNCS_DESKEW_TIMEOUT_RC_SLAVE_GROUP = 0xaaf2fb97,
    RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR_TOTAL_SIZE = 0x49504033,
    RC_MBVPD_TERM_DATA_UNSUPPORTED_VPD_ENCODE_ATTR_ID = 0x1376d43b,
    RC_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR_DIMM_POSITION = 0xbd1816a7,
    RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_MINMAX_BOUNDS_ERROR_FREQ_KHZ = 0x1eacfe73,
    RC_MSS_EFF_CONFIG_SDRAM_BANK_ERROR_SDRAM_BANKS = 0xba26d21d,
    RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE_SUBSTEP_NUM = 0xa154d811,
    RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS_SDRAM_COLS_0_1 = 0xd7cddd84,
    RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR_PORT_POSITION = 0x25d4fbd0,
    RC_MSS_SLEW_CAL_ERROR_PORT1_DATA_ADR = 0xea53b405,
    RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR_RANKGROUP_POSITION = 0x830d0b0a,
    RC_GET_PROC_ABUS_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC_CHIP_EC = 0x229cf6b5,
    RC_PROC_THREAD_CONTROL_START_FAIL_THREAD = 0x9526db15,
    IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC_RX_AP_PL = 0xb911a58a,
    RC_MBVPD_UNEXPECTED_ISDIMM_KEYWORD_KEYWORD = 0xb8ff8a99,
    RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_exp_PBA_CMD_SCOPE_FOREIGN1 = 0xd21338e3,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR_TARGET = 0x2f1c420e,
    RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR_IMP = 0x7da6cf9c,
    RC_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE_ATTR_ID = 0xb541a603,
    RC_PROC_PBA_BAR_SIZE_INVALID_i_pba_cmd_scope = 0x0ece4d3e,
    RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_DEVICE_TYPE = 0x8c4547c3,
    RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR_FREQSTEPKHZ = 0xf75d45cc,
    RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR_END_ADDR = 0x799de37a,
    RC_PROC_PCIE_SCOMINIT_INVALID_TARGET_TARGET = 0xbd7eaff3,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_ADU_STATUS_DATA = 0x26d692b3,
    RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT_INVALID_RDIMM_RCD_IBT_U32ARRAY_0_0 = 0xcddaa64c,
    RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_SIZEOFTHIS = 0xfd5b3933,
    RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT_INVALID_RDIMM_RCD_IBT_U32ARRAY_0_1 = 0x58a801a8,
    IO_FUNCS_WIRETEST_FAIL_RC_SLAVE_RX_INIT_STATE_PG = 0x06e529c1,
    RC_MSS_CCS_READ_MISCOMPARE_REG_CONTENTS = 0xa879c8d9,
    RC_MSS_MAINT_X4_SYMBOL_ON_READ_RANK = 0x48fd7c91,
    RC_PROC_XIPC_PORE_INLINE_CTX_CREATE_ERROR_RC_LOCAL = 0x4a15051f,
    IO_FUNCS_FUNC_MODE_TIMEOUT_RC_SLAVE_CHIP_INTERFACE = 0x80bcced2,
    RC_ROSETTA_MAP_INVALID_INPUT_PORT_PARAM = 0xe95994ef,
    RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_OHAAISSIOREG = 0xb8410ea4,
    RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_INP = 0x1ff0ab00,
    RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VDD_ERROR_LRP_NUMBER = 0xb43fe2ff,
    RC_INITFILE_TGT_NUM_OUT_OF_RANGE_FFDC_IF_TGT_NUM = 0x41b2db47,
    RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_OHAAISSIOREG = 0xae18cff9,
    RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT_INVALID_RDIMM_RCD_IBT_U32ARRAY_1_1 = 0xe8dfc0c7,
    RC_FAPIPOREVE_INVALID_ENTRY_POINT_TYPE_TYPE = 0x3518a6e1,
    RC_PROCPM_VLT_TIMEOUT_PSTATETARGET = 0x1532fa19,
    RC_MSS_VOLT_AVDD_OFFSET_VALUE_ERROR_AVDD_SLOPE_INACTIVE = 0xcc4a6050,
    RC_GET_L3_DELTA_DATA_ERR_CHIP_EC = 0xc6afb2f6,
    RC_PROCPM_PSS_CODE_BAD_MODE_CHIP = 0x6fcdfa37,
    RC_P8_PLL_UTILS_SBE_TIMEOUT_ERROR_SBE_VITAL = 0x79997a65,
    RC_PROC_SLWB_BAD_CODE_OR_PARM_MODE_BUILD = 0xd8698266,
    REG_FFDC_EX_GLOB_FIR_MASK_REGISTERS = 0x3694608d,
    RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_NODE_ID = 0x8aef3017,
};

}



#endif
