
#ifndef TARG_ATTRIBUTETRAITS_H
#define TARG_ATTRIBUTETRAITS_H

/**
 *  @file attributetraits.H
 *
 *  @brief Templates which map attributes to their type/properties
 *
 *  This header file contains templates which map attributes to their
 *  type/properties.  This file is autogenerated and should not be altered.
 */

//******************************************************************************
// Includes
//******************************************************************************

// STD
#include <stdint.h>
#include <stdlib.h>
#include <targeting/common/entitypath.H>

namespace TARGETING
{

//******************************************************************************
// Attribute Property Mappings
//******************************************************************************

/**
 *  @brief Template associating a specific attribute with a type and other
 *      properties, such as whether it is readable/writable
 *
 *      This is automatically generated
 *
 *      enum {
 *          disabled = Special value for the basic, unused wildcard attribute
 *          readable = Attribute is readable
 *          writable = Attribute is writable
 *          hasStringConversion = Attribute has debug string conversion
 *      }
 *
 *      typedef <type> TYPE // <type> is the Attribute's valid type
 */
template<const ATTRIBUTE_ID A>
class AttributeTraits
{
    private:
        enum { disabled };
        typedef void* Type;
};

template<>
class AttributeTraits<ATTR_CLASS>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef CLASS Type;
};

template<>
class AttributeTraits<ATTR_TYPE>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef TYPE Type;
};

template<>
class AttributeTraits<ATTR_MODEL>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef MODEL Type;
};

template<>
class AttributeTraits<ATTR_ENGINE_TYPE>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef ENGINE_TYPE Type;
};

template<>
class AttributeTraits<ATTR_SCRATCH_UINT8_1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_SCRATCH_UINT8_2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_SCRATCH_UINT32_1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_SCRATCH_UINT32_2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_SCRATCH_UINT64_1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_SCRATCH_UINT64_2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_SCRATCH_UINT8_ARRAY_1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[32];
};

template<>
class AttributeTraits<ATTR_SCRATCH_UINT8_ARRAY_2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][ 3][ 4];
};

template<>
class AttributeTraits<ATTR_SCRATCH_UINT32_ARRAY_1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[8];
};

template<>
class AttributeTraits<ATTR_SCRATCH_UINT32_ARRAY_2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][3];
};

template<>
class AttributeTraits<ATTR_SCRATCH_UINT64_ARRAY_1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[4];
};

template<>
class AttributeTraits<ATTR_SCRATCH_UINT64_ARRAY_2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_DUMMY_RW>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[1][3][5];
};

template<>
class AttributeTraits<ATTR_DUMMY_WO>
{
    public:
        enum { writeable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_DUMMY_RO>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_DUMMY_HEAP_ZERO_DEFAULT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PHYS_PATH>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef EntityPath Type;
};

template<>
class AttributeTraits<ATTR_AFFINITY_PATH>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef EntityPath Type;
};

template<>
class AttributeTraits<ATTR_POWER_PATH>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef EntityPath Type;
};

template<>
class AttributeTraits<ATTR_PRIMARY_CAPABILITIES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef PrimaryCapabilities Type;
};

template<>
class AttributeTraits<ATTR_SCOM_SWITCHES>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef ScomSwitches Type;
};

template<>
class AttributeTraits<ATTR_FSI_MASTER_CHIP>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef EntityPath Type;
};

template<>
class AttributeTraits<ATTR_ALTFSI_MASTER_CHIP>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef EntityPath Type;
};

template<>
class AttributeTraits<ATTR_FSI_MASTER_TYPE>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef FSI_MASTER_TYPE Type;
};

template<>
class AttributeTraits<ATTR_FSI_MASTER_PORT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_ALTFSI_MASTER_PORT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_I2C_SLAVE_ADDRESS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FSI_SLAVE_CASCADE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FSI_OPTION_FLAGS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef FsiOptionFlags Type;
};

template<>
class AttributeTraits<ATTR_EXECUTION_PLATFORM>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_IS_SIMULATION>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_HWAS_STATE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef HwasState Type;
};

template<>
class AttributeTraits<ATTR_HWAS_STATE_CHANGED_FLAG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_HWAS_STATE_CHANGED_SUBSCRIPTION_MASK>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_NUMERIC_POD_TYPE_TEST>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef NumericPodTypeTest Type;
};

template<>
class AttributeTraits<ATTR_DECONFIG_GARDABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_ISTEP_MODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EEPROM_VPD_PRIMARY_INFO>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef EepromVpdPrimaryInfo Type;
};

template<>
class AttributeTraits<ATTR_EEPROM_VPD_BACKUP_INFO>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef EepromVpdBackupInfo Type;
};

template<>
class AttributeTraits<ATTR_EEPROM_SBE_PRIMARY_INFO>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef EepromSbePrimaryInfo Type;
};

template<>
class AttributeTraits<ATTR_EEPROM_SBE_BACKUP_INFO>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef EepromSbeBackupInfo Type;
};

template<>
class AttributeTraits<ATTR_TPM_PRIMARY_INFO>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef TpmPrimaryInfo Type;
};

template<>
class AttributeTraits<ATTR_TPM_BACKUP_INFO>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef TpmBackupInfo Type;
};

template<>
class AttributeTraits<ATTR_EC>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_CHIP_ID>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_FSI_GP_REG_SCOM_ACCESS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_L2_R_T0_EPS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_L2_R_T1_EPS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_L2_R_T2_EPS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_L2_FORCE_R_T2_EPS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_L2_W_EPS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_L3_R_T0_EPS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_L3_R_T1_EPS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_L3_R_T2_EPS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_L3_FORCE_R_T2_EPS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_L3_W_EPS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_CHIP_UNIT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_POSITION>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type;
};

template<>
class AttributeTraits<ATTR_MBA_PORT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MBA_DIMM>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_CEN_DQ_TO_DIMM_CONN_DQ>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[80];
};

template<>
class AttributeTraits<ATTR_PROC_EPS_TABLE_TYPE>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_FABRIC_PUMP_MODE>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_X_BUS_WIDTH>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_ALL_MCS_IN_INTERLEAVING_GROUP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FABRIC_NODE_ID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FABRIC_CHIP_ID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_CHIP_HAS_SBE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FREQ_PROC_REFCLOCK>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_FREQ_PROC_REFCLOCK_KHZ>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_FREQ_MEM_REFCLOCK>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MIN_FREQ_MHZ>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_FREQ_PB>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_FREQ_A>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_FREQ_X>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_HUID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_SP_FUNCTIONS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef SpFunctions Type;
};

template<>
class AttributeTraits<ATTR_HB_SETTINGS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef HbSettings Type;
};

template<>
class AttributeTraits<ATTR_CEC_IPL_TYPE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef CecIplType Type;
};

template<>
class AttributeTraits<ATTR_TEST_NULL_STRING>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef char Type[10];
};

template<>
class AttributeTraits<ATTR_TEST_MIN_STRING>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef char Type[10];
};

template<>
class AttributeTraits<ATTR_TEST_MAX_STRING>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef char Type[4];
};

template<>
class AttributeTraits<ATTR_TEST_NO_DEFAULT_STRING>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef char Type[10];
};

template<>
class AttributeTraits<ATTR_VPD_REC_NUM>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type;
};

template<>
class AttributeTraits<ATTR_PEER_TARGET>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef TARGETING::Target* Type;
};

template<>
class AttributeTraits<ATTR_PAYLOAD_BASE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PAYLOAD_ENTRY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PAYLOAD_KIND>
{
    public:
        enum { writeable, readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef PAYLOAD_KIND Type;
};

template<>
class AttributeTraits<ATTR_HB_HRMOR_NODAL_BASE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_FABRIC_TO_PHYSICAL_NODE_MAP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[8];
};

template<>
class AttributeTraits<ATTR_PROC_MEM_BASES>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[8];
};

template<>
class AttributeTraits<ATTR_PROC_MEM_SIZES>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[8];
};

template<>
class AttributeTraits<ATTR_PROC_MIRROR_BASES>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[4];
};

template<>
class AttributeTraits<ATTR_PROC_MIRROR_SIZES>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[4];
};

template<>
class AttributeTraits<ATTR_PROC_L3_BAR1_REG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_L3_BAR2_REG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_L3_BAR_GROUP_MASK_REG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_FREQ_CORE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_NOT_F_LINK>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_PROC_MCS_GROUPS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[8];
};

template<>
class AttributeTraits<ATTR_XSCOM_BASE_ADDRESS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_IBSCOM_MCS_BASE_ADDR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_IBSCOM_PROC_BASE_ADDR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_MIRROR_BASE_ADDRESS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PAYLOAD_IN_MIRROR_MEM>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_NPU_MMIO_BAR_ENABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[4][2];
};

template<>
class AttributeTraits<ATTR_NPU_MMIO_BAR_BASE_ADDR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[4][2];
};

template<>
class AttributeTraits<ATTR_NPU_MMIO_BAR_SIZE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[4][2];
};

template<>
class AttributeTraits<ATTR_FSP_BASE_ADDR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_FSP_BAR_SIZE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_FSP_MMIO_MASK_SIZE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PSI_BRIDGE_BASE_ADDR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_INTP_BASE_ADDR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PHB_BASE_ADDRS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[4];
};

template<>
class AttributeTraits<ATTR_PCI_BASE_ADDRS_64>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[4];
};

template<>
class AttributeTraits<ATTR_PCI_BASE_ADDRS_32>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[4];
};

template<>
class AttributeTraits<ATTR_MEM_BASE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_MIRROR_BASE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_RNG_BASE_ADDR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_RNG_BAR_SIZE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_IMT_BASE_ADDR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_IMT_BAR_SIZE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_EPS_GB_PERCENTAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_EPS_GB_DIRECTION>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_FABRIC_ASYNC_SAFE_MODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FREQ_PCIE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_NOMINAL_FREQ_MHZ>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_ULTRA_TURBO_FREQ_MHZ>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_FLAGS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_DPLL_DIVIDER>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_POWER_PROXY_TRACE_TIMER>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PPT_TIMER_MATCH_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PPT_TIMER_TICK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_AISS_TIMEOUT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PSTATE_STEPSIZE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_EXTERNAL_VRM_STEPDELAY_RANGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_EXTERNAL_VRM_STEPDELAY_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PMC_HANGPULSE_DIVIDER>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PVSAFE_PSTATE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_FRAME_SIZE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_IN_DELAY_FRAME1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_IN_DELAY_FRAME2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_CLOCK_POLARITY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_CLOCK_PHASE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_CLOCK_DIVIDER>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_INTER_RETRY_DELAY_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_INTER_RETRY_DELAY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_CRC_GEN_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_CRC_CHECK_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_MAX_RETRIES>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_CRC_POLYNOMIAL_ENABLES>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_OCC_HEARTBEAT_TIME>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SLEEP_WINKLE_REQUEST_TIMEOUT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SLEEP_ENTRY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SLEEP_EXIT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SLEEP_TYPE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_WINKLE_TYPE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERUP_CORE_DELAY0>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERUP_CORE_DELAY1>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERDOWN_CORE_DELAY0>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERDOWN_CORE_DELAY1>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERUP_ECO_DELAY0>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERUP_ECO_DELAY1>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERDOWN_ECO_DELAY0>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERDOWN_ECO_DELAY1>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PSTATE0_FREQUENCY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_IVRMS_ENABLED>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SAFE_PSTATE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_RESONANT_CLOCK_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_RESONANT_CLOCK_FULL_CSB_PSTATE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_RESONANT_CLOCK_LFRLOW_PSTATE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_RESONANT_CLOCK_LFRUPPER_PSTATE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_RESONANT_CLOCK_HFRLOW_PSTATE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_RESONANT_CLOCK_HFRHIGH_PSTATE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIPSS_FRAME_SIZE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIPSS_OUT_COUNT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIPSS_IN_DELAY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIPSS_IN_COUNT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIPSS_CLOCK_POLARITY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIPSS_CLOCK_PHASE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIPSS_CLOCK_DIVIDER>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIPSS_INTER_FRAME_DELAY_SETTING>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIPSS_INTER_FRAME_DELAY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PBAX_RCV_RESERV_TIMEOUT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PBAX_SND_RETRY_THRESHOLD>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PBAX_SND_RESERV_TIMEOUT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPWUP_FSP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPWUP_OCC>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPWUP_PHYP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SLW_CONTROL_VECTOR_OFFSET>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_EXTERNAL_VRM_STEPSIZE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_EXTERNAL_VRM_STEPDELAY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_FREQUENCY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIVID_PORT_ENABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SAFE_FREQUENCY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPIPSS_FREQUENCY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_APSS_CHIP_SELECT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PBAX_NODEID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PBAX_CHIPID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PBAX_BRDCST_ID_VECTOR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FREQ_CORE_MAX>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_NOM_FREQ_MHZ>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_V_NEST_NOM_VOLTAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_I_NEST_NOM_CURRENT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_V_CS_NOM_VOLTAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_I_CS_NOM_CURRENT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_PS_FREQ_MHZ>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_V_NEST_PS_VOLTAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_I_NEST_PS_CURRENT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_V_CS_PS_VOLTAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_I_CS_PS_CURRENT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_TURBO_FREQ_MHZ>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_V_NEST_TURBO_VOLTAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_I_NEST_TURBO_CURRENT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_V_CS_TURBO_VOLTAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_I_CS_TURBO_CURRENT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_FVMIN_FREQ_MHZ>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_V_NEST_FVMIN_VOLTAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_I_NEST_FVMIN_CURRENT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_V_CS_FVMIN_VOLTAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_I_CS_FVMIN_CURRENT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_LAB_FREQ_MHZ>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_V_NEST_LAB_VOLTAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_I_NEST_LAB_CURRENT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_V_CS_LAB_VOLTAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_OVERRIDE_MVPD_I_CS_LAB_CURRENT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_CONFIG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_SWAP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[3];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_PHB_ACTIVE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_G3_PLL_CONTROL0>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_G2_PLL_CONTROL0>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL0>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL1>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_PCS_CONTROL0>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_PCS_CONTROL1>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_TX_FIFO_OFFSET>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3][16];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_TX_RCVRDETCNTL>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3][16];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_TX_BWLOSS1>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3][16];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_RX_VGA_CONTROL2>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3][16];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_RX_PEAK>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3][16];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_RX_SDL>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3][16];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_ZCAL_CONTROL>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3];
};

template<>
class AttributeTraits<ATTR_AVDD_ID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type;
};

template<>
class AttributeTraits<ATTR_VDD_ID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type;
};

template<>
class AttributeTraits<ATTR_VCS_ID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type;
};

template<>
class AttributeTraits<ATTR_VPP_ID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type;
};

template<>
class AttributeTraits<ATTR_VMEM_ID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type;
};

template<>
class AttributeTraits<ATTR_NEST_FREQ_MHZ>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_CHIP_REGIONS_TO_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[32];
};

template<>
class AttributeTraits<ATTR_BOOT_FREQ_MHZ>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_EX_GARD_BITS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PIB_I2C_REFCLOCK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_ADU_UNTRUSTED_BAR_BASE_ADDR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PIB_I2C_NEST_PLL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_SBE_IMAGE_OFFSET>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_SBE_IMAGE_MINIMUM_VALID_EXS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PSI_UNTRUSTED_BAR0_BASE_ADDR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_BOOT_VOLTAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PSI_UNTRUSTED_BAR1_BASE_ADDR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_SECURITY_SETUP_VECTOR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_VPP_BASE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_FREQ>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_DIMM_MFG_ID_CODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_RANKS_CONFIGED>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_NUM_RANKS_PER_DIMM>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_TYPE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_CUSTOM_DIMM>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_WIDTH>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_GEN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_PRIMARY_RANK_GROUP0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_PRIMARY_RANK_GROUP1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_PRIMARY_RANK_GROUP2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_PRIMARY_RANK_GROUP3>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_SECONDARY_RANK_GROUP0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_SECONDARY_RANK_GROUP1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_SECONDARY_RANK_GROUP2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_SECONDARY_RANK_GROUP3>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_TERTIARY_RANK_GROUP0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_TERTIARY_RANK_GROUP1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_TERTIARY_RANK_GROUP2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_TERTIARY_RANK_GROUP3>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_QUATERNARY_RANK_GROUP0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_QUATERNARY_RANK_GROUP1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_QUATERNARY_RANK_GROUP2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_QUATERNARY_RANK_GROUP3>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_ODT_RD>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2][4];
};

template<>
class AttributeTraits<ATTR_EFF_ODT_WR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2][4];
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_RON>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_RTT_NOM>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2][4];
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_RTT_WR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2][4];
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_WR_VREF>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_WRDDR4_VREF>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_DRV_IMP_DQ_DQS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_DRV_IMP_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_DRV_IMP_CNTL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_DRV_IMP_CLK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_DRV_IMP_SPCKE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_RCV_IMP_DQ_DQS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_SLEW_RATE_DQ_DQS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_SLEW_RATE_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_SLEW_RATE_CLK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_SLEW_RATE_SPCKE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_SLEW_RATE_CNTL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_RD_VREF>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_DRV_IMP_DQ_DQS_SCHMOO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_DRV_IMP_CLK_SCHMOO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_DRV_IMP_SPCKE_SCHMOO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_DRV_IMP_CNTL_SCHMOO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_RCV_IMP_DQ_DQS_SCHMOO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SCHMOO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_SLEW_RATE_CLK_SCHMOO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_SLEW_RATE_SPCKE_SCHMOO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_SLEW_RATE_ADDR_SCHMOO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_SLEW_RATE_CNTL_SCHMOO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_WR_VREF_SCHMOO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_WRDDR4_VREF_SCHMOO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_RD_VREF_SCHMOO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_SIZE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_BANKS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_ROWS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_COLS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_DENSITY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_TRCD>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_TRRD>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_TRP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_TRAS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_TRC>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_TRFI>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_TRFC>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_TWTR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_TRTP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_TFAW>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_BL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_CL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_AL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_CWL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_RBT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_TM>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_DLL_RESET>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_WR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_DLL_PPD>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_DLL_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_TDQS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_WR_LVL_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_OUTPUT_BUFFER>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_PASR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_ASR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_SRT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_MPR_LOC>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_MPR_MODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_RCD_CNTL_WORD_0_15>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_RCD_IBT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_RCD_MIRROR_MODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_SCHMOO_MODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_SCHMOO_ADDR_MODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_SCHMOO_TEST_VALID>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_SCHMOO_PARAM_VALID>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_SCHMOO_WR_EYE_MIN_MARGIN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_SCHMOO_RD_EYE_MIN_MARGIN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_SCHMOO_DQS_CLK_MIN_MARGIN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_SCHMOO_RD_GATE_MIN_MARGIN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_SCHMOO_ADDR_CMD_MIN_MARGIN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_MEMCAL_INTERVAL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_ZQCAL_INTERVAL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_IBM_TYPE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_NUM_DROPS_PER_PORT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_STACK_TYPE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_NUM_MASTER_RANKS_PER_DIMM>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_NUM_PACKAGES_PER_RANK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_NUM_DIES_PER_PACKAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_MBA>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_MEM_THROTTLE_DENOMINATOR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_CHIP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_MEM_WATT_TARGET>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_POWER_SLOPE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MSS_POWER_SLOPE2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MSS_POWER_INT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MSS_POWER_INT2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MSS_TOTAL_POWER_SLOPE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MSS_TOTAL_POWER_SLOPE2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MSS_TOTAL_POWER_INT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MSS_TOTAL_POWER_INT2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MSS_DIMM_MAXBANDWIDTH_GBS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MSS_DIMM_MAXBANDWIDTH_MRS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MSS_CHANNEL_MAXBANDWIDTH_GBS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2];
};

template<>
class AttributeTraits<ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_GBS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2];
};

template<>
class AttributeTraits<ATTR_MSS_CHANNEL_MAXBANDWIDTH_MRS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2];
};

template<>
class AttributeTraits<ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_MRS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2];
};

template<>
class AttributeTraits<ATTR_MSS_DIMM_MAXPOWER>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MSS_CHANNEL_MAXPOWER>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[2];
};

template<>
class AttributeTraits<ATTR_MSS_CHANNEL_PAIR_MAXPOWER>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_MBA>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_RUNTIME_MEM_THROTTLE_DENOMINATOR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_CHIP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_ZSERIES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_NWELL_MISPLACEMENT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_INTERLEAVE_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CACHE_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_PREFETCH_ENABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CLEANER_ENABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_LAB_OVERRIDE_FOR_MEM_PLL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_MEM_MC_IN_GROUP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[8];
};

template<>
class AttributeTraits<ATTR_MSS_MCS_GROUP_32>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[16][16];
};

template<>
class AttributeTraits<ATTR_MSS_EFF_DIMM_FUNCTIONAL_VECTOR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CAL_STEP_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_MEM_IPL_COMPLETE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_SLEW_RATE_DATA>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][ 4][ 4];
};

template<>
class AttributeTraits<ATTR_MSS_SLEW_RATE_ADR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][ 4][ 4];
};

template<>
class AttributeTraits<ATTR_ECID>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[2];
};

template<>
class AttributeTraits<ATTR_MSS_ALLOW_SINGLE_PORT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M0_CLK_P0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M0_CLK_P1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M1_CLK_P0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M1_CLK_P1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A3>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A4>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A5>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A6>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A7>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A8>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A9>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A10>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A11>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A12>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A13>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A14>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_A15>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_BA0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_BA1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_BA2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_CASN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_RASN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_CMD_WEN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_PAR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M_ACTN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CKE0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CKE1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CKE2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CKE3>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CSN0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CSN1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CSN2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CSN3>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_ODT0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_ODT1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CKE0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CKE1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CKE2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CKE3>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CSN0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CSN1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CSN2>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CSN3>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_ODT0>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_ODT1>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_MSS_DQS_SWIZZLE_TYPE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_MCS_GROUP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[16][16];
};

template<>
class AttributeTraits<ATTR_EFF_CKE_MAP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2][4];
};

template<>
class AttributeTraits<ATTR_EFF_SPCKE_MAP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2][4];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_SPARE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2][4];
};

template<>
class AttributeTraits<ATTR_MSS_PSRO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EI_BUS_TX_LANE_INVERT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PERV_BNDY_PLL_CHIPLET_ID>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PB_BNDY_DMIPLL_CHIPLET_ID>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_AB_BNDY_PLL_CHIPLET_ID>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PCI_BNDY_PLL_CHIPLET_ID>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PERV_BNDY_PLL_SCAN_SELECT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PB_BNDY_DMIPLL_SCAN_SELECT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_AB_BNDY_PLL_SCAN_SELECT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PCI_BNDY_PLL_SCAN_SELECT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_SBE_SEEPROM_I2C_PORT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_PNOR_I2C_ADDRESS_BYTES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_SYNC_BETWEEN_STEPS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_SELECT_BOOT_MASTER>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_SELECT_SEEPROM_IMAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_SELECT_BOOT_SEEPROM_IMAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_ENABLED_THREADS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_MAX_PROC_CHIPS_PER_NODE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MAX_EXS_PER_PROC_CHIP>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MAX_DIMMS_PER_MBA_PORT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MAX_MBA_PORTS_PER_MBA>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MAX_MBAS_PER_MEMBUF_CHIP>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MAX_CHIPLETS_PER_PROC>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MAX_MCS_PER_SYSTEM>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_DMI_REFCLOCK_SWIZZLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EI_BUS_TX_MSBSWAP>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_FREQ_OVERRIDE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_PATTERN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_TEST_TYPE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_PRINTING_DISABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_DATA_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_USER_RANK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_USER_BANK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_SCHMOO_MULTIPLE_SETUP_CALL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_ADDR_MODES>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_RANK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_START_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_END_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_ERROR_CAPTURE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_MAX_TIMEOUT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_PRINT_PORT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_STOP_ON_ERROR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_DATA_SEED>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_ADDR_INTER>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_ADDR_NUM_ROWS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_ADDR_NUM_COLS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_ADDR_RANK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_ADDR_BANK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_ADDR_SLAVE_RANK_ON>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_ADDR_STR_MAP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_ADDR_RAND>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_REFCLOCK_ENABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PBIEX_ASYNC_SEL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_DCM_INSTALLED>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_X_EREPAIR_THRESHOLD_FIELD>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_A_EREPAIR_THRESHOLD_FIELD>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_DMI_EREPAIR_THRESHOLD_FIELD>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_X_EREPAIR_THRESHOLD_MNFG>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_A_EREPAIR_THRESHOLD_MNFG>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_DMI_EREPAIR_THRESHOLD_MNFG>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MEMB_TP_BNDY_PLL_SCAN_SELECT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_MBA>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_CHIP>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_THERMAL_MEMORY_POWER_LIMIT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_LPASR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_MPR_PAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_GEARDOWN_MODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_PER_DRAM_ACCESS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_TEMP_READOUT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_FINE_REFRESH_MODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_CRC_WR_LATENCY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_MPR_RD_FORMAT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_MAX_POWERDOWN_MODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_TEMP_REF_RANGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_TEMP_REF_MODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_INT_VREF_MON>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_CS_CMD_LATENCY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_SELF_REF_ABORT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_RD_PREAMBLE_TRAIN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_RD_PREAMBLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_WR_PREAMBLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_CA_PARITY_LATENCY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_CRC_ERROR_CLEAR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_CA_PARITY_ERROR_STATUS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_ODT_INPUT_BUFF>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_RTT_PARK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][ 2][ 4];
};

template<>
class AttributeTraits<ATTR_EFF_CA_PARITY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DATA_MASK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_WRITE_DBI>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_READ_DBI>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_VREF_DQ_TRAIN_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2][4];
};

template<>
class AttributeTraits<ATTR_VREF_DQ_TRAIN_RANGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2][4];
};

template<>
class AttributeTraits<ATTR_VREF_DQ_TRAIN_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2][4];
};

template<>
class AttributeTraits<ATTR_TCCD_L>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_WRITE_CRC>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_2N_MODE_ENABLED>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_DIMM_POWER_TEST_REV>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FRU_ID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_BMC_FRU_ID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_CENTAUR_ECID_FRU_ID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PLCK_IPL_ATTR_OVERRIDES_EXIST>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_DUMMY_PERSISTENCY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_IS_INTER_ENCLOSURE_BUS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PEER_PATH>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef EntityPath Type;
};

template<>
class AttributeTraits<ATTR_PROC_HTM_BAR_SIZE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_OCC_SANDBOX_SIZE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_HTM_BAR_BASE_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_OCC_SANDBOX_BASE_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_MEM_MIRROR_PLACEMENT_POLICY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_AS_MMIO_BAR_BASE_ADDR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_AS_MMIO_BAR_ENABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_AS_MMIO_BAR_SIZE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_RISK_LEVEL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_FREQ_BIAS_PERCENTAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_MEM_SENSOR_CACHE_ADDR_MAP>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_CDIMM_SENSOR_MAP_PRIMARY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_CDIMM_SENSOR_MAP_SECONDARY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_ADDRESS_MIRRORING>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MSS_BLUEWATERFALL_BROKEN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_CDM_POLICIES>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FIELD_CORE_OVERRIDE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_HOSTSVC_PLID>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_RUN_MAX_MEM_PATTERNS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_RLO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_WLO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_GPO>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_CKE_PRI_MAP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_CKE_PWR_MAP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_RDTAG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_TSYS_ADR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_TSYS_DP18>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DQ_WR_OFFSET>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_EFF_BUFFER_LATENCY>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_LRDIMM_MR12_REG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_LRDIMM_ADDITIONAL_CNTL_WORDS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_LRDIMM_RANK_MULT_MODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SPWUP_IGNORE_XSTOP_FLAG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_CPM_INFLECTION_POINTS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[16];
};

template<>
class AttributeTraits<ATTR_LAB_USE_JTAG_MODE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CONTROL_SWITCH>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_THROTTLE_CONTROL_RAS_WEIGHT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_THROTTLE_CONTROL_CAS_WEIGHT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_MIRROR_BASES_ACK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[4];
};

template<>
class AttributeTraits<ATTR_PROC_MIRROR_SIZES_ACK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[4];
};

template<>
class AttributeTraits<ATTR_PROC_MEM_BASES_ACK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[8];
};

template<>
class AttributeTraits<ATTR_PROC_MEM_SIZES_ACK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[8];
};

template<>
class AttributeTraits<ATTR_MCBIST_RANDOM_SEED_VALUE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MCBIST_RANDOM_SEED_TYPE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_BOOT_VOLTAGE_VID>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_DISABLE_I2C_ACCESS>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_REFCLOCK_RCVR_TERM>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PCI_REFCLOCK_RCVR_TERM>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MEM_FILTER_PLL_SOURCE>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MULTI_SCOM_BUFFER_MAX_SIZE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_DMI_DFE_OVERRIDE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_VRM_VOFFSET_VDD>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_VRM_VOFFSET_VCS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_CPM_TURBO_BOOST_PERCENT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_R_LOADLINE_VDD>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_R_LOADLINE_VCS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_R_DISTLOSS_VDD>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_R_DISTLOSS_VCS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_UNDERVOLTING_FRQ_MINIMUM>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_UNDERVOLTING_FREQ_MAXIMUM>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_WINKLE_ENTRY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_WINKLE_EXIT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_MASTER_TYPE>
{
    public:
        enum { writeable, readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_DATABUS_UTIL_PER_MBA>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_UTIL_N_PER_MBA>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_EFFECTIVE_EC>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PBA_UNTRUSTED_BAR_BASE_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_MRU_ID>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_INIT_STATE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_TX_FFE_GEN1>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3][16];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_TX_FFE_GEN2>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[3][16];
};

template<>
class AttributeTraits<ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_IDLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_MEM_THROTTLE_DENOMINATOR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_MAX_DRAM_DATABUS_UTIL>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_RECONFIGURE_LOOP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SYSTEM_IVRMS_ENABLED>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SYSTEM_IVRM_VPD_MIN_LEVEL>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SLW_DEEP_WINKLE_EXIT_GOOD_HALT_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SLW_DEEP_SLEEP_EXIT_GOOD_HALT_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_EFF_VPD_VERSION>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_DISABLE_SCRUB_AFTER_PATTERN_TEST>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PCBS_FSM_TRACE_EN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_GLOBAL_FIR_TRACE_EN>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_DERIVED_MBA_CACHELINE_INTERLEAVE_MODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_STRICT_MBA_PLUG_RULE_CHECKING>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_DERIVED_MBA_ADDR_INTERLEAVE_BIT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_HWP_ATTR_VERSION>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_REDUNDANT_CLOCKS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_NEST_CAPABLE_FREQUENCIES>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_TOD_ROLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_DMI_MIN_EYE_WIDTH>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_DMI_MIN_EYE_HEIGHT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_ABUS_MIN_EYE_WIDTH>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_ABUS_MIN_EYE_HEIGHT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_XBUS_MIN_EYE_WIDTH>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_HB_RSV_MEM_SIZE_MB>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_DO_ABUS_DECONFIG>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MEM_AVDD_OFFSET_MILLIVOLTS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_RECONFIG_LOOP_TESTS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[5];
};

template<>
class AttributeTraits<ATTR_RECONFIG_LOOP_TESTS_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MEM_VDD_OFFSET_MILLIVOLTS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MEM_VCS_OFFSET_MILLIVOLTS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MEM_VPP_OFFSET_MILLIVOLTS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MEM_VDDR_OFFSET_MILLIVOLTS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CENT_AVDD_OFFSET_DISABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CENT_VDD_OFFSET_DISABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CENT_VCS_OFFSET_DISABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_VPP_OFFSET_DISABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_VDDR_OFFSET_DISABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CENT_AVDD_SLOPE_ACTIVE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CENT_AVDD_SLOPE_INACTIVE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CENT_AVDD_INTERCEPT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CENT_VDD_SLOPE_ACTIVE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CENT_VDD_SLOPE_INACTIVE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CENT_VDD_INTERCEPT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CENT_VCS_SLOPE_ACTIVE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CENT_VCS_SLOPE_INACTIVE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_CENT_VCS_INTERCEPT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_VPP_SLOPE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_VPP_INTERCEPT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_VPP_SLOPE_POST_DRAM_INIT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_VPP_INTERCEPT_POST_DRAM_INIT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_DDR3_VDDR_SLOPE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_DDR3_VDDR_INTERCEPT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_DDR3_VDDR_MAX_LIMIT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_DDR3_VDDR_SLOPE_POST_DRAM_INIT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_DDR3_VDDR_INTERCEPT_POST_DRAM_INIT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_DDR3_VDDR_MAX_LIMIT_POST_DRAM_INIT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_DDR4_VDDR_SLOPE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_DDR4_VDDR_INTERCEPT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_DDR4_VDDR_MAX_LIMIT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_DDR4_VDDR_SLOPE_POST_DRAM_INIT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_DDR4_VDDR_INTERCEPT_POST_DRAM_INIT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_DDR4_VDDR_MAX_LIMIT_POST_DRAM_INIT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_OVERRIDE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_COMPLIANT_DIMMS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VDDR_OVERIDE_SPD>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_POWER_CONTROL_REQUESTED>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PFET_WORKAROUND_RUN_FLAG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_OCC_LFIR_MASK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PBA_FIR_MASK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PM_PMC_LFIR_MASK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_PM_FIRINIT_DONE_ONCE_FLAG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PM_SLEEP_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_I2C_SWITCHES>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef I2cSwitches Type;
};

template<>
class AttributeTraits<ATTR_OCC_MASTER_CAPABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_DRAMINIT_RESET_DISABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_ISDIMM_POWER_CURVE_ALGORITHM_VERSION>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_LANE_MASK>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint16_t Type[3][2];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_DSMP_CAPABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[3][2];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_REVERSAL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[3][2];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_REVERSAL_NON_BIFURCATED>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[3][2];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_SWAP_NON_BIFURCATED>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[3][2];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_LANE_MASK_NON_BIFURCATED>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type[3][2];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_REVERSAL_BIFURCATED>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[3][2];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IOP_SWAP_BIFURCATED>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[3][2];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_LANE_MASK_BIFURCATED>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type[3][2];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_LANE_EQUALIZATION>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[4][32];
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_IS_SLOT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[3][2];
};

template<>
class AttributeTraits<ATTR_CDM_DOMAIN>
{
    public:
        enum { readable, hasStringConversion, notHbMutex, notFspMutex };
        typedef CDM_DOMAIN Type;
};

template<>
class AttributeTraits<ATTR_I2C_BUS_SPEED_ARRAY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type[2][3];
};

template<>
class AttributeTraits<ATTR_ISTEP_PAUSE_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_HOT_PLUG_POWER_CONTROLLER_INFO>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[8][8];
};

template<>
class AttributeTraits<ATTR_ISTEP_PAUSE_CONFIG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPT_MEMMAP_GROUP_POLICY>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MFG_TRACE_ENABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_NUM_PHB>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_NUM_IOP>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PROC_PCIE_NUM_LANES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_TH_P8EX_L2_CACHE_CES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_TH_P8EX_L2_DIR_CES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_TH_P8EX_L3_CACHE_CES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_TH_P8EX_L3_DIR_CES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FIELD_TH_P8EX_L2_LINE_DELETES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FIELD_TH_P8EX_L3_LINE_DELETES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FIELD_TH_P8EX_L2_COL_REPAIRS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FIELD_TH_P8EX_L3_COL_REPAIRS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_TH_P8EX_L2_LINE_DELETES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_TH_P8EX_L3_LINE_DELETES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_TH_P8EX_L2_COL_REPAIRS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_TH_P8EX_L3_COL_REPAIRS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_TH_CEN_MBA_RT_SOFT_CE_TH_ALGO>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_TH_CEN_MBA_IPL_SOFT_CE_TH_ALGO>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_TH_CEN_MBA_RT_RCE_PER_RANK>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MNFG_TH_CEN_L4_CACHE_CES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_RESOURCE_IS_CRITICAL>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_BRAZOS_RX_FIFO_OVERRIDE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VMEM_REGULATOR_MAX_DIMM_COUNT>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_MAX_NUMBER_DIMMS_POSSIBLE_PER_VMEM_REGULATOR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_VMEM_REGULATOR_MEMORY_POWER_LIMIT_PER_DIMM>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_NEST_CAPABLE_FREQUENCIES_SYS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef MRW_NEST_CAPABLE_FREQUENCIES_SYS Type;
};

template<>
class AttributeTraits<ATTR_WOF_ENABLED>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_TRUSTED_SLAVE_SCAN_PATH_ACTIVE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FORCE_SKIP_SBE_MASTER_INTR_SERVICE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_FORCE_USE_SBE_SLAVE_SCAN_SERVICE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_SBE_MASTER_INTR_SERVICE_DELAY_CYCLES>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_SBE_MASTER_INTR_SERVICE_DELAY_US>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VREF_CAL_CNTL>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_RCD_CNTL_WORD_X>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC00>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC01>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC02>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC03>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC04>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC05>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC06_07>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC08>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC09>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC10>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC11>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC12>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC13>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC14>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC15>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC_1x>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC_2x>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC_3x>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC_4x>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC_5x>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC_6x>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC_7x>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC_8x>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC_9x>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC_Ax>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DIMM_DDR4_RC_Bx>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_DRAM_TCCD_L>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_EFF_LRDIMM_WORD_X>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_EFF_LRDIMM_ADDITIONAL_CNTL_WORDS>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type[2][2];
};

template<>
class AttributeTraits<ATTR_MCBIST_DDR4_PDA_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_MCS_PREFETCH_RETRY_THRESHOLD>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_DEFAULT_PROC_MODULE_NEST_FREQ_MHZ>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_HIDDEN_ERRLOGS_ENABLE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_IS_MPIPL_HB>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_XSCOM_VIRTUAL_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_FSI_MASTER_MUTEX>
{
    public:
        enum { writeable, readable, hbMutex, notFspMutex };
        typedef mutex_t* Type;
};

template<>
class AttributeTraits<ATTR_HB_MUTEX_TEST_LOCK>
{
    public:
        enum { writeable, readable, hbMutex, notFspMutex };
        typedef mutex_t* Type;
};

template<>
class AttributeTraits<ATTR_I2C_ENGINE_MUTEX_0>
{
    public:
        enum { writeable, readable, hbMutex, notFspMutex };
        typedef mutex_t* Type;
};

template<>
class AttributeTraits<ATTR_I2C_ENGINE_MUTEX_1>
{
    public:
        enum { writeable, readable, hbMutex, notFspMutex };
        typedef mutex_t* Type;
};

template<>
class AttributeTraits<ATTR_I2C_ENGINE_MUTEX_2>
{
    public:
        enum { writeable, readable, hbMutex, notFspMutex };
        typedef mutex_t* Type;
};

template<>
class AttributeTraits<ATTR_FSI_SCOM_MUTEX>
{
    public:
        enum { writeable, readable, hbMutex, notFspMutex };
        typedef mutex_t* Type;
};

template<>
class AttributeTraits<ATTR_SCOM_IND_MUTEX>
{
    public:
        enum { writeable, readable, hbMutex, notFspMutex };
        typedef mutex_t* Type;
};

template<>
class AttributeTraits<ATTR_SCAN_MUTEX>
{
    public:
        enum { writeable, readable, hbMutex, notFspMutex };
        typedef mutex_t* Type;
};

template<>
class AttributeTraits<ATTR_SLW_IMAGE_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_SLW_IMAGE_SIZE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_IBSCOM_VIRTUAL_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_IBSCOM_MUTEX>
{
    public:
        enum { writeable, readable, hbMutex, notFspMutex };
        typedef mutex_t* Type;
};

template<>
class AttributeTraits<ATTR_IBSCOM_ENABLE_OVERRIDE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_HB_EXISTING_IMAGE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_HB_PM_SPWUP_OHA_FLAG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_GPIO_INFO>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef GpioInfo Type;
};

template<>
class AttributeTraits<ATTR_HB_TARGET_SCOMABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_OCC_COMMON_AREA_PHYS_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_HOMER_PHYS_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_HOMER_VIRT_ADDR>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_DIMM_THROTTLE_TEMP_DEG_C>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_DIMM_ERROR_TEMP_DEG_C>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_MEMCTRL_THROTTLE_TEMP_DEG_C>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_PROC_DVFS_TEMP_DEG_C>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_MEMCTRL_ERROR_TEMP_DEG_C>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_N_BULK_POWER_LIMIT_WATTS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_N_MAX_MEM_POWER_WATTS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_MEMCTRL_READ_TIMEOUT_SEC>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_DIMM_READ_TIMEOUT_SEC>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_PROC_ERROR_TEMP_DEG_C>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_MIN_MEM_UTILIZATION_THROTTLING>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_PROC_READ_TIMEOUT_SEC>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_REGULATOR_EFFICIENCY_FACTOR>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_MIN_POWER_CAP_WATTS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_N_PLUS_ONE_BULK_POWER_LIMIT_WATTS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_N_PLUS_ONE_MAX_MEM_POWER_WATTS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_OPEN_POWER_TURBO_MODE_SUPPORTED>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_ADC_CHANNEL_FUNC_IDS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[16];
};

template<>
class AttributeTraits<ATTR_ADC_CHANNEL_SENSOR_NUMBERS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type[16];
};

template<>
class AttributeTraits<ATTR_ADC_CHANNEL_GNDS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[16];
};

template<>
class AttributeTraits<ATTR_ADC_CHANNEL_GAINS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[16];
};

template<>
class AttributeTraits<ATTR_ADC_CHANNEL_OFFSETS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type[16];
};

template<>
class AttributeTraits<ATTR_APSS_GPIO_PORT_MODES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[2];
};

template<>
class AttributeTraits<ATTR_APSS_GPIO_PORT_PINS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[16];
};

template<>
class AttributeTraits<ATTR_PSTATE_TABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[3656];
};

template<>
class AttributeTraits<ATTR_PSTATE_TABLE_MFG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[3656];
};

template<>
class AttributeTraits<ATTR_OCC_CONTROL_DATA>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[256];
};

template<>
class AttributeTraits<ATTR_OT_MIN_N_PER_MBA>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint16_t Type;
};

template<>
class AttributeTraits<ATTR_N_PLUS_ONE_N_PER_MBA>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint16_t Type;
};

template<>
class AttributeTraits<ATTR_N_PLUS_ONE_N_PER_CHIP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint16_t Type;
};

template<>
class AttributeTraits<ATTR_OVERSUB_N_PER_MBA>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint16_t Type;
};

template<>
class AttributeTraits<ATTR_OVERSUB_N_PER_CHIP>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint16_t Type;
};

template<>
class AttributeTraits<ATTR_VPD_SWITCHES>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef VpdSwitches Type;
};

template<>
class AttributeTraits<ATTR_OPAL_MODEL>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef char Type[32];
};

template<>
class AttributeTraits<ATTR_ISDIMM_MBVPD_INDEX>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_HTMGT_SAFEMODE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_IPMI_INSTANCE>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_IPMI_SENSORS>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type[16][2];
};

template<>
class AttributeTraits<ATTR_IPMI_MAX_BUFFER_SIZE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_SERIAL_NUMBER>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[18];
};

template<>
class AttributeTraits<ATTR_PART_NUMBER>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type[18];
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_VPP_SLOPE_EFF_CONFIG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_VPP_INTERCEPT_EFF_CONFIG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_DDR3_VDDR_SLOPE_EFF_CONFIG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_DDR3_VDDR_INTERCEPT_EFF_CONFIG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_DDR3_VDDR_MAX_LIMIT_EFF_CONFIG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_DDR4_VDDR_SLOPE_EFF_CONFIG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MSS_VOLT_DDR4_VDDR_INTERCEPT_EFF_CONFIG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_MRW_DDR4_VDDR_MAX_LIMIT_EFF_CONFIG>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint32_t Type;
};

template<>
class AttributeTraits<ATTR_SBE_MASTER_INTR_SERVICE_ENABLED>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_CLEAR_DIMM_SPD_ENABLE>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_WOF_PROC_SORT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type[4][3];
};

template<>
class AttributeTraits<ATTR_WOF_FREQUENCY_UPLIFT>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type[4][22][13];
};

template<>
class AttributeTraits<ATTR_WOF_FREQUENCY_UPLIFT_SELECTED>
{
    public:
        enum { writeable, readable, notHbMutex, notFspMutex };
        typedef uint16_t Type[22][13];
};

template<>
class AttributeTraits<ATTR_WOF_REGULATOR_EFFICIENCIES>
{
    public:
        enum { readable, notHbMutex, notFspMutex };
        typedef uint16_t Type[3][14];
};

/**
 *  @brief Mapping of alias type name to underlying type
 */
// Type aliases and/or sizes for ATTR_CLASS attribute
typedef CLASS CLASS_ATTR;
typedef CLASS ATTR_CLASS_type;

// Type aliases and/or sizes for ATTR_TYPE attribute
typedef TYPE TYPE_ATTR;
typedef TYPE ATTR_TYPE_type;

// Type aliases and/or sizes for ATTR_MODEL attribute
typedef MODEL MODEL_ATTR;
typedef MODEL ATTR_MODEL_type;

// Type aliases and/or sizes for ATTR_ENGINE_TYPE attribute
typedef ENGINE_TYPE ENGINE_TYPE_ATTR;
typedef ENGINE_TYPE ATTR_ENGINE_TYPE_type;

// Type aliases and/or sizes for ATTR_SCRATCH_UINT8_1 attribute
typedef uint8_t SCRATCH_UINT8_1_ATTR;
typedef uint8_t ATTR_SCRATCH_UINT8_1_type;

// Type aliases and/or sizes for ATTR_SCRATCH_UINT8_2 attribute
typedef uint8_t SCRATCH_UINT8_2_ATTR;
typedef uint8_t ATTR_SCRATCH_UINT8_2_type;

// Type aliases and/or sizes for ATTR_SCRATCH_UINT32_1 attribute
typedef uint32_t SCRATCH_UINT32_1_ATTR;
typedef uint32_t ATTR_SCRATCH_UINT32_1_type;

// Type aliases and/or sizes for ATTR_SCRATCH_UINT32_2 attribute
typedef uint32_t SCRATCH_UINT32_2_ATTR;
typedef uint32_t ATTR_SCRATCH_UINT32_2_type;

// Type aliases and/or sizes for ATTR_SCRATCH_UINT64_1 attribute
typedef uint64_t SCRATCH_UINT64_1_ATTR;
typedef uint64_t ATTR_SCRATCH_UINT64_1_type;

// Type aliases and/or sizes for ATTR_SCRATCH_UINT64_2 attribute
typedef uint64_t SCRATCH_UINT64_2_ATTR;
typedef uint64_t ATTR_SCRATCH_UINT64_2_type;

// Type aliases and/or sizes for ATTR_SCRATCH_UINT8_ARRAY_1 attribute
typedef uint8_t SCRATCH_UINT8_ARRAY_1_ATTR[32];
typedef uint8_t ATTR_SCRATCH_UINT8_ARRAY_1_type[32];

// Type aliases and/or sizes for ATTR_SCRATCH_UINT8_ARRAY_2 attribute
typedef uint8_t SCRATCH_UINT8_ARRAY_2_ATTR[2][ 3][ 4];
typedef uint8_t ATTR_SCRATCH_UINT8_ARRAY_2_type[2][ 3][ 4];

// Type aliases and/or sizes for ATTR_SCRATCH_UINT32_ARRAY_1 attribute
typedef uint32_t SCRATCH_UINT32_ARRAY_1_ATTR[8];
typedef uint32_t ATTR_SCRATCH_UINT32_ARRAY_1_type[8];

// Type aliases and/or sizes for ATTR_SCRATCH_UINT32_ARRAY_2 attribute
typedef uint32_t SCRATCH_UINT32_ARRAY_2_ATTR[2][3];
typedef uint32_t ATTR_SCRATCH_UINT32_ARRAY_2_type[2][3];

// Type aliases and/or sizes for ATTR_SCRATCH_UINT64_ARRAY_1 attribute
typedef uint64_t SCRATCH_UINT64_ARRAY_1_ATTR[4];
typedef uint64_t ATTR_SCRATCH_UINT64_ARRAY_1_type[4];

// Type aliases and/or sizes for ATTR_SCRATCH_UINT64_ARRAY_2 attribute
typedef uint64_t SCRATCH_UINT64_ARRAY_2_ATTR[2][2];
typedef uint64_t ATTR_SCRATCH_UINT64_ARRAY_2_type[2][2];

// Type aliases and/or sizes for ATTR_DUMMY_RW attribute
typedef uint8_t DUMMY_RW_ATTR[1][3][5];
typedef uint8_t ATTR_DUMMY_RW_type[1][3][5];

// Type aliases and/or sizes for ATTR_DUMMY_WO attribute
typedef uint8_t DUMMY_WO_ATTR;
typedef uint8_t ATTR_DUMMY_WO_type;

// Type aliases and/or sizes for ATTR_DUMMY_RO attribute
typedef uint8_t DUMMY_RO_ATTR;
typedef uint8_t ATTR_DUMMY_RO_type;

// Type aliases and/or sizes for ATTR_DUMMY_HEAP_ZERO_DEFAULT attribute
typedef uint8_t DUMMY_HEAP_ZERO_DEFAULT_ATTR;
typedef uint8_t ATTR_DUMMY_HEAP_ZERO_DEFAULT_type;

// Type aliases and/or sizes for ATTR_PHYS_PATH attribute
typedef EntityPath PHYS_PATH_ATTR;
typedef EntityPath ATTR_PHYS_PATH_type;

// Type aliases and/or sizes for ATTR_AFFINITY_PATH attribute
typedef EntityPath AFFINITY_PATH_ATTR;
typedef EntityPath ATTR_AFFINITY_PATH_type;

// Type aliases and/or sizes for ATTR_POWER_PATH attribute
typedef EntityPath POWER_PATH_ATTR;
typedef EntityPath ATTR_POWER_PATH_type;

// Type aliases and/or sizes for ATTR_PRIMARY_CAPABILITIES attribute
typedef PrimaryCapabilities PRIMARY_CAPABILITIES_ATTR;
typedef PrimaryCapabilities ATTR_PRIMARY_CAPABILITIES_type;

// Type aliases and/or sizes for ATTR_SCOM_SWITCHES attribute
typedef ScomSwitches SCOM_SWITCHES_ATTR;
typedef ScomSwitches ATTR_SCOM_SWITCHES_type;

// Type aliases and/or sizes for ATTR_FSI_MASTER_CHIP attribute
typedef EntityPath FSI_MASTER_CHIP_ATTR;
typedef EntityPath ATTR_FSI_MASTER_CHIP_type;

// Type aliases and/or sizes for ATTR_ALTFSI_MASTER_CHIP attribute
typedef EntityPath ALTFSI_MASTER_CHIP_ATTR;
typedef EntityPath ATTR_ALTFSI_MASTER_CHIP_type;

// Type aliases and/or sizes for ATTR_FSI_MASTER_TYPE attribute
typedef FSI_MASTER_TYPE FSI_MASTER_TYPE_ATTR;
typedef FSI_MASTER_TYPE ATTR_FSI_MASTER_TYPE_type;

// Type aliases and/or sizes for ATTR_FSI_MASTER_PORT attribute
typedef uint8_t FSI_MASTER_PORT_ATTR;
typedef uint8_t ATTR_FSI_MASTER_PORT_type;

// Type aliases and/or sizes for ATTR_ALTFSI_MASTER_PORT attribute
typedef uint8_t ALTFSI_MASTER_PORT_ATTR;
typedef uint8_t ATTR_ALTFSI_MASTER_PORT_type;

// Type aliases and/or sizes for ATTR_I2C_SLAVE_ADDRESS attribute
typedef uint8_t I2C_SLAVE_ADDRESS_ATTR;
typedef uint8_t ATTR_I2C_SLAVE_ADDRESS_type;

// Type aliases and/or sizes for ATTR_FSI_SLAVE_CASCADE attribute
typedef uint8_t FSI_SLAVE_CASCADE_ATTR;
typedef uint8_t ATTR_FSI_SLAVE_CASCADE_type;

// Type aliases and/or sizes for ATTR_FSI_OPTION_FLAGS attribute
typedef FsiOptionFlags FSI_OPTION_FLAGS_ATTR;
typedef FsiOptionFlags ATTR_FSI_OPTION_FLAGS_type;

// Type aliases and/or sizes for ATTR_EXECUTION_PLATFORM attribute
typedef uint8_t EXECUTION_PLATFORM_ATTR;
typedef uint8_t ATTR_EXECUTION_PLATFORM_type;

// Type aliases and/or sizes for ATTR_IS_SIMULATION attribute
typedef uint8_t IS_SIMULATION_ATTR;
typedef uint8_t ATTR_IS_SIMULATION_type;

// Type aliases and/or sizes for ATTR_HWAS_STATE attribute
typedef HwasState HWAS_STATE_ATTR;
typedef HwasState ATTR_HWAS_STATE_type;

// Type aliases and/or sizes for ATTR_HWAS_STATE_CHANGED_FLAG attribute
typedef uint64_t HWAS_STATE_CHANGED_FLAG_ATTR;
typedef uint64_t ATTR_HWAS_STATE_CHANGED_FLAG_type;

// Type aliases and/or sizes for ATTR_HWAS_STATE_CHANGED_SUBSCRIPTION_MASK attribute
typedef uint64_t HWAS_STATE_CHANGED_SUBSCRIPTION_MASK_ATTR;
typedef uint64_t ATTR_HWAS_STATE_CHANGED_SUBSCRIPTION_MASK_type;

// Type aliases and/or sizes for ATTR_NUMERIC_POD_TYPE_TEST attribute
typedef NumericPodTypeTest NUMERIC_POD_TYPE_TEST_ATTR;
typedef NumericPodTypeTest ATTR_NUMERIC_POD_TYPE_TEST_type;

// Type aliases and/or sizes for ATTR_DECONFIG_GARDABLE attribute
typedef uint8_t DECONFIG_GARDABLE_ATTR;
typedef uint8_t ATTR_DECONFIG_GARDABLE_type;

// Type aliases and/or sizes for ATTR_ISTEP_MODE attribute
typedef uint8_t ISTEP_MODE_ATTR;
typedef uint8_t ATTR_ISTEP_MODE_type;

// Type aliases and/or sizes for ATTR_EEPROM_VPD_PRIMARY_INFO attribute
typedef EepromVpdPrimaryInfo EEPROM_VPD_PRIMARY_INFO_ATTR;
typedef EepromVpdPrimaryInfo ATTR_EEPROM_VPD_PRIMARY_INFO_type;

// Type aliases and/or sizes for ATTR_EEPROM_VPD_BACKUP_INFO attribute
typedef EepromVpdBackupInfo EEPROM_VPD_BACKUP_INFO_ATTR;
typedef EepromVpdBackupInfo ATTR_EEPROM_VPD_BACKUP_INFO_type;

// Type aliases and/or sizes for ATTR_EEPROM_SBE_PRIMARY_INFO attribute
typedef EepromSbePrimaryInfo EEPROM_SBE_PRIMARY_INFO_ATTR;
typedef EepromSbePrimaryInfo ATTR_EEPROM_SBE_PRIMARY_INFO_type;

// Type aliases and/or sizes for ATTR_EEPROM_SBE_BACKUP_INFO attribute
typedef EepromSbeBackupInfo EEPROM_SBE_BACKUP_INFO_ATTR;
typedef EepromSbeBackupInfo ATTR_EEPROM_SBE_BACKUP_INFO_type;

// Type aliases and/or sizes for ATTR_TPM_PRIMARY_INFO attribute
typedef TpmPrimaryInfo TPM_PRIMARY_INFO_ATTR;
typedef TpmPrimaryInfo ATTR_TPM_PRIMARY_INFO_type;

// Type aliases and/or sizes for ATTR_TPM_BACKUP_INFO attribute
typedef TpmBackupInfo TPM_BACKUP_INFO_ATTR;
typedef TpmBackupInfo ATTR_TPM_BACKUP_INFO_type;

// Type aliases and/or sizes for ATTR_EC attribute
typedef uint8_t EC_ATTR;
typedef uint8_t ATTR_EC_type;

// Type aliases and/or sizes for ATTR_CHIP_ID attribute
typedef uint32_t CHIP_ID_ATTR;
typedef uint32_t ATTR_CHIP_ID_type;

// Type aliases and/or sizes for ATTR_FSI_GP_REG_SCOM_ACCESS attribute
typedef uint8_t FSI_GP_REG_SCOM_ACCESS_ATTR;
typedef uint8_t ATTR_FSI_GP_REG_SCOM_ACCESS_type;

// Type aliases and/or sizes for ATTR_L2_R_T0_EPS attribute
typedef uint32_t L2_R_T0_EPS_ATTR;
typedef uint32_t ATTR_L2_R_T0_EPS_type;

// Type aliases and/or sizes for ATTR_L2_R_T1_EPS attribute
typedef uint32_t L2_R_T1_EPS_ATTR;
typedef uint32_t ATTR_L2_R_T1_EPS_type;

// Type aliases and/or sizes for ATTR_L2_R_T2_EPS attribute
typedef uint32_t L2_R_T2_EPS_ATTR;
typedef uint32_t ATTR_L2_R_T2_EPS_type;

// Type aliases and/or sizes for ATTR_L2_FORCE_R_T2_EPS attribute
typedef uint8_t L2_FORCE_R_T2_EPS_ATTR;
typedef uint8_t ATTR_L2_FORCE_R_T2_EPS_type;

// Type aliases and/or sizes for ATTR_L2_W_EPS attribute
typedef uint32_t L2_W_EPS_ATTR;
typedef uint32_t ATTR_L2_W_EPS_type;

// Type aliases and/or sizes for ATTR_L3_R_T0_EPS attribute
typedef uint32_t L3_R_T0_EPS_ATTR;
typedef uint32_t ATTR_L3_R_T0_EPS_type;

// Type aliases and/or sizes for ATTR_L3_R_T1_EPS attribute
typedef uint32_t L3_R_T1_EPS_ATTR;
typedef uint32_t ATTR_L3_R_T1_EPS_type;

// Type aliases and/or sizes for ATTR_L3_R_T2_EPS attribute
typedef uint32_t L3_R_T2_EPS_ATTR;
typedef uint32_t ATTR_L3_R_T2_EPS_type;

// Type aliases and/or sizes for ATTR_L3_FORCE_R_T2_EPS attribute
typedef uint8_t L3_FORCE_R_T2_EPS_ATTR;
typedef uint8_t ATTR_L3_FORCE_R_T2_EPS_type;

// Type aliases and/or sizes for ATTR_L3_W_EPS attribute
typedef uint32_t L3_W_EPS_ATTR;
typedef uint32_t ATTR_L3_W_EPS_type;

// Type aliases and/or sizes for ATTR_CHIP_UNIT attribute
typedef uint8_t CHIP_UNIT_ATTR;
typedef uint8_t ATTR_CHIP_UNIT_type;

// Type aliases and/or sizes for ATTR_POSITION attribute
typedef uint16_t POSITION_ATTR;
typedef uint16_t ATTR_POSITION_type;

// Type aliases and/or sizes for ATTR_MBA_PORT attribute
typedef uint8_t MBA_PORT_ATTR;
typedef uint8_t ATTR_MBA_PORT_type;

// Type aliases and/or sizes for ATTR_MBA_DIMM attribute
typedef uint8_t MBA_DIMM_ATTR;
typedef uint8_t ATTR_MBA_DIMM_type;

// Type aliases and/or sizes for ATTR_CEN_DQ_TO_DIMM_CONN_DQ attribute
typedef uint8_t CEN_DQ_TO_DIMM_CONN_DQ_ATTR[80];
typedef uint8_t ATTR_CEN_DQ_TO_DIMM_CONN_DQ_type[80];

// Type aliases and/or sizes for ATTR_PROC_EPS_TABLE_TYPE attribute
typedef uint8_t PROC_EPS_TABLE_TYPE_ATTR;
typedef uint8_t ATTR_PROC_EPS_TABLE_TYPE_type;

// Type aliases and/or sizes for ATTR_PROC_FABRIC_PUMP_MODE attribute
typedef uint8_t PROC_FABRIC_PUMP_MODE_ATTR;
typedef uint8_t ATTR_PROC_FABRIC_PUMP_MODE_type;

// Type aliases and/or sizes for ATTR_PROC_X_BUS_WIDTH attribute
typedef uint8_t PROC_X_BUS_WIDTH_ATTR;
typedef uint8_t ATTR_PROC_X_BUS_WIDTH_type;

// Type aliases and/or sizes for ATTR_ALL_MCS_IN_INTERLEAVING_GROUP attribute
typedef uint8_t ALL_MCS_IN_INTERLEAVING_GROUP_ATTR;
typedef uint8_t ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_type;

// Type aliases and/or sizes for ATTR_FABRIC_NODE_ID attribute
typedef uint8_t FABRIC_NODE_ID_ATTR;
typedef uint8_t ATTR_FABRIC_NODE_ID_type;

// Type aliases and/or sizes for ATTR_FABRIC_CHIP_ID attribute
typedef uint8_t FABRIC_CHIP_ID_ATTR;
typedef uint8_t ATTR_FABRIC_CHIP_ID_type;

// Type aliases and/or sizes for ATTR_CHIP_HAS_SBE attribute
typedef uint8_t CHIP_HAS_SBE_ATTR;
typedef uint8_t ATTR_CHIP_HAS_SBE_type;

// Type aliases and/or sizes for ATTR_FREQ_PROC_REFCLOCK attribute
typedef uint32_t FREQ_PROC_REFCLOCK_ATTR;
typedef uint32_t ATTR_FREQ_PROC_REFCLOCK_type;

// Type aliases and/or sizes for ATTR_FREQ_PROC_REFCLOCK_KHZ attribute
typedef uint32_t FREQ_PROC_REFCLOCK_KHZ_ATTR;
typedef uint32_t ATTR_FREQ_PROC_REFCLOCK_KHZ_type;

// Type aliases and/or sizes for ATTR_FREQ_MEM_REFCLOCK attribute
typedef uint32_t FREQ_MEM_REFCLOCK_ATTR;
typedef uint32_t ATTR_FREQ_MEM_REFCLOCK_type;

// Type aliases and/or sizes for ATTR_MIN_FREQ_MHZ attribute
typedef uint32_t MIN_FREQ_MHZ_ATTR;
typedef uint32_t ATTR_MIN_FREQ_MHZ_type;

// Type aliases and/or sizes for ATTR_FREQ_PB attribute
typedef uint32_t FREQ_PB_ATTR;
typedef uint32_t ATTR_FREQ_PB_type;

// Type aliases and/or sizes for ATTR_FREQ_A attribute
typedef uint32_t FREQ_A_ATTR;
typedef uint32_t ATTR_FREQ_A_type;

// Type aliases and/or sizes for ATTR_FREQ_X attribute
typedef uint32_t FREQ_X_ATTR;
typedef uint32_t ATTR_FREQ_X_type;

// Type aliases and/or sizes for ATTR_HUID attribute
typedef uint32_t HUID_ATTR;
typedef uint32_t ATTR_HUID_type;

// Type aliases and/or sizes for ATTR_SP_FUNCTIONS attribute
typedef SpFunctions SP_FUNCTIONS_ATTR;
typedef SpFunctions ATTR_SP_FUNCTIONS_type;

// Type aliases and/or sizes for ATTR_HB_SETTINGS attribute
typedef HbSettings HB_SETTINGS_ATTR;
typedef HbSettings ATTR_HB_SETTINGS_type;

// Type aliases and/or sizes for ATTR_CEC_IPL_TYPE attribute
typedef CecIplType CEC_IPL_TYPE_ATTR;
typedef CecIplType ATTR_CEC_IPL_TYPE_type;

// Type aliases and/or sizes for ATTR_TEST_NULL_STRING attribute
typedef char TEST_NULL_STRING_ATTR[10];
typedef char ATTR_TEST_NULL_STRING_type[10];
const size_t ATTR_TEST_NULL_STRING_max_chars = 9;

// Type aliases and/or sizes for ATTR_TEST_MIN_STRING attribute
typedef char TEST_MIN_STRING_ATTR[10];
typedef char ATTR_TEST_MIN_STRING_type[10];
const size_t ATTR_TEST_MIN_STRING_max_chars = 9;

// Type aliases and/or sizes for ATTR_TEST_MAX_STRING attribute
typedef char TEST_MAX_STRING_ATTR[4];
typedef char ATTR_TEST_MAX_STRING_type[4];
const size_t ATTR_TEST_MAX_STRING_max_chars = 3;

// Type aliases and/or sizes for ATTR_TEST_NO_DEFAULT_STRING attribute
typedef char TEST_NO_DEFAULT_STRING_ATTR[10];
typedef char ATTR_TEST_NO_DEFAULT_STRING_type[10];
const size_t ATTR_TEST_NO_DEFAULT_STRING_max_chars = 9;

// Type aliases and/or sizes for ATTR_VPD_REC_NUM attribute
typedef uint16_t VPD_REC_NUM_ATTR;
typedef uint16_t ATTR_VPD_REC_NUM_type;

// Type aliases and/or sizes for ATTR_PEER_TARGET attribute
typedef TARGETING::Target* PEER_TARGET_ATTR;
typedef TARGETING::Target* ATTR_PEER_TARGET_type;

// Type aliases and/or sizes for ATTR_PAYLOAD_BASE attribute
typedef uint64_t PAYLOAD_BASE_ATTR;
typedef uint64_t ATTR_PAYLOAD_BASE_type;

// Type aliases and/or sizes for ATTR_PAYLOAD_ENTRY attribute
typedef uint64_t PAYLOAD_ENTRY_ATTR;
typedef uint64_t ATTR_PAYLOAD_ENTRY_type;

// Type aliases and/or sizes for ATTR_PAYLOAD_KIND attribute
typedef PAYLOAD_KIND PAYLOAD_KIND_ATTR;
typedef PAYLOAD_KIND ATTR_PAYLOAD_KIND_type;

// Type aliases and/or sizes for ATTR_HB_HRMOR_NODAL_BASE attribute
typedef uint64_t HB_HRMOR_NODAL_BASE_ATTR;
typedef uint64_t ATTR_HB_HRMOR_NODAL_BASE_type;

// Type aliases and/or sizes for ATTR_FABRIC_TO_PHYSICAL_NODE_MAP attribute
typedef uint8_t FABRIC_TO_PHYSICAL_NODE_MAP_ATTR[8];
typedef uint8_t ATTR_FABRIC_TO_PHYSICAL_NODE_MAP_type[8];

// Type aliases and/or sizes for ATTR_PROC_MEM_BASES attribute
typedef uint64_t PROC_MEM_BASES_ATTR[8];
typedef uint64_t ATTR_PROC_MEM_BASES_type[8];

// Type aliases and/or sizes for ATTR_PROC_MEM_SIZES attribute
typedef uint64_t PROC_MEM_SIZES_ATTR[8];
typedef uint64_t ATTR_PROC_MEM_SIZES_type[8];

// Type aliases and/or sizes for ATTR_PROC_MIRROR_BASES attribute
typedef uint64_t PROC_MIRROR_BASES_ATTR[4];
typedef uint64_t ATTR_PROC_MIRROR_BASES_type[4];

// Type aliases and/or sizes for ATTR_PROC_MIRROR_SIZES attribute
typedef uint64_t PROC_MIRROR_SIZES_ATTR[4];
typedef uint64_t ATTR_PROC_MIRROR_SIZES_type[4];

// Type aliases and/or sizes for ATTR_PROC_L3_BAR1_REG attribute
typedef uint64_t PROC_L3_BAR1_REG_ATTR;
typedef uint64_t ATTR_PROC_L3_BAR1_REG_type;

// Type aliases and/or sizes for ATTR_PROC_L3_BAR2_REG attribute
typedef uint64_t PROC_L3_BAR2_REG_ATTR;
typedef uint64_t ATTR_PROC_L3_BAR2_REG_type;

// Type aliases and/or sizes for ATTR_PROC_L3_BAR_GROUP_MASK_REG attribute
typedef uint64_t PROC_L3_BAR_GROUP_MASK_REG_ATTR;
typedef uint64_t ATTR_PROC_L3_BAR_GROUP_MASK_REG_type;

// Type aliases and/or sizes for ATTR_FREQ_CORE attribute
typedef uint32_t FREQ_CORE_ATTR;
typedef uint32_t ATTR_FREQ_CORE_type;

// Type aliases and/or sizes for ATTR_PROC_PCIE_NOT_F_LINK attribute
typedef uint8_t PROC_PCIE_NOT_F_LINK_ATTR[2];
typedef uint8_t ATTR_PROC_PCIE_NOT_F_LINK_type[2];

// Type aliases and/or sizes for ATTR_PROC_MCS_GROUPS attribute
typedef uint8_t PROC_MCS_GROUPS_ATTR[8];
typedef uint8_t ATTR_PROC_MCS_GROUPS_type[8];

// Type aliases and/or sizes for ATTR_XSCOM_BASE_ADDRESS attribute
typedef uint64_t XSCOM_BASE_ADDRESS_ATTR;
typedef uint64_t ATTR_XSCOM_BASE_ADDRESS_type;

// Type aliases and/or sizes for ATTR_IBSCOM_MCS_BASE_ADDR attribute
typedef uint64_t IBSCOM_MCS_BASE_ADDR_ATTR;
typedef uint64_t ATTR_IBSCOM_MCS_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_IBSCOM_PROC_BASE_ADDR attribute
typedef uint64_t IBSCOM_PROC_BASE_ADDR_ATTR;
typedef uint64_t ATTR_IBSCOM_PROC_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_MIRROR_BASE_ADDRESS attribute
typedef uint64_t MIRROR_BASE_ADDRESS_ATTR;
typedef uint64_t ATTR_MIRROR_BASE_ADDRESS_type;

// Type aliases and/or sizes for ATTR_PAYLOAD_IN_MIRROR_MEM attribute
typedef uint8_t PAYLOAD_IN_MIRROR_MEM_ATTR;
typedef uint8_t ATTR_PAYLOAD_IN_MIRROR_MEM_type;

// Type aliases and/or sizes for ATTR_NPU_MMIO_BAR_ENABLE attribute
typedef uint8_t NPU_MMIO_BAR_ENABLE_ATTR[4][2];
typedef uint8_t ATTR_NPU_MMIO_BAR_ENABLE_type[4][2];

// Type aliases and/or sizes for ATTR_NPU_MMIO_BAR_BASE_ADDR attribute
typedef uint64_t NPU_MMIO_BAR_BASE_ADDR_ATTR[4][2];
typedef uint64_t ATTR_NPU_MMIO_BAR_BASE_ADDR_type[4][2];

// Type aliases and/or sizes for ATTR_NPU_MMIO_BAR_SIZE attribute
typedef uint64_t NPU_MMIO_BAR_SIZE_ATTR[4][2];
typedef uint64_t ATTR_NPU_MMIO_BAR_SIZE_type[4][2];

// Type aliases and/or sizes for ATTR_FSP_BASE_ADDR attribute
typedef uint64_t FSP_BASE_ADDR_ATTR;
typedef uint64_t ATTR_FSP_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_FSP_BAR_SIZE attribute
typedef uint64_t FSP_BAR_SIZE_ATTR;
typedef uint64_t ATTR_FSP_BAR_SIZE_type;

// Type aliases and/or sizes for ATTR_FSP_MMIO_MASK_SIZE attribute
typedef uint64_t FSP_MMIO_MASK_SIZE_ATTR;
typedef uint64_t ATTR_FSP_MMIO_MASK_SIZE_type;

// Type aliases and/or sizes for ATTR_PSI_BRIDGE_BASE_ADDR attribute
typedef uint64_t PSI_BRIDGE_BASE_ADDR_ATTR;
typedef uint64_t ATTR_PSI_BRIDGE_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_INTP_BASE_ADDR attribute
typedef uint64_t INTP_BASE_ADDR_ATTR;
typedef uint64_t ATTR_INTP_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_PHB_BASE_ADDRS attribute
typedef uint64_t PHB_BASE_ADDRS_ATTR[4];
typedef uint64_t ATTR_PHB_BASE_ADDRS_type[4];

// Type aliases and/or sizes for ATTR_PCI_BASE_ADDRS_64 attribute
typedef uint64_t PCI_BASE_ADDRS_64_ATTR[4];
typedef uint64_t ATTR_PCI_BASE_ADDRS_64_type[4];

// Type aliases and/or sizes for ATTR_PCI_BASE_ADDRS_32 attribute
typedef uint64_t PCI_BASE_ADDRS_32_ATTR[4];
typedef uint64_t ATTR_PCI_BASE_ADDRS_32_type[4];

// Type aliases and/or sizes for ATTR_MEM_BASE attribute
typedef uint64_t MEM_BASE_ATTR;
typedef uint64_t ATTR_MEM_BASE_type;

// Type aliases and/or sizes for ATTR_MIRROR_BASE attribute
typedef uint64_t MIRROR_BASE_ATTR;
typedef uint64_t ATTR_MIRROR_BASE_type;

// Type aliases and/or sizes for ATTR_RNG_BASE_ADDR attribute
typedef uint64_t RNG_BASE_ADDR_ATTR;
typedef uint64_t ATTR_RNG_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_RNG_BAR_SIZE attribute
typedef uint64_t RNG_BAR_SIZE_ATTR;
typedef uint64_t ATTR_RNG_BAR_SIZE_type;

// Type aliases and/or sizes for ATTR_IMT_BASE_ADDR attribute
typedef uint64_t IMT_BASE_ADDR_ATTR;
typedef uint64_t ATTR_IMT_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_IMT_BAR_SIZE attribute
typedef uint64_t IMT_BAR_SIZE_ATTR;
typedef uint64_t ATTR_IMT_BAR_SIZE_type;

// Type aliases and/or sizes for ATTR_PROC_EPS_GB_PERCENTAGE attribute
typedef uint8_t PROC_EPS_GB_PERCENTAGE_ATTR;
typedef uint8_t ATTR_PROC_EPS_GB_PERCENTAGE_type;

// Type aliases and/or sizes for ATTR_PROC_EPS_GB_DIRECTION attribute
typedef uint8_t PROC_EPS_GB_DIRECTION_ATTR;
typedef uint8_t ATTR_PROC_EPS_GB_DIRECTION_type;

// Type aliases and/or sizes for ATTR_PROC_FABRIC_ASYNC_SAFE_MODE attribute
typedef uint8_t PROC_FABRIC_ASYNC_SAFE_MODE_ATTR;
typedef uint8_t ATTR_PROC_FABRIC_ASYNC_SAFE_MODE_type;

// Type aliases and/or sizes for ATTR_FREQ_PCIE attribute
typedef uint32_t FREQ_PCIE_ATTR;
typedef uint32_t ATTR_FREQ_PCIE_type;

// Type aliases and/or sizes for ATTR_NOMINAL_FREQ_MHZ attribute
typedef uint32_t NOMINAL_FREQ_MHZ_ATTR;
typedef uint32_t ATTR_NOMINAL_FREQ_MHZ_type;

// Type aliases and/or sizes for ATTR_ULTRA_TURBO_FREQ_MHZ attribute
typedef uint32_t ULTRA_TURBO_FREQ_MHZ_ATTR;
typedef uint32_t ATTR_ULTRA_TURBO_FREQ_MHZ_type;

// Type aliases and/or sizes for ATTR_MNFG_FLAGS attribute
typedef uint64_t MNFG_FLAGS_ATTR;
typedef uint64_t ATTR_MNFG_FLAGS_type;

// Type aliases and/or sizes for ATTR_PROC_DPLL_DIVIDER attribute
typedef uint32_t PROC_DPLL_DIVIDER_ATTR;
typedef uint32_t ATTR_PROC_DPLL_DIVIDER_type;

// Type aliases and/or sizes for ATTR_PM_POWER_PROXY_TRACE_TIMER attribute
typedef uint32_t PM_POWER_PROXY_TRACE_TIMER_ATTR;
typedef uint32_t ATTR_PM_POWER_PROXY_TRACE_TIMER_type;

// Type aliases and/or sizes for ATTR_PM_PPT_TIMER_MATCH_VALUE attribute
typedef uint32_t PM_PPT_TIMER_MATCH_VALUE_ATTR;
typedef uint32_t ATTR_PM_PPT_TIMER_MATCH_VALUE_type;

// Type aliases and/or sizes for ATTR_PM_PPT_TIMER_TICK attribute
typedef uint32_t PM_PPT_TIMER_TICK_ATTR;
typedef uint32_t ATTR_PM_PPT_TIMER_TICK_type;

// Type aliases and/or sizes for ATTR_PM_AISS_TIMEOUT attribute
typedef uint8_t PM_AISS_TIMEOUT_ATTR;
typedef uint8_t ATTR_PM_AISS_TIMEOUT_type;

// Type aliases and/or sizes for ATTR_PM_PSTATE_STEPSIZE attribute
typedef uint8_t PM_PSTATE_STEPSIZE_ATTR;
typedef uint8_t ATTR_PM_PSTATE_STEPSIZE_type;

// Type aliases and/or sizes for ATTR_PM_EXTERNAL_VRM_STEPDELAY_RANGE attribute
typedef uint8_t PM_EXTERNAL_VRM_STEPDELAY_RANGE_ATTR;
typedef uint8_t ATTR_PM_EXTERNAL_VRM_STEPDELAY_RANGE_type;

// Type aliases and/or sizes for ATTR_PM_EXTERNAL_VRM_STEPDELAY_VALUE attribute
typedef uint8_t PM_EXTERNAL_VRM_STEPDELAY_VALUE_ATTR;
typedef uint8_t ATTR_PM_EXTERNAL_VRM_STEPDELAY_VALUE_type;

// Type aliases and/or sizes for ATTR_PM_PMC_HANGPULSE_DIVIDER attribute
typedef uint8_t PM_PMC_HANGPULSE_DIVIDER_ATTR;
typedef uint8_t ATTR_PM_PMC_HANGPULSE_DIVIDER_type;

// Type aliases and/or sizes for ATTR_PM_PVSAFE_PSTATE attribute
typedef uint8_t PM_PVSAFE_PSTATE_ATTR;
typedef uint8_t ATTR_PM_PVSAFE_PSTATE_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_FRAME_SIZE attribute
typedef uint8_t PM_SPIVID_FRAME_SIZE_ATTR;
typedef uint8_t ATTR_PM_SPIVID_FRAME_SIZE_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_IN_DELAY_FRAME1 attribute
typedef uint8_t PM_SPIVID_IN_DELAY_FRAME1_ATTR;
typedef uint8_t ATTR_PM_SPIVID_IN_DELAY_FRAME1_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_IN_DELAY_FRAME2 attribute
typedef uint8_t PM_SPIVID_IN_DELAY_FRAME2_ATTR;
typedef uint8_t ATTR_PM_SPIVID_IN_DELAY_FRAME2_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_CLOCK_POLARITY attribute
typedef uint8_t PM_SPIVID_CLOCK_POLARITY_ATTR;
typedef uint8_t ATTR_PM_SPIVID_CLOCK_POLARITY_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_CLOCK_PHASE attribute
typedef uint8_t PM_SPIVID_CLOCK_PHASE_ATTR;
typedef uint8_t ATTR_PM_SPIVID_CLOCK_PHASE_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_CLOCK_DIVIDER attribute
typedef uint32_t PM_SPIVID_CLOCK_DIVIDER_ATTR;
typedef uint32_t ATTR_PM_SPIVID_CLOCK_DIVIDER_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS attribute
typedef uint32_t PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_ATTR;
typedef uint32_t ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE attribute
typedef uint32_t PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE_ATTR;
typedef uint32_t ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_INTER_RETRY_DELAY_VALUE attribute
typedef uint32_t PM_SPIVID_INTER_RETRY_DELAY_VALUE_ATTR;
typedef uint32_t ATTR_PM_SPIVID_INTER_RETRY_DELAY_VALUE_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_INTER_RETRY_DELAY attribute
typedef uint32_t PM_SPIVID_INTER_RETRY_DELAY_ATTR;
typedef uint32_t ATTR_PM_SPIVID_INTER_RETRY_DELAY_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_CRC_GEN_ENABLE attribute
typedef uint8_t PM_SPIVID_CRC_GEN_ENABLE_ATTR;
typedef uint8_t ATTR_PM_SPIVID_CRC_GEN_ENABLE_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_CRC_CHECK_ENABLE attribute
typedef uint8_t PM_SPIVID_CRC_CHECK_ENABLE_ATTR;
typedef uint8_t ATTR_PM_SPIVID_CRC_CHECK_ENABLE_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE attribute
typedef uint8_t PM_SPIVID_MAJORITY_VOTE_ENABLE_ATTR;
typedef uint8_t ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_MAX_RETRIES attribute
typedef uint8_t PM_SPIVID_MAX_RETRIES_ATTR;
typedef uint8_t ATTR_PM_SPIVID_MAX_RETRIES_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_CRC_POLYNOMIAL_ENABLES attribute
typedef uint8_t PM_SPIVID_CRC_POLYNOMIAL_ENABLES_ATTR;
typedef uint8_t ATTR_PM_SPIVID_CRC_POLYNOMIAL_ENABLES_type;

// Type aliases and/or sizes for ATTR_PM_OCC_HEARTBEAT_TIME attribute
typedef uint32_t PM_OCC_HEARTBEAT_TIME_ATTR;
typedef uint32_t ATTR_PM_OCC_HEARTBEAT_TIME_type;

// Type aliases and/or sizes for ATTR_PM_SLEEP_WINKLE_REQUEST_TIMEOUT attribute
typedef uint32_t PM_SLEEP_WINKLE_REQUEST_TIMEOUT_ATTR;
typedef uint32_t ATTR_PM_SLEEP_WINKLE_REQUEST_TIMEOUT_type;

// Type aliases and/or sizes for ATTR_PM_SLEEP_ENTRY attribute
typedef uint8_t PM_SLEEP_ENTRY_ATTR;
typedef uint8_t ATTR_PM_SLEEP_ENTRY_type;

// Type aliases and/or sizes for ATTR_PM_SLEEP_EXIT attribute
typedef uint8_t PM_SLEEP_EXIT_ATTR;
typedef uint8_t ATTR_PM_SLEEP_EXIT_type;

// Type aliases and/or sizes for ATTR_PM_SLEEP_TYPE attribute
typedef uint8_t PM_SLEEP_TYPE_ATTR;
typedef uint8_t ATTR_PM_SLEEP_TYPE_type;

// Type aliases and/or sizes for ATTR_PM_WINKLE_TYPE attribute
typedef uint8_t PM_WINKLE_TYPE_ATTR;
typedef uint8_t ATTR_PM_WINKLE_TYPE_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERUP_CORE_DELAY0 attribute
typedef uint32_t PM_PFET_POWERUP_CORE_DELAY0_ATTR;
typedef uint32_t ATTR_PM_PFET_POWERUP_CORE_DELAY0_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERUP_CORE_DELAY1 attribute
typedef uint32_t PM_PFET_POWERUP_CORE_DELAY1_ATTR;
typedef uint32_t ATTR_PM_PFET_POWERUP_CORE_DELAY1_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE attribute
typedef uint8_t PM_PFET_POWERUP_CORE_DELAY0_VALUE_ATTR;
typedef uint8_t ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE attribute
typedef uint8_t PM_PFET_POWERUP_CORE_DELAY1_VALUE_ATTR;
typedef uint8_t ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT attribute
typedef uint32_t PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT_ATTR;
typedef uint32_t ATTR_PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERDOWN_CORE_DELAY0 attribute
typedef uint32_t PM_PFET_POWERDOWN_CORE_DELAY0_ATTR;
typedef uint32_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERDOWN_CORE_DELAY1 attribute
typedef uint32_t PM_PFET_POWERDOWN_CORE_DELAY1_ATTR;
typedef uint32_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE attribute
typedef uint8_t PM_PFET_POWERDOWN_CORE_DELAY0_VALUE_ATTR;
typedef uint8_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE attribute
typedef uint8_t PM_PFET_POWERDOWN_CORE_DELAY1_VALUE_ATTR;
typedef uint8_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT attribute
typedef uint32_t PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT_ATTR;
typedef uint32_t ATTR_PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERUP_ECO_DELAY0 attribute
typedef uint32_t PM_PFET_POWERUP_ECO_DELAY0_ATTR;
typedef uint32_t ATTR_PM_PFET_POWERUP_ECO_DELAY0_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERUP_ECO_DELAY1 attribute
typedef uint32_t PM_PFET_POWERUP_ECO_DELAY1_ATTR;
typedef uint32_t ATTR_PM_PFET_POWERUP_ECO_DELAY1_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE attribute
typedef uint8_t PM_PFET_POWERUP_ECO_DELAY0_VALUE_ATTR;
typedef uint8_t ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE attribute
typedef uint8_t PM_PFET_POWERUP_ECO_DELAY1_VALUE_ATTR;
typedef uint8_t ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT attribute
typedef uint32_t PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT_ATTR;
typedef uint32_t ATTR_PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERDOWN_ECO_DELAY0 attribute
typedef uint32_t PM_PFET_POWERDOWN_ECO_DELAY0_ATTR;
typedef uint32_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERDOWN_ECO_DELAY1 attribute
typedef uint32_t PM_PFET_POWERDOWN_ECO_DELAY1_ATTR;
typedef uint32_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE attribute
typedef uint8_t PM_PFET_POWERDOWN_ECO_DELAY0_VALUE_ATTR;
typedef uint8_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE attribute
typedef uint8_t PM_PFET_POWERDOWN_ECO_DELAY1_VALUE_ATTR;
typedef uint8_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE_type;

// Type aliases and/or sizes for ATTR_PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT attribute
typedef uint32_t PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT_ATTR;
typedef uint32_t ATTR_PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT_type;

// Type aliases and/or sizes for ATTR_PM_PSTATE0_FREQUENCY attribute
typedef uint32_t PM_PSTATE0_FREQUENCY_ATTR;
typedef uint32_t ATTR_PM_PSTATE0_FREQUENCY_type;

// Type aliases and/or sizes for ATTR_PM_IVRMS_ENABLED attribute
typedef uint8_t PM_IVRMS_ENABLED_ATTR;
typedef uint8_t ATTR_PM_IVRMS_ENABLED_type;

// Type aliases and/or sizes for ATTR_PM_SAFE_PSTATE attribute
typedef uint8_t PM_SAFE_PSTATE_ATTR;
typedef uint8_t ATTR_PM_SAFE_PSTATE_type;

// Type aliases and/or sizes for ATTR_PM_RESONANT_CLOCK_ENABLE attribute
typedef uint8_t PM_RESONANT_CLOCK_ENABLE_ATTR;
typedef uint8_t ATTR_PM_RESONANT_CLOCK_ENABLE_type;

// Type aliases and/or sizes for ATTR_PM_RESONANT_CLOCK_FULL_CSB_PSTATE attribute
typedef uint8_t PM_RESONANT_CLOCK_FULL_CSB_PSTATE_ATTR;
typedef uint8_t ATTR_PM_RESONANT_CLOCK_FULL_CSB_PSTATE_type;

// Type aliases and/or sizes for ATTR_PM_RESONANT_CLOCK_LFRLOW_PSTATE attribute
typedef uint8_t PM_RESONANT_CLOCK_LFRLOW_PSTATE_ATTR;
typedef uint8_t ATTR_PM_RESONANT_CLOCK_LFRLOW_PSTATE_type;

// Type aliases and/or sizes for ATTR_PM_RESONANT_CLOCK_LFRUPPER_PSTATE attribute
typedef uint8_t PM_RESONANT_CLOCK_LFRUPPER_PSTATE_ATTR;
typedef uint8_t ATTR_PM_RESONANT_CLOCK_LFRUPPER_PSTATE_type;

// Type aliases and/or sizes for ATTR_PM_RESONANT_CLOCK_HFRLOW_PSTATE attribute
typedef uint8_t PM_RESONANT_CLOCK_HFRLOW_PSTATE_ATTR;
typedef uint8_t ATTR_PM_RESONANT_CLOCK_HFRLOW_PSTATE_type;

// Type aliases and/or sizes for ATTR_PM_RESONANT_CLOCK_HFRHIGH_PSTATE attribute
typedef uint8_t PM_RESONANT_CLOCK_HFRHIGH_PSTATE_ATTR;
typedef uint8_t ATTR_PM_RESONANT_CLOCK_HFRHIGH_PSTATE_type;

// Type aliases and/or sizes for ATTR_PM_SPIPSS_FRAME_SIZE attribute
typedef uint8_t PM_SPIPSS_FRAME_SIZE_ATTR;
typedef uint8_t ATTR_PM_SPIPSS_FRAME_SIZE_type;

// Type aliases and/or sizes for ATTR_PM_SPIPSS_OUT_COUNT attribute
typedef uint8_t PM_SPIPSS_OUT_COUNT_ATTR;
typedef uint8_t ATTR_PM_SPIPSS_OUT_COUNT_type;

// Type aliases and/or sizes for ATTR_PM_SPIPSS_IN_DELAY attribute
typedef uint8_t PM_SPIPSS_IN_DELAY_ATTR;
typedef uint8_t ATTR_PM_SPIPSS_IN_DELAY_type;

// Type aliases and/or sizes for ATTR_PM_SPIPSS_IN_COUNT attribute
typedef uint8_t PM_SPIPSS_IN_COUNT_ATTR;
typedef uint8_t ATTR_PM_SPIPSS_IN_COUNT_type;

// Type aliases and/or sizes for ATTR_PM_SPIPSS_CLOCK_POLARITY attribute
typedef uint8_t PM_SPIPSS_CLOCK_POLARITY_ATTR;
typedef uint8_t ATTR_PM_SPIPSS_CLOCK_POLARITY_type;

// Type aliases and/or sizes for ATTR_PM_SPIPSS_CLOCK_PHASE attribute
typedef uint8_t PM_SPIPSS_CLOCK_PHASE_ATTR;
typedef uint8_t ATTR_PM_SPIPSS_CLOCK_PHASE_type;

// Type aliases and/or sizes for ATTR_PM_SPIPSS_CLOCK_DIVIDER attribute
typedef uint8_t PM_SPIPSS_CLOCK_DIVIDER_ATTR;
typedef uint8_t ATTR_PM_SPIPSS_CLOCK_DIVIDER_type;

// Type aliases and/or sizes for ATTR_PM_SPIPSS_INTER_FRAME_DELAY_SETTING attribute
typedef uint32_t PM_SPIPSS_INTER_FRAME_DELAY_SETTING_ATTR;
typedef uint32_t ATTR_PM_SPIPSS_INTER_FRAME_DELAY_SETTING_type;

// Type aliases and/or sizes for ATTR_PM_SPIPSS_INTER_FRAME_DELAY attribute
typedef uint32_t PM_SPIPSS_INTER_FRAME_DELAY_ATTR;
typedef uint32_t ATTR_PM_SPIPSS_INTER_FRAME_DELAY_type;

// Type aliases and/or sizes for ATTR_PM_PBAX_RCV_RESERV_TIMEOUT attribute
typedef uint8_t PM_PBAX_RCV_RESERV_TIMEOUT_ATTR;
typedef uint8_t ATTR_PM_PBAX_RCV_RESERV_TIMEOUT_type;

// Type aliases and/or sizes for ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE attribute
typedef uint8_t PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE_ATTR;
typedef uint8_t ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE_type;

// Type aliases and/or sizes for ATTR_PM_PBAX_SND_RETRY_THRESHOLD attribute
typedef uint8_t PM_PBAX_SND_RETRY_THRESHOLD_ATTR;
typedef uint8_t ATTR_PM_PBAX_SND_RETRY_THRESHOLD_type;

// Type aliases and/or sizes for ATTR_PM_PBAX_SND_RESERV_TIMEOUT attribute
typedef uint8_t PM_PBAX_SND_RESERV_TIMEOUT_ATTR;
typedef uint8_t ATTR_PM_PBAX_SND_RESERV_TIMEOUT_type;

// Type aliases and/or sizes for ATTR_PM_SPWUP_FSP attribute
typedef uint32_t PM_SPWUP_FSP_ATTR;
typedef uint32_t ATTR_PM_SPWUP_FSP_type;

// Type aliases and/or sizes for ATTR_PM_SPWUP_OCC attribute
typedef uint32_t PM_SPWUP_OCC_ATTR;
typedef uint32_t ATTR_PM_SPWUP_OCC_type;

// Type aliases and/or sizes for ATTR_PM_SPWUP_PHYP attribute
typedef uint32_t PM_SPWUP_PHYP_ATTR;
typedef uint32_t ATTR_PM_SPWUP_PHYP_type;

// Type aliases and/or sizes for ATTR_PM_SLW_CONTROL_VECTOR_OFFSET attribute
typedef uint32_t PM_SLW_CONTROL_VECTOR_OFFSET_ATTR;
typedef uint32_t ATTR_PM_SLW_CONTROL_VECTOR_OFFSET_type;

// Type aliases and/or sizes for ATTR_PM_EXTERNAL_VRM_STEPSIZE attribute
typedef uint8_t PM_EXTERNAL_VRM_STEPSIZE_ATTR;
typedef uint8_t ATTR_PM_EXTERNAL_VRM_STEPSIZE_type;

// Type aliases and/or sizes for ATTR_PM_EXTERNAL_VRM_STEPDELAY attribute
typedef uint32_t PM_EXTERNAL_VRM_STEPDELAY_ATTR;
typedef uint32_t ATTR_PM_EXTERNAL_VRM_STEPDELAY_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_FREQUENCY attribute
typedef uint32_t PM_SPIVID_FREQUENCY_ATTR;
typedef uint32_t ATTR_PM_SPIVID_FREQUENCY_type;

// Type aliases and/or sizes for ATTR_PM_SPIVID_PORT_ENABLE attribute
typedef uint8_t PM_SPIVID_PORT_ENABLE_ATTR;
typedef uint8_t ATTR_PM_SPIVID_PORT_ENABLE_type;

// Type aliases and/or sizes for ATTR_PM_SAFE_FREQUENCY attribute
typedef uint32_t PM_SAFE_FREQUENCY_ATTR;
typedef uint32_t ATTR_PM_SAFE_FREQUENCY_type;

// Type aliases and/or sizes for ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY attribute
typedef uint32_t PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY_ATTR;
typedef uint32_t ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY_type;

// Type aliases and/or sizes for ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY attribute
typedef uint32_t PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY_ATTR;
typedef uint32_t ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY_type;

// Type aliases and/or sizes for ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY attribute
typedef uint32_t PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY_ATTR;
typedef uint32_t ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY_type;

// Type aliases and/or sizes for ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY attribute
typedef uint32_t PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY_ATTR;
typedef uint32_t ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY_type;

// Type aliases and/or sizes for ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY attribute
typedef uint32_t PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY_ATTR;
typedef uint32_t ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY_type;

// Type aliases and/or sizes for ATTR_PM_SPIPSS_FREQUENCY attribute
typedef uint32_t PM_SPIPSS_FREQUENCY_ATTR;
typedef uint32_t ATTR_PM_SPIPSS_FREQUENCY_type;

// Type aliases and/or sizes for ATTR_PM_APSS_CHIP_SELECT attribute
typedef uint8_t PM_APSS_CHIP_SELECT_ATTR;
typedef uint8_t ATTR_PM_APSS_CHIP_SELECT_type;

// Type aliases and/or sizes for ATTR_PM_PBAX_NODEID attribute
typedef uint8_t PM_PBAX_NODEID_ATTR;
typedef uint8_t ATTR_PM_PBAX_NODEID_type;

// Type aliases and/or sizes for ATTR_PM_PBAX_CHIPID attribute
typedef uint8_t PM_PBAX_CHIPID_ATTR;
typedef uint8_t ATTR_PM_PBAX_CHIPID_type;

// Type aliases and/or sizes for ATTR_PM_PBAX_BRDCST_ID_VECTOR attribute
typedef uint8_t PM_PBAX_BRDCST_ID_VECTOR_ATTR;
typedef uint8_t ATTR_PM_PBAX_BRDCST_ID_VECTOR_type;

// Type aliases and/or sizes for ATTR_FREQ_CORE_MAX attribute
typedef uint32_t FREQ_CORE_MAX_ATTR;
typedef uint32_t ATTR_FREQ_CORE_MAX_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_NOM_FREQ_MHZ attribute
typedef uint32_t OVERRIDE_MVPD_NOM_FREQ_MHZ_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_NOM_FREQ_MHZ_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_V_NEST_NOM_VOLTAGE attribute
typedef uint32_t OVERRIDE_MVPD_V_NEST_NOM_VOLTAGE_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_V_NEST_NOM_VOLTAGE_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_I_NEST_NOM_CURRENT attribute
typedef uint32_t OVERRIDE_MVPD_I_NEST_NOM_CURRENT_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_I_NEST_NOM_CURRENT_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_V_CS_NOM_VOLTAGE attribute
typedef uint32_t OVERRIDE_MVPD_V_CS_NOM_VOLTAGE_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_V_CS_NOM_VOLTAGE_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_I_CS_NOM_CURRENT attribute
typedef uint32_t OVERRIDE_MVPD_I_CS_NOM_CURRENT_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_I_CS_NOM_CURRENT_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_PS_FREQ_MHZ attribute
typedef uint32_t OVERRIDE_MVPD_PS_FREQ_MHZ_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_PS_FREQ_MHZ_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_V_NEST_PS_VOLTAGE attribute
typedef uint32_t OVERRIDE_MVPD_V_NEST_PS_VOLTAGE_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_V_NEST_PS_VOLTAGE_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_I_NEST_PS_CURRENT attribute
typedef uint32_t OVERRIDE_MVPD_I_NEST_PS_CURRENT_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_I_NEST_PS_CURRENT_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_V_CS_PS_VOLTAGE attribute
typedef uint32_t OVERRIDE_MVPD_V_CS_PS_VOLTAGE_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_V_CS_PS_VOLTAGE_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_I_CS_PS_CURRENT attribute
typedef uint32_t OVERRIDE_MVPD_I_CS_PS_CURRENT_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_I_CS_PS_CURRENT_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_TURBO_FREQ_MHZ attribute
typedef uint32_t OVERRIDE_MVPD_TURBO_FREQ_MHZ_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_TURBO_FREQ_MHZ_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_V_NEST_TURBO_VOLTAGE attribute
typedef uint32_t OVERRIDE_MVPD_V_NEST_TURBO_VOLTAGE_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_V_NEST_TURBO_VOLTAGE_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_I_NEST_TURBO_CURRENT attribute
typedef uint32_t OVERRIDE_MVPD_I_NEST_TURBO_CURRENT_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_I_NEST_TURBO_CURRENT_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_V_CS_TURBO_VOLTAGE attribute
typedef uint32_t OVERRIDE_MVPD_V_CS_TURBO_VOLTAGE_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_V_CS_TURBO_VOLTAGE_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_I_CS_TURBO_CURRENT attribute
typedef uint32_t OVERRIDE_MVPD_I_CS_TURBO_CURRENT_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_I_CS_TURBO_CURRENT_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_FVMIN_FREQ_MHZ attribute
typedef uint32_t OVERRIDE_MVPD_FVMIN_FREQ_MHZ_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_FVMIN_FREQ_MHZ_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_V_NEST_FVMIN_VOLTAGE attribute
typedef uint32_t OVERRIDE_MVPD_V_NEST_FVMIN_VOLTAGE_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_V_NEST_FVMIN_VOLTAGE_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_I_NEST_FVMIN_CURRENT attribute
typedef uint32_t OVERRIDE_MVPD_I_NEST_FVMIN_CURRENT_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_I_NEST_FVMIN_CURRENT_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_V_CS_FVMIN_VOLTAGE attribute
typedef uint32_t OVERRIDE_MVPD_V_CS_FVMIN_VOLTAGE_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_V_CS_FVMIN_VOLTAGE_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_I_CS_FVMIN_CURRENT attribute
typedef uint32_t OVERRIDE_MVPD_I_CS_FVMIN_CURRENT_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_I_CS_FVMIN_CURRENT_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_LAB_FREQ_MHZ attribute
typedef uint32_t OVERRIDE_MVPD_LAB_FREQ_MHZ_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_LAB_FREQ_MHZ_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_V_NEST_LAB_VOLTAGE attribute
typedef uint32_t OVERRIDE_MVPD_V_NEST_LAB_VOLTAGE_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_V_NEST_LAB_VOLTAGE_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_I_NEST_LAB_CURRENT attribute
typedef uint32_t OVERRIDE_MVPD_I_NEST_LAB_CURRENT_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_I_NEST_LAB_CURRENT_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_V_CS_LAB_VOLTAGE attribute
typedef uint32_t OVERRIDE_MVPD_V_CS_LAB_VOLTAGE_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_V_CS_LAB_VOLTAGE_type;

// Type aliases and/or sizes for ATTR_OVERRIDE_MVPD_I_CS_LAB_CURRENT attribute
typedef uint32_t OVERRIDE_MVPD_I_CS_LAB_CURRENT_ATTR;
typedef uint32_t ATTR_OVERRIDE_MVPD_I_CS_LAB_CURRENT_type;

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_CONFIG attribute
typedef uint8_t PROC_PCIE_IOP_CONFIG_ATTR;
typedef uint8_t ATTR_PROC_PCIE_IOP_CONFIG_type;

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_SWAP attribute
typedef uint8_t PROC_PCIE_IOP_SWAP_ATTR[3];
typedef uint8_t ATTR_PROC_PCIE_IOP_SWAP_type[3];

// Type aliases and/or sizes for ATTR_PROC_PCIE_PHB_ACTIVE attribute
typedef uint8_t PROC_PCIE_PHB_ACTIVE_ATTR;
typedef uint8_t ATTR_PROC_PCIE_PHB_ACTIVE_type;

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_G3_PLL_CONTROL0 attribute
typedef uint32_t PROC_PCIE_IOP_G3_PLL_CONTROL0_ATTR[3];
typedef uint32_t ATTR_PROC_PCIE_IOP_G3_PLL_CONTROL0_type[3];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_G2_PLL_CONTROL0 attribute
typedef uint32_t PROC_PCIE_IOP_G2_PLL_CONTROL0_ATTR[3];
typedef uint32_t ATTR_PROC_PCIE_IOP_G2_PLL_CONTROL0_type[3];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL0 attribute
typedef uint32_t PROC_PCIE_IOP_PLL_GLOBAL_CONTROL0_ATTR[3];
typedef uint32_t ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL0_type[3];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL1 attribute
typedef uint32_t PROC_PCIE_IOP_PLL_GLOBAL_CONTROL1_ATTR[3];
typedef uint32_t ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL1_type[3];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_PCS_CONTROL0 attribute
typedef uint32_t PROC_PCIE_IOP_PCS_CONTROL0_ATTR[3];
typedef uint32_t ATTR_PROC_PCIE_IOP_PCS_CONTROL0_type[3];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_PCS_CONTROL1 attribute
typedef uint32_t PROC_PCIE_IOP_PCS_CONTROL1_ATTR[3];
typedef uint32_t ATTR_PROC_PCIE_IOP_PCS_CONTROL1_type[3];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_TX_FIFO_OFFSET attribute
typedef uint32_t PROC_PCIE_IOP_TX_FIFO_OFFSET_ATTR[3][16];
typedef uint32_t ATTR_PROC_PCIE_IOP_TX_FIFO_OFFSET_type[3][16];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_TX_RCVRDETCNTL attribute
typedef uint32_t PROC_PCIE_IOP_TX_RCVRDETCNTL_ATTR[3][16];
typedef uint32_t ATTR_PROC_PCIE_IOP_TX_RCVRDETCNTL_type[3][16];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_TX_BWLOSS1 attribute
typedef uint32_t PROC_PCIE_IOP_TX_BWLOSS1_ATTR[3][16];
typedef uint32_t ATTR_PROC_PCIE_IOP_TX_BWLOSS1_type[3][16];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_RX_VGA_CONTROL2 attribute
typedef uint32_t PROC_PCIE_IOP_RX_VGA_CONTROL2_ATTR[3][16];
typedef uint32_t ATTR_PROC_PCIE_IOP_RX_VGA_CONTROL2_type[3][16];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_RX_PEAK attribute
typedef uint32_t PROC_PCIE_IOP_RX_PEAK_ATTR[3][16];
typedef uint32_t ATTR_PROC_PCIE_IOP_RX_PEAK_type[3][16];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_RX_SDL attribute
typedef uint32_t PROC_PCIE_IOP_RX_SDL_ATTR[3][16];
typedef uint32_t ATTR_PROC_PCIE_IOP_RX_SDL_type[3][16];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_ZCAL_CONTROL attribute
typedef uint32_t PROC_PCIE_IOP_ZCAL_CONTROL_ATTR[3];
typedef uint32_t ATTR_PROC_PCIE_IOP_ZCAL_CONTROL_type[3];

// Type aliases and/or sizes for ATTR_AVDD_ID attribute
typedef uint16_t AVDD_ID_ATTR;
typedef uint16_t ATTR_AVDD_ID_type;

// Type aliases and/or sizes for ATTR_VDD_ID attribute
typedef uint16_t VDD_ID_ATTR;
typedef uint16_t ATTR_VDD_ID_type;

// Type aliases and/or sizes for ATTR_VCS_ID attribute
typedef uint16_t VCS_ID_ATTR;
typedef uint16_t ATTR_VCS_ID_type;

// Type aliases and/or sizes for ATTR_VPP_ID attribute
typedef uint16_t VPP_ID_ATTR;
typedef uint16_t ATTR_VPP_ID_type;

// Type aliases and/or sizes for ATTR_VMEM_ID attribute
typedef uint16_t VMEM_ID_ATTR;
typedef uint16_t ATTR_VMEM_ID_type;

// Type aliases and/or sizes for ATTR_NEST_FREQ_MHZ attribute
typedef uint32_t NEST_FREQ_MHZ_ATTR;
typedef uint32_t ATTR_NEST_FREQ_MHZ_type;

// Type aliases and/or sizes for ATTR_CHIP_REGIONS_TO_ENABLE attribute
typedef uint64_t CHIP_REGIONS_TO_ENABLE_ATTR[32];
typedef uint64_t ATTR_CHIP_REGIONS_TO_ENABLE_type[32];

// Type aliases and/or sizes for ATTR_BOOT_FREQ_MHZ attribute
typedef uint32_t BOOT_FREQ_MHZ_ATTR;
typedef uint32_t ATTR_BOOT_FREQ_MHZ_type;

// Type aliases and/or sizes for ATTR_EX_GARD_BITS attribute
typedef uint32_t EX_GARD_BITS_ATTR;
typedef uint32_t ATTR_EX_GARD_BITS_type;

// Type aliases and/or sizes for ATTR_PIB_I2C_REFCLOCK attribute
typedef uint32_t PIB_I2C_REFCLOCK_ATTR;
typedef uint32_t ATTR_PIB_I2C_REFCLOCK_type;

// Type aliases and/or sizes for ATTR_PROC_ADU_UNTRUSTED_BAR_BASE_ADDR attribute
typedef uint64_t PROC_ADU_UNTRUSTED_BAR_BASE_ADDR_ATTR;
typedef uint64_t ATTR_PROC_ADU_UNTRUSTED_BAR_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_PIB_I2C_NEST_PLL attribute
typedef uint32_t PIB_I2C_NEST_PLL_ATTR;
typedef uint32_t ATTR_PIB_I2C_NEST_PLL_type;

// Type aliases and/or sizes for ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE attribute
typedef uint64_t PROC_ADU_UNTRUSTED_BAR_SIZE_ATTR;
typedef uint64_t ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_type;

// Type aliases and/or sizes for ATTR_SBE_IMAGE_OFFSET attribute
typedef uint32_t SBE_IMAGE_OFFSET_ATTR;
typedef uint32_t ATTR_SBE_IMAGE_OFFSET_type;

// Type aliases and/or sizes for ATTR_SBE_IMAGE_MINIMUM_VALID_EXS attribute
typedef uint32_t SBE_IMAGE_MINIMUM_VALID_EXS_ATTR;
typedef uint32_t ATTR_SBE_IMAGE_MINIMUM_VALID_EXS_type;

// Type aliases and/or sizes for ATTR_PROC_PSI_UNTRUSTED_BAR0_BASE_ADDR attribute
typedef uint64_t PROC_PSI_UNTRUSTED_BAR0_BASE_ADDR_ATTR;
typedef uint64_t ATTR_PROC_PSI_UNTRUSTED_BAR0_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_BOOT_VOLTAGE attribute
typedef uint32_t BOOT_VOLTAGE_ATTR;
typedef uint32_t ATTR_BOOT_VOLTAGE_type;

// Type aliases and/or sizes for ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE attribute
typedef uint64_t PROC_PSI_UNTRUSTED_BAR0_SIZE_ATTR;
typedef uint64_t ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_type;

// Type aliases and/or sizes for ATTR_PROC_PSI_UNTRUSTED_BAR1_BASE_ADDR attribute
typedef uint64_t PROC_PSI_UNTRUSTED_BAR1_BASE_ADDR_ATTR;
typedef uint64_t ATTR_PROC_PSI_UNTRUSTED_BAR1_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE attribute
typedef uint64_t PROC_PSI_UNTRUSTED_BAR1_SIZE_ATTR;
typedef uint64_t ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_type;

// Type aliases and/or sizes for ATTR_PROC_SECURITY_SETUP_VECTOR attribute
typedef uint64_t PROC_SECURITY_SETUP_VECTOR_ATTR;
typedef uint64_t ATTR_PROC_SECURITY_SETUP_VECTOR_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT attribute
typedef uint32_t MSS_VOLT_ATTR;
typedef uint32_t ATTR_MSS_VOLT_type;

// Type aliases and/or sizes for ATTR_VPP_BASE attribute
typedef uint32_t VPP_BASE_ATTR;
typedef uint32_t ATTR_VPP_BASE_type;

// Type aliases and/or sizes for ATTR_MSS_FREQ attribute
typedef uint32_t MSS_FREQ_ATTR;
typedef uint32_t ATTR_MSS_FREQ_type;

// Type aliases and/or sizes for ATTR_MSS_DIMM_MFG_ID_CODE attribute
typedef uint32_t MSS_DIMM_MFG_ID_CODE_ATTR[2][2];
typedef uint32_t ATTR_MSS_DIMM_MFG_ID_CODE_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_RANKS_CONFIGED attribute
typedef uint8_t EFF_DIMM_RANKS_CONFIGED_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_RANKS_CONFIGED_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_NUM_RANKS_PER_DIMM attribute
typedef uint8_t EFF_NUM_RANKS_PER_DIMM_ATTR[2][2];
typedef uint8_t ATTR_EFF_NUM_RANKS_PER_DIMM_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_TYPE attribute
typedef uint8_t EFF_DIMM_TYPE_ATTR;
typedef uint8_t ATTR_EFF_DIMM_TYPE_type;

// Type aliases and/or sizes for ATTR_EFF_CUSTOM_DIMM attribute
typedef uint8_t EFF_CUSTOM_DIMM_ATTR;
typedef uint8_t ATTR_EFF_CUSTOM_DIMM_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_WIDTH attribute
typedef uint8_t EFF_DRAM_WIDTH_ATTR;
typedef uint8_t ATTR_EFF_DRAM_WIDTH_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_GEN attribute
typedef uint8_t EFF_DRAM_GEN_ATTR;
typedef uint8_t ATTR_EFF_DRAM_GEN_type;

// Type aliases and/or sizes for ATTR_EFF_PRIMARY_RANK_GROUP0 attribute
typedef uint8_t EFF_PRIMARY_RANK_GROUP0_ATTR[2];
typedef uint8_t ATTR_EFF_PRIMARY_RANK_GROUP0_type[2];

// Type aliases and/or sizes for ATTR_EFF_PRIMARY_RANK_GROUP1 attribute
typedef uint8_t EFF_PRIMARY_RANK_GROUP1_ATTR[2];
typedef uint8_t ATTR_EFF_PRIMARY_RANK_GROUP1_type[2];

// Type aliases and/or sizes for ATTR_EFF_PRIMARY_RANK_GROUP2 attribute
typedef uint8_t EFF_PRIMARY_RANK_GROUP2_ATTR[2];
typedef uint8_t ATTR_EFF_PRIMARY_RANK_GROUP2_type[2];

// Type aliases and/or sizes for ATTR_EFF_PRIMARY_RANK_GROUP3 attribute
typedef uint8_t EFF_PRIMARY_RANK_GROUP3_ATTR[2];
typedef uint8_t ATTR_EFF_PRIMARY_RANK_GROUP3_type[2];

// Type aliases and/or sizes for ATTR_EFF_SECONDARY_RANK_GROUP0 attribute
typedef uint8_t EFF_SECONDARY_RANK_GROUP0_ATTR[2];
typedef uint8_t ATTR_EFF_SECONDARY_RANK_GROUP0_type[2];

// Type aliases and/or sizes for ATTR_EFF_SECONDARY_RANK_GROUP1 attribute
typedef uint8_t EFF_SECONDARY_RANK_GROUP1_ATTR[2];
typedef uint8_t ATTR_EFF_SECONDARY_RANK_GROUP1_type[2];

// Type aliases and/or sizes for ATTR_EFF_SECONDARY_RANK_GROUP2 attribute
typedef uint8_t EFF_SECONDARY_RANK_GROUP2_ATTR[2];
typedef uint8_t ATTR_EFF_SECONDARY_RANK_GROUP2_type[2];

// Type aliases and/or sizes for ATTR_EFF_SECONDARY_RANK_GROUP3 attribute
typedef uint8_t EFF_SECONDARY_RANK_GROUP3_ATTR[2];
typedef uint8_t ATTR_EFF_SECONDARY_RANK_GROUP3_type[2];

// Type aliases and/or sizes for ATTR_EFF_TERTIARY_RANK_GROUP0 attribute
typedef uint8_t EFF_TERTIARY_RANK_GROUP0_ATTR[2];
typedef uint8_t ATTR_EFF_TERTIARY_RANK_GROUP0_type[2];

// Type aliases and/or sizes for ATTR_EFF_TERTIARY_RANK_GROUP1 attribute
typedef uint8_t EFF_TERTIARY_RANK_GROUP1_ATTR[2];
typedef uint8_t ATTR_EFF_TERTIARY_RANK_GROUP1_type[2];

// Type aliases and/or sizes for ATTR_EFF_TERTIARY_RANK_GROUP2 attribute
typedef uint8_t EFF_TERTIARY_RANK_GROUP2_ATTR[2];
typedef uint8_t ATTR_EFF_TERTIARY_RANK_GROUP2_type[2];

// Type aliases and/or sizes for ATTR_EFF_TERTIARY_RANK_GROUP3 attribute
typedef uint8_t EFF_TERTIARY_RANK_GROUP3_ATTR[2];
typedef uint8_t ATTR_EFF_TERTIARY_RANK_GROUP3_type[2];

// Type aliases and/or sizes for ATTR_EFF_QUATERNARY_RANK_GROUP0 attribute
typedef uint8_t EFF_QUATERNARY_RANK_GROUP0_ATTR[2];
typedef uint8_t ATTR_EFF_QUATERNARY_RANK_GROUP0_type[2];

// Type aliases and/or sizes for ATTR_EFF_QUATERNARY_RANK_GROUP1 attribute
typedef uint8_t EFF_QUATERNARY_RANK_GROUP1_ATTR[2];
typedef uint8_t ATTR_EFF_QUATERNARY_RANK_GROUP1_type[2];

// Type aliases and/or sizes for ATTR_EFF_QUATERNARY_RANK_GROUP2 attribute
typedef uint8_t EFF_QUATERNARY_RANK_GROUP2_ATTR[2];
typedef uint8_t ATTR_EFF_QUATERNARY_RANK_GROUP2_type[2];

// Type aliases and/or sizes for ATTR_EFF_QUATERNARY_RANK_GROUP3 attribute
typedef uint8_t EFF_QUATERNARY_RANK_GROUP3_ATTR[2];
typedef uint8_t ATTR_EFF_QUATERNARY_RANK_GROUP3_type[2];

// Type aliases and/or sizes for ATTR_EFF_ODT_RD attribute
typedef uint8_t EFF_ODT_RD_ATTR[2][2][4];
typedef uint8_t ATTR_EFF_ODT_RD_type[2][2][4];

// Type aliases and/or sizes for ATTR_EFF_ODT_WR attribute
typedef uint8_t EFF_ODT_WR_ATTR[2][2][4];
typedef uint8_t ATTR_EFF_ODT_WR_type[2][2][4];

// Type aliases and/or sizes for ATTR_EFF_DRAM_RON attribute
typedef uint8_t EFF_DRAM_RON_ATTR[2][2];
typedef uint8_t ATTR_EFF_DRAM_RON_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DRAM_RTT_NOM attribute
typedef uint8_t EFF_DRAM_RTT_NOM_ATTR[2][2][4];
typedef uint8_t ATTR_EFF_DRAM_RTT_NOM_type[2][2][4];

// Type aliases and/or sizes for ATTR_EFF_DRAM_RTT_WR attribute
typedef uint8_t EFF_DRAM_RTT_WR_ATTR[2][2][4];
typedef uint8_t ATTR_EFF_DRAM_RTT_WR_type[2][2][4];

// Type aliases and/or sizes for ATTR_EFF_DRAM_WR_VREF attribute
typedef uint32_t EFF_DRAM_WR_VREF_ATTR[2];
typedef uint32_t ATTR_EFF_DRAM_WR_VREF_type[2];

// Type aliases and/or sizes for ATTR_EFF_DRAM_WRDDR4_VREF attribute
typedef uint8_t EFF_DRAM_WRDDR4_VREF_ATTR[2];
typedef uint8_t ATTR_EFF_DRAM_WRDDR4_VREF_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_DRV_IMP_DQ_DQS attribute
typedef uint8_t EFF_CEN_DRV_IMP_DQ_DQS_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_DQ_DQS_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_DRV_IMP_ADDR attribute
typedef uint8_t EFF_CEN_DRV_IMP_ADDR_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_ADDR_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_DRV_IMP_CNTL attribute
typedef uint8_t EFF_CEN_DRV_IMP_CNTL_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_CNTL_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_DRV_IMP_CLK attribute
typedef uint8_t EFF_CEN_DRV_IMP_CLK_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_CLK_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_DRV_IMP_SPCKE attribute
typedef uint8_t EFF_CEN_DRV_IMP_SPCKE_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_SPCKE_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_RCV_IMP_DQ_DQS attribute
typedef uint8_t EFF_CEN_RCV_IMP_DQ_DQS_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_RCV_IMP_DQ_DQS_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_SLEW_RATE_DQ_DQS attribute
typedef uint8_t EFF_CEN_SLEW_RATE_DQ_DQS_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_SLEW_RATE_ADDR attribute
typedef uint8_t EFF_CEN_SLEW_RATE_ADDR_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_ADDR_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_SLEW_RATE_CLK attribute
typedef uint8_t EFF_CEN_SLEW_RATE_CLK_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_CLK_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_SLEW_RATE_SPCKE attribute
typedef uint8_t EFF_CEN_SLEW_RATE_SPCKE_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_SPCKE_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_SLEW_RATE_CNTL attribute
typedef uint8_t EFF_CEN_SLEW_RATE_CNTL_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_CNTL_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_RD_VREF attribute
typedef uint32_t EFF_CEN_RD_VREF_ATTR[2];
typedef uint32_t ATTR_EFF_CEN_RD_VREF_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_DRV_IMP_DQ_DQS_SCHMOO attribute
typedef uint32_t EFF_CEN_DRV_IMP_DQ_DQS_SCHMOO_ATTR[2];
typedef uint32_t ATTR_EFF_CEN_DRV_IMP_DQ_DQS_SCHMOO_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_DRV_IMP_CLK_SCHMOO attribute
typedef uint8_t EFF_CEN_DRV_IMP_CLK_SCHMOO_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_CLK_SCHMOO_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_DRV_IMP_SPCKE_SCHMOO attribute
typedef uint8_t EFF_CEN_DRV_IMP_SPCKE_SCHMOO_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_SPCKE_SCHMOO_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_DRV_IMP_CNTL_SCHMOO attribute
typedef uint8_t EFF_CEN_DRV_IMP_CNTL_SCHMOO_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_CNTL_SCHMOO_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_RCV_IMP_DQ_DQS_SCHMOO attribute
typedef uint32_t EFF_CEN_RCV_IMP_DQ_DQS_SCHMOO_ATTR[2];
typedef uint32_t ATTR_EFF_CEN_RCV_IMP_DQ_DQS_SCHMOO_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SCHMOO attribute
typedef uint8_t EFF_CEN_SLEW_RATE_DQ_DQS_SCHMOO_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SCHMOO_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_SLEW_RATE_CLK_SCHMOO attribute
typedef uint8_t EFF_CEN_SLEW_RATE_CLK_SCHMOO_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_CLK_SCHMOO_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_SLEW_RATE_SPCKE_SCHMOO attribute
typedef uint8_t EFF_CEN_SLEW_RATE_SPCKE_SCHMOO_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_SPCKE_SCHMOO_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_SLEW_RATE_ADDR_SCHMOO attribute
typedef uint8_t EFF_CEN_SLEW_RATE_ADDR_SCHMOO_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_ADDR_SCHMOO_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_SLEW_RATE_CNTL_SCHMOO attribute
typedef uint8_t EFF_CEN_SLEW_RATE_CNTL_SCHMOO_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_CNTL_SCHMOO_type[2];

// Type aliases and/or sizes for ATTR_EFF_DRAM_WR_VREF_SCHMOO attribute
typedef uint32_t EFF_DRAM_WR_VREF_SCHMOO_ATTR[2];
typedef uint32_t ATTR_EFF_DRAM_WR_VREF_SCHMOO_type[2];

// Type aliases and/or sizes for ATTR_EFF_DRAM_WRDDR4_VREF_SCHMOO attribute
typedef uint32_t EFF_DRAM_WRDDR4_VREF_SCHMOO_ATTR[2];
typedef uint32_t ATTR_EFF_DRAM_WRDDR4_VREF_SCHMOO_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_RD_VREF_SCHMOO attribute
typedef uint32_t EFF_CEN_RD_VREF_SCHMOO_ATTR[2];
typedef uint32_t ATTR_EFF_CEN_RD_VREF_SCHMOO_type[2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_SIZE attribute
typedef uint8_t EFF_DIMM_SIZE_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_SIZE_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DRAM_BANKS attribute
typedef uint8_t EFF_DRAM_BANKS_ATTR;
typedef uint8_t ATTR_EFF_DRAM_BANKS_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_ROWS attribute
typedef uint8_t EFF_DRAM_ROWS_ATTR;
typedef uint8_t ATTR_EFF_DRAM_ROWS_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_COLS attribute
typedef uint8_t EFF_DRAM_COLS_ATTR;
typedef uint8_t ATTR_EFF_DRAM_COLS_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_DENSITY attribute
typedef uint8_t EFF_DRAM_DENSITY_ATTR;
typedef uint8_t ATTR_EFF_DRAM_DENSITY_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_TRCD attribute
typedef uint8_t EFF_DRAM_TRCD_ATTR;
typedef uint8_t ATTR_EFF_DRAM_TRCD_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_TRRD attribute
typedef uint8_t EFF_DRAM_TRRD_ATTR;
typedef uint8_t ATTR_EFF_DRAM_TRRD_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_TRP attribute
typedef uint8_t EFF_DRAM_TRP_ATTR;
typedef uint8_t ATTR_EFF_DRAM_TRP_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_TRAS attribute
typedef uint8_t EFF_DRAM_TRAS_ATTR;
typedef uint8_t ATTR_EFF_DRAM_TRAS_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_TRC attribute
typedef uint8_t EFF_DRAM_TRC_ATTR;
typedef uint8_t ATTR_EFF_DRAM_TRC_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_TRFI attribute
typedef uint32_t EFF_DRAM_TRFI_ATTR;
typedef uint32_t ATTR_EFF_DRAM_TRFI_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_TRFC attribute
typedef uint32_t EFF_DRAM_TRFC_ATTR;
typedef uint32_t ATTR_EFF_DRAM_TRFC_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_TWTR attribute
typedef uint8_t EFF_DRAM_TWTR_ATTR;
typedef uint8_t ATTR_EFF_DRAM_TWTR_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_TRTP attribute
typedef uint8_t EFF_DRAM_TRTP_ATTR;
typedef uint8_t ATTR_EFF_DRAM_TRTP_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_TFAW attribute
typedef uint8_t EFF_DRAM_TFAW_ATTR;
typedef uint8_t ATTR_EFF_DRAM_TFAW_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_BL attribute
typedef uint8_t EFF_DRAM_BL_ATTR;
typedef uint8_t ATTR_EFF_DRAM_BL_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_CL attribute
typedef uint8_t EFF_DRAM_CL_ATTR;
typedef uint8_t ATTR_EFF_DRAM_CL_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_AL attribute
typedef uint8_t EFF_DRAM_AL_ATTR;
typedef uint8_t ATTR_EFF_DRAM_AL_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_CWL attribute
typedef uint8_t EFF_DRAM_CWL_ATTR;
typedef uint8_t ATTR_EFF_DRAM_CWL_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_RBT attribute
typedef uint8_t EFF_DRAM_RBT_ATTR;
typedef uint8_t ATTR_EFF_DRAM_RBT_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_TM attribute
typedef uint8_t EFF_DRAM_TM_ATTR;
typedef uint8_t ATTR_EFF_DRAM_TM_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_DLL_RESET attribute
typedef uint8_t EFF_DRAM_DLL_RESET_ATTR;
typedef uint8_t ATTR_EFF_DRAM_DLL_RESET_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_WR attribute
typedef uint8_t EFF_DRAM_WR_ATTR;
typedef uint8_t ATTR_EFF_DRAM_WR_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_DLL_PPD attribute
typedef uint8_t EFF_DRAM_DLL_PPD_ATTR;
typedef uint8_t ATTR_EFF_DRAM_DLL_PPD_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_DLL_ENABLE attribute
typedef uint8_t EFF_DRAM_DLL_ENABLE_ATTR;
typedef uint8_t ATTR_EFF_DRAM_DLL_ENABLE_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_TDQS attribute
typedef uint8_t EFF_DRAM_TDQS_ATTR;
typedef uint8_t ATTR_EFF_DRAM_TDQS_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_WR_LVL_ENABLE attribute
typedef uint8_t EFF_DRAM_WR_LVL_ENABLE_ATTR;
typedef uint8_t ATTR_EFF_DRAM_WR_LVL_ENABLE_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_OUTPUT_BUFFER attribute
typedef uint8_t EFF_DRAM_OUTPUT_BUFFER_ATTR;
typedef uint8_t ATTR_EFF_DRAM_OUTPUT_BUFFER_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_PASR attribute
typedef uint8_t EFF_DRAM_PASR_ATTR;
typedef uint8_t ATTR_EFF_DRAM_PASR_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_ASR attribute
typedef uint8_t EFF_DRAM_ASR_ATTR;
typedef uint8_t ATTR_EFF_DRAM_ASR_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_SRT attribute
typedef uint8_t EFF_DRAM_SRT_ATTR;
typedef uint8_t ATTR_EFF_DRAM_SRT_type;

// Type aliases and/or sizes for ATTR_EFF_MPR_LOC attribute
typedef uint8_t EFF_MPR_LOC_ATTR;
typedef uint8_t ATTR_EFF_MPR_LOC_type;

// Type aliases and/or sizes for ATTR_EFF_MPR_MODE attribute
typedef uint8_t EFF_MPR_MODE_ATTR;
typedef uint8_t ATTR_EFF_MPR_MODE_type;

// Type aliases and/or sizes for ATTR_EFF_DIMM_RCD_CNTL_WORD_0_15 attribute
typedef uint64_t EFF_DIMM_RCD_CNTL_WORD_0_15_ATTR[2][2];
typedef uint64_t ATTR_EFF_DIMM_RCD_CNTL_WORD_0_15_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_RCD_IBT attribute
typedef uint32_t EFF_DIMM_RCD_IBT_ATTR[2][2];
typedef uint32_t ATTR_EFF_DIMM_RCD_IBT_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_RCD_MIRROR_MODE attribute
typedef uint8_t EFF_DIMM_RCD_MIRROR_MODE_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_RCD_MIRROR_MODE_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_SCHMOO_MODE attribute
typedef uint8_t EFF_SCHMOO_MODE_ATTR;
typedef uint8_t ATTR_EFF_SCHMOO_MODE_type;

// Type aliases and/or sizes for ATTR_EFF_SCHMOO_ADDR_MODE attribute
typedef uint8_t EFF_SCHMOO_ADDR_MODE_ATTR;
typedef uint8_t ATTR_EFF_SCHMOO_ADDR_MODE_type;

// Type aliases and/or sizes for ATTR_EFF_SCHMOO_TEST_VALID attribute
typedef uint8_t EFF_SCHMOO_TEST_VALID_ATTR;
typedef uint8_t ATTR_EFF_SCHMOO_TEST_VALID_type;

// Type aliases and/or sizes for ATTR_EFF_SCHMOO_PARAM_VALID attribute
typedef uint8_t EFF_SCHMOO_PARAM_VALID_ATTR;
typedef uint8_t ATTR_EFF_SCHMOO_PARAM_VALID_type;

// Type aliases and/or sizes for ATTR_EFF_SCHMOO_WR_EYE_MIN_MARGIN attribute
typedef uint8_t EFF_SCHMOO_WR_EYE_MIN_MARGIN_ATTR;
typedef uint8_t ATTR_EFF_SCHMOO_WR_EYE_MIN_MARGIN_type;

// Type aliases and/or sizes for ATTR_EFF_SCHMOO_RD_EYE_MIN_MARGIN attribute
typedef uint8_t EFF_SCHMOO_RD_EYE_MIN_MARGIN_ATTR;
typedef uint8_t ATTR_EFF_SCHMOO_RD_EYE_MIN_MARGIN_type;

// Type aliases and/or sizes for ATTR_EFF_SCHMOO_DQS_CLK_MIN_MARGIN attribute
typedef uint8_t EFF_SCHMOO_DQS_CLK_MIN_MARGIN_ATTR;
typedef uint8_t ATTR_EFF_SCHMOO_DQS_CLK_MIN_MARGIN_type;

// Type aliases and/or sizes for ATTR_EFF_SCHMOO_RD_GATE_MIN_MARGIN attribute
typedef uint8_t EFF_SCHMOO_RD_GATE_MIN_MARGIN_ATTR;
typedef uint8_t ATTR_EFF_SCHMOO_RD_GATE_MIN_MARGIN_type;

// Type aliases and/or sizes for ATTR_EFF_SCHMOO_ADDR_CMD_MIN_MARGIN attribute
typedef uint8_t EFF_SCHMOO_ADDR_CMD_MIN_MARGIN_ATTR;
typedef uint8_t ATTR_EFF_SCHMOO_ADDR_CMD_MIN_MARGIN_type;

// Type aliases and/or sizes for ATTR_EFF_MEMCAL_INTERVAL attribute
typedef uint32_t EFF_MEMCAL_INTERVAL_ATTR;
typedef uint32_t ATTR_EFF_MEMCAL_INTERVAL_type;

// Type aliases and/or sizes for ATTR_EFF_ZQCAL_INTERVAL attribute
typedef uint32_t EFF_ZQCAL_INTERVAL_ATTR;
typedef uint32_t ATTR_EFF_ZQCAL_INTERVAL_type;

// Type aliases and/or sizes for ATTR_EFF_IBM_TYPE attribute
typedef uint8_t EFF_IBM_TYPE_ATTR[2][2];
typedef uint8_t ATTR_EFF_IBM_TYPE_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_NUM_DROPS_PER_PORT attribute
typedef uint8_t EFF_NUM_DROPS_PER_PORT_ATTR;
typedef uint8_t ATTR_EFF_NUM_DROPS_PER_PORT_type;

// Type aliases and/or sizes for ATTR_EFF_STACK_TYPE attribute
typedef uint8_t EFF_STACK_TYPE_ATTR[2][2];
typedef uint8_t ATTR_EFF_STACK_TYPE_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_NUM_MASTER_RANKS_PER_DIMM attribute
typedef uint8_t EFF_NUM_MASTER_RANKS_PER_DIMM_ATTR[2][2];
typedef uint8_t ATTR_EFF_NUM_MASTER_RANKS_PER_DIMM_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_NUM_PACKAGES_PER_RANK attribute
typedef uint8_t EFF_NUM_PACKAGES_PER_RANK_ATTR[2][2];
typedef uint8_t ATTR_EFF_NUM_PACKAGES_PER_RANK_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_NUM_DIES_PER_PACKAGE attribute
typedef uint8_t EFF_NUM_DIES_PER_PACKAGE_ATTR[2][2];
typedef uint8_t ATTR_EFF_NUM_DIES_PER_PACKAGE_type[2][2];

// Type aliases and/or sizes for ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_MBA attribute
typedef uint32_t MSS_MEM_THROTTLE_NUMERATOR_PER_MBA_ATTR;
typedef uint32_t ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_MBA_type;

// Type aliases and/or sizes for ATTR_MSS_MEM_THROTTLE_DENOMINATOR attribute
typedef uint32_t MSS_MEM_THROTTLE_DENOMINATOR_ATTR;
typedef uint32_t ATTR_MSS_MEM_THROTTLE_DENOMINATOR_type;

// Type aliases and/or sizes for ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_CHIP attribute
typedef uint32_t MSS_MEM_THROTTLE_NUMERATOR_PER_CHIP_ATTR;
typedef uint32_t ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_CHIP_type;

// Type aliases and/or sizes for ATTR_MSS_MEM_WATT_TARGET attribute
typedef uint32_t MSS_MEM_WATT_TARGET_ATTR;
typedef uint32_t ATTR_MSS_MEM_WATT_TARGET_type;

// Type aliases and/or sizes for ATTR_MSS_POWER_SLOPE attribute
typedef uint32_t MSS_POWER_SLOPE_ATTR[2][2];
typedef uint32_t ATTR_MSS_POWER_SLOPE_type[2][2];

// Type aliases and/or sizes for ATTR_MSS_POWER_SLOPE2 attribute
typedef uint32_t MSS_POWER_SLOPE2_ATTR[2][2];
typedef uint32_t ATTR_MSS_POWER_SLOPE2_type[2][2];

// Type aliases and/or sizes for ATTR_MSS_POWER_INT attribute
typedef uint32_t MSS_POWER_INT_ATTR[2][2];
typedef uint32_t ATTR_MSS_POWER_INT_type[2][2];

// Type aliases and/or sizes for ATTR_MSS_POWER_INT2 attribute
typedef uint32_t MSS_POWER_INT2_ATTR[2][2];
typedef uint32_t ATTR_MSS_POWER_INT2_type[2][2];

// Type aliases and/or sizes for ATTR_MSS_TOTAL_POWER_SLOPE attribute
typedef uint32_t MSS_TOTAL_POWER_SLOPE_ATTR[2][2];
typedef uint32_t ATTR_MSS_TOTAL_POWER_SLOPE_type[2][2];

// Type aliases and/or sizes for ATTR_MSS_TOTAL_POWER_SLOPE2 attribute
typedef uint32_t MSS_TOTAL_POWER_SLOPE2_ATTR[2][2];
typedef uint32_t ATTR_MSS_TOTAL_POWER_SLOPE2_type[2][2];

// Type aliases and/or sizes for ATTR_MSS_TOTAL_POWER_INT attribute
typedef uint32_t MSS_TOTAL_POWER_INT_ATTR[2][2];
typedef uint32_t ATTR_MSS_TOTAL_POWER_INT_type[2][2];

// Type aliases and/or sizes for ATTR_MSS_TOTAL_POWER_INT2 attribute
typedef uint32_t MSS_TOTAL_POWER_INT2_ATTR[2][2];
typedef uint32_t ATTR_MSS_TOTAL_POWER_INT2_type[2][2];

// Type aliases and/or sizes for ATTR_MSS_DIMM_MAXBANDWIDTH_GBS attribute
typedef uint32_t MSS_DIMM_MAXBANDWIDTH_GBS_ATTR[2][2];
typedef uint32_t ATTR_MSS_DIMM_MAXBANDWIDTH_GBS_type[2][2];

// Type aliases and/or sizes for ATTR_MSS_DIMM_MAXBANDWIDTH_MRS attribute
typedef uint32_t MSS_DIMM_MAXBANDWIDTH_MRS_ATTR[2][2];
typedef uint32_t ATTR_MSS_DIMM_MAXBANDWIDTH_MRS_type[2][2];

// Type aliases and/or sizes for ATTR_MSS_CHANNEL_MAXBANDWIDTH_GBS attribute
typedef uint32_t MSS_CHANNEL_MAXBANDWIDTH_GBS_ATTR[2];
typedef uint32_t ATTR_MSS_CHANNEL_MAXBANDWIDTH_GBS_type[2];

// Type aliases and/or sizes for ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_GBS attribute
typedef uint32_t MSS_CHANNEL_PAIR_MAXBANDWIDTH_GBS_ATTR[2];
typedef uint32_t ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_GBS_type[2];

// Type aliases and/or sizes for ATTR_MSS_CHANNEL_MAXBANDWIDTH_MRS attribute
typedef uint32_t MSS_CHANNEL_MAXBANDWIDTH_MRS_ATTR[2];
typedef uint32_t ATTR_MSS_CHANNEL_MAXBANDWIDTH_MRS_type[2];

// Type aliases and/or sizes for ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_MRS attribute
typedef uint32_t MSS_CHANNEL_PAIR_MAXBANDWIDTH_MRS_ATTR[2];
typedef uint32_t ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_MRS_type[2];

// Type aliases and/or sizes for ATTR_MSS_DIMM_MAXPOWER attribute
typedef uint32_t MSS_DIMM_MAXPOWER_ATTR[2][2];
typedef uint32_t ATTR_MSS_DIMM_MAXPOWER_type[2][2];

// Type aliases and/or sizes for ATTR_MSS_CHANNEL_MAXPOWER attribute
typedef uint32_t MSS_CHANNEL_MAXPOWER_ATTR[2];
typedef uint32_t ATTR_MSS_CHANNEL_MAXPOWER_type[2];

// Type aliases and/or sizes for ATTR_MSS_CHANNEL_PAIR_MAXPOWER attribute
typedef uint32_t MSS_CHANNEL_PAIR_MAXPOWER_ATTR;
typedef uint32_t ATTR_MSS_CHANNEL_PAIR_MAXPOWER_type;

// Type aliases and/or sizes for ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_MBA attribute
typedef uint32_t MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_MBA_ATTR;
typedef uint32_t ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_MBA_type;

// Type aliases and/or sizes for ATTR_MSS_RUNTIME_MEM_THROTTLE_DENOMINATOR attribute
typedef uint32_t MSS_RUNTIME_MEM_THROTTLE_DENOMINATOR_ATTR;
typedef uint32_t ATTR_MSS_RUNTIME_MEM_THROTTLE_DENOMINATOR_type;

// Type aliases and/or sizes for ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_CHIP attribute
typedef uint32_t MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_CHIP_ATTR;
typedef uint32_t ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_CHIP_type;

// Type aliases and/or sizes for ATTR_MSS_ZSERIES attribute
typedef uint8_t MSS_ZSERIES_ATTR;
typedef uint8_t ATTR_MSS_ZSERIES_type;

// Type aliases and/or sizes for ATTR_MSS_NWELL_MISPLACEMENT attribute
typedef uint8_t MSS_NWELL_MISPLACEMENT_ATTR;
typedef uint8_t ATTR_MSS_NWELL_MISPLACEMENT_type;

// Type aliases and/or sizes for ATTR_MSS_INTERLEAVE_ENABLE attribute
typedef uint8_t MSS_INTERLEAVE_ENABLE_ATTR;
typedef uint8_t ATTR_MSS_INTERLEAVE_ENABLE_type;

// Type aliases and/or sizes for ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT attribute
typedef uint8_t MSS_MBA_ADDR_INTERLEAVE_BIT_ATTR;
typedef uint8_t ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT_type;

// Type aliases and/or sizes for ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE attribute
typedef uint8_t MSS_MBA_CACHELINE_INTERLEAVE_MODE_ATTR;
typedef uint8_t ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_type;

// Type aliases and/or sizes for ATTR_MSS_CACHE_ENABLE attribute
typedef uint8_t MSS_CACHE_ENABLE_ATTR;
typedef uint8_t ATTR_MSS_CACHE_ENABLE_type;

// Type aliases and/or sizes for ATTR_MSS_PREFETCH_ENABLE attribute
typedef uint8_t MSS_PREFETCH_ENABLE_ATTR;
typedef uint8_t ATTR_MSS_PREFETCH_ENABLE_type;

// Type aliases and/or sizes for ATTR_MSS_CLEANER_ENABLE attribute
typedef uint8_t MSS_CLEANER_ENABLE_ATTR;
typedef uint8_t ATTR_MSS_CLEANER_ENABLE_type;

// Type aliases and/or sizes for ATTR_MSS_LAB_OVERRIDE_FOR_MEM_PLL attribute
typedef uint8_t MSS_LAB_OVERRIDE_FOR_MEM_PLL_ATTR;
typedef uint8_t ATTR_MSS_LAB_OVERRIDE_FOR_MEM_PLL_type;

// Type aliases and/or sizes for ATTR_MSS_MEM_MC_IN_GROUP attribute
typedef uint8_t MSS_MEM_MC_IN_GROUP_ATTR[8];
typedef uint8_t ATTR_MSS_MEM_MC_IN_GROUP_type[8];

// Type aliases and/or sizes for ATTR_MSS_MCS_GROUP_32 attribute
typedef uint32_t MSS_MCS_GROUP_32_ATTR[16][16];
typedef uint32_t ATTR_MSS_MCS_GROUP_32_type[16][16];

// Type aliases and/or sizes for ATTR_MSS_EFF_DIMM_FUNCTIONAL_VECTOR attribute
typedef uint8_t MSS_EFF_DIMM_FUNCTIONAL_VECTOR_ATTR;
typedef uint8_t ATTR_MSS_EFF_DIMM_FUNCTIONAL_VECTOR_type;

// Type aliases and/or sizes for ATTR_MSS_CAL_STEP_ENABLE attribute
typedef uint8_t MSS_CAL_STEP_ENABLE_ATTR;
typedef uint8_t ATTR_MSS_CAL_STEP_ENABLE_type;

// Type aliases and/or sizes for ATTR_MSS_MEM_IPL_COMPLETE attribute
typedef uint8_t MSS_MEM_IPL_COMPLETE_ATTR;
typedef uint8_t ATTR_MSS_MEM_IPL_COMPLETE_type;

// Type aliases and/or sizes for ATTR_MSS_SLEW_RATE_DATA attribute
typedef uint8_t MSS_SLEW_RATE_DATA_ATTR[2][ 4][ 4];
typedef uint8_t ATTR_MSS_SLEW_RATE_DATA_type[2][ 4][ 4];

// Type aliases and/or sizes for ATTR_MSS_SLEW_RATE_ADR attribute
typedef uint8_t MSS_SLEW_RATE_ADR_ATTR[2][ 4][ 4];
typedef uint8_t ATTR_MSS_SLEW_RATE_ADR_type[2][ 4][ 4];

// Type aliases and/or sizes for ATTR_ECID attribute
typedef uint64_t ECID_ATTR[2];
typedef uint64_t ATTR_ECID_type[2];

// Type aliases and/or sizes for ATTR_MSS_ALLOW_SINGLE_PORT attribute
typedef uint8_t MSS_ALLOW_SINGLE_PORT_ATTR;
typedef uint8_t ATTR_MSS_ALLOW_SINGLE_PORT_type;

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M0_CLK_P0 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M0_CLK_P0_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M0_CLK_P0_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M0_CLK_P1 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M0_CLK_P1_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M0_CLK_P1_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M1_CLK_P0 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M1_CLK_P0_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M1_CLK_P0_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M1_CLK_P1 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M1_CLK_P1_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M1_CLK_P1_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A0 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A0_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A0_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A1 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A1_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A1_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A2 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A2_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A2_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A3 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A3_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A3_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A4 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A4_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A4_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A5 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A5_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A5_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A6 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A6_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A6_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A7 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A7_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A7_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A8 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A8_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A8_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A9 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A9_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A9_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A10 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A10_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A10_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A11 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A11_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A11_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A12 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A12_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A12_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A13 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A13_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A13_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A14 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A14_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A14_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_A15 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_A15_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_A15_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_BA0 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_BA0_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_BA0_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_BA1 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_BA1_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_BA1_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_BA2 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_BA2_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_BA2_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_CASN attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_CASN_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_CASN_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_RASN attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_RASN_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_RASN_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_CMD_WEN attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_CMD_WEN_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_CMD_WEN_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_PAR attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_PAR_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_PAR_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M_ACTN attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M_ACTN_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M_ACTN_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CKE0 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M0_CNTL_CKE0_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CKE0_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CKE1 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M0_CNTL_CKE1_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CKE1_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CKE2 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M0_CNTL_CKE2_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CKE2_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CKE3 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M0_CNTL_CKE3_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CKE3_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CSN0 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M0_CNTL_CSN0_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CSN0_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CSN1 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M0_CNTL_CSN1_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CSN1_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CSN2 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M0_CNTL_CSN2_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CSN2_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CSN3 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M0_CNTL_CSN3_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_CSN3_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_ODT0 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M0_CNTL_ODT0_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_ODT0_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_ODT1 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M0_CNTL_ODT1_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M0_CNTL_ODT1_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CKE0 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M1_CNTL_CKE0_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CKE0_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CKE1 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M1_CNTL_CKE1_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CKE1_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CKE2 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M1_CNTL_CKE2_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CKE2_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CKE3 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M1_CNTL_CKE3_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CKE3_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CSN0 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M1_CNTL_CSN0_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CSN0_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CSN1 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M1_CNTL_CSN1_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CSN1_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CSN2 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M1_CNTL_CSN2_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CSN2_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CSN3 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M1_CNTL_CSN3_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_CSN3_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_ODT0 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M1_CNTL_ODT0_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_ODT0_type[2];

// Type aliases and/or sizes for ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_ODT1 attribute
typedef uint8_t EFF_CEN_PHASE_ROT_M1_CNTL_ODT1_ATTR[2];
typedef uint8_t ATTR_EFF_CEN_PHASE_ROT_M1_CNTL_ODT1_type[2];

// Type aliases and/or sizes for ATTR_MSS_DQS_SWIZZLE_TYPE attribute
typedef uint8_t MSS_DQS_SWIZZLE_TYPE_ATTR;
typedef uint8_t ATTR_MSS_DQS_SWIZZLE_TYPE_type;

// Type aliases and/or sizes for ATTR_MSS_MCS_GROUP attribute
typedef uint8_t MSS_MCS_GROUP_ATTR[16][16];
typedef uint8_t ATTR_MSS_MCS_GROUP_type[16][16];

// Type aliases and/or sizes for ATTR_EFF_CKE_MAP attribute
typedef uint8_t EFF_CKE_MAP_ATTR[2][2][4];
typedef uint8_t ATTR_EFF_CKE_MAP_type[2][2][4];

// Type aliases and/or sizes for ATTR_EFF_SPCKE_MAP attribute
typedef uint8_t EFF_SPCKE_MAP_ATTR[2][2][4];
typedef uint8_t ATTR_EFF_SPCKE_MAP_type[2][2][4];

// Type aliases and/or sizes for ATTR_EFF_DIMM_SPARE attribute
typedef uint8_t EFF_DIMM_SPARE_ATTR[2][2][4];
typedef uint8_t ATTR_EFF_DIMM_SPARE_type[2][2][4];

// Type aliases and/or sizes for ATTR_MSS_PSRO attribute
typedef uint8_t MSS_PSRO_ATTR;
typedef uint8_t ATTR_MSS_PSRO_type;

// Type aliases and/or sizes for ATTR_EI_BUS_TX_LANE_INVERT attribute
typedef uint32_t EI_BUS_TX_LANE_INVERT_ATTR;
typedef uint32_t ATTR_EI_BUS_TX_LANE_INVERT_type;

// Type aliases and/or sizes for ATTR_PROC_PERV_BNDY_PLL_CHIPLET_ID attribute
typedef uint8_t PROC_PERV_BNDY_PLL_CHIPLET_ID_ATTR;
typedef uint8_t ATTR_PROC_PERV_BNDY_PLL_CHIPLET_ID_type;

// Type aliases and/or sizes for ATTR_PROC_PB_BNDY_DMIPLL_CHIPLET_ID attribute
typedef uint8_t PROC_PB_BNDY_DMIPLL_CHIPLET_ID_ATTR;
typedef uint8_t ATTR_PROC_PB_BNDY_DMIPLL_CHIPLET_ID_type;

// Type aliases and/or sizes for ATTR_PROC_AB_BNDY_PLL_CHIPLET_ID attribute
typedef uint8_t PROC_AB_BNDY_PLL_CHIPLET_ID_ATTR;
typedef uint8_t ATTR_PROC_AB_BNDY_PLL_CHIPLET_ID_type;

// Type aliases and/or sizes for ATTR_PROC_PCI_BNDY_PLL_CHIPLET_ID attribute
typedef uint8_t PROC_PCI_BNDY_PLL_CHIPLET_ID_ATTR;
typedef uint8_t ATTR_PROC_PCI_BNDY_PLL_CHIPLET_ID_type;

// Type aliases and/or sizes for ATTR_PROC_PERV_BNDY_PLL_SCAN_SELECT attribute
typedef uint32_t PROC_PERV_BNDY_PLL_SCAN_SELECT_ATTR;
typedef uint32_t ATTR_PROC_PERV_BNDY_PLL_SCAN_SELECT_type;

// Type aliases and/or sizes for ATTR_PROC_PB_BNDY_DMIPLL_SCAN_SELECT attribute
typedef uint32_t PROC_PB_BNDY_DMIPLL_SCAN_SELECT_ATTR;
typedef uint32_t ATTR_PROC_PB_BNDY_DMIPLL_SCAN_SELECT_type;

// Type aliases and/or sizes for ATTR_PROC_AB_BNDY_PLL_SCAN_SELECT attribute
typedef uint32_t PROC_AB_BNDY_PLL_SCAN_SELECT_ATTR;
typedef uint32_t ATTR_PROC_AB_BNDY_PLL_SCAN_SELECT_type;

// Type aliases and/or sizes for ATTR_PROC_PCI_BNDY_PLL_SCAN_SELECT attribute
typedef uint32_t PROC_PCI_BNDY_PLL_SCAN_SELECT_ATTR;
typedef uint32_t ATTR_PROC_PCI_BNDY_PLL_SCAN_SELECT_type;

// Type aliases and/or sizes for ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES attribute
typedef uint8_t SBE_SEEPROM_I2C_ADDRESS_BYTES_ATTR;
typedef uint8_t ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES_type;

// Type aliases and/or sizes for ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS attribute
typedef uint8_t SBE_SEEPROM_I2C_DEVICE_ADDRESS_ATTR[2];
typedef uint8_t ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS_type[2];

// Type aliases and/or sizes for ATTR_SBE_SEEPROM_I2C_PORT attribute
typedef uint8_t SBE_SEEPROM_I2C_PORT_ATTR[2];
typedef uint8_t ATTR_SBE_SEEPROM_I2C_PORT_type[2];

// Type aliases and/or sizes for ATTR_PNOR_I2C_ADDRESS_BYTES attribute
typedef uint8_t PNOR_I2C_ADDRESS_BYTES_ATTR;
typedef uint8_t ATTR_PNOR_I2C_ADDRESS_BYTES_type;

// Type aliases and/or sizes for ATTR_SYNC_BETWEEN_STEPS attribute
typedef uint8_t SYNC_BETWEEN_STEPS_ATTR;
typedef uint8_t ATTR_SYNC_BETWEEN_STEPS_type;

// Type aliases and/or sizes for ATTR_PROC_SELECT_BOOT_MASTER attribute
typedef uint8_t PROC_SELECT_BOOT_MASTER_ATTR;
typedef uint8_t ATTR_PROC_SELECT_BOOT_MASTER_type;

// Type aliases and/or sizes for ATTR_PROC_SELECT_SEEPROM_IMAGE attribute
typedef uint8_t PROC_SELECT_SEEPROM_IMAGE_ATTR;
typedef uint8_t ATTR_PROC_SELECT_SEEPROM_IMAGE_type;

// Type aliases and/or sizes for ATTR_PROC_SELECT_BOOT_SEEPROM_IMAGE attribute
typedef uint8_t PROC_SELECT_BOOT_SEEPROM_IMAGE_ATTR;
typedef uint8_t ATTR_PROC_SELECT_BOOT_SEEPROM_IMAGE_type;

// Type aliases and/or sizes for ATTR_ENABLED_THREADS attribute
typedef uint64_t ENABLED_THREADS_ATTR;
typedef uint64_t ATTR_ENABLED_THREADS_type;

// Type aliases and/or sizes for ATTR_MAX_PROC_CHIPS_PER_NODE attribute
typedef uint8_t MAX_PROC_CHIPS_PER_NODE_ATTR;
typedef uint8_t ATTR_MAX_PROC_CHIPS_PER_NODE_type;

// Type aliases and/or sizes for ATTR_MAX_EXS_PER_PROC_CHIP attribute
typedef uint8_t MAX_EXS_PER_PROC_CHIP_ATTR;
typedef uint8_t ATTR_MAX_EXS_PER_PROC_CHIP_type;

// Type aliases and/or sizes for ATTR_MAX_DIMMS_PER_MBA_PORT attribute
typedef uint8_t MAX_DIMMS_PER_MBA_PORT_ATTR;
typedef uint8_t ATTR_MAX_DIMMS_PER_MBA_PORT_type;

// Type aliases and/or sizes for ATTR_MAX_MBA_PORTS_PER_MBA attribute
typedef uint8_t MAX_MBA_PORTS_PER_MBA_ATTR;
typedef uint8_t ATTR_MAX_MBA_PORTS_PER_MBA_type;

// Type aliases and/or sizes for ATTR_MAX_MBAS_PER_MEMBUF_CHIP attribute
typedef uint8_t MAX_MBAS_PER_MEMBUF_CHIP_ATTR;
typedef uint8_t ATTR_MAX_MBAS_PER_MEMBUF_CHIP_type;

// Type aliases and/or sizes for ATTR_MAX_CHIPLETS_PER_PROC attribute
typedef uint8_t MAX_CHIPLETS_PER_PROC_ATTR;
typedef uint8_t ATTR_MAX_CHIPLETS_PER_PROC_type;

// Type aliases and/or sizes for ATTR_MAX_MCS_PER_SYSTEM attribute
typedef uint8_t MAX_MCS_PER_SYSTEM_ATTR;
typedef uint8_t ATTR_MAX_MCS_PER_SYSTEM_type;

// Type aliases and/or sizes for ATTR_DMI_REFCLOCK_SWIZZLE attribute
typedef uint8_t DMI_REFCLOCK_SWIZZLE_ATTR;
typedef uint8_t ATTR_DMI_REFCLOCK_SWIZZLE_type;

// Type aliases and/or sizes for ATTR_EI_BUS_TX_MSBSWAP attribute
typedef uint8_t EI_BUS_TX_MSBSWAP_ATTR;
typedef uint8_t ATTR_EI_BUS_TX_MSBSWAP_type;

// Type aliases and/or sizes for ATTR_MSS_FREQ_OVERRIDE attribute
typedef uint32_t MSS_FREQ_OVERRIDE_ATTR;
typedef uint32_t ATTR_MSS_FREQ_OVERRIDE_type;

// Type aliases and/or sizes for ATTR_MCBIST_PATTERN attribute
typedef uint32_t MCBIST_PATTERN_ATTR;
typedef uint32_t ATTR_MCBIST_PATTERN_type;

// Type aliases and/or sizes for ATTR_MCBIST_TEST_TYPE attribute
typedef uint32_t MCBIST_TEST_TYPE_ATTR;
typedef uint32_t ATTR_MCBIST_TEST_TYPE_type;

// Type aliases and/or sizes for ATTR_MCBIST_PRINTING_DISABLE attribute
typedef uint8_t MCBIST_PRINTING_DISABLE_ATTR;
typedef uint8_t ATTR_MCBIST_PRINTING_DISABLE_type;

// Type aliases and/or sizes for ATTR_MCBIST_DATA_ENABLE attribute
typedef uint8_t MCBIST_DATA_ENABLE_ATTR;
typedef uint8_t ATTR_MCBIST_DATA_ENABLE_type;

// Type aliases and/or sizes for ATTR_MCBIST_USER_RANK attribute
typedef uint8_t MCBIST_USER_RANK_ATTR;
typedef uint8_t ATTR_MCBIST_USER_RANK_type;

// Type aliases and/or sizes for ATTR_MCBIST_USER_BANK attribute
typedef uint8_t MCBIST_USER_BANK_ATTR;
typedef uint8_t ATTR_MCBIST_USER_BANK_type;

// Type aliases and/or sizes for ATTR_SCHMOO_MULTIPLE_SETUP_CALL attribute
typedef uint8_t SCHMOO_MULTIPLE_SETUP_CALL_ATTR;
typedef uint8_t ATTR_SCHMOO_MULTIPLE_SETUP_CALL_type;

// Type aliases and/or sizes for ATTR_MCBIST_ADDR_MODES attribute
typedef uint8_t MCBIST_ADDR_MODES_ATTR;
typedef uint8_t ATTR_MCBIST_ADDR_MODES_type;

// Type aliases and/or sizes for ATTR_MCBIST_RANK attribute
typedef uint8_t MCBIST_RANK_ATTR;
typedef uint8_t ATTR_MCBIST_RANK_type;

// Type aliases and/or sizes for ATTR_MCBIST_START_ADDR attribute
typedef uint64_t MCBIST_START_ADDR_ATTR;
typedef uint64_t ATTR_MCBIST_START_ADDR_type;

// Type aliases and/or sizes for ATTR_MCBIST_END_ADDR attribute
typedef uint64_t MCBIST_END_ADDR_ATTR;
typedef uint64_t ATTR_MCBIST_END_ADDR_type;

// Type aliases and/or sizes for ATTR_MCBIST_ERROR_CAPTURE attribute
typedef uint8_t MCBIST_ERROR_CAPTURE_ATTR;
typedef uint8_t ATTR_MCBIST_ERROR_CAPTURE_type;

// Type aliases and/or sizes for ATTR_MCBIST_MAX_TIMEOUT attribute
typedef uint64_t MCBIST_MAX_TIMEOUT_ATTR;
typedef uint64_t ATTR_MCBIST_MAX_TIMEOUT_type;

// Type aliases and/or sizes for ATTR_MCBIST_PRINT_PORT attribute
typedef uint8_t MCBIST_PRINT_PORT_ATTR;
typedef uint8_t ATTR_MCBIST_PRINT_PORT_type;

// Type aliases and/or sizes for ATTR_MCBIST_STOP_ON_ERROR attribute
typedef uint8_t MCBIST_STOP_ON_ERROR_ATTR;
typedef uint8_t ATTR_MCBIST_STOP_ON_ERROR_type;

// Type aliases and/or sizes for ATTR_MCBIST_DATA_SEED attribute
typedef uint32_t MCBIST_DATA_SEED_ATTR;
typedef uint32_t ATTR_MCBIST_DATA_SEED_type;

// Type aliases and/or sizes for ATTR_MCBIST_ADDR_INTER attribute
typedef uint8_t MCBIST_ADDR_INTER_ATTR;
typedef uint8_t ATTR_MCBIST_ADDR_INTER_type;

// Type aliases and/or sizes for ATTR_MCBIST_ADDR_NUM_ROWS attribute
typedef uint8_t MCBIST_ADDR_NUM_ROWS_ATTR;
typedef uint8_t ATTR_MCBIST_ADDR_NUM_ROWS_type;

// Type aliases and/or sizes for ATTR_MCBIST_ADDR_NUM_COLS attribute
typedef uint8_t MCBIST_ADDR_NUM_COLS_ATTR;
typedef uint8_t ATTR_MCBIST_ADDR_NUM_COLS_type;

// Type aliases and/or sizes for ATTR_MCBIST_ADDR_RANK attribute
typedef uint8_t MCBIST_ADDR_RANK_ATTR;
typedef uint8_t ATTR_MCBIST_ADDR_RANK_type;

// Type aliases and/or sizes for ATTR_MCBIST_ADDR_BANK attribute
typedef uint8_t MCBIST_ADDR_BANK_ATTR;
typedef uint8_t ATTR_MCBIST_ADDR_BANK_type;

// Type aliases and/or sizes for ATTR_MCBIST_ADDR_SLAVE_RANK_ON attribute
typedef uint8_t MCBIST_ADDR_SLAVE_RANK_ON_ATTR;
typedef uint8_t ATTR_MCBIST_ADDR_SLAVE_RANK_ON_type;

// Type aliases and/or sizes for ATTR_MCBIST_ADDR_STR_MAP attribute
typedef uint64_t MCBIST_ADDR_STR_MAP_ATTR;
typedef uint64_t ATTR_MCBIST_ADDR_STR_MAP_type;

// Type aliases and/or sizes for ATTR_MCBIST_ADDR_RAND attribute
typedef uint8_t MCBIST_ADDR_RAND_ATTR;
typedef uint8_t ATTR_MCBIST_ADDR_RAND_type;

// Type aliases and/or sizes for ATTR_PROC_PCIE_REFCLOCK_ENABLE attribute
typedef uint8_t PROC_PCIE_REFCLOCK_ENABLE_ATTR;
typedef uint8_t ATTR_PROC_PCIE_REFCLOCK_ENABLE_type;

// Type aliases and/or sizes for ATTR_PROC_PBIEX_ASYNC_SEL attribute
typedef uint8_t PROC_PBIEX_ASYNC_SEL_ATTR;
typedef uint8_t ATTR_PROC_PBIEX_ASYNC_SEL_type;

// Type aliases and/or sizes for ATTR_PROC_DCM_INSTALLED attribute
typedef uint8_t PROC_DCM_INSTALLED_ATTR;
typedef uint8_t ATTR_PROC_DCM_INSTALLED_type;

// Type aliases and/or sizes for ATTR_X_EREPAIR_THRESHOLD_FIELD attribute
typedef uint8_t X_EREPAIR_THRESHOLD_FIELD_ATTR;
typedef uint8_t ATTR_X_EREPAIR_THRESHOLD_FIELD_type;

// Type aliases and/or sizes for ATTR_A_EREPAIR_THRESHOLD_FIELD attribute
typedef uint8_t A_EREPAIR_THRESHOLD_FIELD_ATTR;
typedef uint8_t ATTR_A_EREPAIR_THRESHOLD_FIELD_type;

// Type aliases and/or sizes for ATTR_DMI_EREPAIR_THRESHOLD_FIELD attribute
typedef uint8_t DMI_EREPAIR_THRESHOLD_FIELD_ATTR;
typedef uint8_t ATTR_DMI_EREPAIR_THRESHOLD_FIELD_type;

// Type aliases and/or sizes for ATTR_X_EREPAIR_THRESHOLD_MNFG attribute
typedef uint8_t X_EREPAIR_THRESHOLD_MNFG_ATTR;
typedef uint8_t ATTR_X_EREPAIR_THRESHOLD_MNFG_type;

// Type aliases and/or sizes for ATTR_A_EREPAIR_THRESHOLD_MNFG attribute
typedef uint8_t A_EREPAIR_THRESHOLD_MNFG_ATTR;
typedef uint8_t ATTR_A_EREPAIR_THRESHOLD_MNFG_type;

// Type aliases and/or sizes for ATTR_DMI_EREPAIR_THRESHOLD_MNFG attribute
typedef uint8_t DMI_EREPAIR_THRESHOLD_MNFG_ATTR;
typedef uint8_t ATTR_DMI_EREPAIR_THRESHOLD_MNFG_type;

// Type aliases and/or sizes for ATTR_MEMB_TP_BNDY_PLL_SCAN_SELECT attribute
typedef uint32_t MEMB_TP_BNDY_PLL_SCAN_SELECT_ATTR;
typedef uint32_t ATTR_MEMB_TP_BNDY_PLL_SCAN_SELECT_type;

// Type aliases and/or sizes for ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_MBA attribute
typedef uint32_t MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_MBA_ATTR;
typedef uint32_t ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_MBA_type;

// Type aliases and/or sizes for ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_CHIP attribute
typedef uint32_t MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_CHIP_ATTR;
typedef uint32_t ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_CHIP_type;

// Type aliases and/or sizes for ATTR_MRW_THERMAL_MEMORY_POWER_LIMIT attribute
typedef uint32_t MRW_THERMAL_MEMORY_POWER_LIMIT_ATTR;
typedef uint32_t ATTR_MRW_THERMAL_MEMORY_POWER_LIMIT_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_LPASR attribute
typedef uint8_t EFF_DRAM_LPASR_ATTR;
typedef uint8_t ATTR_EFF_DRAM_LPASR_type;

// Type aliases and/or sizes for ATTR_EFF_MPR_PAGE attribute
typedef uint8_t EFF_MPR_PAGE_ATTR;
typedef uint8_t ATTR_EFF_MPR_PAGE_type;

// Type aliases and/or sizes for ATTR_EFF_GEARDOWN_MODE attribute
typedef uint8_t EFF_GEARDOWN_MODE_ATTR;
typedef uint8_t ATTR_EFF_GEARDOWN_MODE_type;

// Type aliases and/or sizes for ATTR_EFF_PER_DRAM_ACCESS attribute
typedef uint8_t EFF_PER_DRAM_ACCESS_ATTR;
typedef uint8_t ATTR_EFF_PER_DRAM_ACCESS_type;

// Type aliases and/or sizes for ATTR_EFF_TEMP_READOUT attribute
typedef uint8_t EFF_TEMP_READOUT_ATTR;
typedef uint8_t ATTR_EFF_TEMP_READOUT_type;

// Type aliases and/or sizes for ATTR_EFF_FINE_REFRESH_MODE attribute
typedef uint8_t EFF_FINE_REFRESH_MODE_ATTR;
typedef uint8_t ATTR_EFF_FINE_REFRESH_MODE_type;

// Type aliases and/or sizes for ATTR_EFF_CRC_WR_LATENCY attribute
typedef uint8_t EFF_CRC_WR_LATENCY_ATTR;
typedef uint8_t ATTR_EFF_CRC_WR_LATENCY_type;

// Type aliases and/or sizes for ATTR_EFF_MPR_RD_FORMAT attribute
typedef uint8_t EFF_MPR_RD_FORMAT_ATTR;
typedef uint8_t ATTR_EFF_MPR_RD_FORMAT_type;

// Type aliases and/or sizes for ATTR_EFF_MAX_POWERDOWN_MODE attribute
typedef uint8_t EFF_MAX_POWERDOWN_MODE_ATTR;
typedef uint8_t ATTR_EFF_MAX_POWERDOWN_MODE_type;

// Type aliases and/or sizes for ATTR_EFF_TEMP_REF_RANGE attribute
typedef uint8_t EFF_TEMP_REF_RANGE_ATTR;
typedef uint8_t ATTR_EFF_TEMP_REF_RANGE_type;

// Type aliases and/or sizes for ATTR_EFF_TEMP_REF_MODE attribute
typedef uint8_t EFF_TEMP_REF_MODE_ATTR;
typedef uint8_t ATTR_EFF_TEMP_REF_MODE_type;

// Type aliases and/or sizes for ATTR_EFF_INT_VREF_MON attribute
typedef uint8_t EFF_INT_VREF_MON_ATTR;
typedef uint8_t ATTR_EFF_INT_VREF_MON_type;

// Type aliases and/or sizes for ATTR_EFF_CS_CMD_LATENCY attribute
typedef uint8_t EFF_CS_CMD_LATENCY_ATTR;
typedef uint8_t ATTR_EFF_CS_CMD_LATENCY_type;

// Type aliases and/or sizes for ATTR_EFF_SELF_REF_ABORT attribute
typedef uint8_t EFF_SELF_REF_ABORT_ATTR;
typedef uint8_t ATTR_EFF_SELF_REF_ABORT_type;

// Type aliases and/or sizes for ATTR_EFF_RD_PREAMBLE_TRAIN attribute
typedef uint8_t EFF_RD_PREAMBLE_TRAIN_ATTR;
typedef uint8_t ATTR_EFF_RD_PREAMBLE_TRAIN_type;

// Type aliases and/or sizes for ATTR_EFF_RD_PREAMBLE attribute
typedef uint8_t EFF_RD_PREAMBLE_ATTR;
typedef uint8_t ATTR_EFF_RD_PREAMBLE_type;

// Type aliases and/or sizes for ATTR_EFF_WR_PREAMBLE attribute
typedef uint8_t EFF_WR_PREAMBLE_ATTR;
typedef uint8_t ATTR_EFF_WR_PREAMBLE_type;

// Type aliases and/or sizes for ATTR_EFF_CA_PARITY_LATENCY attribute
typedef uint8_t EFF_CA_PARITY_LATENCY_ATTR;
typedef uint8_t ATTR_EFF_CA_PARITY_LATENCY_type;

// Type aliases and/or sizes for ATTR_EFF_CRC_ERROR_CLEAR attribute
typedef uint8_t EFF_CRC_ERROR_CLEAR_ATTR;
typedef uint8_t ATTR_EFF_CRC_ERROR_CLEAR_type;

// Type aliases and/or sizes for ATTR_EFF_CA_PARITY_ERROR_STATUS attribute
typedef uint8_t EFF_CA_PARITY_ERROR_STATUS_ATTR;
typedef uint8_t ATTR_EFF_CA_PARITY_ERROR_STATUS_type;

// Type aliases and/or sizes for ATTR_EFF_ODT_INPUT_BUFF attribute
typedef uint8_t EFF_ODT_INPUT_BUFF_ATTR;
typedef uint8_t ATTR_EFF_ODT_INPUT_BUFF_type;

// Type aliases and/or sizes for ATTR_EFF_RTT_PARK attribute
typedef uint8_t EFF_RTT_PARK_ATTR[2][ 2][ 4];
typedef uint8_t ATTR_EFF_RTT_PARK_type[2][ 2][ 4];

// Type aliases and/or sizes for ATTR_EFF_CA_PARITY attribute
typedef uint8_t EFF_CA_PARITY_ATTR;
typedef uint8_t ATTR_EFF_CA_PARITY_type;

// Type aliases and/or sizes for ATTR_EFF_DATA_MASK attribute
typedef uint8_t EFF_DATA_MASK_ATTR;
typedef uint8_t ATTR_EFF_DATA_MASK_type;

// Type aliases and/or sizes for ATTR_EFF_WRITE_DBI attribute
typedef uint8_t EFF_WRITE_DBI_ATTR;
typedef uint8_t ATTR_EFF_WRITE_DBI_type;

// Type aliases and/or sizes for ATTR_EFF_READ_DBI attribute
typedef uint8_t EFF_READ_DBI_ATTR;
typedef uint8_t ATTR_EFF_READ_DBI_type;

// Type aliases and/or sizes for ATTR_VREF_DQ_TRAIN_VALUE attribute
typedef uint8_t VREF_DQ_TRAIN_VALUE_ATTR[2][2][4];
typedef uint8_t ATTR_VREF_DQ_TRAIN_VALUE_type[2][2][4];

// Type aliases and/or sizes for ATTR_VREF_DQ_TRAIN_RANGE attribute
typedef uint8_t VREF_DQ_TRAIN_RANGE_ATTR[2][2][4];
typedef uint8_t ATTR_VREF_DQ_TRAIN_RANGE_type[2][2][4];

// Type aliases and/or sizes for ATTR_VREF_DQ_TRAIN_ENABLE attribute
typedef uint8_t VREF_DQ_TRAIN_ENABLE_ATTR[2][2][4];
typedef uint8_t ATTR_VREF_DQ_TRAIN_ENABLE_type[2][2][4];

// Type aliases and/or sizes for ATTR_TCCD_L attribute
typedef uint8_t TCCD_L_ATTR;
typedef uint8_t ATTR_TCCD_L_type;

// Type aliases and/or sizes for ATTR_EFF_WRITE_CRC attribute
typedef uint8_t EFF_WRITE_CRC_ATTR;
typedef uint8_t ATTR_EFF_WRITE_CRC_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_2N_MODE_ENABLED attribute
typedef uint8_t EFF_DRAM_2N_MODE_ENABLED_ATTR;
typedef uint8_t ATTR_EFF_DRAM_2N_MODE_ENABLED_type;

// Type aliases and/or sizes for ATTR_MSS_DIMM_POWER_TEST_REV attribute
typedef uint8_t MSS_DIMM_POWER_TEST_REV_ATTR;
typedef uint8_t ATTR_MSS_DIMM_POWER_TEST_REV_type;

// Type aliases and/or sizes for ATTR_FRU_ID attribute
typedef uint32_t FRU_ID_ATTR;
typedef uint32_t ATTR_FRU_ID_type;

// Type aliases and/or sizes for ATTR_BMC_FRU_ID attribute
typedef uint32_t BMC_FRU_ID_ATTR;
typedef uint32_t ATTR_BMC_FRU_ID_type;

// Type aliases and/or sizes for ATTR_CENTAUR_ECID_FRU_ID attribute
typedef uint32_t CENTAUR_ECID_FRU_ID_ATTR;
typedef uint32_t ATTR_CENTAUR_ECID_FRU_ID_type;

// Type aliases and/or sizes for ATTR_PLCK_IPL_ATTR_OVERRIDES_EXIST attribute
typedef uint8_t PLCK_IPL_ATTR_OVERRIDES_EXIST_ATTR;
typedef uint8_t ATTR_PLCK_IPL_ATTR_OVERRIDES_EXIST_type;

// Type aliases and/or sizes for ATTR_DUMMY_PERSISTENCY attribute
typedef uint8_t DUMMY_PERSISTENCY_ATTR;
typedef uint8_t ATTR_DUMMY_PERSISTENCY_type;

// Type aliases and/or sizes for ATTR_IS_INTER_ENCLOSURE_BUS attribute
typedef uint8_t IS_INTER_ENCLOSURE_BUS_ATTR;
typedef uint8_t ATTR_IS_INTER_ENCLOSURE_BUS_type;

// Type aliases and/or sizes for ATTR_PEER_PATH attribute
typedef EntityPath PEER_PATH_ATTR;
typedef EntityPath ATTR_PEER_PATH_type;

// Type aliases and/or sizes for ATTR_PROC_HTM_BAR_SIZE attribute
typedef uint64_t PROC_HTM_BAR_SIZE_ATTR;
typedef uint64_t ATTR_PROC_HTM_BAR_SIZE_type;

// Type aliases and/or sizes for ATTR_PROC_OCC_SANDBOX_SIZE attribute
typedef uint64_t PROC_OCC_SANDBOX_SIZE_ATTR;
typedef uint64_t ATTR_PROC_OCC_SANDBOX_SIZE_type;

// Type aliases and/or sizes for ATTR_PROC_HTM_BAR_BASE_ADDR attribute
typedef uint64_t PROC_HTM_BAR_BASE_ADDR_ATTR;
typedef uint64_t ATTR_PROC_HTM_BAR_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_PROC_OCC_SANDBOX_BASE_ADDR attribute
typedef uint64_t PROC_OCC_SANDBOX_BASE_ADDR_ATTR;
typedef uint64_t ATTR_PROC_OCC_SANDBOX_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_MEM_MIRROR_PLACEMENT_POLICY attribute
typedef uint8_t MEM_MIRROR_PLACEMENT_POLICY_ATTR;
typedef uint8_t ATTR_MEM_MIRROR_PLACEMENT_POLICY_type;

// Type aliases and/or sizes for ATTR_PROC_AS_MMIO_BAR_BASE_ADDR attribute
typedef uint64_t PROC_AS_MMIO_BAR_BASE_ADDR_ATTR;
typedef uint64_t ATTR_PROC_AS_MMIO_BAR_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_PROC_AS_MMIO_BAR_ENABLE attribute
typedef uint8_t PROC_AS_MMIO_BAR_ENABLE_ATTR;
typedef uint8_t ATTR_PROC_AS_MMIO_BAR_ENABLE_type;

// Type aliases and/or sizes for ATTR_PROC_AS_MMIO_BAR_SIZE attribute
typedef uint64_t PROC_AS_MMIO_BAR_SIZE_ATTR;
typedef uint64_t ATTR_PROC_AS_MMIO_BAR_SIZE_type;

// Type aliases and/or sizes for ATTR_RISK_LEVEL attribute
typedef uint32_t RISK_LEVEL_ATTR;
typedef uint32_t ATTR_RISK_LEVEL_type;

// Type aliases and/or sizes for ATTR_MSS_FREQ_BIAS_PERCENTAGE attribute
typedef uint32_t MSS_FREQ_BIAS_PERCENTAGE_ATTR;
typedef uint32_t ATTR_MSS_FREQ_BIAS_PERCENTAGE_type;

// Type aliases and/or sizes for ATTR_MRW_MEM_SENSOR_CACHE_ADDR_MAP attribute
typedef uint32_t MRW_MEM_SENSOR_CACHE_ADDR_MAP_ATTR;
typedef uint32_t ATTR_MRW_MEM_SENSOR_CACHE_ADDR_MAP_type;

// Type aliases and/or sizes for ATTR_CDIMM_SENSOR_MAP_PRIMARY attribute
typedef uint8_t CDIMM_SENSOR_MAP_PRIMARY_ATTR;
typedef uint8_t ATTR_CDIMM_SENSOR_MAP_PRIMARY_type;

// Type aliases and/or sizes for ATTR_CDIMM_SENSOR_MAP_SECONDARY attribute
typedef uint8_t CDIMM_SENSOR_MAP_SECONDARY_ATTR;
typedef uint8_t ATTR_CDIMM_SENSOR_MAP_SECONDARY_type;

// Type aliases and/or sizes for ATTR_EFF_DRAM_ADDRESS_MIRRORING attribute
typedef uint8_t EFF_DRAM_ADDRESS_MIRRORING_ATTR[2][2];
typedef uint8_t ATTR_EFF_DRAM_ADDRESS_MIRRORING_type[2][2];

// Type aliases and/or sizes for ATTR_MSS_BLUEWATERFALL_BROKEN attribute
typedef uint8_t MSS_BLUEWATERFALL_BROKEN_ATTR;
typedef uint8_t ATTR_MSS_BLUEWATERFALL_BROKEN_type;

// Type aliases and/or sizes for ATTR_CDM_POLICIES attribute
typedef uint8_t CDM_POLICIES_ATTR;
typedef uint8_t ATTR_CDM_POLICIES_type;

// Type aliases and/or sizes for ATTR_FIELD_CORE_OVERRIDE attribute
typedef uint32_t FIELD_CORE_OVERRIDE_ATTR;
typedef uint32_t ATTR_FIELD_CORE_OVERRIDE_type;

// Type aliases and/or sizes for ATTR_HOSTSVC_PLID attribute
typedef uint32_t HOSTSVC_PLID_ATTR;
typedef uint32_t ATTR_HOSTSVC_PLID_type;

// Type aliases and/or sizes for ATTR_RUN_MAX_MEM_PATTERNS attribute
typedef uint8_t RUN_MAX_MEM_PATTERNS_ATTR;
typedef uint8_t ATTR_RUN_MAX_MEM_PATTERNS_type;

// Type aliases and/or sizes for ATTR_EFF_RLO attribute
typedef uint8_t EFF_RLO_ATTR[2];
typedef uint8_t ATTR_EFF_RLO_type[2];

// Type aliases and/or sizes for ATTR_EFF_WLO attribute
typedef uint8_t EFF_WLO_ATTR[2];
typedef uint8_t ATTR_EFF_WLO_type[2];

// Type aliases and/or sizes for ATTR_EFF_GPO attribute
typedef uint8_t EFF_GPO_ATTR[2];
typedef uint8_t ATTR_EFF_GPO_type[2];

// Type aliases and/or sizes for ATTR_EFF_CKE_PRI_MAP attribute
typedef uint32_t EFF_CKE_PRI_MAP_ATTR;
typedef uint32_t ATTR_EFF_CKE_PRI_MAP_type;

// Type aliases and/or sizes for ATTR_EFF_CKE_PWR_MAP attribute
typedef uint64_t EFF_CKE_PWR_MAP_ATTR;
typedef uint64_t ATTR_EFF_CKE_PWR_MAP_type;

// Type aliases and/or sizes for ATTR_EFF_RDTAG attribute
typedef uint8_t EFF_RDTAG_ATTR;
typedef uint8_t ATTR_EFF_RDTAG_type;

// Type aliases and/or sizes for ATTR_EFF_TSYS_ADR attribute
typedef uint8_t EFF_TSYS_ADR_ATTR;
typedef uint8_t ATTR_EFF_TSYS_ADR_type;

// Type aliases and/or sizes for ATTR_EFF_TSYS_DP18 attribute
typedef uint8_t EFF_TSYS_DP18_ATTR;
typedef uint8_t ATTR_EFF_TSYS_DP18_type;

// Type aliases and/or sizes for ATTR_EFF_DQ_WR_OFFSET attribute
typedef uint8_t EFF_DQ_WR_OFFSET_ATTR[2];
typedef uint8_t ATTR_EFF_DQ_WR_OFFSET_type[2];

// Type aliases and/or sizes for ATTR_EFF_BUFFER_LATENCY attribute
typedef uint8_t EFF_BUFFER_LATENCY_ATTR;
typedef uint8_t ATTR_EFF_BUFFER_LATENCY_type;

// Type aliases and/or sizes for ATTR_LRDIMM_MR12_REG attribute
typedef uint8_t LRDIMM_MR12_REG_ATTR[2][2];
typedef uint8_t ATTR_LRDIMM_MR12_REG_type[2][2];

// Type aliases and/or sizes for ATTR_LRDIMM_ADDITIONAL_CNTL_WORDS attribute
typedef uint64_t LRDIMM_ADDITIONAL_CNTL_WORDS_ATTR[2][2];
typedef uint64_t ATTR_LRDIMM_ADDITIONAL_CNTL_WORDS_type[2][2];

// Type aliases and/or sizes for ATTR_LRDIMM_RANK_MULT_MODE attribute
typedef uint8_t LRDIMM_RANK_MULT_MODE_ATTR;
typedef uint8_t ATTR_LRDIMM_RANK_MULT_MODE_type;

// Type aliases and/or sizes for ATTR_PM_SPWUP_IGNORE_XSTOP_FLAG attribute
typedef uint8_t PM_SPWUP_IGNORE_XSTOP_FLAG_ATTR;
typedef uint8_t ATTR_PM_SPWUP_IGNORE_XSTOP_FLAG_type;

// Type aliases and/or sizes for ATTR_CPM_INFLECTION_POINTS attribute
typedef uint32_t CPM_INFLECTION_POINTS_ATTR[16];
typedef uint32_t ATTR_CPM_INFLECTION_POINTS_type[16];

// Type aliases and/or sizes for ATTR_LAB_USE_JTAG_MODE attribute
typedef uint8_t LAB_USE_JTAG_MODE_ATTR;
typedef uint8_t ATTR_LAB_USE_JTAG_MODE_type;

// Type aliases and/or sizes for ATTR_MSS_CONTROL_SWITCH attribute
typedef uint8_t MSS_CONTROL_SWITCH_ATTR;
typedef uint8_t ATTR_MSS_CONTROL_SWITCH_type;

// Type aliases and/or sizes for ATTR_MSS_THROTTLE_CONTROL_RAS_WEIGHT attribute
typedef uint8_t MSS_THROTTLE_CONTROL_RAS_WEIGHT_ATTR;
typedef uint8_t ATTR_MSS_THROTTLE_CONTROL_RAS_WEIGHT_type;

// Type aliases and/or sizes for ATTR_MSS_THROTTLE_CONTROL_CAS_WEIGHT attribute
typedef uint8_t MSS_THROTTLE_CONTROL_CAS_WEIGHT_ATTR;
typedef uint8_t ATTR_MSS_THROTTLE_CONTROL_CAS_WEIGHT_type;

// Type aliases and/or sizes for ATTR_PROC_MIRROR_BASES_ACK attribute
typedef uint64_t PROC_MIRROR_BASES_ACK_ATTR[4];
typedef uint64_t ATTR_PROC_MIRROR_BASES_ACK_type[4];

// Type aliases and/or sizes for ATTR_PROC_MIRROR_SIZES_ACK attribute
typedef uint64_t PROC_MIRROR_SIZES_ACK_ATTR[4];
typedef uint64_t ATTR_PROC_MIRROR_SIZES_ACK_type[4];

// Type aliases and/or sizes for ATTR_PROC_MEM_BASES_ACK attribute
typedef uint64_t PROC_MEM_BASES_ACK_ATTR[8];
typedef uint64_t ATTR_PROC_MEM_BASES_ACK_type[8];

// Type aliases and/or sizes for ATTR_PROC_MEM_SIZES_ACK attribute
typedef uint64_t PROC_MEM_SIZES_ACK_ATTR[8];
typedef uint64_t ATTR_PROC_MEM_SIZES_ACK_type[8];

// Type aliases and/or sizes for ATTR_MCBIST_RANDOM_SEED_VALUE attribute
typedef uint32_t MCBIST_RANDOM_SEED_VALUE_ATTR;
typedef uint32_t ATTR_MCBIST_RANDOM_SEED_VALUE_type;

// Type aliases and/or sizes for ATTR_MCBIST_RANDOM_SEED_TYPE attribute
typedef uint8_t MCBIST_RANDOM_SEED_TYPE_ATTR;
typedef uint8_t ATTR_MCBIST_RANDOM_SEED_TYPE_type;

// Type aliases and/or sizes for ATTR_PROC_BOOT_VOLTAGE_VID attribute
typedef uint32_t PROC_BOOT_VOLTAGE_VID_ATTR;
typedef uint32_t ATTR_PROC_BOOT_VOLTAGE_VID_type;

// Type aliases and/or sizes for ATTR_DISABLE_I2C_ACCESS attribute
typedef uint8_t DISABLE_I2C_ACCESS_ATTR;
typedef uint8_t ATTR_DISABLE_I2C_ACCESS_type;

// Type aliases and/or sizes for ATTR_PROC_REFCLOCK_RCVR_TERM attribute
typedef uint8_t PROC_REFCLOCK_RCVR_TERM_ATTR;
typedef uint8_t ATTR_PROC_REFCLOCK_RCVR_TERM_type;

// Type aliases and/or sizes for ATTR_PCI_REFCLOCK_RCVR_TERM attribute
typedef uint8_t PCI_REFCLOCK_RCVR_TERM_ATTR;
typedef uint8_t ATTR_PCI_REFCLOCK_RCVR_TERM_type;

// Type aliases and/or sizes for ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM attribute
typedef uint8_t MEMB_DMI_REFCLOCK_RCVR_TERM_ATTR;
typedef uint8_t ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM_type;

// Type aliases and/or sizes for ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM attribute
typedef uint8_t MEMB_DDR_REFCLOCK_RCVR_TERM_ATTR;
typedef uint8_t ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM_type;

// Type aliases and/or sizes for ATTR_MEM_FILTER_PLL_SOURCE attribute
typedef uint8_t MEM_FILTER_PLL_SOURCE_ATTR;
typedef uint8_t ATTR_MEM_FILTER_PLL_SOURCE_type;

// Type aliases and/or sizes for ATTR_MULTI_SCOM_BUFFER_MAX_SIZE attribute
typedef uint64_t MULTI_SCOM_BUFFER_MAX_SIZE_ATTR;
typedef uint64_t ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_type;

// Type aliases and/or sizes for ATTR_DMI_DFE_OVERRIDE attribute
typedef uint8_t DMI_DFE_OVERRIDE_ATTR;
typedef uint8_t ATTR_DMI_DFE_OVERRIDE_type;

// Type aliases and/or sizes for ATTR_PROC_VRM_VOFFSET_VDD attribute
typedef uint32_t PROC_VRM_VOFFSET_VDD_ATTR;
typedef uint32_t ATTR_PROC_VRM_VOFFSET_VDD_type;

// Type aliases and/or sizes for ATTR_PROC_VRM_VOFFSET_VCS attribute
typedef uint32_t PROC_VRM_VOFFSET_VCS_ATTR;
typedef uint32_t ATTR_PROC_VRM_VOFFSET_VCS_type;

// Type aliases and/or sizes for ATTR_CPM_TURBO_BOOST_PERCENT attribute
typedef uint32_t CPM_TURBO_BOOST_PERCENT_ATTR;
typedef uint32_t ATTR_CPM_TURBO_BOOST_PERCENT_type;

// Type aliases and/or sizes for ATTR_PROC_R_LOADLINE_VDD attribute
typedef uint32_t PROC_R_LOADLINE_VDD_ATTR;
typedef uint32_t ATTR_PROC_R_LOADLINE_VDD_type;

// Type aliases and/or sizes for ATTR_PROC_R_LOADLINE_VCS attribute
typedef uint32_t PROC_R_LOADLINE_VCS_ATTR;
typedef uint32_t ATTR_PROC_R_LOADLINE_VCS_type;

// Type aliases and/or sizes for ATTR_PROC_R_DISTLOSS_VDD attribute
typedef uint32_t PROC_R_DISTLOSS_VDD_ATTR;
typedef uint32_t ATTR_PROC_R_DISTLOSS_VDD_type;

// Type aliases and/or sizes for ATTR_PROC_R_DISTLOSS_VCS attribute
typedef uint32_t PROC_R_DISTLOSS_VCS_ATTR;
typedef uint32_t ATTR_PROC_R_DISTLOSS_VCS_type;

// Type aliases and/or sizes for ATTR_PM_UNDERVOLTING_FRQ_MINIMUM attribute
typedef uint8_t PM_UNDERVOLTING_FRQ_MINIMUM_ATTR;
typedef uint8_t ATTR_PM_UNDERVOLTING_FRQ_MINIMUM_type;

// Type aliases and/or sizes for ATTR_PM_UNDERVOLTING_FREQ_MAXIMUM attribute
typedef uint8_t PM_UNDERVOLTING_FREQ_MAXIMUM_ATTR;
typedef uint8_t ATTR_PM_UNDERVOLTING_FREQ_MAXIMUM_type;

// Type aliases and/or sizes for ATTR_PM_WINKLE_ENTRY attribute
typedef uint8_t PM_WINKLE_ENTRY_ATTR;
typedef uint8_t ATTR_PM_WINKLE_ENTRY_type;

// Type aliases and/or sizes for ATTR_PM_WINKLE_EXIT attribute
typedef uint8_t PM_WINKLE_EXIT_ATTR;
typedef uint8_t ATTR_PM_WINKLE_EXIT_type;

// Type aliases and/or sizes for ATTR_PROC_MASTER_TYPE attribute
typedef uint8_t PROC_MASTER_TYPE_ATTR;
typedef uint8_t ATTR_PROC_MASTER_TYPE_type;

// Type aliases and/or sizes for ATTR_MSS_DATABUS_UTIL_PER_MBA attribute
typedef uint8_t MSS_DATABUS_UTIL_PER_MBA_ATTR;
typedef uint8_t ATTR_MSS_DATABUS_UTIL_PER_MBA_type;

// Type aliases and/or sizes for ATTR_MSS_UTIL_N_PER_MBA attribute
typedef uint32_t MSS_UTIL_N_PER_MBA_ATTR;
typedef uint32_t ATTR_MSS_UTIL_N_PER_MBA_type;

// Type aliases and/or sizes for ATTR_EFFECTIVE_EC attribute
typedef uint8_t EFFECTIVE_EC_ATTR;
typedef uint8_t ATTR_EFFECTIVE_EC_type;

// Type aliases and/or sizes for ATTR_PROC_PBA_UNTRUSTED_BAR_BASE_ADDR attribute
typedef uint64_t PROC_PBA_UNTRUSTED_BAR_BASE_ADDR_ATTR;
typedef uint64_t ATTR_PROC_PBA_UNTRUSTED_BAR_BASE_ADDR_type;

// Type aliases and/or sizes for ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE attribute
typedef uint64_t PROC_PBA_UNTRUSTED_BAR_SIZE_ATTR;
typedef uint64_t ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_type;

// Type aliases and/or sizes for ATTR_MRU_ID attribute
typedef uint32_t MRU_ID_ATTR;
typedef uint32_t ATTR_MRU_ID_type;

// Type aliases and/or sizes for ATTR_MSS_INIT_STATE attribute
typedef uint8_t MSS_INIT_STATE_ATTR;
typedef uint8_t ATTR_MSS_INIT_STATE_type;

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_TX_FFE_GEN1 attribute
typedef uint32_t PROC_PCIE_IOP_TX_FFE_GEN1_ATTR[3][16];
typedef uint32_t ATTR_PROC_PCIE_IOP_TX_FFE_GEN1_type[3][16];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_TX_FFE_GEN2 attribute
typedef uint32_t PROC_PCIE_IOP_TX_FFE_GEN2_ATTR[3][16];
typedef uint32_t ATTR_PROC_PCIE_IOP_TX_FFE_GEN2_type[3][16];

// Type aliases and/or sizes for ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT attribute
typedef uint8_t MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_ATTR;
typedef uint8_t ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_type;

// Type aliases and/or sizes for ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_IDLE attribute
typedef uint8_t MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_IDLE_ATTR;
typedef uint8_t ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_IDLE_type;

// Type aliases and/or sizes for ATTR_MRW_MEM_THROTTLE_DENOMINATOR attribute
typedef uint32_t MRW_MEM_THROTTLE_DENOMINATOR_ATTR;
typedef uint32_t ATTR_MRW_MEM_THROTTLE_DENOMINATOR_type;

// Type aliases and/or sizes for ATTR_MRW_MAX_DRAM_DATABUS_UTIL attribute
typedef uint32_t MRW_MAX_DRAM_DATABUS_UTIL_ATTR;
typedef uint32_t ATTR_MRW_MAX_DRAM_DATABUS_UTIL_type;

// Type aliases and/or sizes for ATTR_RECONFIGURE_LOOP attribute
typedef uint8_t RECONFIGURE_LOOP_ATTR;
typedef uint8_t ATTR_RECONFIGURE_LOOP_type;

// Type aliases and/or sizes for ATTR_PM_SYSTEM_IVRMS_ENABLED attribute
typedef uint8_t PM_SYSTEM_IVRMS_ENABLED_ATTR;
typedef uint8_t ATTR_PM_SYSTEM_IVRMS_ENABLED_type;

// Type aliases and/or sizes for ATTR_PM_SYSTEM_IVRM_VPD_MIN_LEVEL attribute
typedef uint8_t PM_SYSTEM_IVRM_VPD_MIN_LEVEL_ATTR;
typedef uint8_t ATTR_PM_SYSTEM_IVRM_VPD_MIN_LEVEL_type;

// Type aliases and/or sizes for ATTR_PM_SLW_DEEP_WINKLE_EXIT_GOOD_HALT_ADDR attribute
typedef uint32_t PM_SLW_DEEP_WINKLE_EXIT_GOOD_HALT_ADDR_ATTR;
typedef uint32_t ATTR_PM_SLW_DEEP_WINKLE_EXIT_GOOD_HALT_ADDR_type;

// Type aliases and/or sizes for ATTR_PM_SLW_DEEP_SLEEP_EXIT_GOOD_HALT_ADDR attribute
typedef uint32_t PM_SLW_DEEP_SLEEP_EXIT_GOOD_HALT_ADDR_ATTR;
typedef uint32_t ATTR_PM_SLW_DEEP_SLEEP_EXIT_GOOD_HALT_ADDR_type;

// Type aliases and/or sizes for ATTR_MSS_EFF_VPD_VERSION attribute
typedef uint32_t MSS_EFF_VPD_VERSION_ATTR;
typedef uint32_t ATTR_MSS_EFF_VPD_VERSION_type;

// Type aliases and/or sizes for ATTR_DISABLE_SCRUB_AFTER_PATTERN_TEST attribute
typedef uint8_t DISABLE_SCRUB_AFTER_PATTERN_TEST_ATTR;
typedef uint8_t ATTR_DISABLE_SCRUB_AFTER_PATTERN_TEST_type;

// Type aliases and/or sizes for ATTR_PM_PCBS_FSM_TRACE_EN attribute
typedef uint8_t PM_PCBS_FSM_TRACE_EN_ATTR;
typedef uint8_t ATTR_PM_PCBS_FSM_TRACE_EN_type;

// Type aliases and/or sizes for ATTR_PM_GLOBAL_FIR_TRACE_EN attribute
typedef uint8_t PM_GLOBAL_FIR_TRACE_EN_ATTR;
typedef uint8_t ATTR_PM_GLOBAL_FIR_TRACE_EN_type;

// Type aliases and/or sizes for ATTR_MSS_DERIVED_MBA_CACHELINE_INTERLEAVE_MODE attribute
typedef uint8_t MSS_DERIVED_MBA_CACHELINE_INTERLEAVE_MODE_ATTR;
typedef uint8_t ATTR_MSS_DERIVED_MBA_CACHELINE_INTERLEAVE_MODE_type;

// Type aliases and/or sizes for ATTR_MRW_STRICT_MBA_PLUG_RULE_CHECKING attribute
typedef uint8_t MRW_STRICT_MBA_PLUG_RULE_CHECKING_ATTR;
typedef uint8_t ATTR_MRW_STRICT_MBA_PLUG_RULE_CHECKING_type;

// Type aliases and/or sizes for ATTR_MSS_DERIVED_MBA_ADDR_INTERLEAVE_BIT attribute
typedef uint8_t MSS_DERIVED_MBA_ADDR_INTERLEAVE_BIT_ATTR;
typedef uint8_t ATTR_MSS_DERIVED_MBA_ADDR_INTERLEAVE_BIT_type;

// Type aliases and/or sizes for ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL attribute
typedef uint8_t MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL_ATTR;
typedef uint8_t ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL_type;

// Type aliases and/or sizes for ATTR_PM_HWP_ATTR_VERSION attribute
typedef uint32_t PM_HWP_ATTR_VERSION_ATTR;
typedef uint32_t ATTR_PM_HWP_ATTR_VERSION_type;

// Type aliases and/or sizes for ATTR_REDUNDANT_CLOCKS attribute
typedef uint8_t REDUNDANT_CLOCKS_ATTR;
typedef uint8_t ATTR_REDUNDANT_CLOCKS_type;

// Type aliases and/or sizes for ATTR_MSS_NEST_CAPABLE_FREQUENCIES attribute
typedef uint8_t MSS_NEST_CAPABLE_FREQUENCIES_ATTR;
typedef uint8_t ATTR_MSS_NEST_CAPABLE_FREQUENCIES_type;

// Type aliases and/or sizes for ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING attribute
typedef uint8_t MRW_ENHANCED_GROUPING_NO_MIRRORING_ATTR;
typedef uint8_t ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING_type;

// Type aliases and/or sizes for ATTR_TOD_ROLE attribute
typedef uint8_t TOD_ROLE_ATTR;
typedef uint8_t ATTR_TOD_ROLE_type;

// Type aliases and/or sizes for ATTR_MNFG_DMI_MIN_EYE_WIDTH attribute
typedef uint8_t MNFG_DMI_MIN_EYE_WIDTH_ATTR;
typedef uint8_t ATTR_MNFG_DMI_MIN_EYE_WIDTH_type;

// Type aliases and/or sizes for ATTR_MNFG_DMI_MIN_EYE_HEIGHT attribute
typedef uint8_t MNFG_DMI_MIN_EYE_HEIGHT_ATTR;
typedef uint8_t ATTR_MNFG_DMI_MIN_EYE_HEIGHT_type;

// Type aliases and/or sizes for ATTR_MNFG_ABUS_MIN_EYE_WIDTH attribute
typedef uint8_t MNFG_ABUS_MIN_EYE_WIDTH_ATTR;
typedef uint8_t ATTR_MNFG_ABUS_MIN_EYE_WIDTH_type;

// Type aliases and/or sizes for ATTR_MNFG_ABUS_MIN_EYE_HEIGHT attribute
typedef uint8_t MNFG_ABUS_MIN_EYE_HEIGHT_ATTR;
typedef uint8_t ATTR_MNFG_ABUS_MIN_EYE_HEIGHT_type;

// Type aliases and/or sizes for ATTR_MNFG_XBUS_MIN_EYE_WIDTH attribute
typedef uint8_t MNFG_XBUS_MIN_EYE_WIDTH_ATTR;
typedef uint8_t ATTR_MNFG_XBUS_MIN_EYE_WIDTH_type;

// Type aliases and/or sizes for ATTR_HB_RSV_MEM_SIZE_MB attribute
typedef uint32_t HB_RSV_MEM_SIZE_MB_ATTR;
typedef uint32_t ATTR_HB_RSV_MEM_SIZE_MB_type;

// Type aliases and/or sizes for ATTR_MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE attribute
typedef uint8_t MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE_ATTR;
typedef uint8_t ATTR_MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE_type;

// Type aliases and/or sizes for ATTR_MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE attribute
typedef uint8_t MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE_ATTR;
typedef uint8_t ATTR_MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE_type;

// Type aliases and/or sizes for ATTR_DO_ABUS_DECONFIG attribute
typedef uint8_t DO_ABUS_DECONFIG_ATTR;
typedef uint8_t ATTR_DO_ABUS_DECONFIG_type;

// Type aliases and/or sizes for ATTR_MEM_AVDD_OFFSET_MILLIVOLTS attribute
typedef uint32_t MEM_AVDD_OFFSET_MILLIVOLTS_ATTR;
typedef uint32_t ATTR_MEM_AVDD_OFFSET_MILLIVOLTS_type;

// Type aliases and/or sizes for ATTR_RECONFIG_LOOP_TESTS attribute
typedef uint64_t RECONFIG_LOOP_TESTS_ATTR[5];
typedef uint64_t ATTR_RECONFIG_LOOP_TESTS_type[5];

// Type aliases and/or sizes for ATTR_RECONFIG_LOOP_TESTS_ENABLE attribute
typedef uint8_t RECONFIG_LOOP_TESTS_ENABLE_ATTR;
typedef uint8_t ATTR_RECONFIG_LOOP_TESTS_ENABLE_type;

// Type aliases and/or sizes for ATTR_MEM_VDD_OFFSET_MILLIVOLTS attribute
typedef uint32_t MEM_VDD_OFFSET_MILLIVOLTS_ATTR;
typedef uint32_t ATTR_MEM_VDD_OFFSET_MILLIVOLTS_type;

// Type aliases and/or sizes for ATTR_MEM_VCS_OFFSET_MILLIVOLTS attribute
typedef uint32_t MEM_VCS_OFFSET_MILLIVOLTS_ATTR;
typedef uint32_t ATTR_MEM_VCS_OFFSET_MILLIVOLTS_type;

// Type aliases and/or sizes for ATTR_MEM_VPP_OFFSET_MILLIVOLTS attribute
typedef uint32_t MEM_VPP_OFFSET_MILLIVOLTS_ATTR;
typedef uint32_t ATTR_MEM_VPP_OFFSET_MILLIVOLTS_type;

// Type aliases and/or sizes for ATTR_MEM_VDDR_OFFSET_MILLIVOLTS attribute
typedef uint32_t MEM_VDDR_OFFSET_MILLIVOLTS_ATTR;
typedef uint32_t ATTR_MEM_VDDR_OFFSET_MILLIVOLTS_type;

// Type aliases and/or sizes for ATTR_MSS_CENT_AVDD_OFFSET_DISABLE attribute
typedef uint8_t MSS_CENT_AVDD_OFFSET_DISABLE_ATTR;
typedef uint8_t ATTR_MSS_CENT_AVDD_OFFSET_DISABLE_type;

// Type aliases and/or sizes for ATTR_MSS_CENT_VDD_OFFSET_DISABLE attribute
typedef uint8_t MSS_CENT_VDD_OFFSET_DISABLE_ATTR;
typedef uint8_t ATTR_MSS_CENT_VDD_OFFSET_DISABLE_type;

// Type aliases and/or sizes for ATTR_MSS_CENT_VCS_OFFSET_DISABLE attribute
typedef uint8_t MSS_CENT_VCS_OFFSET_DISABLE_ATTR;
typedef uint8_t ATTR_MSS_CENT_VCS_OFFSET_DISABLE_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_VPP_OFFSET_DISABLE attribute
typedef uint8_t MSS_VOLT_VPP_OFFSET_DISABLE_ATTR;
typedef uint8_t ATTR_MSS_VOLT_VPP_OFFSET_DISABLE_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_VDDR_OFFSET_DISABLE attribute
typedef uint8_t MSS_VOLT_VDDR_OFFSET_DISABLE_ATTR;
typedef uint8_t ATTR_MSS_VOLT_VDDR_OFFSET_DISABLE_type;

// Type aliases and/or sizes for ATTR_MSS_CENT_AVDD_SLOPE_ACTIVE attribute
typedef uint32_t MSS_CENT_AVDD_SLOPE_ACTIVE_ATTR;
typedef uint32_t ATTR_MSS_CENT_AVDD_SLOPE_ACTIVE_type;

// Type aliases and/or sizes for ATTR_MSS_CENT_AVDD_SLOPE_INACTIVE attribute
typedef uint32_t MSS_CENT_AVDD_SLOPE_INACTIVE_ATTR;
typedef uint32_t ATTR_MSS_CENT_AVDD_SLOPE_INACTIVE_type;

// Type aliases and/or sizes for ATTR_MSS_CENT_AVDD_INTERCEPT attribute
typedef uint32_t MSS_CENT_AVDD_INTERCEPT_ATTR;
typedef uint32_t ATTR_MSS_CENT_AVDD_INTERCEPT_type;

// Type aliases and/or sizes for ATTR_MSS_CENT_VDD_SLOPE_ACTIVE attribute
typedef uint32_t MSS_CENT_VDD_SLOPE_ACTIVE_ATTR;
typedef uint32_t ATTR_MSS_CENT_VDD_SLOPE_ACTIVE_type;

// Type aliases and/or sizes for ATTR_MSS_CENT_VDD_SLOPE_INACTIVE attribute
typedef uint32_t MSS_CENT_VDD_SLOPE_INACTIVE_ATTR;
typedef uint32_t ATTR_MSS_CENT_VDD_SLOPE_INACTIVE_type;

// Type aliases and/or sizes for ATTR_MSS_CENT_VDD_INTERCEPT attribute
typedef uint32_t MSS_CENT_VDD_INTERCEPT_ATTR;
typedef uint32_t ATTR_MSS_CENT_VDD_INTERCEPT_type;

// Type aliases and/or sizes for ATTR_MSS_CENT_VCS_SLOPE_ACTIVE attribute
typedef uint32_t MSS_CENT_VCS_SLOPE_ACTIVE_ATTR;
typedef uint32_t ATTR_MSS_CENT_VCS_SLOPE_ACTIVE_type;

// Type aliases and/or sizes for ATTR_MSS_CENT_VCS_SLOPE_INACTIVE attribute
typedef uint32_t MSS_CENT_VCS_SLOPE_INACTIVE_ATTR;
typedef uint32_t ATTR_MSS_CENT_VCS_SLOPE_INACTIVE_type;

// Type aliases and/or sizes for ATTR_MSS_CENT_VCS_INTERCEPT attribute
typedef uint32_t MSS_CENT_VCS_INTERCEPT_ATTR;
typedef uint32_t ATTR_MSS_CENT_VCS_INTERCEPT_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_VPP_SLOPE attribute
typedef uint32_t MSS_VOLT_VPP_SLOPE_ATTR;
typedef uint32_t ATTR_MSS_VOLT_VPP_SLOPE_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_VPP_INTERCEPT attribute
typedef uint32_t MSS_VOLT_VPP_INTERCEPT_ATTR;
typedef uint32_t ATTR_MSS_VOLT_VPP_INTERCEPT_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_VPP_SLOPE_POST_DRAM_INIT attribute
typedef uint32_t MSS_VOLT_VPP_SLOPE_POST_DRAM_INIT_ATTR;
typedef uint32_t ATTR_MSS_VOLT_VPP_SLOPE_POST_DRAM_INIT_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_VPP_INTERCEPT_POST_DRAM_INIT attribute
typedef uint32_t MSS_VOLT_VPP_INTERCEPT_POST_DRAM_INIT_ATTR;
typedef uint32_t ATTR_MSS_VOLT_VPP_INTERCEPT_POST_DRAM_INIT_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_DDR3_VDDR_SLOPE attribute
typedef uint32_t MSS_VOLT_DDR3_VDDR_SLOPE_ATTR;
typedef uint32_t ATTR_MSS_VOLT_DDR3_VDDR_SLOPE_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_DDR3_VDDR_INTERCEPT attribute
typedef uint32_t MSS_VOLT_DDR3_VDDR_INTERCEPT_ATTR;
typedef uint32_t ATTR_MSS_VOLT_DDR3_VDDR_INTERCEPT_type;

// Type aliases and/or sizes for ATTR_MRW_DDR3_VDDR_MAX_LIMIT attribute
typedef uint32_t MRW_DDR3_VDDR_MAX_LIMIT_ATTR;
typedef uint32_t ATTR_MRW_DDR3_VDDR_MAX_LIMIT_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_DDR3_VDDR_SLOPE_POST_DRAM_INIT attribute
typedef uint32_t MSS_VOLT_DDR3_VDDR_SLOPE_POST_DRAM_INIT_ATTR;
typedef uint32_t ATTR_MSS_VOLT_DDR3_VDDR_SLOPE_POST_DRAM_INIT_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_DDR3_VDDR_INTERCEPT_POST_DRAM_INIT attribute
typedef uint32_t MSS_VOLT_DDR3_VDDR_INTERCEPT_POST_DRAM_INIT_ATTR;
typedef uint32_t ATTR_MSS_VOLT_DDR3_VDDR_INTERCEPT_POST_DRAM_INIT_type;

// Type aliases and/or sizes for ATTR_MRW_DDR3_VDDR_MAX_LIMIT_POST_DRAM_INIT attribute
typedef uint32_t MRW_DDR3_VDDR_MAX_LIMIT_POST_DRAM_INIT_ATTR;
typedef uint32_t ATTR_MRW_DDR3_VDDR_MAX_LIMIT_POST_DRAM_INIT_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_DDR4_VDDR_SLOPE attribute
typedef uint32_t MSS_VOLT_DDR4_VDDR_SLOPE_ATTR;
typedef uint32_t ATTR_MSS_VOLT_DDR4_VDDR_SLOPE_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_DDR4_VDDR_INTERCEPT attribute
typedef uint32_t MSS_VOLT_DDR4_VDDR_INTERCEPT_ATTR;
typedef uint32_t ATTR_MSS_VOLT_DDR4_VDDR_INTERCEPT_type;

// Type aliases and/or sizes for ATTR_MRW_DDR4_VDDR_MAX_LIMIT attribute
typedef uint32_t MRW_DDR4_VDDR_MAX_LIMIT_ATTR;
typedef uint32_t ATTR_MRW_DDR4_VDDR_MAX_LIMIT_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_DDR4_VDDR_SLOPE_POST_DRAM_INIT attribute
typedef uint32_t MSS_VOLT_DDR4_VDDR_SLOPE_POST_DRAM_INIT_ATTR;
typedef uint32_t ATTR_MSS_VOLT_DDR4_VDDR_SLOPE_POST_DRAM_INIT_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_DDR4_VDDR_INTERCEPT_POST_DRAM_INIT attribute
typedef uint32_t MSS_VOLT_DDR4_VDDR_INTERCEPT_POST_DRAM_INIT_ATTR;
typedef uint32_t ATTR_MSS_VOLT_DDR4_VDDR_INTERCEPT_POST_DRAM_INIT_type;

// Type aliases and/or sizes for ATTR_MRW_DDR4_VDDR_MAX_LIMIT_POST_DRAM_INIT attribute
typedef uint32_t MRW_DDR4_VDDR_MAX_LIMIT_POST_DRAM_INIT_ATTR;
typedef uint32_t ATTR_MRW_DDR4_VDDR_MAX_LIMIT_POST_DRAM_INIT_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_OVERRIDE attribute
typedef uint8_t MSS_VOLT_OVERRIDE_ATTR;
typedef uint8_t ATTR_MSS_VOLT_OVERRIDE_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_COMPLIANT_DIMMS attribute
typedef uint8_t MSS_VOLT_COMPLIANT_DIMMS_ATTR;
typedef uint8_t ATTR_MSS_VOLT_COMPLIANT_DIMMS_type;

// Type aliases and/or sizes for ATTR_MSS_VDDR_OVERIDE_SPD attribute
typedef uint8_t MSS_VDDR_OVERIDE_SPD_ATTR;
typedef uint8_t ATTR_MSS_VDDR_OVERIDE_SPD_type;

// Type aliases and/or sizes for ATTR_MRW_POWER_CONTROL_REQUESTED attribute
typedef uint8_t MRW_POWER_CONTROL_REQUESTED_ATTR;
typedef uint8_t ATTR_MRW_POWER_CONTROL_REQUESTED_type;

// Type aliases and/or sizes for ATTR_PM_PFET_WORKAROUND_RUN_FLAG attribute
typedef uint8_t PM_PFET_WORKAROUND_RUN_FLAG_ATTR;
typedef uint8_t ATTR_PM_PFET_WORKAROUND_RUN_FLAG_type;

// Type aliases and/or sizes for ATTR_PM_OCC_LFIR_MASK attribute
typedef uint64_t PM_OCC_LFIR_MASK_ATTR;
typedef uint64_t ATTR_PM_OCC_LFIR_MASK_type;

// Type aliases and/or sizes for ATTR_PM_PBA_FIR_MASK attribute
typedef uint64_t PM_PBA_FIR_MASK_ATTR;
typedef uint64_t ATTR_PM_PBA_FIR_MASK_type;

// Type aliases and/or sizes for ATTR_PM_PMC_LFIR_MASK attribute
typedef uint64_t PM_PMC_LFIR_MASK_ATTR;
typedef uint64_t ATTR_PM_PMC_LFIR_MASK_type;

// Type aliases and/or sizes for ATTR_PM_FIRINIT_DONE_ONCE_FLAG attribute
typedef uint8_t PM_FIRINIT_DONE_ONCE_FLAG_ATTR;
typedef uint8_t ATTR_PM_FIRINIT_DONE_ONCE_FLAG_type;

// Type aliases and/or sizes for ATTR_PM_SLEEP_ENABLE attribute
typedef uint8_t PM_SLEEP_ENABLE_ATTR;
typedef uint8_t ATTR_PM_SLEEP_ENABLE_type;

// Type aliases and/or sizes for ATTR_I2C_SWITCHES attribute
typedef I2cSwitches I2C_SWITCHES_ATTR;
typedef I2cSwitches ATTR_I2C_SWITCHES_type;

// Type aliases and/or sizes for ATTR_OCC_MASTER_CAPABLE attribute
typedef uint8_t OCC_MASTER_CAPABLE_ATTR;
typedef uint8_t ATTR_OCC_MASTER_CAPABLE_type;

// Type aliases and/or sizes for ATTR_MSS_DRAMINIT_RESET_DISABLE attribute
typedef uint8_t MSS_DRAMINIT_RESET_DISABLE_ATTR;
typedef uint8_t ATTR_MSS_DRAMINIT_RESET_DISABLE_type;

// Type aliases and/or sizes for ATTR_ISDIMM_POWER_CURVE_ALGORITHM_VERSION attribute
typedef uint32_t ISDIMM_POWER_CURVE_ALGORITHM_VERSION_ATTR;
typedef uint32_t ATTR_ISDIMM_POWER_CURVE_ALGORITHM_VERSION_type;

// Type aliases and/or sizes for ATTR_PROC_PCIE_LANE_MASK attribute
typedef uint16_t PROC_PCIE_LANE_MASK_ATTR[3][2];
typedef uint16_t ATTR_PROC_PCIE_LANE_MASK_type[3][2];

// Type aliases and/or sizes for ATTR_PROC_PCIE_DSMP_CAPABLE attribute
typedef uint8_t PROC_PCIE_DSMP_CAPABLE_ATTR[3][2];
typedef uint8_t ATTR_PROC_PCIE_DSMP_CAPABLE_type[3][2];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_REVERSAL attribute
typedef uint8_t PROC_PCIE_IOP_REVERSAL_ATTR[3][2];
typedef uint8_t ATTR_PROC_PCIE_IOP_REVERSAL_type[3][2];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_REVERSAL_NON_BIFURCATED attribute
typedef uint8_t PROC_PCIE_IOP_REVERSAL_NON_BIFURCATED_ATTR[3][2];
typedef uint8_t ATTR_PROC_PCIE_IOP_REVERSAL_NON_BIFURCATED_type[3][2];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_SWAP_NON_BIFURCATED attribute
typedef uint8_t PROC_PCIE_IOP_SWAP_NON_BIFURCATED_ATTR[3][2];
typedef uint8_t ATTR_PROC_PCIE_IOP_SWAP_NON_BIFURCATED_type[3][2];

// Type aliases and/or sizes for ATTR_PROC_PCIE_LANE_MASK_NON_BIFURCATED attribute
typedef uint16_t PROC_PCIE_LANE_MASK_NON_BIFURCATED_ATTR[3][2];
typedef uint16_t ATTR_PROC_PCIE_LANE_MASK_NON_BIFURCATED_type[3][2];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_REVERSAL_BIFURCATED attribute
typedef uint8_t PROC_PCIE_IOP_REVERSAL_BIFURCATED_ATTR[3][2];
typedef uint8_t ATTR_PROC_PCIE_IOP_REVERSAL_BIFURCATED_type[3][2];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IOP_SWAP_BIFURCATED attribute
typedef uint8_t PROC_PCIE_IOP_SWAP_BIFURCATED_ATTR[3][2];
typedef uint8_t ATTR_PROC_PCIE_IOP_SWAP_BIFURCATED_type[3][2];

// Type aliases and/or sizes for ATTR_PROC_PCIE_LANE_MASK_BIFURCATED attribute
typedef uint16_t PROC_PCIE_LANE_MASK_BIFURCATED_ATTR[3][2];
typedef uint16_t ATTR_PROC_PCIE_LANE_MASK_BIFURCATED_type[3][2];

// Type aliases and/or sizes for ATTR_PROC_PCIE_LANE_EQUALIZATION attribute
typedef uint8_t PROC_PCIE_LANE_EQUALIZATION_ATTR[4][32];
typedef uint8_t ATTR_PROC_PCIE_LANE_EQUALIZATION_type[4][32];

// Type aliases and/or sizes for ATTR_PROC_PCIE_IS_SLOT attribute
typedef uint8_t PROC_PCIE_IS_SLOT_ATTR[3][2];
typedef uint8_t ATTR_PROC_PCIE_IS_SLOT_type[3][2];

// Type aliases and/or sizes for ATTR_CDM_DOMAIN attribute
typedef CDM_DOMAIN CDM_DOMAIN_ATTR;
typedef CDM_DOMAIN ATTR_CDM_DOMAIN_type;

// Type aliases and/or sizes for ATTR_I2C_BUS_SPEED_ARRAY attribute
typedef uint16_t I2C_BUS_SPEED_ARRAY_ATTR[2][3];
typedef uint16_t ATTR_I2C_BUS_SPEED_ARRAY_type[2][3];

// Type aliases and/or sizes for ATTR_ISTEP_PAUSE_ENABLE attribute
typedef uint8_t ISTEP_PAUSE_ENABLE_ATTR;
typedef uint8_t ATTR_ISTEP_PAUSE_ENABLE_type;

// Type aliases and/or sizes for ATTR_HOT_PLUG_POWER_CONTROLLER_INFO attribute
typedef uint8_t HOT_PLUG_POWER_CONTROLLER_INFO_ATTR[8][8];
typedef uint8_t ATTR_HOT_PLUG_POWER_CONTROLLER_INFO_type[8][8];

// Type aliases and/or sizes for ATTR_ISTEP_PAUSE_CONFIG attribute
typedef uint64_t ISTEP_PAUSE_CONFIG_ATTR;
typedef uint64_t ATTR_ISTEP_PAUSE_CONFIG_type;

// Type aliases and/or sizes for ATTR_OPT_MEMMAP_GROUP_POLICY attribute
typedef uint8_t OPT_MEMMAP_GROUP_POLICY_ATTR;
typedef uint8_t ATTR_OPT_MEMMAP_GROUP_POLICY_type;

// Type aliases and/or sizes for ATTR_MFG_TRACE_ENABLE attribute
typedef uint8_t MFG_TRACE_ENABLE_ATTR;
typedef uint8_t ATTR_MFG_TRACE_ENABLE_type;

// Type aliases and/or sizes for ATTR_PROC_PCIE_NUM_PHB attribute
typedef uint8_t PROC_PCIE_NUM_PHB_ATTR;
typedef uint8_t ATTR_PROC_PCIE_NUM_PHB_type;

// Type aliases and/or sizes for ATTR_PROC_PCIE_NUM_IOP attribute
typedef uint8_t PROC_PCIE_NUM_IOP_ATTR;
typedef uint8_t ATTR_PROC_PCIE_NUM_IOP_type;

// Type aliases and/or sizes for ATTR_PROC_PCIE_NUM_LANES attribute
typedef uint8_t PROC_PCIE_NUM_LANES_ATTR;
typedef uint8_t ATTR_PROC_PCIE_NUM_LANES_type;

// Type aliases and/or sizes for ATTR_MNFG_TH_P8EX_L2_CACHE_CES attribute
typedef uint8_t MNFG_TH_P8EX_L2_CACHE_CES_ATTR;
typedef uint8_t ATTR_MNFG_TH_P8EX_L2_CACHE_CES_type;

// Type aliases and/or sizes for ATTR_MNFG_TH_P8EX_L2_DIR_CES attribute
typedef uint8_t MNFG_TH_P8EX_L2_DIR_CES_ATTR;
typedef uint8_t ATTR_MNFG_TH_P8EX_L2_DIR_CES_type;

// Type aliases and/or sizes for ATTR_MNFG_TH_P8EX_L3_CACHE_CES attribute
typedef uint8_t MNFG_TH_P8EX_L3_CACHE_CES_ATTR;
typedef uint8_t ATTR_MNFG_TH_P8EX_L3_CACHE_CES_type;

// Type aliases and/or sizes for ATTR_MNFG_TH_P8EX_L3_DIR_CES attribute
typedef uint8_t MNFG_TH_P8EX_L3_DIR_CES_ATTR;
typedef uint8_t ATTR_MNFG_TH_P8EX_L3_DIR_CES_type;

// Type aliases and/or sizes for ATTR_FIELD_TH_P8EX_L2_LINE_DELETES attribute
typedef uint8_t FIELD_TH_P8EX_L2_LINE_DELETES_ATTR;
typedef uint8_t ATTR_FIELD_TH_P8EX_L2_LINE_DELETES_type;

// Type aliases and/or sizes for ATTR_FIELD_TH_P8EX_L3_LINE_DELETES attribute
typedef uint8_t FIELD_TH_P8EX_L3_LINE_DELETES_ATTR;
typedef uint8_t ATTR_FIELD_TH_P8EX_L3_LINE_DELETES_type;

// Type aliases and/or sizes for ATTR_FIELD_TH_P8EX_L2_COL_REPAIRS attribute
typedef uint8_t FIELD_TH_P8EX_L2_COL_REPAIRS_ATTR;
typedef uint8_t ATTR_FIELD_TH_P8EX_L2_COL_REPAIRS_type;

// Type aliases and/or sizes for ATTR_FIELD_TH_P8EX_L3_COL_REPAIRS attribute
typedef uint8_t FIELD_TH_P8EX_L3_COL_REPAIRS_ATTR;
typedef uint8_t ATTR_FIELD_TH_P8EX_L3_COL_REPAIRS_type;

// Type aliases and/or sizes for ATTR_MNFG_TH_P8EX_L2_LINE_DELETES attribute
typedef uint8_t MNFG_TH_P8EX_L2_LINE_DELETES_ATTR;
typedef uint8_t ATTR_MNFG_TH_P8EX_L2_LINE_DELETES_type;

// Type aliases and/or sizes for ATTR_MNFG_TH_P8EX_L3_LINE_DELETES attribute
typedef uint8_t MNFG_TH_P8EX_L3_LINE_DELETES_ATTR;
typedef uint8_t ATTR_MNFG_TH_P8EX_L3_LINE_DELETES_type;

// Type aliases and/or sizes for ATTR_MNFG_TH_P8EX_L2_COL_REPAIRS attribute
typedef uint8_t MNFG_TH_P8EX_L2_COL_REPAIRS_ATTR;
typedef uint8_t ATTR_MNFG_TH_P8EX_L2_COL_REPAIRS_type;

// Type aliases and/or sizes for ATTR_MNFG_TH_P8EX_L3_COL_REPAIRS attribute
typedef uint8_t MNFG_TH_P8EX_L3_COL_REPAIRS_ATTR;
typedef uint8_t ATTR_MNFG_TH_P8EX_L3_COL_REPAIRS_type;

// Type aliases and/or sizes for ATTR_MNFG_TH_CEN_MBA_RT_SOFT_CE_TH_ALGO attribute
typedef uint8_t MNFG_TH_CEN_MBA_RT_SOFT_CE_TH_ALGO_ATTR;
typedef uint8_t ATTR_MNFG_TH_CEN_MBA_RT_SOFT_CE_TH_ALGO_type;

// Type aliases and/or sizes for ATTR_MNFG_TH_CEN_MBA_IPL_SOFT_CE_TH_ALGO attribute
typedef uint8_t MNFG_TH_CEN_MBA_IPL_SOFT_CE_TH_ALGO_ATTR;
typedef uint8_t ATTR_MNFG_TH_CEN_MBA_IPL_SOFT_CE_TH_ALGO_type;

// Type aliases and/or sizes for ATTR_MNFG_TH_CEN_MBA_RT_RCE_PER_RANK attribute
typedef uint8_t MNFG_TH_CEN_MBA_RT_RCE_PER_RANK_ATTR;
typedef uint8_t ATTR_MNFG_TH_CEN_MBA_RT_RCE_PER_RANK_type;

// Type aliases and/or sizes for ATTR_MNFG_TH_CEN_L4_CACHE_CES attribute
typedef uint8_t MNFG_TH_CEN_L4_CACHE_CES_ATTR;
typedef uint8_t ATTR_MNFG_TH_CEN_L4_CACHE_CES_type;

// Type aliases and/or sizes for ATTR_RESOURCE_IS_CRITICAL attribute
typedef uint8_t RESOURCE_IS_CRITICAL_ATTR;
typedef uint8_t ATTR_RESOURCE_IS_CRITICAL_type;

// Type aliases and/or sizes for ATTR_BRAZOS_RX_FIFO_OVERRIDE attribute
typedef uint8_t BRAZOS_RX_FIFO_OVERRIDE_ATTR;
typedef uint8_t ATTR_BRAZOS_RX_FIFO_OVERRIDE_type;

// Type aliases and/or sizes for ATTR_MSS_VMEM_REGULATOR_MAX_DIMM_COUNT attribute
typedef uint8_t MSS_VMEM_REGULATOR_MAX_DIMM_COUNT_ATTR;
typedef uint8_t ATTR_MSS_VMEM_REGULATOR_MAX_DIMM_COUNT_type;

// Type aliases and/or sizes for ATTR_MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE attribute
typedef uint8_t MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE_ATTR;
typedef uint8_t ATTR_MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE_type;

// Type aliases and/or sizes for ATTR_MRW_MAX_NUMBER_DIMMS_POSSIBLE_PER_VMEM_REGULATOR attribute
typedef uint8_t MRW_MAX_NUMBER_DIMMS_POSSIBLE_PER_VMEM_REGULATOR_ATTR;
typedef uint8_t ATTR_MRW_MAX_NUMBER_DIMMS_POSSIBLE_PER_VMEM_REGULATOR_type;

// Type aliases and/or sizes for ATTR_MRW_VMEM_REGULATOR_MEMORY_POWER_LIMIT_PER_DIMM attribute
typedef uint32_t MRW_VMEM_REGULATOR_MEMORY_POWER_LIMIT_PER_DIMM_ATTR;
typedef uint32_t ATTR_MRW_VMEM_REGULATOR_MEMORY_POWER_LIMIT_PER_DIMM_type;

// Type aliases and/or sizes for ATTR_MRW_NEST_CAPABLE_FREQUENCIES_SYS attribute
typedef MRW_NEST_CAPABLE_FREQUENCIES_SYS MRW_NEST_CAPABLE_FREQUENCIES_SYS_ATTR;
typedef MRW_NEST_CAPABLE_FREQUENCIES_SYS ATTR_MRW_NEST_CAPABLE_FREQUENCIES_SYS_type;

// Type aliases and/or sizes for ATTR_WOF_ENABLED attribute
typedef uint8_t WOF_ENABLED_ATTR;
typedef uint8_t ATTR_WOF_ENABLED_type;

// Type aliases and/or sizes for ATTR_TRUSTED_SLAVE_SCAN_PATH_ACTIVE attribute
typedef uint8_t TRUSTED_SLAVE_SCAN_PATH_ACTIVE_ATTR;
typedef uint8_t ATTR_TRUSTED_SLAVE_SCAN_PATH_ACTIVE_type;

// Type aliases and/or sizes for ATTR_FORCE_SKIP_SBE_MASTER_INTR_SERVICE attribute
typedef uint8_t FORCE_SKIP_SBE_MASTER_INTR_SERVICE_ATTR;
typedef uint8_t ATTR_FORCE_SKIP_SBE_MASTER_INTR_SERVICE_type;

// Type aliases and/or sizes for ATTR_FORCE_USE_SBE_SLAVE_SCAN_SERVICE attribute
typedef uint8_t FORCE_USE_SBE_SLAVE_SCAN_SERVICE_ATTR;
typedef uint8_t ATTR_FORCE_USE_SBE_SLAVE_SCAN_SERVICE_type;

// Type aliases and/or sizes for ATTR_SBE_MASTER_INTR_SERVICE_DELAY_CYCLES attribute
typedef uint32_t SBE_MASTER_INTR_SERVICE_DELAY_CYCLES_ATTR;
typedef uint32_t ATTR_SBE_MASTER_INTR_SERVICE_DELAY_CYCLES_type;

// Type aliases and/or sizes for ATTR_SBE_MASTER_INTR_SERVICE_DELAY_US attribute
typedef uint32_t SBE_MASTER_INTR_SERVICE_DELAY_US_ATTR;
typedef uint32_t ATTR_SBE_MASTER_INTR_SERVICE_DELAY_US_type;

// Type aliases and/or sizes for ATTR_MSS_VREF_CAL_CNTL attribute
typedef uint8_t MSS_VREF_CAL_CNTL_ATTR;
typedef uint8_t ATTR_MSS_VREF_CAL_CNTL_type;

// Type aliases and/or sizes for ATTR_EFF_DIMM_RCD_CNTL_WORD_X attribute
typedef uint64_t EFF_DIMM_RCD_CNTL_WORD_X_ATTR[2][2];
typedef uint64_t ATTR_EFF_DIMM_RCD_CNTL_WORD_X_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC00 attribute
typedef uint8_t EFF_DIMM_DDR4_RC00_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC00_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC01 attribute
typedef uint8_t EFF_DIMM_DDR4_RC01_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC01_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC02 attribute
typedef uint8_t EFF_DIMM_DDR4_RC02_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC02_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC03 attribute
typedef uint8_t EFF_DIMM_DDR4_RC03_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC03_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC04 attribute
typedef uint8_t EFF_DIMM_DDR4_RC04_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC04_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC05 attribute
typedef uint8_t EFF_DIMM_DDR4_RC05_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC05_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC06_07 attribute
typedef uint8_t EFF_DIMM_DDR4_RC06_07_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC06_07_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC08 attribute
typedef uint8_t EFF_DIMM_DDR4_RC08_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC08_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC09 attribute
typedef uint8_t EFF_DIMM_DDR4_RC09_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC09_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC10 attribute
typedef uint8_t EFF_DIMM_DDR4_RC10_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC10_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC11 attribute
typedef uint8_t EFF_DIMM_DDR4_RC11_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC11_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC12 attribute
typedef uint8_t EFF_DIMM_DDR4_RC12_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC12_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC13 attribute
typedef uint8_t EFF_DIMM_DDR4_RC13_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC13_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC14 attribute
typedef uint8_t EFF_DIMM_DDR4_RC14_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC14_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC15 attribute
typedef uint8_t EFF_DIMM_DDR4_RC15_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC15_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC_1x attribute
typedef uint8_t EFF_DIMM_DDR4_RC_1x_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_1x_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC_2x attribute
typedef uint8_t EFF_DIMM_DDR4_RC_2x_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_2x_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC_3x attribute
typedef uint8_t EFF_DIMM_DDR4_RC_3x_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_3x_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC_4x attribute
typedef uint8_t EFF_DIMM_DDR4_RC_4x_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_4x_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC_5x attribute
typedef uint8_t EFF_DIMM_DDR4_RC_5x_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_5x_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC_6x attribute
typedef uint8_t EFF_DIMM_DDR4_RC_6x_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_6x_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC_7x attribute
typedef uint8_t EFF_DIMM_DDR4_RC_7x_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_7x_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC_8x attribute
typedef uint8_t EFF_DIMM_DDR4_RC_8x_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_8x_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC_9x attribute
typedef uint8_t EFF_DIMM_DDR4_RC_9x_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_9x_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC_Ax attribute
typedef uint8_t EFF_DIMM_DDR4_RC_Ax_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_Ax_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DIMM_DDR4_RC_Bx attribute
typedef uint8_t EFF_DIMM_DDR4_RC_Bx_ATTR[2][2];
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_Bx_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_DRAM_TCCD_L attribute
typedef uint8_t EFF_DRAM_TCCD_L_ATTR;
typedef uint8_t ATTR_EFF_DRAM_TCCD_L_type;

// Type aliases and/or sizes for ATTR_EFF_LRDIMM_WORD_X attribute
typedef uint64_t EFF_LRDIMM_WORD_X_ATTR[2][2];
typedef uint64_t ATTR_EFF_LRDIMM_WORD_X_type[2][2];

// Type aliases and/or sizes for ATTR_EFF_LRDIMM_ADDITIONAL_CNTL_WORDS attribute
typedef uint64_t EFF_LRDIMM_ADDITIONAL_CNTL_WORDS_ATTR[2][2];
typedef uint64_t ATTR_EFF_LRDIMM_ADDITIONAL_CNTL_WORDS_type[2][2];

// Type aliases and/or sizes for ATTR_MCBIST_DDR4_PDA_ENABLE attribute
typedef uint8_t MCBIST_DDR4_PDA_ENABLE_ATTR;
typedef uint8_t ATTR_MCBIST_DDR4_PDA_ENABLE_type;

// Type aliases and/or sizes for ATTR_MRW_MCS_PREFETCH_RETRY_THRESHOLD attribute
typedef uint8_t MRW_MCS_PREFETCH_RETRY_THRESHOLD_ATTR;
typedef uint8_t ATTR_MRW_MCS_PREFETCH_RETRY_THRESHOLD_type;

// Type aliases and/or sizes for ATTR_DEFAULT_PROC_MODULE_NEST_FREQ_MHZ attribute
typedef uint32_t DEFAULT_PROC_MODULE_NEST_FREQ_MHZ_ATTR;
typedef uint32_t ATTR_DEFAULT_PROC_MODULE_NEST_FREQ_MHZ_type;

// Type aliases and/or sizes for ATTR_HIDDEN_ERRLOGS_ENABLE attribute
typedef uint8_t HIDDEN_ERRLOGS_ENABLE_ATTR;
typedef uint8_t ATTR_HIDDEN_ERRLOGS_ENABLE_type;

// Type aliases and/or sizes for ATTR_IS_MPIPL_HB attribute
typedef uint8_t IS_MPIPL_HB_ATTR;
typedef uint8_t ATTR_IS_MPIPL_HB_type;

// Type aliases and/or sizes for ATTR_XSCOM_VIRTUAL_ADDR attribute
typedef uint64_t XSCOM_VIRTUAL_ADDR_ATTR;
typedef uint64_t ATTR_XSCOM_VIRTUAL_ADDR_type;

// Type aliases and/or sizes for ATTR_FSI_MASTER_MUTEX attribute
typedef mutex_t* FSI_MASTER_MUTEX_ATTR;
typedef mutex_t* ATTR_FSI_MASTER_MUTEX_type;

// Type aliases and/or sizes for ATTR_HB_MUTEX_TEST_LOCK attribute
typedef mutex_t* HB_MUTEX_TEST_LOCK_ATTR;
typedef mutex_t* ATTR_HB_MUTEX_TEST_LOCK_type;

// Type aliases and/or sizes for ATTR_I2C_ENGINE_MUTEX_0 attribute
typedef mutex_t* I2C_ENGINE_MUTEX_0_ATTR;
typedef mutex_t* ATTR_I2C_ENGINE_MUTEX_0_type;

// Type aliases and/or sizes for ATTR_I2C_ENGINE_MUTEX_1 attribute
typedef mutex_t* I2C_ENGINE_MUTEX_1_ATTR;
typedef mutex_t* ATTR_I2C_ENGINE_MUTEX_1_type;

// Type aliases and/or sizes for ATTR_I2C_ENGINE_MUTEX_2 attribute
typedef mutex_t* I2C_ENGINE_MUTEX_2_ATTR;
typedef mutex_t* ATTR_I2C_ENGINE_MUTEX_2_type;

// Type aliases and/or sizes for ATTR_FSI_SCOM_MUTEX attribute
typedef mutex_t* FSI_SCOM_MUTEX_ATTR;
typedef mutex_t* ATTR_FSI_SCOM_MUTEX_type;

// Type aliases and/or sizes for ATTR_SCOM_IND_MUTEX attribute
typedef mutex_t* SCOM_IND_MUTEX_ATTR;
typedef mutex_t* ATTR_SCOM_IND_MUTEX_type;

// Type aliases and/or sizes for ATTR_SCAN_MUTEX attribute
typedef mutex_t* SCAN_MUTEX_ATTR;
typedef mutex_t* ATTR_SCAN_MUTEX_type;

// Type aliases and/or sizes for ATTR_SLW_IMAGE_ADDR attribute
typedef uint64_t SLW_IMAGE_ADDR_ATTR;
typedef uint64_t ATTR_SLW_IMAGE_ADDR_type;

// Type aliases and/or sizes for ATTR_SLW_IMAGE_SIZE attribute
typedef uint64_t SLW_IMAGE_SIZE_ATTR;
typedef uint64_t ATTR_SLW_IMAGE_SIZE_type;

// Type aliases and/or sizes for ATTR_IBSCOM_VIRTUAL_ADDR attribute
typedef uint64_t IBSCOM_VIRTUAL_ADDR_ATTR;
typedef uint64_t ATTR_IBSCOM_VIRTUAL_ADDR_type;

// Type aliases and/or sizes for ATTR_IBSCOM_MUTEX attribute
typedef mutex_t* IBSCOM_MUTEX_ATTR;
typedef mutex_t* ATTR_IBSCOM_MUTEX_type;

// Type aliases and/or sizes for ATTR_IBSCOM_ENABLE_OVERRIDE attribute
typedef uint8_t IBSCOM_ENABLE_OVERRIDE_ATTR;
typedef uint8_t ATTR_IBSCOM_ENABLE_OVERRIDE_type;

// Type aliases and/or sizes for ATTR_HB_EXISTING_IMAGE attribute
typedef uint8_t HB_EXISTING_IMAGE_ATTR;
typedef uint8_t ATTR_HB_EXISTING_IMAGE_type;

// Type aliases and/or sizes for ATTR_HB_PM_SPWUP_OHA_FLAG attribute
typedef uint8_t HB_PM_SPWUP_OHA_FLAG_ATTR;
typedef uint8_t ATTR_HB_PM_SPWUP_OHA_FLAG_type;

// Type aliases and/or sizes for ATTR_GPIO_INFO attribute
typedef GpioInfo GPIO_INFO_ATTR;
typedef GpioInfo ATTR_GPIO_INFO_type;

// Type aliases and/or sizes for ATTR_HB_TARGET_SCOMABLE attribute
typedef uint8_t HB_TARGET_SCOMABLE_ATTR;
typedef uint8_t ATTR_HB_TARGET_SCOMABLE_type;

// Type aliases and/or sizes for ATTR_OCC_COMMON_AREA_PHYS_ADDR attribute
typedef uint64_t OCC_COMMON_AREA_PHYS_ADDR_ATTR;
typedef uint64_t ATTR_OCC_COMMON_AREA_PHYS_ADDR_type;

// Type aliases and/or sizes for ATTR_HOMER_PHYS_ADDR attribute
typedef uint64_t HOMER_PHYS_ADDR_ATTR;
typedef uint64_t ATTR_HOMER_PHYS_ADDR_type;

// Type aliases and/or sizes for ATTR_HOMER_VIRT_ADDR attribute
typedef uint64_t HOMER_VIRT_ADDR_ATTR;
typedef uint64_t ATTR_HOMER_VIRT_ADDR_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_DIMM_THROTTLE_TEMP_DEG_C attribute
typedef uint64_t OPEN_POWER_DIMM_THROTTLE_TEMP_DEG_C_ATTR;
typedef uint64_t ATTR_OPEN_POWER_DIMM_THROTTLE_TEMP_DEG_C_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_DIMM_ERROR_TEMP_DEG_C attribute
typedef uint64_t OPEN_POWER_DIMM_ERROR_TEMP_DEG_C_ATTR;
typedef uint64_t ATTR_OPEN_POWER_DIMM_ERROR_TEMP_DEG_C_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_MEMCTRL_THROTTLE_TEMP_DEG_C attribute
typedef uint64_t OPEN_POWER_MEMCTRL_THROTTLE_TEMP_DEG_C_ATTR;
typedef uint64_t ATTR_OPEN_POWER_MEMCTRL_THROTTLE_TEMP_DEG_C_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_PROC_DVFS_TEMP_DEG_C attribute
typedef uint64_t OPEN_POWER_PROC_DVFS_TEMP_DEG_C_ATTR;
typedef uint64_t ATTR_OPEN_POWER_PROC_DVFS_TEMP_DEG_C_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_MEMCTRL_ERROR_TEMP_DEG_C attribute
typedef uint64_t OPEN_POWER_MEMCTRL_ERROR_TEMP_DEG_C_ATTR;
typedef uint64_t ATTR_OPEN_POWER_MEMCTRL_ERROR_TEMP_DEG_C_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_N_BULK_POWER_LIMIT_WATTS attribute
typedef uint64_t OPEN_POWER_N_BULK_POWER_LIMIT_WATTS_ATTR;
typedef uint64_t ATTR_OPEN_POWER_N_BULK_POWER_LIMIT_WATTS_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_N_MAX_MEM_POWER_WATTS attribute
typedef uint64_t OPEN_POWER_N_MAX_MEM_POWER_WATTS_ATTR;
typedef uint64_t ATTR_OPEN_POWER_N_MAX_MEM_POWER_WATTS_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_MEMCTRL_READ_TIMEOUT_SEC attribute
typedef uint64_t OPEN_POWER_MEMCTRL_READ_TIMEOUT_SEC_ATTR;
typedef uint64_t ATTR_OPEN_POWER_MEMCTRL_READ_TIMEOUT_SEC_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_DIMM_READ_TIMEOUT_SEC attribute
typedef uint64_t OPEN_POWER_DIMM_READ_TIMEOUT_SEC_ATTR;
typedef uint64_t ATTR_OPEN_POWER_DIMM_READ_TIMEOUT_SEC_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_PROC_ERROR_TEMP_DEG_C attribute
typedef uint64_t OPEN_POWER_PROC_ERROR_TEMP_DEG_C_ATTR;
typedef uint64_t ATTR_OPEN_POWER_PROC_ERROR_TEMP_DEG_C_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_MIN_MEM_UTILIZATION_THROTTLING attribute
typedef uint64_t OPEN_POWER_MIN_MEM_UTILIZATION_THROTTLING_ATTR;
typedef uint64_t ATTR_OPEN_POWER_MIN_MEM_UTILIZATION_THROTTLING_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_PROC_READ_TIMEOUT_SEC attribute
typedef uint64_t OPEN_POWER_PROC_READ_TIMEOUT_SEC_ATTR;
typedef uint64_t ATTR_OPEN_POWER_PROC_READ_TIMEOUT_SEC_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_REGULATOR_EFFICIENCY_FACTOR attribute
typedef uint64_t OPEN_POWER_REGULATOR_EFFICIENCY_FACTOR_ATTR;
typedef uint64_t ATTR_OPEN_POWER_REGULATOR_EFFICIENCY_FACTOR_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_MIN_POWER_CAP_WATTS attribute
typedef uint64_t OPEN_POWER_MIN_POWER_CAP_WATTS_ATTR;
typedef uint64_t ATTR_OPEN_POWER_MIN_POWER_CAP_WATTS_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_N_PLUS_ONE_BULK_POWER_LIMIT_WATTS attribute
typedef uint64_t OPEN_POWER_N_PLUS_ONE_BULK_POWER_LIMIT_WATTS_ATTR;
typedef uint64_t ATTR_OPEN_POWER_N_PLUS_ONE_BULK_POWER_LIMIT_WATTS_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_N_PLUS_ONE_MAX_MEM_POWER_WATTS attribute
typedef uint64_t OPEN_POWER_N_PLUS_ONE_MAX_MEM_POWER_WATTS_ATTR;
typedef uint64_t ATTR_OPEN_POWER_N_PLUS_ONE_MAX_MEM_POWER_WATTS_type;

// Type aliases and/or sizes for ATTR_OPEN_POWER_TURBO_MODE_SUPPORTED attribute
typedef uint8_t OPEN_POWER_TURBO_MODE_SUPPORTED_ATTR;
typedef uint8_t ATTR_OPEN_POWER_TURBO_MODE_SUPPORTED_type;

// Type aliases and/or sizes for ATTR_ADC_CHANNEL_FUNC_IDS attribute
typedef uint8_t ADC_CHANNEL_FUNC_IDS_ATTR[16];
typedef uint8_t ATTR_ADC_CHANNEL_FUNC_IDS_type[16];

// Type aliases and/or sizes for ATTR_ADC_CHANNEL_SENSOR_NUMBERS attribute
typedef uint16_t ADC_CHANNEL_SENSOR_NUMBERS_ATTR[16];
typedef uint16_t ATTR_ADC_CHANNEL_SENSOR_NUMBERS_type[16];

// Type aliases and/or sizes for ATTR_ADC_CHANNEL_GNDS attribute
typedef uint8_t ADC_CHANNEL_GNDS_ATTR[16];
typedef uint8_t ATTR_ADC_CHANNEL_GNDS_type[16];

// Type aliases and/or sizes for ATTR_ADC_CHANNEL_GAINS attribute
typedef uint32_t ADC_CHANNEL_GAINS_ATTR[16];
typedef uint32_t ATTR_ADC_CHANNEL_GAINS_type[16];

// Type aliases and/or sizes for ATTR_ADC_CHANNEL_OFFSETS attribute
typedef uint32_t ADC_CHANNEL_OFFSETS_ATTR[16];
typedef uint32_t ATTR_ADC_CHANNEL_OFFSETS_type[16];

// Type aliases and/or sizes for ATTR_APSS_GPIO_PORT_MODES attribute
typedef uint8_t APSS_GPIO_PORT_MODES_ATTR[2];
typedef uint8_t ATTR_APSS_GPIO_PORT_MODES_type[2];

// Type aliases and/or sizes for ATTR_APSS_GPIO_PORT_PINS attribute
typedef uint8_t APSS_GPIO_PORT_PINS_ATTR[16];
typedef uint8_t ATTR_APSS_GPIO_PORT_PINS_type[16];

// Type aliases and/or sizes for ATTR_PSTATE_TABLE attribute
typedef uint8_t PSTATE_TABLE_ATTR[3656];
typedef uint8_t ATTR_PSTATE_TABLE_type[3656];

// Type aliases and/or sizes for ATTR_PSTATE_TABLE_MFG attribute
typedef uint8_t PSTATE_TABLE_MFG_ATTR[3656];
typedef uint8_t ATTR_PSTATE_TABLE_MFG_type[3656];

// Type aliases and/or sizes for ATTR_OCC_CONTROL_DATA attribute
typedef uint8_t OCC_CONTROL_DATA_ATTR[256];
typedef uint8_t ATTR_OCC_CONTROL_DATA_type[256];

// Type aliases and/or sizes for ATTR_OT_MIN_N_PER_MBA attribute
typedef uint16_t OT_MIN_N_PER_MBA_ATTR;
typedef uint16_t ATTR_OT_MIN_N_PER_MBA_type;

// Type aliases and/or sizes for ATTR_N_PLUS_ONE_N_PER_MBA attribute
typedef uint16_t N_PLUS_ONE_N_PER_MBA_ATTR;
typedef uint16_t ATTR_N_PLUS_ONE_N_PER_MBA_type;

// Type aliases and/or sizes for ATTR_N_PLUS_ONE_N_PER_CHIP attribute
typedef uint16_t N_PLUS_ONE_N_PER_CHIP_ATTR;
typedef uint16_t ATTR_N_PLUS_ONE_N_PER_CHIP_type;

// Type aliases and/or sizes for ATTR_OVERSUB_N_PER_MBA attribute
typedef uint16_t OVERSUB_N_PER_MBA_ATTR;
typedef uint16_t ATTR_OVERSUB_N_PER_MBA_type;

// Type aliases and/or sizes for ATTR_OVERSUB_N_PER_CHIP attribute
typedef uint16_t OVERSUB_N_PER_CHIP_ATTR;
typedef uint16_t ATTR_OVERSUB_N_PER_CHIP_type;

// Type aliases and/or sizes for ATTR_VPD_SWITCHES attribute
typedef VpdSwitches VPD_SWITCHES_ATTR;
typedef VpdSwitches ATTR_VPD_SWITCHES_type;

// Type aliases and/or sizes for ATTR_OPAL_MODEL attribute
typedef char OPAL_MODEL_ATTR[32];
typedef char ATTR_OPAL_MODEL_type[32];
const size_t ATTR_OPAL_MODEL_max_chars = 31;

// Type aliases and/or sizes for ATTR_ISDIMM_MBVPD_INDEX attribute
typedef uint8_t ISDIMM_MBVPD_INDEX_ATTR;
typedef uint8_t ATTR_ISDIMM_MBVPD_INDEX_type;

// Type aliases and/or sizes for ATTR_HTMGT_SAFEMODE attribute
typedef uint8_t HTMGT_SAFEMODE_ATTR;
typedef uint8_t ATTR_HTMGT_SAFEMODE_type;

// Type aliases and/or sizes for ATTR_IPMI_INSTANCE attribute
typedef uint32_t IPMI_INSTANCE_ATTR;
typedef uint32_t ATTR_IPMI_INSTANCE_type;

// Type aliases and/or sizes for ATTR_IPMI_SENSORS attribute
typedef uint16_t IPMI_SENSORS_ATTR[16][2];
typedef uint16_t ATTR_IPMI_SENSORS_type[16][2];

// Type aliases and/or sizes for ATTR_IPMI_MAX_BUFFER_SIZE attribute
typedef uint32_t IPMI_MAX_BUFFER_SIZE_ATTR;
typedef uint32_t ATTR_IPMI_MAX_BUFFER_SIZE_type;

// Type aliases and/or sizes for ATTR_SERIAL_NUMBER attribute
typedef uint8_t SERIAL_NUMBER_ATTR[18];
typedef uint8_t ATTR_SERIAL_NUMBER_type[18];

// Type aliases and/or sizes for ATTR_PART_NUMBER attribute
typedef uint8_t PART_NUMBER_ATTR[18];
typedef uint8_t ATTR_PART_NUMBER_type[18];

// Type aliases and/or sizes for ATTR_MSS_VOLT_VPP_SLOPE_EFF_CONFIG attribute
typedef uint32_t MSS_VOLT_VPP_SLOPE_EFF_CONFIG_ATTR;
typedef uint32_t ATTR_MSS_VOLT_VPP_SLOPE_EFF_CONFIG_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_VPP_INTERCEPT_EFF_CONFIG attribute
typedef uint32_t MSS_VOLT_VPP_INTERCEPT_EFF_CONFIG_ATTR;
typedef uint32_t ATTR_MSS_VOLT_VPP_INTERCEPT_EFF_CONFIG_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_DDR3_VDDR_SLOPE_EFF_CONFIG attribute
typedef uint32_t MSS_VOLT_DDR3_VDDR_SLOPE_EFF_CONFIG_ATTR;
typedef uint32_t ATTR_MSS_VOLT_DDR3_VDDR_SLOPE_EFF_CONFIG_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_DDR3_VDDR_INTERCEPT_EFF_CONFIG attribute
typedef uint32_t MSS_VOLT_DDR3_VDDR_INTERCEPT_EFF_CONFIG_ATTR;
typedef uint32_t ATTR_MSS_VOLT_DDR3_VDDR_INTERCEPT_EFF_CONFIG_type;

// Type aliases and/or sizes for ATTR_MRW_DDR3_VDDR_MAX_LIMIT_EFF_CONFIG attribute
typedef uint32_t MRW_DDR3_VDDR_MAX_LIMIT_EFF_CONFIG_ATTR;
typedef uint32_t ATTR_MRW_DDR3_VDDR_MAX_LIMIT_EFF_CONFIG_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_DDR4_VDDR_SLOPE_EFF_CONFIG attribute
typedef uint32_t MSS_VOLT_DDR4_VDDR_SLOPE_EFF_CONFIG_ATTR;
typedef uint32_t ATTR_MSS_VOLT_DDR4_VDDR_SLOPE_EFF_CONFIG_type;

// Type aliases and/or sizes for ATTR_MSS_VOLT_DDR4_VDDR_INTERCEPT_EFF_CONFIG attribute
typedef uint32_t MSS_VOLT_DDR4_VDDR_INTERCEPT_EFF_CONFIG_ATTR;
typedef uint32_t ATTR_MSS_VOLT_DDR4_VDDR_INTERCEPT_EFF_CONFIG_type;

// Type aliases and/or sizes for ATTR_MRW_DDR4_VDDR_MAX_LIMIT_EFF_CONFIG attribute
typedef uint32_t MRW_DDR4_VDDR_MAX_LIMIT_EFF_CONFIG_ATTR;
typedef uint32_t ATTR_MRW_DDR4_VDDR_MAX_LIMIT_EFF_CONFIG_type;

// Type aliases and/or sizes for ATTR_SBE_MASTER_INTR_SERVICE_ENABLED attribute
typedef uint8_t SBE_MASTER_INTR_SERVICE_ENABLED_ATTR;
typedef uint8_t ATTR_SBE_MASTER_INTR_SERVICE_ENABLED_type;

// Type aliases and/or sizes for ATTR_CLEAR_DIMM_SPD_ENABLE attribute
typedef uint8_t CLEAR_DIMM_SPD_ENABLE_ATTR;
typedef uint8_t ATTR_CLEAR_DIMM_SPD_ENABLE_type;

// Type aliases and/or sizes for ATTR_WOF_PROC_SORT attribute
typedef uint16_t WOF_PROC_SORT_ATTR[4][3];
typedef uint16_t ATTR_WOF_PROC_SORT_type[4][3];

// Type aliases and/or sizes for ATTR_WOF_FREQUENCY_UPLIFT attribute
typedef uint16_t WOF_FREQUENCY_UPLIFT_ATTR[4][22][13];
typedef uint16_t ATTR_WOF_FREQUENCY_UPLIFT_type[4][22][13];

// Type aliases and/or sizes for ATTR_WOF_FREQUENCY_UPLIFT_SELECTED attribute
typedef uint16_t WOF_FREQUENCY_UPLIFT_SELECTED_ATTR[22][13];
typedef uint16_t ATTR_WOF_FREQUENCY_UPLIFT_SELECTED_type[22][13];

// Type aliases and/or sizes for ATTR_WOF_REGULATOR_EFFICIENCIES attribute
typedef uint16_t WOF_REGULATOR_EFFICIENCIES_ATTR[3][14];
typedef uint16_t ATTR_WOF_REGULATOR_EFFICIENCIES_type[3][14];


} // End namespace TARGETING

#endif // TARG_ATTRIBUTETRAITS_H

