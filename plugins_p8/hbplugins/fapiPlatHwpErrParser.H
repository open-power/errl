// fapiPlatHwpErrParser.H
// This file is generated by perl script fapiPlatCreateHwpErrParser.pl

#ifndef FAPIPLATHWPERRPARSER_H_
#define FAPIPLATHWPERRPARSER_H_

#ifdef LOGPARSER

namespace fapi
{

void fapiParseHwpRc(ErrlUsrParser & i_parser,
                    void * i_pBuffer,
                    const uint32_t i_buflen)
{
    uint32_t l_rc = ntohl(*(static_cast<uint32_t *>(i_pBuffer)));

    switch(l_rc)
    {
    case 0x9e264f:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_ERROR_A");
        i_parser.PrintString("HWP Error description", "HWP Error A generated by Unit Test");
        break;
    case 0xbe412a:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_DIMM_CALLOUT_MBA_A");
        i_parser.PrintString("HWP Error description", "DIMM Callout generated by Unit Test, passing in MBA target and port number.");
        break;
    case 0xc1e913:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_DIMM_CALLOUT_MBA_B");
        i_parser.PrintString("HWP Error description", "DIMM Callout generated by Unit Test, passing in MBA target,port number and specific DIMM number.");
        break;
    case 0x1e81d0:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_DIMM_CALLOUT_MBA_C");
        i_parser.PrintString("HWP Error description", "DIMM Callout generated by Unit Test, passing in only MBA target to callout all dimms under it.");
        break;
    case 0xb7d1b9:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_DIMM_DECONFIGURE_MBA_A");
        i_parser.PrintString("HWP Error description", "DIMM DECONFIGURE generated by Unit Test, passing in MBA target and port number.");
        break;
    case 0xbf3e9e:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_DIMM_GARD_MBA_B");
        i_parser.PrintString("HWP Error description", "DIMM Callout generated by Unit Test, passing in MBA target,port number and specific DIMM number.");
        break;
    case 0x1f5879:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_ERROR_B");
        i_parser.PrintString("HWP Error description", "HWP Error B used to add FFDC to an existing ReturnCode");
        break;
    case 0x685e15:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_CONFIG_NO_MCS_CHIPLETS");
        i_parser.PrintString("HWP Error description", "HWP Config Unit Test found no MCS chiplets");
        break;
    case 0x50cef5:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_CONFIG_PARENT_CHIP_MISMATCH");
        i_parser.PrintString("HWP Error description", "HWP Config Unit Test found a parent chip mismatch");
        break;
    case 0x111bfa:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_DQ_NO_ERR_ON_BAD_PARAMS");
        i_parser.PrintString("HWP Error description", "HWP DQ Unit Test did not get an expected error");
        break;
    case 0x2c4184:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_DQ_BAD_DATA");
        i_parser.PrintString("HWP Error description", "HWP DQ Unit Test got bad data");
        break;
    case 0xb37e6a:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_INCORRECT_VER");
        i_parser.PrintString("HWP Error description", "InitFile has incorrect version");
        break;
    case 0x90f30b:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_ATTR_ID_OUT_OF_RANGE");
        i_parser.PrintString("HWP Error description", "InitFile's attribute id is out of range");
        break;
    case 0xfbbb25:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_LIT_ID_OUT_OF_RANGE");
        i_parser.PrintString("HWP Error description", "InitFile's literal id is out of range");
        break;
    case 0x36f4d9:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_TGT_NUM_OUT_OF_RANGE");
        i_parser.PrintString("HWP Error description", "InitFile's target number is out of range");
        break;
    case 0x9bfac3:
        i_parser.PrintString("HwpReturnCode", "RC_HWP_EXEC_INITFILE_TEST_FAILED");
        i_parser.PrintString("HWP Error description", "HWP Exec InitFile test case failed");
        break;
    case 0x477b5f:
        i_parser.PrintString("HwpReturnCode", "RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND");
        i_parser.PrintString("HWP Error description", "HWP Exec InitFile test incorrect number of MBA chiplets found");
        break;
    case 0x2e3aab:
        i_parser.PrintString("HwpReturnCode", "RC_HWP_EXEC_INITFILE_TEST_NO_MEMBUF_FOUND");
        i_parser.PrintString("HWP Error description", "HWP Exec Initfile test no MEMBUF chips found");
        break;
    case 0x0d5771:
        i_parser.PrintString("HwpReturnCode", "RC_HWP_ATTR_UNIT_TEST_FAIL");
        i_parser.PrintString("HWP Error description", "HWP Attribute Unit Test failed");
        break;
    case 0x84ba5c:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_WRONG_MCS_RETURNED");
        i_parser.PrintString("HWP Error description", "HWP Config Unit Test returned wrong MCS for memory buffer");
        break;
    case 0xcecb08:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_EXECUTION_ERROR");
        i_parser.PrintString("HWP Error description", "The initFile has encountered an unusual error and dumped error information. See the FFDC and trace for diagnostic information.");
        break;
    case 0xc85db0:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_COLLECT_TRACE");
        i_parser.PrintString("HWP Error description", "Test adding firmware traces");
        break;
    case 0x3625cf:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_INVALID_ARGS");
        i_parser.PrintString("HWP Error description", "Invalid or out-of-range argument value(s) presented to proc_cen_framelock HWP.");
        break;
    case 0xd3871d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MCS");
        i_parser.PrintString("HWP Error description", "Framelock sequence set FIR bit in P8 MCI FIR Register. FIR bit indicates MCS issue.");
        break;
    case 0x0fd28f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("HWP Error description", "Framelock sequence set FIR bit in P8 MCI FIR Register. FIR bit indicates MEMBUF issue.");
        break;
    case 0x26474e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS");
        i_parser.PrintString("HWP Error description", "Framelock errstate sequence set FIR bit in P8 MCI FIR Register. FIR bit indicates MCS issue.");
        break;
    case 0x4c2266:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("HWP Error description", "Framelock errstate sequence set FIR bit in P8 MCI FIR Register. FIR bit indicates MEMBUF issue.");
        break;
    case 0x25dae2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR");
        i_parser.PrintString("HWP Error description", "Framelock errstate sequence set FIR bit in Centaur MBI FIR Register.");
        break;
    case 0xe68dfa:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "Framelock sequence fail reported in P8 MCI Status Register.");
        break;
    case 0x31481a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "Framelock errstate sequence fail reported in P8 MCI Status Register.");
        break;
    case 0xb9cfa7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "Framelock errstate sequence fail reported in Centaur MBI Status Register.");
        break;
    case 0xc4f88a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR");
        i_parser.PrintString("HWP Error description", "Framelock sequence timed out waiting for pass/fail indication in P8 MCI Status Register.");
        break;
    case 0x8f88f7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR");
        i_parser.PrintString("HWP Error description", "Framelock errstate sequence timed out waiting for pass/fail indication in P8 MCI Status Register.");
        break;
    case 0xd421a9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MCS");
        i_parser.PrintString("HWP Error description", "FRTL sequence set FIR bit in P8 MCI FIR Register. FIR bit indicates MCS issue.");
        break;
    case 0x46554e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("HWP Error description", "FRTL sequence set FIR bit in P8 MCI FIR Register. FIR bit indicates MEMBUF issue.");
        break;
    case 0x33f24b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS");
        i_parser.PrintString("HWP Error description", "FRTL manual sequence set FIR bit in P8 MCI FIR Register. FIR bit indicates MCS issue.");
        break;
    case 0x04811b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("HWP Error description", "FRTL manual sequence set FIR bit in P8 MCI FIR Register. FIR bit indicates MEMBUF issue.");
        break;
    case 0x21c432:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS");
        i_parser.PrintString("HWP Error description", "FRTL errstate sequence set FIR bit in P8 MCI FIR Register. FIR bit indicates MCS issue.");
        break;
    case 0xf5cc36:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("HWP Error description", "FRTL errstate sequence set FIR bit in P8 MCI FIR Register. FIR bit indicates MEMBUF issue.");
        break;
    case 0x93571e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR");
        i_parser.PrintString("HWP Error description", "FRTL mannual sequence set FIR bit in Centaur MBI FIR Register.");
        break;
    case 0x3035ac:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR");
        i_parser.PrintString("HWP Error description", "FRTL errstate sequence set FIR bit in Centaur MBI FIR Register.");
        break;
    case 0x0853de:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "FRTL sequence fail reported in P8 MCI Status Register.");
        break;
    case 0xbea003:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "FRTL manual sequence fail reported in P8 MCI Status Register.");
        break;
    case 0x1a6d1e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "FRTL errstate sequence fail reported in P8 MCI Status Register.");
        break;
    case 0xd1f927:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "FRTL manual sequence fail reported in Centaur MBI Status Register.");
        break;
    case 0x2d2459:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "FRTL errstate sequence fail reported in Centaur MBI Status Register.");
        break;
    case 0xdcd227:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("HWP Error description", "FRTL sequence timed out waiting for pass/fail indication in P8 MCI Status Register.");
        break;
    case 0x4dd245:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("HWP Error description", "FRTL manual sequence timed out waiting for pass/fail indication in Centaur MBI Status Register or P8 MCI Status Register.");
        break;
    case 0x62b344:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("HWP Error description", "FRTL errstate sequence timed out waiting for pass/fail indication in Centaur MBI Status Register or P8 MCI Status Register.");
        break;
    case 0x082a63:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_DIMM_BAD_PARAM");
        i_parser.PrintString("HWP Error description", "A HWP called a utility function to access the bad DQ data but specified an invalid PORT/DIMM/RANK");
        break;
    case 0xca5b35:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_DIMM_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "A HWP called a utility function to accessing the bad DQ data. The utility function could not find a functional DIMM associated with the specified MBA/PORT/DIMM");
        break;
    case 0x22ea37:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET");
        i_parser.PrintString("HWP Error description", "A HWP noted additional bad bits in the bad dq bitmap of the specified DIMM while in the manufacturing DISABLE_DRAM_REPAIRS mode during a read operation. CLEAN_BAD_DQ_BITMAP represents a bad dq bitmap with the appropriate spare and ECC DQs (if any) set to 1 and all other DQs set to 0. CURRENT_BAD_DQ_BITMAP represents the current bad dq bitmap. Any discrepancies with CLEAN_BAD_DQ_BITMAP are the result of a manufacturing mode process.");
        break;
    case 0xf9e2fc:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET");
        i_parser.PrintString("HWP Error description", "A HWP noted an attempt to set additional bad bits in the bad dq bitmap of the specified DIMM while in the manufacturing DISABLE_DRAM_REPAIRS mode during a write operation. CLEAN_BAD_DQ_BITMAP represents a bad dq bitmap with the appropriate spare and ECC DQs (if any) set to 1 and all other DQs set to 0. UPDATE_BAD_DQ_BITMAP represents the proposed updates to set. Any discrepancies with CLEAN_BAD_DQ_BITMAP are the result of a manufacturing mode process and should not be made.");
        break;
    case 0x840abf:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_UNEXPECTED_CHIP_TYPE");
        i_parser.PrintString("HWP Error description", "The hwp accessor encountered an unexpected chip type.");
        break;
    case 0x16cd7d:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_UNEXPECTED_CHIP_POSITION");
        i_parser.PrintString("HWP Error description", "The hwp accessor encountered an unexpected chip position.");
        break;
    case 0x4316ae:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_UNEXPECTED_CHIP_EC");
        i_parser.PrintString("HWP Error description", "The hwp accessor encountered an unexpected chip ec.");
        break;
    case 0x5b4313:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_CTL_UNEXPECTED_CHIP_TYPE");
        i_parser.PrintString("HWP Error description", "No entry in oscswitch ctl date for this chip type");
        break;
    case 0xb47c26:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_CTL_UNEXPECTED_ATTR");
        i_parser.PrintString("HWP Error description", "Attribute request out of expected range.");
        break;
    case 0xaccd9e:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_CTL_INVALID_ATTR_SIZE");
        i_parser.PrintString("HWP Error description", "Oscswitch ctl attribute size passed does not match type of data to return");
        break;
    case 0x4e9fd4:
        i_parser.PrintString("HwpReturnCode", "RC_INSUFFICIENT_VPD_RETURNED");
        i_parser.PrintString("HWP Error description", "VPD keyword record returned is smaller than expected. Probably a firmware bug, but could be bad VPD");
        break;
    case 0x325b1c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLACE_HOLDER_ERROR");
        i_parser.PrintString("HWP Error description", "Not for production code. This return code is used for cases where the error code has not been approved yet. Eventually, no code should use this error code.");
        break;
    case 0x862bca:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_RANK_GROUP_RC_ERROR_001A");
        i_parser.PrintString("HWP Error description", "Plug rule violation in EFF_CONFIG_RANK_GROUP.");
        break;
    case 0xc85d56:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNEXPECTED_MEM_CLK_STATUS");
        i_parser.PrintString("HWP Error description", "A read of the memory clock status register returned an unexpected value.");
        break;
    case 0x9ba951:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNEXPECTED_NEST_CLK_STATUS");
        i_parser.PrintString("HWP Error description", "A read of the nest clock status register returned an unexpected value.");
        break;
    case 0xbcd9ed:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INIT1_OPCG_DONE_ERROR");
        i_parser.PrintString("HWP Error description", "Timed out waiting for OPCG done bit in SCAN0 module.");
        break;
    case 0x470e1b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INIT1_FSISTATUS_FAIL");
        i_parser.PrintString("HWP Error description", "Failed VDD status check on FSI2PIB Status Reg bit(16).");
        break;
    case 0xc5995b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INIT3_FSISTATUS_FAIL");
        i_parser.PrintString("HWP Error description", "Failed clock region check on FSI2PIB Status Reg bit(31).");
        break;
    case 0x43c091:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NEST_PLL_LOCK_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Timed out waiting for NEST PLL lock in FSI2PIB Status Reg bit 24.");
        break;
    case 0x5ef462:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEM_PLL_LOCK_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Timed out waiting for MEM PLL lock in FSI2PIB Status Reg bit 25.");
        break;
    case 0xb21cba:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_THOLD_ERROR");
        i_parser.PrintString("HWP Error description", "THOLDS after Clock Start cmd do NOT match to the expected value.");
        break;
    case 0xb4f3fd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCREG_MISMATCH");
        i_parser.PrintString("HWP Error description", "Clock Control Register does not match the expected value.");
        break;
    case 0x5e30dd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ARRAY_REPAIR_BUSY");
        i_parser.PrintString("HWP Error description", "Array repair loader is busy now. 0x00050003 bit(0)=1");
        break;
    case 0xcc5de5:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ARRAY_REPAIR_NOT_DONE");
        i_parser.PrintString("HWP Error description", "Array repair loader did NOT report repair done.");
        break;
    case 0x1e2bd0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ECC_TRAP_ERROR");
        i_parser.PrintString("HWP Error description", "ECC trap register reported error. 0x00050004 bit(0-7) != 0x00");
        break;
    case 0x246dee:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_GENERAL_PUTSCOM_ERROR");
        i_parser.PrintString("HWP Error description", "PutScom failed! See previous error message for details.");
        break;
    case 0x650512:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_GENERAL_GETSCOM_ERROR");
        i_parser.PrintString("HWP Error description", "GetScom failed! See previous error message for details.");
        break;
    case 0xb117a1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNEXPECTED_FIR_STATUS");
        i_parser.PrintString("HWP Error description", "Unexpected FIR status! See previous error message for details.");
        break;
    case 0xd1addc:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INIT_CAL_FAILED");
        i_parser.PrintString("HWP Error description", "Inital Calibration failed. Check init cal error register at address: 0x8001C0180301143F");
        break;
    case 0x43991d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_GENERAL_SIMSTKFAC_ERROR");
        i_parser.PrintString("HWP Error description", "simSTKFAC failed! See previous error message for details");
        break;
    case 0x0146b8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_GET_FAPI_ATTRIBUTE_ERROR");
        i_parser.PrintString("HWP Error description", "Failed to get FAPI attribute! See previous error message for details.");
        break;
    case 0x2d8aa3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_GET_SIM_HIERARCHY_ERROR");
        i_parser.PrintString("HWP Error description", "Failed to get simulation hierarchy from eCmd target.");
        break;
    case 0x9db370:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_FN_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "An input to FN call is out of range.");
        break;
    case 0x1b89fd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MCBIST_ERROR");
        i_parser.PrintString("HWP Error description", "MCBIST operation failed");
        break;
    case 0xa6c4b1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PORT_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "TBD");
        break;
    case 0xd3307d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRIVER_IMP_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "TBD");
        break;
    case 0x66b0e3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "TBD");
        break;
    case 0xff7475:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_WR_DRAM_VREF_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "TBD");
        break;
    case 0x3a7ef7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_READ_CEN_VREF_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "TBD");
        break;
    case 0x8e516c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_RECEIVER_IMP_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "TBD");
        break;
    case 0x4a4825:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "Invalid input");
        break;
    case 0x05c9e8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNABLE_TO_GROUP_MCS");
        i_parser.PrintString("HWP Error description", "MCS COULD NOT BE GROUPED. EITHER SWITCH DIMMS SO GROUPING IS POSSIBLE OR CHANGE SYSTEM POLICY.");
        break;
    case 0xe0fb44:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("HWP Error description", "MEM grouping Attributes collection and printing function");
        break;
    case 0xaf6a97:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_FIRS");
        i_parser.PrintString("HWP Error description", "MEM FIR REGISTERS");
        break;
    case 0xbbb5d9:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MBA_FIRS");
        i_parser.PrintString("HWP Error description", "MEM MBA FIR REGISTERS");
        break;
    case 0x4b545b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR");
        i_parser.PrintString("HWP Error description", "Unexpected XBUS clock status register returned after clock start operation.");
        break;
    case 0x4e07c0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR");
        i_parser.PrintString("HWP Error description", "Unexpected ABUS clock status register returned after clock start operation.");
        break;
    case 0x2518cb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR");
        i_parser.PrintString("HWP Error description", "Unexpected clock status register returned after clock start operation.");
        break;
    case 0x3254ac:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR");
        i_parser.PrintString("HWP Error description", "Unexpected chiplet FIR bit set after clock start operation.");
        break;
    case 0x885d69:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR");
        i_parser.PrintString("HWP Error description", "Unexpected chiplet FIR bit set after clock start operation.");
        break;
    case 0xcad3b8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR");
        i_parser.PrintString("HWP Error description", "Unexpected chiplet FIR bit set after clock start operation.");
        break;
    case 0x761bb8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_CHIPLETS_PARTIAL_GOOD_ERR");
        i_parser.PrintString("HWP Error description", "Unexpected chiplet selection when reading the partial good vector.");
        break;
    case 0xf1763a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Invalid definition for PCIe/DSMP mux attribute value.");
        break;
    case 0xd0f138:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Invalid definition for fabric node ID attribute value.");
        break;
    case 0xf8a229:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Invalid definition for fabric chip ID attribute value.");
        break;
    case 0xa8fcc1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Invalid definition for epsilon table type attribute value.");
        break;
    case 0xc634f2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Invalid definition for epsilon guardband direction attribute value.");
        break;
    case 0xb40446:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Invalid definition for fabric async safe mode attribute value.");
        break;
    case 0x73fafc:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Invalid definition for fabric pump mode attribute value.");
        break;
    case 0xf7765d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Invalid definition for X bus width attribute value.");
        break;
    case 0x55f833:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Invalid definition for MCS interleaving attribute value.");
        break;
    case 0xfc91f1:
        i_parser.PrintString("HwpReturnCode", "RC_REPAIR_RING_INVALID_RINGBUF_PTR");
        i_parser.PrintString("HWP Error description", "Invalid input parameter: pointer to ringbuffer was NULL");
        break;
    case 0x7fccfc:
        i_parser.PrintString("HwpReturnCode", "RC_REPAIR_RING_ALLOC_FAIL");
        i_parser.PrintString("HWP Error description", "Failed to allocate buffer space for repair ring data");
        break;
    case 0x836cfc:
        i_parser.PrintString("HwpReturnCode", "RC_REPAIR_RING_INVALID_SIZE");
        i_parser.PrintString("HWP Error description", "Invalid input parameter: buffer too small to copy repair ring data");
        break;
    case 0x154c36:
        i_parser.PrintString("HwpReturnCode", "RC_REPAIR_RING_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "The repair ring specified was not found. Most likely reason is bad VPD");
        break;
    case 0xd7c91a:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_RING_FUNC_INVALID_PARAMETER");
        i_parser.PrintString("HWP Error description", "An invalid parameter was passed to a mvpd ring function.");
        break;
    case 0x745059:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_RING_FUNC_INSUFFICIENT_RECORD_SPACE");
        i_parser.PrintString("HWP Error description", "Insufficient room in the record to set the requested ring.");
        break;
    case 0xe0ccb2:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_EX_L2_SINGLE_MEMBER_ENABLE_BAD_FIELD_SIZE");
        i_parser.PrintString("HWP Error description", "VPD Field size too small to contain the EX_L2_SINGLE_MEMBER_ENABLE data");
        break;
    case 0x0b8152:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_ATTRIBUTE_ID");
        i_parser.PrintString("HWP Error description", "Invalid attribute ID");
        break;
    case 0xe3cbf6:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE");
        i_parser.PrintString("HWP Error description", "Output variable size must match size of expected output type.");
        break;
    case 0x3357ad:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INSUFFICIENT_VPD_RETURNED");
        i_parser.PrintString("HWP Error description", "VPD keyword record returned is smaller than expected. Probably a firmware bug, but could be bad VPD");
        break;
    case 0x4fccc4:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_VM_DATA_RETURNED");
        i_parser.PrintString("HWP Error description", "VM keyword data returned is out of range of supported version values. Probably a firmware bug, but could be bad VPD");
        break;
    case 0x7359c5:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_VM_VERSION_RETURNED");
        i_parser.PrintString("HWP Error description", "VM version returned is out of range of supported version values. Probably a firmware bug, but could be bad VPD");
        break;
    case 0x201adf:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_KEYWORD");
        i_parser.PrintString("HWP Error description", "Unexpected VPD keyword defined for the attribute in attribute look up table , which doesn't have any layout properties.");
        break;
    case 0x4d0769:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_SUPPLIER_ID_NOT_IN_MV_VPD");
        i_parser.PrintString("HWP Error description", "The Module ID in the #I keyword is not in the list of supplier provided entries in the MV keyword. Bad C-DIMM VPD.");
        break;
    case 0x5cae56:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_RING_FUNC_INVALID_PARAMETER");
        i_parser.PrintString("HWP Error description", "An invalid parameter was passed to a mbvpd ring function.");
        break;
    case 0xaac98e:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_TERM_DATA_UNSUPPORTED_VPD_ENCODE");
        i_parser.PrintString("HWP Error description", "The requested vpd value does not have a translation value.");
        break;
    case 0x63fab7:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_DRAM_2N_MODE_NOT_EQUAL");
        i_parser.PrintString("HWP Error description", "The 2 ports of DRAM 2N MODE should be equal in VPD. Bad C-DIMM VPD.");
        break;
    case 0x2fce49:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_MODE_PARAMETER");
        i_parser.PrintString("HWP Error description", "Mode must be Get or Set.");
        break;
    case 0xa5f308:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_MEM_TYPE");
        i_parser.PrintString("HWP Error description", "Memory type in VSPD keyword #I not DDR3 or DDR4 Unsupported C-DIMM VPD.");
        break;
    case 0x7cb3ae:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_MT_DATA");
        i_parser.PrintString("HWP Error description", "To get the proper MT data, we need a valid dimm rank combination.");
        break;
    case 0xffd0f5:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_DQ_DATA");
        i_parser.PrintString("HWP Error description", "To get the proper DQ data, we have to be given a valid copy to collect.");
        break;
    case 0xc8d375:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_DIMMS_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "To get the proper MT data, we need to find the dimm's to get a valid dimm rank combination");
        break;
    case 0xf13f16:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_DIMM_FOUND");
        i_parser.PrintString("HWP Error description", "Something went very wrong in the dimm's and the combination received is not valid");
        break;
    case 0x670ebc:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_M0_DATA");
        i_parser.PrintString("HWP Error description", "To get the proper MR data, we need to have the correct M0 data.");
        break;
    case 0xe22fd5:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_DQS_DATA");
        i_parser.PrintString("HWP Error description", "To get the proper DQS data, we have to be given a valid copy to collect.");
        break;
    case 0x8b24ed:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_ISDIMM_KEYWORD");
        i_parser.PrintString("HWP Error description", "ISDIMM Attribute definition has unexpected keyword value.");
        break;
    case 0x5dbf58:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("HWP Error description", "Default attribute definition has unexpected output type.");
        break;
    case 0x1d50d3:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("HWP Error description", "Uint64_t attribute definition has unexpected output type.");
        break;
    case 0xe8cca1:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("HWP Error description", "Attribute definition has unexpected output type.");
        break;
    case 0xf54f8d:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_ATTRIBUTE_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Attribute not found in attribute look up table");
        break;
    case 0xd71c3f:
        i_parser.PrintString("HwpReturnCode", "RC_GET_SPD_ACCESSOR_INVALID_ATTRIBUTE_ID");
        i_parser.PrintString("HWP Error description", "Request to get DIMM SPD field with invalid attribute ID. Code bug");
        break;
    case 0x17564b:
        i_parser.PrintString("HwpReturnCode", "RC_GET_SPD_ACCESSOR_INVALID_OUTPUT_SIZE");
        i_parser.PrintString("HWP Error description", "Request to get DIMM SPD field with invalid output buffer size. Code bug");
        break;
    case 0xf7603e:
        i_parser.PrintString("HwpReturnCode", "RC_GET_SPD_ACCESSOR_INVALID_DDR_TYPE");
        i_parser.PrintString("HWP Error description", "Request to get DIMM SPD field from DIMM with incorrect DDR Type Only DDR3 and DDR4 supported");
        break;
    case 0x3d492c:
        i_parser.PrintString("HwpReturnCode", "RC_GET_L3_DELTA_DATA_ERR");
        i_parser.PrintString("HWP Error description", "No matching entry was found for requested chip type and EC level.");
        break;
    case 0xe3f038:
        i_parser.PrintString("HwpReturnCode", "RC_GET_L3_DELTA_DATA_PARAMETER_ERR");
        i_parser.PrintString("HWP Error description", "Invalid target type passed on invocation.");
        break;
    case 0x23b41f:
        i_parser.PrintString("HwpReturnCode", "RC_GET_L3_DELTA_DATA_SELECT_ERR");
        i_parser.PrintString("HWP Error description", "The ATTR_PROC_PBIEX_ASYNC_SEL attribute, used to select the correct data to return is not valid.");
        break;
    case 0x7fd743:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_INFO_ATTR_INVALID_ATTRIBUTE_ID");
        i_parser.PrintString("HWP Error description", "Request to get PLL ring Info with invalid attribute ID. Code bug");
        break;
    case 0x41e12f:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_INFO_ATTR_INVALID_OUTPUT_SIZE");
        i_parser.PrintString("HWP Error description", "Request to get PLL ring Info with invalid output buffer size. Code bug");
        break;
    case 0x553c0b:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("HWP Error description", "Request to get ATTR_PROC_DMI_CUPLL_PFD360_OFFSET with an unsupported Processor Chip Name and EC level. The getPllRingInfoAttr Attribute Accessor needs updating to support this chip.");
        break;
    case 0x1f06c9:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("HWP Error description", "Request to get ATTR_PROC_DMI_CUPLL_REFCLKSEL_OFFSET with an unsupported Processor Chip Name and EC level. The getPllRingInfoAttr Attribute Accessor needs updating to support this chip.");
        break;
    case 0x957deb:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_ABUS_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("HWP Error description", "Request to get ATTR_PROC_ABUS_CUPLL_PFD360_OFFSET with an unsupported Processor Chip Name and EC level. The getPllRingInfoAttr Attribute Accessor needs updating to support this chip.");
        break;
    case 0x003468:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("HWP Error description", "Request to get ATTR_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET with an unsupported Processor Chip Name and EC level. The getPllRingInfoAttr Attribute Accessor needs updating to support this chip.");
        break;
    case 0x15da65:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEMB_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("HWP Error description", "Request to get ATTR_MEMB_DMI_CUPLL_PFD360_OFFSET with an unsupported Processor Chip Name and EC level. The getPllRingInfoAttr Attribute Accessor needs updating to support this chip.");
        break;
    case 0xc1d30b:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("HWP Error description", "Request to get ATTR_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET with an unsupported Processor Chip Name and EC level. The getPllRingInfoAttr Attribute Accessor needs updating to support this chip.");
        break;
    case 0xd8ed3b:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_INVALID_ATTRIBUTE_ID");
        i_parser.PrintString("HWP Error description", "Request to get a PLL ring attribute with an invalid Attribute ID");
        break;
    case 0xa37cd4:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC");
        i_parser.PrintString("HWP Error description", "Request to get a PLL ring attribute with an unsupported Processor Chip Name and EC level. The getPllRingAttr Attribute Accessor needs updating to support this chip.");
        break;
    case 0x6973fb:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1");
        i_parser.PrintString("HWP Error description", "Request to get a PLL ring attribute with an unsupported frequency attribute. Refer to the generated fapiPllRingAttr.H file to find which frequency attribute corresponds to FREQ_1 and to find the supported frequencies");
        break;
    case 0x8e637c:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2");
        i_parser.PrintString("HWP Error description", "Request to get a PLL ring attribute with an unsupported frequency attribute. Refer to the generated fapiPllRingAttr.H file to find which frequency attribute corresponds to FREQ_1/2 and to find the supported frequencies");
        break;
    case 0x45191c:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4");
        i_parser.PrintString("HWP Error description", "Request to get a PLL ring attribute with an unsupported frequency attribute. Refer to the generated fapiPllRingAttr.H file to find which frequency attribute corresponds to FREQ_1/2/3/4 and to find the supported frequencies");
        break;
    case 0x76fa80:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_FAILED_TO_CREATE_POREVE");
        i_parser.PrintString("HWP Error description", "Creation of the poreve object failed");
        break;
    case 0x658b36:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_FAILED_TO_OPEN_STATE_FILE_FOR_READING");
        i_parser.PrintString("HWP Error description", "Failed to open the state file for reading");
        break;
    case 0x14e56c:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_FAILED_TO_INSTALL_STATE");
        i_parser.PrintString("HWP Error description", "Got a model error installing the state");
        break;
    case 0xae8e3a:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_FAILED_TO_LOAD_HOOKS");
        i_parser.PrintString("HWP Error description", "Error loading the hooks file");
        break;
    case 0x959b61:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_UNKNOWN_ARG_TYPE");
        i_parser.PrintString("HWP Error description", "Found an unknown arg type");
        break;
    case 0x139cbd:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ERROR_DETACHING_SLAVE");
        i_parser.PrintString("HWP Error description", "Model error detaching a pib slave");
        break;
    case 0xaf03a8:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ENTRY_POINT_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Didn't find the entry point in the hooks file");
        break;
    case 0x80db9d:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_INVALID_ENTRY_POINT_TYPE");
        i_parser.PrintString("HWP Error description", "Entry point is an invalid type");
        break;
    case 0x4206df:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ERROR_SETTING_PC");
        i_parser.PrintString("HWP Error description", "Error setting the program counter");
        break;
    case 0x4a0061:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_BREAKPOINT_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Unable to find the breakpoint in the hooks file");
        break;
    case 0x67fd9b:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_INVALID_BREAK_POINT_TYPE");
        i_parser.PrintString("HWP Error description", "Break point is an invalid type");
        break;
    case 0x2da30f:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ERROR_SETTING_BREAKPOINT");
        i_parser.PrintString("HWP Error description", "Error setting the break point");
        break;
    case 0xed4839:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ERROR_SETTING_MRR");
        i_parser.PrintString("HWP Error description", "Unable to set the MRR");
        break;
    case 0xf41fa2:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_HALTED_WITH_ERROR");
        i_parser.PrintString("HWP Error description", "The SBE halted witohut setting the haltcode to success");
        break;
    case 0xc97791:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_PIB_ERROR_READING_SBEVITAL");
        i_parser.PrintString("HWP Error description", "Got a PIB error trying to read the SBE vital register for the halt code For centaur, the PIB operation being checked here is executed virtually only (the SBE Vital register doesn't exist in HW on Centaur,");
        break;
    case 0xe62c20:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_MODEL_ERROR_GETTING_HALT_CODE");
        i_parser.PrintString("HWP Error description", "Got a model error trying to read the SBE vital register for the halt code");
        break;
    case 0xbe6d03:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ARCHITECTED_ERROR");
        i_parser.PrintString("HWP Error description", "SBE stopped due to an architected error");
        break;
    case 0xab7a98:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_MODELING_ERROR");
        i_parser.PrintString("HWP Error description", "SBE stopped due to a modeling error");
        break;
    case 0xd725e6:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_UNKNOWN_STATUS_ERROR");
        i_parser.PrintString("HWP Error description", "SBE stopped with unknown status bits set");
        break;
    case 0xe30bed:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_FAILED_TO_OPEN_STATE_FILE_FOR_WRITING");
        i_parser.PrintString("HWP Error description", "Failed to open the state file for writing");
        break;
    case 0x31da04:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ERROR_EXTRACTING_STATE");
        i_parser.PrintString("HWP Error description", "Model error extracting state");
        break;
    case 0x258cde:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_QUERY_ERR");
        i_parser.PrintString("HWP Error description", "Unsupported attribute query");
        break;
    case 0x5abf5f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR");
        i_parser.PrintString("HWP Error description", "No rule provided to set BAR/range address, enable, or size.");
        break;
    case 0x613db3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR");
        i_parser.PrintString("HWP Error description", "BAR attribute content violates expected behavior.");
        break;
    case 0x1627e9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR");
        i_parser.PrintString("HWP Error description", "Chip memory range attributes specify overlapping address ranges.");
        break;
    case 0xd99790:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR");
        i_parser.PrintString("HWP Error description", "Invalid definition for merged chip memory address range.");
        break;
    case 0xf98b8c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR");
        i_parser.PrintString("HWP Error description", "Internal Error. Error encountered adding node to SMP map structure.");
        break;
    case 0xa7b5b0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR");
        i_parser.PrintString("HWP Error description", "Internal Error. Error encountered attempting to find node in SMP structure.");
        break;
    case 0x86d412:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR");
        i_parser.PrintString("HWP Error description", "Multiple chips found with identical fabric node/chip ID attribute values.");
        break;
    case 0xf825a0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR");
        i_parser.PrintString("HWP Error description", "Overlapping memory/MMIO address ranges detected.");
        break;
    case 0xb2ede7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF");
        i_parser.PrintString("HWP Error description", "Internal error. Invalid proc_setup_bars_bar_reg_def structure content.");
        break;
    case 0x33d5ce:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SIZE_XLATE_ERR");
        i_parser.PrintString("HWP Error description", "Internal error. Unsupported size translation for proc_setup_bars_bar_reg_def structure.");
        break;
    case 0x26ae92:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CHIPLET_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("HWP Error description", "Invalid target type presented to proc_chiplet_scominit HWP (expects TARGET_TYPE_PROC_CHIP).");
        break;
    case 0x6a2d9d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS");
        i_parser.PrintString("HWP Error description", "Supplied max image size is too small or image too large.");
        break;
    case 0x426242:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_IMG_PTR_ERROR");
        i_parser.PrintString("HWP Error description", "Supplied image ptrs are the same. This is not allowed.");
        break;
    case 0xac82f8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_BUF_PTR_ERROR");
        i_parser.PrintString("HWP Error description", "Supplied buffer(s) is invalid. Either it (they) does not exist or they are the same. This is not allowed.");
        break;
    case 0x2d4383:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_BUF_SIZE_NOT_FIXED");
        i_parser.PrintString("HWP Error description", "Supplied buffer size(s) differs from agreed upon fixed ring buffer size.");
        break;
    case 0xfa1767:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED");
        i_parser.PrintString("HWP Error description", "Supplied max output image size differs from agreed upon fixed SLW image size.");
        break;
    case 0xb9a411:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_IMAGE_SIZE_MISMATCH");
        i_parser.PrintString("HWP Error description", "Supplied image size differs from size in image header.");
        break;
    case 0xc5cf4a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH");
        i_parser.PrintString("HWP Error description", "Supplied image size differs from size in mainstore image header.");
        break;
    case 0x22219a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_RING_BLOCK_TOO_LARGE");
        i_parser.PrintString("HWP Error description", "Ring block is too large.");
        break;
    case 0x8a866f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR");
        i_parser.PrintString("HWP Error description", "Problem with WF ring block alignment.");
        break;
    case 0xcd93ef:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_IMGBUILD_ERROR");
        i_parser.PrintString("HWP Error description", "Local IMGBUILD_xyz error from non-FAPI routine. Check rc code in p8_delta_scan_rw.h.");
        break;
    case 0xce5766:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED");
        i_parser.PrintString("HWP Error description", "Estimated image size exceeds max allowed size.");
        break;
    case 0xb9a225:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_INTERNAL_IMAGE_ERR");
        i_parser.PrintString("HWP Error description", "Unable to obtain either image size or to validate image.");
        break;
    case 0x8e11ad:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR");
        i_parser.PrintString("HWP Error description", "Unable to obtain either image size or to validate image in mainstore.");
        break;
    case 0x11c16e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR");
        i_parser.PrintString("HWP Error description", "Error associated with deleting an image section.");
        break;
    case 0x5901a2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_RING_RETRIEVAL_ERROR");
        i_parser.PrintString("HWP Error description", "Error associated with retrieving RS4 ring from image.");
        break;
    case 0x57c041:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR");
        i_parser.PrintString("HWP Error description", "RS4 decompression failed.");
        break;
    case 0x9cfd3c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR");
        i_parser.PrintString("HWP Error description", "Existing ring has 1-bits in overlay locations.");
        break;
    case 0xf8ed61:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_L2_FARY_OVERLAY_ERROR");
        i_parser.PrintString("HWP Error description", "Existing ring has 1-bits in overlay locations.");
        break;
    case 0x417dfc:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_SLEEP_PROCESSING_ERROR");
        i_parser.PrintString("HWP Error description", "Unsupported chip type/EC combination found in sleep procesing code.");
        break;
    case 0x136c95:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_WF_CREATION_ERROR");
        i_parser.PrintString("HWP Error description", "Wiggle-flip programming failed.");
        break;
    case 0xea61b2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_IMAGE_UPDATE_ERROR");
        i_parser.PrintString("HWP Error description", "Error associated with updating mainstore image.");
        break;
    case 0xd49b55:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR");
        i_parser.PrintString("HWP Error description", "Error associated with adding empty SLW section for ramming table.");
        break;
    case 0xdeb7f6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_CREATE_FIXED_IMAGE_ERROR");
        i_parser.PrintString("HWP Error description", "Error associated with creating and initializing fixed image and fixed .slw and .ffdc sections.");
        break;
    case 0xc6bf3a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR");
        i_parser.PrintString("HWP Error description", "A keyword in the XIP image was not found.");
        break;
    case 0xdb68f0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_UNKNOWN_XIP_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown XIP error, except it's not an _ITEM_NOT_FOUND error.");
        break;
    case 0x9906fb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_UNKNOWN_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown error. (Shouldn't be in this code section.)");
        break;
    case 0xa6aa4e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_BAD_CODE_OR_PARM");
        i_parser.PrintString("HWP Error description", "Shouldn't be in this code section or invalid parm.");
        break;
    case 0x4ef10f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_MEMORY_ERROR");
        i_parser.PrintString("HWP Error description", "Memory allocation error.");
        break;
    case 0x5797a0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Max work space for output image is not equal to FIXED_SEEPROM_WORK_SPACE.");
        break;
    case 0x6babf1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_IMAGE_SIZE_MESS");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Supplied max image size is smaller than input image.");
        break;
    case 0xfa065c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_INTERNAL_IMAGE_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Unable to obtain either image size or to validate image.");
        break;
    case 0xcd7037:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Unable to obtain either image size or to validate image in MS.");
        break;
    case 0x00be8b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Supplied image size differs from size in image header in MS.");
        break;
    case 0x7dd5bf:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_BUF_PTR_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Supplied buffer(s) is invalid.");
        break;
    case 0xdaf9d0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_BUF_SIZE_NOT_FIXED");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Supplied buffer size(s) differs from agreed upon fixed ring buffer size.");
        break;
    case 0x5ae64a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_UNEXPECTED_FIELD_SIZE");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Expected field size of 4 bytes. Got something else from fapiGetMvpdField().");
        break;
    case 0x40b290:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_GEN_SCOM_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Updating Scom NC table w/L2 or L3 data failed. Check rc code in p8_delta_scan_rw.h");
        break;
    case 0x94beda:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_GEN_RAM_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Updating RAM table w/LPCR or HMEER RAM failed. Check rc code in p8_delta_scan_rw.h");
        break;
    case 0xa36da5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize PLL ring size returned from attribute is too large.");
        break;
    case 0xbf42b2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_IMGBUILD_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Local IMGBUILD_xyz error from non-FAPI routine. Check rc code in p8_delta_scan_rw.h.");
        break;
    case 0x277123:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RS4_COMPRESS_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize _rs4_compress() failed w/local rc.");
        break;
    case 0x54673e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Problem with RS4 ring sizes from _rs4_compress().");
        break;
    case 0xd99ee6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_ILLEGAL_RS4_DECOMPRESS_ADDR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize RS4 decompress address has illegal value.");
        break;
    case 0x88e888:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PORE_INLINE_CTX_CREATE_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize pore_inline_context_create failed w/local rc.");
        break;
    case 0x0047d7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PORE_INLINE_RS4_LAUNCH_CREATE_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize pore_MR/ADDS/LI/BRAD failed w/local rc.");
        break;
    case 0x5ec842:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize PLL ring block is too large.");
        break;
    case 0xf043fc:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Problem with RS4 PLL ring block alignment.");
        break;
    case 0xba10f5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_CHIPLET_ID_MESS");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize VPD ring's chipletId differs from 0xFF and doesn't match requested value either.");
        break;
    case 0x5510ed:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PG_RING_TOO_LARGE");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Requested #G ring size exceeds max value.");
        break;
    case 0x7e3d37:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PR_RING_TOO_LARGE");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Requested #R ring size exceeds max value.");
        break;
    case 0xce95d6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_INVALID_VPD_TYPE");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Invalid VPD type.");
        break;
    case 0xb00d77:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize A keyword in the XIP image was not found.");
        break;
    case 0xea7e6a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_VPD_KEYWORD_RESOLVE_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Unable to resolve local vpd keyword to fapi-level mvpd keyword.");
        break;
    case 0xff6cd0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PERFORM_RING_DATACARE_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Error occured during check_and_perform_ring_datacare()");
        break;
    case 0xbf18ec:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_CHECK_REDUNDANT_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Error occured during rs4_redundant()");
        break;
    case 0xbcf9f1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Ran out of space when trying to add a ring to the image (write_vpd_ring_to_ipl_image returned SBE_XIP_WOULD_OVERFLOW)");
        break;
    case 0xcc8f40:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize More FFDC for the RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW error");
        break;
    case 0x6f315a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Hit a RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW error before the minimum number of EX chiplets were added to the image.");
        break;
    case 0xd64710:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_WRITE_VPD_RING_TO_IPL_IMAGE_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Error occured during write_vpd_ring_to_ipl_image()");
        break;
    case 0x2e0a8f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_WRITE_VPD_RING_TO_SLW_IMAGE_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Error occured during write_vpd_ring_to_slw_image()");
        break;
    case 0x44c98a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_XIP_DELETE_SECTION_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize sbe_xip_delete_section() failed w/local rc.");
        break;
    case 0x2ef923:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_CREATE_FIXED_IMAGE_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Error associated with creating and initializing fixed image and fixed .slw and .ffdc sections.");
        break;
    case 0x2c264e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize New image size exceeds max allowed size.");
        break;
    case 0x9344ee:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_APPEND_SLW_SECTION_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Error associated with adding empty SLW section for ram and scom tables.");
        break;
    case 0xccb6eb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_BAD_CODE_OR_PARM");
        i_parser.PrintString("HWP Error description", "Procedure: p8_xip_customize Shouldn't be in this code section or invalid modeBuild parm.");
        break;
    case 0x36d7d6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE");
        i_parser.PrintString("HWP Error description", "pba bar scope out of range, allowed is 0 to 7");
        break;
    case 0x4c0ba0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_ADDR_OUT_OF_RANGE");
        i_parser.PrintString("HWP Error description", "pba bar scope out of range, allowed is 0 to 7");
        break;
    case 0x1154b2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_ADDR_ALIGNMENT_ERROR");
        i_parser.PrintString("HWP Error description", "pba BAR must be on a 1MB boundary");
        break;
    case 0xe51b0f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_BAR_SIZE_INVALID");
        i_parser.PrintString("HWP Error description", "Non-zero PBA BAR defined with region size of 0. Size must be 1MB or greater");
        break;
    case 0xfb1bf8:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_SBE_STOPPED");
        i_parser.PrintString("HWP Error description", "SBE is not running, unable to service scan request.");
        break;
    case 0x9d93d7:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_SBE_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "After requesting SBE scan operation, timed out waiting for SBE to attain ready state.");
        break;
    case 0x0a8010:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_SBE_SCAN_ERROR");
        i_parser.PrintString("HWP Error description", "SBE scan service indicated scan failure.");
        break;
    case 0x046f68:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_INVALID_OPERATION");
        i_parser.PrintString("HWP Error description", "Invalid PLL configuration action requested.");
        break;
    case 0x41b531:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK");
        i_parser.PrintString("HWP Error description", "A_Bus PLL failed to lock.");
        break;
    case 0x09e728:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK");
        i_parser.PrintString("HWP Error description", "DMI PLL failed to lock.");
        break;
    case 0x26cd06:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK");
        i_parser.PrintString("HWP Error description", "PCIE PLL failed to lock.");
        break;
    case 0x7c328a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING");
        i_parser.PrintString("HWP Error description", "Procedure: proc_prep_master_winkle The SBE is stopped and so will never wake up the master EX");
        break;
    case 0xd58c18:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM");
        i_parser.PrintString("HWP Error description", "Procedure: proc_prep_master_winkle The SBE is not at the correct istep number for the master winkle");
        break;
    case 0x3c5c1e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM");
        i_parser.PrintString("HWP Error description", "Procedure: proc_prep_master_winkle The SBE is not at the correct substep number for the master winkle");
        break;
    case 0x51aa81:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE");
        i_parser.PrintString("HWP Error description", "Procedure: proc_stop_deadman_timer The SBE did not reach the correct istep progress to stop the deadman timer");
        break;
    case 0x0617cc:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("HWP Error description", "Procedure: proc_stop_deadman_timer The SBE reached an unexpected final state");
        break;
    case 0xf12965:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_FREQ_RANGE_ERR");
        i_parser.PrintString("HWP Error description", "Invalid relationship between ceiling/nominal/floor core frequency attributes.");
        break;
    case 0xf4f3b9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR");
        i_parser.PrintString("HWP Error description", "Unsupported core floor to PB frequency ratio.");
        break;
    case 0x9c579d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_CEILING_FREQ_RATIO_ERR");
        i_parser.PrintString("HWP Error description", "Unsupported core ceiling to PB frequency ratio.");
        break;
    case 0x84adce:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR");
        i_parser.PrintString("HWP Error description", "Unsupported SMP build operation presented.");
        break;
    case 0x5b0836:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR");
        i_parser.PrintString("HWP Error description", "Node or system master chip designation error.");
        break;
    case 0xf5a13c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR");
        i_parser.PrintString("HWP Error description", "Internal Error. Error encountered adding node to SMP structure.");
        break;
    case 0x9cff62:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR");
        i_parser.PrintString("HWP Error description", "Multiple chips found with identifcal fabric node/chip ID attribute values.");
        break;
    case 0xe94ca2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_NO_MASTER_SPECIFIED_ERR");
        i_parser.PrintString("HWP Error description", "Input parameters do not specify a new fabric system master.");
        break;
    case 0xecee06:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("HWP Error description", "Status mismatch detected on ADU operation executed for SMP configuration.");
        break;
    case 0x7cec10:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR");
        i_parser.PrintString("HWP Error description", "Target epsilon value exceeds maximum value supported by HW capabilities.");
        break;
    case 0x7fb5a7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_EPSILON_INVALID_TABLE_ERR");
        i_parser.PrintString("HWP Error description", "Invalid epsilon table type or content detected.");
        break;
    case 0xe15256:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR");
        i_parser.PrintString("HWP Error description", "Invalid aggregate link configuration detected.");
        break;
    case 0x28e3be:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_X_CMD_RATE_ERR");
        i_parser.PrintString("HWP Error description", "Target link command rate value is out of range.");
        break;
    case 0xc549ea:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_A_CMD_RATE_ERR");
        i_parser.PrintString("HWP Error description", "Target link command rate value is out of range.");
        break;
    case 0xf90446:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_F_CMD_RATE_ERR");
        i_parser.PrintString("HWP Error description", "Target link command rate value is out of range.");
        break;
    case 0x72d2d4:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR");
        i_parser.PrintString("HWP Error description", "Inconsistent state in hotplug (CURR) shadow copies.");
        break;
    case 0x84c55f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR");
        i_parser.PrintString("HWP Error description", "A/X bus partial good attribute state does not allow for action on target.");
        break;
    case 0x9c1651:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_LINK_TARGET_TYPE_ERR");
        i_parser.PrintString("HWP Error description", "Invalid destination link target type detected in input parameters.");
        break;
    case 0x188219:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR");
        i_parser.PrintString("HWP Error description", "PCIE partial good attribute state does not allow for action on target.");
        break;
    case 0x22daf9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_CEILING_RATIO_ERR");
        i_parser.PrintString("HWP Error description", "Unsupported core ceiling frequency enumerated value.");
        break;
    case 0x743582:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR");
        i_parser.PrintString("HWP Error description", "Unsupported core floor frequency enumerated value.");
        break;
    case 0x71f6b4:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR");
        i_parser.PrintString("HWP Error description", "Invalid chips per group configuration detected.");
        break;
    case 0x52bdf8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR");
        i_parser.PrintString("HWP Error description", "Command rate pacing table lookup error.");
        break;
    case 0xd946f1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_TOPOLOGY");
        i_parser.PrintString("HWP Error description", "Invalid fabric topology specified by input parameters.");
        break;
    case 0x59be63:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ADU_UTILS_INVALID_LOCK_ATTEMPTS");
        i_parser.PrintString("HWP Error description", "Invalid number of lock manipulation attempts presented to proc_adu_utils library routine.");
        break;
    case 0x0519ca:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ADU_UTILS_INVALID_LOCK_OPERATION");
        i_parser.PrintString("HWP Error description", "Invalid lock operation type presented to proc_adu_utils library routine.");
        break;
    case 0x4efd34:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ADU_UTILS_INVALID_FBC_OP");
        i_parser.PrintString("HWP Error description", "Invalid fabric op programming parameters presented to proc_adu_utils library routine.");
        break;
    case 0x40240a:
        i_parser.PrintString("HwpReturnCode", "RC_I2C_FIFO_INCOMPLETE_RC");
        i_parser.PrintString("HWP Error description", "I2C FIFO DID NOT FLUSH.");
        break;
    case 0x7ce5ac:
        i_parser.PrintString("HwpReturnCode", "RC_I2C_ERROR_BIT_PRESENT_RC");
        i_parser.PrintString("HWP Error description", "I2C Error encountered (via status bit in I2C Status Register.");
        break;
    case 0xafca28:
        i_parser.PrintString("HwpReturnCode", "RC_I2C_COMPLETE_BIT_TIMEOUT_RC");
        i_parser.PrintString("HWP Error description", "Poll for I2C Command did not complete (via complete bit in I2C Status Register.");
        break;
    case 0xba128e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_INV_COMMAND");
        i_parser.PrintString("HWP Error description", "Invalid command issued to proc_thread_control procedure");
        break;
    case 0x9eeeed:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_SRESET_FAIL");
        i_parser.PrintString("HWP Error description", "Sreset command failed: RAS STAT instruction completed bit was not set after sreset command.");
        break;
    case 0xf5cf77:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT");
        i_parser.PrintString("HWP Error description", "Start command precondition not met: RAS STAT Maintenance bit is not set.");
        break;
    case 0xc6a13c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_START_FAIL");
        i_parser.PrintString("HWP Error description", "Start command failed: RAS STAT instruction completed bit was not set after start command.");
        break;
    case 0x36a66f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STOP_FAIL");
        i_parser.PrintString("HWP Error description", "Stop command issued to core PC, but RAS STAT maintenance bit is not set.");
        break;
    case 0x4cabcf:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT");
        i_parser.PrintString("HWP Error description", "Step command precondition not met: RAS STAT Maintenance bit is not set.");
        break;
    case 0x6de6c5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STEP_FAIL");
        i_parser.PrintString("HWP Error description", "Step command issued to core PC, but RAS STAT run bit is still set.");
        break;
    case 0x5fca0f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL");
        i_parser.PrintString("HWP Error description", "Activate command issued to core PC, but THREAD ACTIVE bit was not set.");
        break;
    case 0xabc2eb:
        i_parser.PrintString("HwpReturnCode", "RC_ACCESSOR_HWP_INVALID_TARGET_TYPE");
        i_parser.PrintString("HWP Error description", "Invalid input parameter: Valid target types are - XBUS, ABUS, MCS");
        break;
    case 0xc803f7:
        i_parser.PrintString("HwpReturnCode", "RC_ACCESSOR_HWP_MEMORY_ALLOC_FAIL");
        i_parser.PrintString("HWP Error description", "Failed to allocate run time memory from the heap");
        break;
    case 0xcd1adc:
        i_parser.PrintString("HwpReturnCode", "RC_EREPAIR_RESTORE_INVALID_TARGET_PAIR");
        i_parser.PrintString("HWP Error description", "Invalid input parameter: Valid target pairs are: XBus-XBus, ABus-ABus, MCS-MEMBUF");
        break;
    case 0x6bdc69:
        i_parser.PrintString("HwpReturnCode", "RC_EREPAIR_RESTORE_FIELD_VPD_NOT_CLEAR");
        i_parser.PrintString("HWP Error description", "Field VPD needs to be clear during Manufacturing Mode eRepair restore");
        break;
    case 0x1c7300:
        i_parser.PrintString("HwpReturnCode", "RC_EREPAIR_RESTORE_CHARM_THRESHOLD_EXCEED");
        i_parser.PrintString("HWP Error description", "The threshold limit for eRepair has been crossed during CHARM operation");
        break;
    case 0x38dd74:
        i_parser.PrintString("HwpReturnCode", "RC_EREPAIR_RESTORE_SPARE_LANES_IN_VPD");
        i_parser.PrintString("HWP Error description", "There are spare lanes in the VPD. Spare lanes cannot be restored.");
        break;
    case 0x82ea32:
        i_parser.PrintString("HwpReturnCode", "RC_EREPAIR_RESTORE_INVALID_TARGET");
        i_parser.PrintString("HWP Error description", "Invalid input parameter: Invalid target type");
        break;
    case 0x4863a9:
        i_parser.PrintString("HwpReturnCode", "RC_EREPAIR_THRESHOLD_EXCEED");
        i_parser.PrintString("HWP Error description", "The threshold limit for eRepair has been crossed");
        break;
    case 0xecdc93:
        i_parser.PrintString("HwpReturnCode", "RC_EREPAIR_MVPD_FULL");
        i_parser.PrintString("HWP Error description", "eRepair data limit in the Processor Module VPD has been reached");
        break;
    case 0x87cf08:
        i_parser.PrintString("HwpReturnCode", "RC_EREPAIR_MBVPD_FULL");
        i_parser.PrintString("HWP Error description", "eRepair data limit in the Memory Buffer FRU VPD has been reached");
        break;
    case 0x36dff0:
        i_parser.PrintString("HwpReturnCode", "RC_ACCESSOR_HWP_INVALID_MEM_VPD_SIZE");
        i_parser.PrintString("HWP Error description", "Invalid Memory VPD size has been returned by platform");
        break;
    case 0xb7dc08:
        i_parser.PrintString("HwpReturnCode", "RC_ACCESSOR_HWP_INVALID_FABRIC_VPD_SIZE");
        i_parser.PrintString("HWP Error description", "Invalid Fabric VPD size has been returned by platform");
        break;
    case 0x6c72d8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCIE_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("HWP Error description", "Invalid target type provided to HWP (expects TARGET_TYPE_PROC_CHIP).");
        break;
    case 0x224c2f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Unsupported/invalid IOP lane configuration attribute value.");
        break;
    case 0x9cd343:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Unsupported/invalid IOP swap configuration attribute value.");
        break;
    case 0xdd093d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCIE_CONFIG_INVALID_TARGET");
        i_parser.PrintString("HWP Error description", "Invalid target type provided to HWP.");
        break;
    case 0xc1b88a:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR");
        i_parser.PrintString("HWP Error description", "XIP access of branch table failed in p8_set_pore_bar");
        break;
    case 0xb192d7:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_LOC_ERROR");
        i_parser.PrintString("HWP Error description", "Invalid image location passed to p8_set_pore_bar");
        break;
    case 0x04bbf3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_PBABAR_ERROR");
        i_parser.PrintString("HWP Error description", "PBA BAR image location passed to p8_set_pore_bar");
        break;
    case 0xb1d067:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PBA_SLVRST_TIMED_OUT");
        i_parser.PrintString("HWP Error description", "PBA Slave Reset timed out in p8_set_pore_bar");
        break;
    case 0x2e2bf7:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR");
        i_parser.PrintString("HWP Error description", "Get of XIP Image size failed in p8_set_pore_bar");
        break;
    case 0x297f8d:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR");
        i_parser.PrintString("HWP Error description", "Image address plus image size overflows PBA region in p8_set_pore_bar");
        break;
    case 0x2169bb:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_SIZE0_ERROR");
        i_parser.PrintString("HWP Error description", "An image size of 0 was specified to p8_set_pore_bar but the BAR was not 0");
        break;
    case 0xcb4f35:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_PLACEMENT_ERROR");
        i_parser.PrintString("HWP Error description", "Image address plus image size overflows PBA region in p8_set_pore_bar");
        break;
    case 0xe1a330:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_ADDR_ERROR");
        i_parser.PrintString("HWP Error description", "Find of XIP of slw_control_vector failed in p8_set_pore_bar");
        break;
    case 0x4ad041:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR");
        i_parser.PrintString("HWP Error description", "XIP Find of slw_control_vector failed in p8_set_pore_bar");
        break;
    case 0x4f2f13:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR");
        i_parser.PrintString("HWP Error description", "XIP Find of slw_deep_winkle_exit_good_halt failed in p8_set_pore_bar");
        break;
    case 0x840cfc:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR");
        i_parser.PrintString("HWP Error description", "XIP Find of slw_deep_sleep_exit_good_halt failed in p8_set_pore_bar");
        break;
    case 0xb4cc7a:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_BAD_DOMAIN");
        i_parser.PrintString("HWP Error description", "Invalid domain value passed to p8_pfet_control.");
        break;
    case 0x27c0ac:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_BAD_OP");
        i_parser.PrintString("HWP Error description", "Invalid operation value passed to p8_pfet_control.");
        break;
    case 0xcf97f0:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_RAIL_ON");
        i_parser.PrintString("HWP Error description", "Error returned turning PFETs on in p8_pfet_control.");
        break;
    case 0xe97cc5:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_RAIL_OFF");
        i_parser.PrintString("HWP Error description", "Error returned turning PFETs off in p8_pfet_control.");
        break;
    case 0x5c1901:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PFETLIB_TIMEOUT");
        i_parser.PrintString("HWP Error description", "PFET sequencer timed out in p8_pfet_control. Bad EX Chiplet");
        break;
    case 0x2db7c9:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PORESLW_CODE_BAD_TBA");
        i_parser.PrintString("HWP Error description", "Invalid Table Base Address value passed to p8_poreslw_init.");
        break;
    case 0xaa6cfb:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SLW_RESET_TIMEOUT");
        i_parser.PrintString("HWP Error description", "SLW reset failed in p8_poreslw_init.");
        break;
    case 0xf7ad4a:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PORESLW_CODE_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p8_poreslw_init.");
        break;
    case 0xecee67:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM");
        i_parser.PrintString("HWP Error description", "Procedure: proc_check_slave_sbe_seeprom_complete The slave SBE is not at the correct istep number");
        break;
    case 0xdd4a94:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("HWP Error description", "Procedure: proc_check_slave_sbe_seeprom_complete The slave SBE did not reach a valid final state");
        break;
    case 0x413ca4:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc The PORE engine PC isn't properly aligned");
        break;
    case 0x47af71:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_UNRECOVERABLE_ECC_SEEPROM");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc ECCB indicates unrecoverable ECC error from I2C during SBE execution Reload/update of SEEPROM required");
        break;
    case 0xb81d0e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_UNRECOVERABLE_ECC_PNOR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc ECCB indicates unrecoverable ECC error from PNOR during SBE execution Reload/Update of PNOR required");
        break;
    case 0x35dd64:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_INTERNAL_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc PORE engine encountered an internal HW error");
        break;
    case 0xecf9df:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_I2C_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc PORE engine encountered a I2C interface/setup error");
        break;
    case 0xcc2677:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_ENGINE_RETRY");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc First SCOM into pervasive chiplet from SBE failed Trigger reconfig loop with no deconfig/GARD");
        break;
    case 0x84e062:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_PCI_CLOCK_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc First SCOM into PCIe chiplet from SBE failed Trigger callout for PCI reference clock");
        break;
    case 0x02b5e3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc PORE engine encountered a SCOM error");
        break;
    case 0x0efb35:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_OCI_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc PORE SLW engine encountered error on OCI interface");
        break;
    case 0x602c5e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_IMAGE_POINTER_NULL");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc PORE image pointer provided was NULL.");
        break;
    case 0xc95014:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc The PORE halt address isn't in a recognized address space");
        break;
    case 0x0bdec2:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_UNKNOWN_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc FAPI_SET_SBE_ERROR did not resolve PORE halt code to known return code May be caused by platform attempting to resolve engine state with mismatched binary image.");
        break;
    case 0x40bce7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_FROM_ADDR_CODE_BUG");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc Failed to association PORE halt code with known return code");
        break;
    case 0xfc7094:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc PORE engine encountered an instruction fetch/decode/execution error");
        break;
    case 0x45fc56:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_BAD_CHIP_TYPE");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc PORE SBE execution of OTPROM code failed chip type (Murano/Venice) check");
        break;
    case 0xa7f1d6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_SEEPROM_MAGIC_NUMBER_MISMATCH");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc PORE SBE execution of OTPROM code failed SEEPROM magic number check");
        break;
    case 0x29e453:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_BRANCH_TO_SEEPROM_FAIL");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc PORE SBE execution of OTPROM code failed to branch to SEEPROM");
        break;
    case 0x6ef0d9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_UNEXPECTED_OTPROM_HALT");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc PORE SBE execution of OTPROM code halted at an unexpected location");
        break;
    case 0x861f3c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_NEVER_STARTED");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc Procedure was called when no error bits were set and PC is all zeros. PORE engine was probably never started.");
        break;
    case 0xfa5104:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_SOFT_ECC_ERROR_SEEPROM");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc ECCB indicates correctable ECC error threshold from I2C was exceeded during SBE execution Reload/update of SEEPROM required");
        break;
    case 0x5960d9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_SOFT_ECC_ERROR_PNOR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc ECCB indicates correctable ECC error threshold from PNOR was exceeded during SBE execution Reload/update of PNOR required");
        break;
    case 0x3f19f1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_SOFT_ECC_ERROR_SEEPROM_AND_PNOR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc ECCB indicates correctable ECC error threshold from both I2C and PNOR was exceeded during SBE execution Reload/update of SEEPROM/PNOR required");
        break;
    case 0x8257fc:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_CODE_BUG");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_sbe_rc PORE SBE reported attention, but procedure attempted to return SUCCESS");
        break;
    case 0x90c868:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_NVLD_ERR_BIT_SET");
        i_parser.PrintString("HWP Error description", "Invalid address from PIB");
        break;
    case 0x857076:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_BUS_WRITE_NVLD_ERR_BIT_SET");
        i_parser.PrintString("HWP Error description", "Invalid write from PIB");
        break;
    case 0x89375d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_BUS_READ_NVLD_ERR_BIT_SET");
        i_parser.PrintString("HWP Error description", "Invalid read from PIB");
        break;
    case 0x641644:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_PAR_ERR_BIT_SET");
        i_parser.PrintString("HWP Error description", "Address parity error from PIB");
        break;
    case 0x941a6a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_BUS_PAR_ERR_BIT_SET");
        i_parser.PrintString("HWP Error description", "Parity error form PIB");
        break;
    case 0x2a75b6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_LOCAL_BUS_PAR_ERR_BIT_SET");
        i_parser.PrintString("HWP Error description", "A parity error on LB between I2C and PIB occurred");
        break;
    case 0x01b9bd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_INVALID_COMMAND_BIT_SET");
        i_parser.PrintString("HWP Error description", "Bit 45 of status register set");
        break;
    case 0xd9f447:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_PARITY_ERR_BIT_SET");
        i_parser.PrintString("HWP Error description", "Bit 46 of status register set");
        break;
    case 0xcd5b2d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_I2C_BACK_END_OVERRUN_ERR_BIT_SET");
        i_parser.PrintString("HWP Error description", "Bit 47 of status register set");
        break;
    case 0xd75c9f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_I2C_BACK_END_ACCESS_ERR_BIT_SET");
        i_parser.PrintString("HWP Error description", "Bit 48 of status register set");
        break;
    case 0x0df451:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_I2C_ARBITRATION_LOST_ERR_BIT_SET");
        i_parser.PrintString("HWP Error description", "Bit 49 of status register set");
        break;
    case 0x5b6ee8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_I2C_NACK_RECIEVED_ERR_BIT_SET");
        i_parser.PrintString("HWP Error description", "Bit 50 of status register set");
        break;
    case 0xb215e0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_NOT_SET");
        i_parser.PrintString("HWP Error description", "Bit 52 of status register not set after bit 44 is cleared");
        break;
    case 0x2b9ee9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_TIME_OUT");
        i_parser.PrintString("HWP Error description", "Bit 52 of status register not set and time out after certain time");
        break;
    case 0xe12b0f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_I2C_STOP_ERR_BIT_SET");
        i_parser.PrintString("HWP Error description", "Bit 53 of status register set");
        break;
    case 0x5f2fbd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PARITY_ERROR_BIT_SET");
        i_parser.PrintString("HWP Error description", "Bit 56 of status register set");
        break;
    case 0xb62907:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_CE_COUNTER_OVERFLOW_BIT_SET");
        i_parser.PrintString("HWP Error description", "Bit 57 of status register set");
        break;
    case 0x9a03d6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_MASTER_RESP_INFO_BITS_SET");
        i_parser.PrintString("HWP Error description", "Some bits between 38 to 40 of status register set");
        break;
    case 0x48f70a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_DATA_LGT_ERR");
        i_parser.PrintString("HWP Error description", "Bits 41:43 equal 100, control reg data length err");
        break;
    case 0x10b95b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADD_LGT_ERR");
        i_parser.PrintString("HWP Error description", "Bit 41:43 equal 101, control reg address length err");
        break;
    case 0x194a21:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADDR_BDY_ERR");
        i_parser.PrintString("HWP Error description", "Bit 41:43 equal 110, control reg address boudary err");
        break;
    case 0x8027cb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_ECCADDR_REG_ERR");
        i_parser.PrintString("HWP Error description", "Bit 41:43 equal 111, ecc address register err");
        break;
    case 0x1ae27e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_EFF_PIBM_RESET");
        i_parser.PrintString("HWP Error description", "Bit 41:43 equal 010,pib master reset");
        break;
    case 0xfc8b78:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_UEC_Q");
        i_parser.PrintString("HWP Error description", "Bit 41:43 equal 001, uncorrectable ecc error");
        break;
    case 0x12f654:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_READ_SEEPROM_PIB_SLAVE_RESET");
        i_parser.PrintString("HWP Error description", "Bit 41:43 equal 011, reset from pib slave");
        break;
    case 0x90cba8:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCBINIT_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p8_ocb_init.");
        break;
    case 0x2f979d:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCBINIT_BAD_Q_LENGTH_PARM");
        i_parser.PrintString("HWP Error description", "Bad Queue Length Passed to p8_ocb_init.");
        break;
    case 0x57b026:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCBINIT_BAD_ITP_TYPE_PARM");
        i_parser.PrintString("HWP Error description", "Bad Interrupt Type Passed to p8_ocb_init.");
        break;
    case 0x05f387:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCBINIT_BAD_Q_OVER_UNDERFLOW_PARM");
        i_parser.PrintString("HWP Error description", "Bad Queue Over/Underflow Enable Passed to p8_ocb_init.");
        break;
    case 0x5cbe82:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCBINIT_BAD_CHAN_NUM_PARM");
        i_parser.PrintString("HWP Error description", "Bad Channel Number Passed to p8_ocb_init.");
        break;
    case 0x2fa158:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCBINIT_BAD_CHAN_TYPE_PARM");
        i_parser.PrintString("HWP Error description", "Bad Channel Type Passed to p8_ocb_init.");
        break;
    case 0xab579b:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCBINIT_BAD_CHAN3_TYPE_PARM");
        i_parser.PrintString("HWP Error description", "Bad Channel Type for Channel3 Passed to p8_ocb_init.");
        break;
    case 0xe03712:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCC_CONTROL_BAD_405RESET_PARM");
        i_parser.PrintString("HWP Error description", "Bad Parm value for i_ppc405_reset_ctrl passed to p8_occ_control.");
        break;
    case 0x1b48eb:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCC_CONTROL_BAD_405BOOT_PARM");
        i_parser.PrintString("HWP Error description", "Bad Parm value for i_ppc405_boot_ctrl passed to p8_occ_control.");
        break;
    case 0xf07d53:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCCSRAM_CODE_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p8_occ_sram_init.");
        break;
    case 0x0ea9d5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_OHA_CODE_PUTGETSCOM_FAILED");
        i_parser.PrintString("HWP Error description", "Register read/write failed in proc_oha_init.");
        break;
    case 0xc8b218:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_OHA_CODE_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to proc_oha_init.");
        break;
    case 0xaa5241:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_OHA_CODE_BITOP_FAILED");
        i_parser.PrintString("HWP Error description", "Bit operation failed in proc_oha_init.");
        break;
    case 0x02511b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Psafe Pstate and FSM-stable timeout in proc_pcbs_init.");
        break;
    case 0x28abcb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCBS_CODE_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to proc_pcbs_init.");
        break;
    case 0x023cae:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PREP_UNSUPPORTED_MODE_ERR");
        i_parser.PrintString("HWP Error description", "Mode parameter value not supported");
        break;
    case 0xc43ddb:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PREP_TARGET_ERR");
        i_parser.PrintString("HWP Error description", "Primary target must be set to a valid value in the SCM case.");
        break;
    case 0x863c56:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_VLT_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Voltage change timeout for the ongoing operation completion.");
        break;
    case 0x2f52e0:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_MONITOR_ERR");
        i_parser.PrintString("HWP Error description", "Voltage change done but expected pstate did not match after completion.");
        break;
    case 0xff89f5:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_VOLTAGE_CHANGE_MODE_ERR");
        i_parser.PrintString("HWP Error description", "PMC is disabled for Voltage changes.");
        break;
    case 0x86b456:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_MST_SEQUENCER_STATE_ERR");
        i_parser.PrintString("HWP Error description", "PMC is disabled PMC_MASTER_SEQUENCER.");
        break;
    case 0x71193f:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMC_CODE_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to proc_pmc_init.");
        break;
    case 0xc4f2b3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCINIT_TIMEOUT");
        i_parser.PrintString("HWP Error description", "time out in polling some register condition.");
        break;
    case 0x97098e:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_SPIVID_CONFIG_ERROR");
        i_parser.PrintString("HWP Error description", "Master target does not have SPIVID ports enabled: check the configuration setup.");
        break;
    case 0x0a19d6:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR");
        i_parser.PrintString("HWP Error description", "Error found in DCM installment attribute settings for the SCM case.");
        break;
    case 0xc67e97:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR");
        i_parser.PrintString("HWP Error description", "Error found in DCM installment attribute settings.");
        break;
    case 0x673bfd:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMC_MASTER_CONFIG_ERROR");
        i_parser.PrintString("HWP Error description", "MasterPMC bit of Master PMC is not set.");
        break;
    case 0xf2e6e7:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMC_SLAVE_CONFIG_ERROR");
        i_parser.PrintString("HWP Error description", "MasterPMC bit of Slave PMC is not set.");
        break;
    case 0x45fec1:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMC_INTERCHIP_CONFIG_ERROR");
        i_parser.PrintString("HWP Error description", "Master is enabled with interchip interface but slave is not.");
        break;
    case 0x363801:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMC_FW_MODE_ERROR");
        i_parser.PrintString("HWP Error description", "Master is enabled with FW pstate mode but slave is not");
        break;
    case 0x05972c:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_IDLE_ERROR");
        i_parser.PrintString("HWP Error description", "PMC Idle halt errors exist. OCC recovery cannot proceed.");
        break;
    case 0x2a1abf:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_IDLE_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "Timed out in polling for Idle to Halt. OCC recovery cannot proceed");
        break;
    case 0x73002b:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_SPIVID_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "Timed out in polling for SPIVID controller to Halt. OCC reset is suspious but carried out");
        break;
    case 0x9335bf:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_INTCHP_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "Timed out in polling for InterChip Interface to Halt. OCC reset is suspious but carried out");
        break;
    case 0xe0fedf:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_O2P_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "Timed out in polling for OCI to PIB Bridge to Halt. OCC reset is suspious but carried out");
        break;
    case 0x479a2e:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR");
        i_parser.PrintString("HWP Error description", "Error found in DCM installment attribute settings for the SCM case in the PMC INIT phase..");
        break;
    case 0x331d75:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR");
        i_parser.PrintString("HWP Error description", "Error found in DCM installment attribute settings in the PMC INIT phase.");
        break;
    case 0x4f06e8:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSS_CODE_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to proc_pss_init.");
        break;
    case 0x047513:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSS_ADC_ERROR");
        i_parser.PrintString("HWP Error description", "SPIADC error bit asserted waiting for operation to complete.");
        break;
    case 0x3cafba:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSS_P2S_ERROR");
        i_parser.PrintString("HWP Error description", "SPIP2S error bit asserted waiting for operation to complete.");
        break;
    case 0x2285ee:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Special wakeup to all EX chiplets timed out.");
        break;
    case 0x444cc7:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY");
        i_parser.PrintString("HWP Error description", "An invalid entity (eg besides FSP, OCC, or PHYP ENUM) was passed to proc_cpu_special_wakeup");
        break;
    case 0x80213f:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_CODE_BAD_OP");
        i_parser.PrintString("HWP Error description", "An invalid operation (eg besides Set or Clear ENUM) was passed to proc_cpu_special_wakeup");
        break;
    case 0xd2d3e9:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_CHKSTOP");
        i_parser.PrintString("HWP Error description", "Special_wakeup requested with the system checkstopped and ATTR_PM_SPWUP_IGNORE_XSTOP_FLAG not set");
        break;
    case 0xebe926:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_SLW_IN_CHKSTOP");
        i_parser.PrintString("HWP Error description", "Special_wakeup requested to an EX chiplet in either Sleep or Winkle with the system checkstopped Calling firmware will have to check for this return code to influence dump flow. Note: this is NOT a loggable error.");
        break;
    case 0xa2ebda:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_NOT_SET");
        i_parser.PrintString("HWP Error description", "Special wake-up done is not set but a platform COUNT greater than 0 exists. Hardware and code are out of sync.");
        break;
    case 0xbb8844:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT");
        i_parser.PrintString("HWP Error description", "Register read/write failed in proc_cpu_special_wakeup");
        break;
    case 0xbcd673:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_INVALID_PMHISTORY");
        i_parser.PrintString("HWP Error description", "Invalid PM History detected in proc_cpu_special_wakeup");
        break;
    case 0xdda305:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GPE_RESET_TIMEOUT");
        i_parser.PrintString("HWP Error description", "GPE reset failed in proc_poregpe_init.");
        break;
    case 0x2bbfcd:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GPE_CODE_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to proc_poregpe_init.");
        break;
    case 0x77ce81:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GPE_BAD_ENGINE");
        i_parser.PrintString("HWP Error description", "Unknown engine passed to proc_poregpe_init.");
        break;
    case 0xdb976a:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PBA_INIT_INCORRECT_MODE");
        i_parser.PrintString("HWP Error description", "pba init procedure incorrect mode by calling function");
        break;
    case 0x4ce0fc:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PBA_SLAVE_RESET_TIMEOUT");
        i_parser.PrintString("HWP Error description", "pba_init timed out waited for the PBA slave to reset.");
        break;
    case 0x972ac2:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET");
        i_parser.PrintString("HWP Error description", "pba_init detected a busy PBA slave after the slave was reset.");
        break;
    case 0xada8f5:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PBA_BCDE_STOP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "pba_init timed out waiting to stop the Block Copy Download Engine.");
        break;
    case 0x99cdf5:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PBA_BCUE_STOP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "pba_init timed out waiting to stop the Block Copy Upload Engine.");
        break;
    case 0x2ac829:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCB_ACCESS_PUT_SCOM");
        i_parser.PrintString("HWP Error description", "Put to OCB indirect channel failed");
        break;
    case 0x5b2765:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCB_ACCESS_GET_SCOM");
        i_parser.PrintString("HWP Error description", "Get from OCB indirect channel failed.");
        break;
    case 0xf3db51:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCB_ACCESS_LENGTH_CHECK");
        i_parser.PrintString("HWP Error description", "Input length of data transfered via indirect channel did not match the output length");
        break;
    case 0xcf775d:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCB_ACCESS_CHANNEL");
        i_parser.PrintString("HWP Error description", "Invalid OCB indirect channel passed to proc_ocb_indir_access.");
        break;
    case 0xf01b99:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCB_ACCESS_OP");
        i_parser.PrintString("HWP Error description", "Invalid OCB indirect operation to proc_ocb_indir_access.");
        break;
    case 0x0b7054:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCB_PUT_DATA_LENGTH_ERROR");
        i_parser.PrintString("HWP Error description", "No data passed for Put operation.");
        break;
    case 0x32c419:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCB_ACCESS_GET_BUFFER");
        i_parser.PrintString("HWP Error description", "Get of OCB data reg had non-zero response code.");
        break;
    case 0x84d542:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCB_PUT_DATA_POLL_NOT_FULL_ERROR");
        i_parser.PrintString("HWP Error description", "Indicates that a timeout occured waiting for a push queue to be non-full before writing data. Is likely due to OCC firmware not pulling entries off of the queue in a timely manner.");
        break;
    case 0x21264c:
        i_parser.PrintString("HwpReturnCode", "RC_MPIPL_MCD_RECOVERY_NOT_DISABLED_RC");
        i_parser.PrintString("HWP Error description", "MCD recovery is not disabled as expected during MPIPL");
        break;
    case 0x4a8cdb:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PFET_CODE_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p8_pfet_init");
        break;
    case 0x967b3a:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PFET_GET_ATTR");
        i_parser.PrintString("HWP Error description", "p8_pfet_init could not get an attribute.");
        break;
    case 0xc17ac6:
        i_parser.PrintString("HwpReturnCode", "RC_POREVE_NO_PIB_MODEL");
        i_parser.PrintString("HWP Error description", "Signalled by Pore::pibMaster(). This will never happen; The PoreVe has not configured a PIB bus.");
        break;
    case 0xec0ef7:
        i_parser.PrintString("HwpReturnCode", "RC_POREVE_NO_OCI_MODEL");
        i_parser.PrintString("HWP Error description", "Signalled by Pore::ociMaster(). This will never happen; The PoreVe has not configured an OCI bus.");
        break;
    case 0xc5a938:
        i_parser.PrintString("HwpReturnCode", "RC_POREVE_PORE_OPERATION_ERROR");
        i_parser.PrintString("HWP Error description", "Signalled by Pore::operation(). An error occurred during an attempted register access of the PORE model.");
        break;
    case 0x29d313:
        i_parser.PrintString("HwpReturnCode", "RC_POREVE_PORE_NOT_MAPPED_ON_BUS");
        i_parser.PrintString("HWP Error description", "Signalled by Bus::operation(). No bus slave claimed the transaction, i.e., an attempted access of an unmapped address.");
        break;
    case 0xac6422:
        i_parser.PrintString("HwpReturnCode", "RC_POREVE_BUS_SLAVE_PERMISSION_DENIED");
        i_parser.PrintString("HWP Error description", "Signalled by Bus::operation(). The access mode was not permitted by the slave permissions. See the FAPI_ERR() log for details.");
        break;
    case 0xd8260b:
        i_parser.PrintString("HwpReturnCode", "RC_POREVE_HOOKMANAGER_INCONSISTENCY");
        i_parser.PrintString("HWP Error description", "Signalled by HookManager::runHooks(). An inconsistency in the HookManager data structures was detected. See the FAPI_ERR() log for details.");
        break;
    case 0xca43b3:
        i_parser.PrintString("HwpReturnCode", "RC_POREVE_PIB2CFAM_ERROR");
        i_parser.PrintString("HWP Error description", "Signalled by Pib2Cfam::operation(). An error occurred during an access of the virtual Pib2Cfam unit - either a read/write access error or an attempted access of a non-modeled register.");
        break;
    case 0xce644f:
        i_parser.PrintString("HwpReturnCode", "RC_POREVE_FASTI2C_ERROR");
        i_parser.PrintString("HWP Error description", "Signalled by FastI2cController::operation(). An error occurred during an access of a FastI2cController. To see the FAPI_ERR() log you may need to recompile the PoreVe with -DDEBUG_FASTI2C=1.");
        break;
    case 0x495523:
        i_parser.PrintString("HwpReturnCode", "RC_POREVE_LPC_ERROR");
        i_parser.PrintString("HWP Error description", "Signalled by LpcController::operation(). An error occurred during an access of a LpcController. To see the FAPI_ERR() log you may need to recompile the PoreVe with -DDEBUG_FASTI2C=1.");
        break;
    case 0x40a35d:
        i_parser.PrintString("HwpReturnCode", "RC_POREVE_PIBMEM_CONTROL_ERROR");
        i_parser.PrintString("HWP Error description", "Signalled by Pibmem::operation(). An error occurred during an access of a PIBMEM control register. See the FAPI_ERR() log for details.");
        break;
    case 0x1e0f2d:
        i_parser.PrintString("HwpReturnCode", "RC_POREVE_PIB_MEMORY_ACCESS_ERROR");
        i_parser.PrintString("HWP Error description", "Signalled by PibMemory::operation(). An error occurred during an access of a PibMemory. See the FAPI_ERR() log for details as well as the Model Error state of the PoreVe.");
        break;
    case 0xbbaee7:
        i_parser.PrintString("HwpReturnCode", "RC_POREVE_OCI_MEMORY_ACCESS_ERROR");
        i_parser.PrintString("HWP Error description", "Signalled by OciMemory::operation(). An error occurred during an access of an OciMemory. See the FAPI_ERR() log for details as well as the Model Error state of the PoreVe.");
        break;
    case 0xb4d1da:
        i_parser.PrintString("HwpReturnCode", "RC_POREVE_OCI_SLAVE_ERROR");
        i_parser.PrintString("HWP Error description", "Signalled by OciSlave access methods. An error occurred during an access of an Oci Slave.");
        break;
    case 0x12da9a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_IOVALID_X_PARTIAL_GOOD_ERR");
        i_parser.PrintString("HWP Error description", "X bus partial good attribute state does not allow for action on target.");
        break;
    case 0x60411d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_IOVALID_A_PARTIAL_GOOD_ERR");
        i_parser.PrintString("HWP Error description", "A bus partial good attribute state does not allow for action on target.");
        break;
    case 0x65aa4e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ABUS_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("HWP Error description", "Invalid target type(s) presented to proc_abus_scominit HWP (expects TARGET_TYPE_ABUS_ENDPOINT).");
        break;
    case 0x33bbf1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ABUS_SCOMINIT_PARTIAL_GOOD_ERR");
        i_parser.PrintString("HWP Error description", "Partial good attribute state does not allow for action on chiplet target.");
        break;
    case 0x257b39:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XBUS_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("HWP Error description", "Invalid target type presented to proc_xbus_scominit HWP (expects TARGET_TYPE_XBUS_ENDPOINT).");
        break;
    case 0x8f2198:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XBUS_SCOMINIT_PARTIAL_GOOD_ERR");
        i_parser.PrintString("HWP Error description", "Partial good attribute state does not allow for action on chiplet target.");
        break;
    case 0x4f933c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_DMI_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("HWP Error description", "Invalid target type presented to proc_dmi_scominit HWP (expects TARGET_TYPE_MCS_CHIPLET).");
        break;
    case 0x2ca0cb:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_DMI_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("HWP Error description", "Invalid target type presented to cen_dmi_scominit HWP (expects TARGET_TYPE_MEMBUF_CHIP).");
        break;
    case 0xacebd7:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_UNSPECIFIED_IMAGE_ERR");
        i_parser.PrintString("HWP Error description", "Unspecified image error. Check sbe_xip_image.h for meaning of local rcLoc.");
        break;
    case 0xa3f43e:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_IMAGE_SIZE_MISMATCH");
        i_parser.PrintString("HWP Error description", "Supplied image size differs from size in image header in MS.");
        break;
    case 0x4d02bd:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE");
        i_parser.PrintString("HWP Error description", "PLL ring size returned from attribute is too large.");
        break;
    case 0xbeb203:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_IMGBUILD_ERROR");
        i_parser.PrintString("HWP Error description", "Local IMGBUILD_xyz error from non-FAPI image build routine. Check rcLoc code in p8_delta_scan_rw.h.");
        break;
    case 0x6cb705:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE");
        i_parser.PrintString("HWP Error description", "PLL ring block is too large.");
        break;
    case 0x12c356:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR");
        i_parser.PrintString("HWP Error description", "Problem with WF PLL ring block alignment.");
        break;
    case 0x751b0d:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_KEYWORD_NOT_FOUND_ERROR");
        i_parser.PrintString("HWP Error description", "A keyword in the XIP image was not found.");
        break;
    case 0xd65c58:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_SETUP_INVALID_TOPOLOGY");
        i_parser.PrintString("HWP Error description", "The TOD topology includes an invalid configuration");
        break;
    case 0xa550c6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_SETUP_INVALID_NODE_DELAY");
        i_parser.PrintString("HWP Error description", "Node delay must be between 0 and 0xFF inclusive.");
        break;
    case 0xa546b8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_INIT_NOT_RUNNING");
        i_parser.PrintString("HWP Error description", "TOD is expected to be running, but is not.");
        break;
    case 0x9d22b4:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_INIT_ERROR");
        i_parser.PrintString("HWP Error description", "A FIR bit is active after starting the TOD topology");
        break;
    case 0xaf94e0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR");
        i_parser.PrintString("HWP Error description", "Master Path 0 step check error is active after starting the TOD topology");
        break;
    case 0xe001e8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR");
        i_parser.PrintString("HWP Error description", "Master Path 1 step check error is active after starting the TOD topology");
        break;
    case 0x3fcdcb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_NULL_NODE");
        i_parser.PrintString("HWP Error description", "An null node has been passed into the procedure");
        break;
    case 0x042ee6:
        i_parser.PrintString("HwpReturnCode", "RC_OPT_MEMMAP_MEM_BASE_ERR");
        i_parser.PrintString("HWP Error description", "Unexpected value for ATTR_PROC_MEM_BASE returned after mss_eff_grouping execution.");
        break;
    case 0x57a739:
        i_parser.PrintString("HwpReturnCode", "RC_OPT_MEMMAP_MIRROR_BASE_ERR");
        i_parser.PrintString("HWP Error description", "Unexpected value for ATTR_PROC_MIRROR_BASE returned after mss_eff_grouping execution.");
        break;
    case 0x38bc91:
        i_parser.PrintString("HwpReturnCode", "RC_OPT_MEMMAP_GROUP_ERR");
        i_parser.PrintString("HWP Error description", "Internal error, chip matched multiple Group IDs.");
        break;
    case 0x203d4b:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_NO_CORES_PRESENT_ERROR");
        i_parser.PrintString("HWP Error description", "There are no cores present");
        break;
    case 0x1b3888:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_BUFFER_SIZE_ERROR");
        i_parser.PrintString("HWP Error description", "#V Buffer returned is wrong size");
        break;
    case 0x5b8ae0:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDM_BUFFER_SIZE_ERROR");
        i_parser.PrintString("HWP Error description", "#M Buffer returned is wrong size");
        break;
    case 0x739bd7:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL");
        i_parser.PrintString("HWP Error description", "MVPD Bucket Frequency was not equal per chiplet");
        break;
    case 0x5067f8:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_ATTR_DPLL_DIV_ERROR");
        i_parser.PrintString("HWP Error description", "Attribute ATTR_PROC_DPLL_DIVIDER = 0");
        break;
    case 0x18e5ac:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_FREQ_BIAS_ERROR");
        i_parser.PrintString("HWP Error description", "Cannot have both up and down bias set");
        break;
    case 0x6ac863:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_EXT_VDD_VOLTAGE_BIAS_ERROR");
        i_parser.PrintString("HWP Error description", "Cannot have both up and down bias set");
        break;
    case 0xcfe132:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_EXT_VCS_VOLTAGE_BIAS_ERROR");
        i_parser.PrintString("HWP Error description", "Cannot have both up and down bias set");
        break;
    case 0xe04af9:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_INT_VDD_VOLTAGE_BIAS_ERROR");
        i_parser.PrintString("HWP Error description", "Cannot have both up and down bias set");
        break;
    case 0x4d230f:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_INT_VCS_VOLTAGE_BIAS_ERROR");
        i_parser.PrintString("HWP Error description", "Cannot have both up and down bias set");
        break;
    case 0xb6400d:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_OBJECT_ERROR");
        i_parser.PrintString("HWP Error description", "chip_characterization_create was passed null pointer to characterization or characterization->parameters");
        break;
    case 0x409826:
        i_parser.PrintString("HwpReturnCode", " RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ARGUMENT_ERROR");
        i_parser.PrintString("HWP Error description", "chip_characterization_create was passed null pointer to characterization->vpd or no points");
        break;
    case 0xdc0b43:
        i_parser.PrintString("HwpReturnCode", " RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ERROR");
        i_parser.PrintString("HWP Error description", "chip_characterization_create returned an error");
        break;
    case 0xb167d3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_OBJECT_ERROR");
        i_parser.PrintString("HWP Error description", "gpst_create was passed null pointer to gpst, characterization, or characterization->ops or characterization->points = 0");
        break;
    case 0xc070fa:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ARGUMENT_ERROR");
        i_parser.PrintString("HWP Error description", "gpst_create was passed bad argument and resulted in PSTATE limits error or operating point odering error");
        break;
    case 0x78e0b4:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ENTRY_ERROR");
        i_parser.PrintString("HWP Error description", "gpst_entry_create was passed a voltage that was out of limits of vrm11 vid code or ivid vide code");
        break;
    case 0x6877e3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ERROR");
        i_parser.PrintString("HWP Error description", "gpst_create returned an error");
        break;
    case 0xe4a01a:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_OBJECT_ERROR");
        i_parser.PrintString("HWP Error description", "lpst_create was passed null pointer to gpst or lpsa");
        break;
    case 0x051a17:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_IVID_ERROR");
        i_parser.PrintString("HWP Error description", "lpst_create attempted to convert an invalid voltage value to ivid format (GT 1.39375V or LT 0.6V)");
        break;
    case 0x863dac:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_VID_INCR_CLIP_INREG_ERROR");
        i_parser.PrintString("HWP Error description", "lpst_create encountered a vid increment GT 7 in regulation");
        break;
    case 0x633a53:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_ERROR");
        i_parser.PrintString("HWP Error description", "lpst_create returned an error");
        break;
    case 0xf237a3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR");
        i_parser.PrintString("HWP Error description", "Resonant clocking band attribute values are not in ascending order from low to high");
        break;
    case 0x08d424:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_ERROR");
        i_parser.PrintString("HWP Error description", "Zero valued data found in #V");
        break;
    case 0xccf396:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_OPPOINT_ORDER_ERROR");
        i_parser.PrintString("HWP Error description", "#V operating point relationship error (power save > nominal > turbo)");
        break;
    case 0x939097:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("HWP Error description", "freq2pState or pstate_minmax_chk returned error - computed pstate for freq is out of bounds of MAX/MIN possible");
        break;
    case 0xd3dba4:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_PSTATE_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("HWP Error description", "freq2pState returned error - computed pstate for freq is out of bounds of MAX/MIN possible");
        break;
    case 0xd3a641:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_GT_GPSTPMAX_ERROR");
        i_parser.PrintString("HWP Error description", "pstate_minmax_chk returned error - Computed pstate is greater than max pstate in gpst");
        break;
    case 0x9db53b:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_ERROR");
        i_parser.PrintString("HWP Error description", "Bad Return code");
        break;
    case 0xc01193:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_ERROR");
        i_parser.PrintString("HWP Error description", "Bad Return code");
        break;
    case 0xaaaed3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSAFE_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("HWP Error description", "freq2pState or pstate_minmax_chk returned error - computed pstate for freq is out of bounds of MAX/MIN possible");
        break;
    case 0xb39e74:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSAFE_GT_GPSTPMAX_ERROR");
        i_parser.PrintString("HWP Error description", "pstate_minmax_chk returned error - Computed pstate is greater than max pstate in gpst");
        break;
    case 0xfa0bd9:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSAFE_ERROR");
        i_parser.PrintString("HWP Error description", "Bad Return code");
        break;
    case 0xe61abf:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("HWP Error description", "freq2pState or pstate_minmax_chk returned error - computed pstate for freq is out of bounds of MAX/MIN possible");
        break;
    case 0x20c41c:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_GT_GPSTPMAX_ERROR");
        i_parser.PrintString("HWP Error description", "pstate_minmax_chk returned error - Computed pstate is greater than max pstate in gpst");
        break;
    case 0x47ecc0:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_ERROR");
        i_parser.PrintString("HWP Error description", "Bad Return code");
        break;
    case 0x046f6c:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR");
        i_parser.PrintString("HWP Error description", "Percentage boost calculation overrun produced invalid Pstate Difference");
        break;
    case 0xd831d9:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_INVALID_BOOST_PERCENTAGE_ERROR");
        i_parser.PrintString("HWP Error description", "Percentage boost request is greater than the maximum supported");
        break;
    case 0xd44049:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_IQ_BUFFER_SIZE_ERROR");
        i_parser.PrintString("HWP Error description", "IQ Buffer returned is wrong size");
        break;
    case 0x84d2b8:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_IQ_MVPD_ERROR");
        i_parser.PrintString("HWP Error description", "LRPx access for IQ keyword failed");
        break;
    case 0x137551:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VDD_ERROR");
        i_parser.PrintString("HWP Error description", "IDDQ measurement for VDD was invalid (eg zero)");
        break;
    case 0xeaabee:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VCS_ERROR");
        i_parser.PrintString("HWP Error description", "IDDQ measurement for VCS was invalid (eg zero)");
        break;
    case 0x80c64c:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VIO_ERROR");
        i_parser.PrintString("HWP Error description", "IDDQ measurement for VIO was invalid (eg zero)");
        break;
    case 0x8a48b8:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_UT_ERROR");
        i_parser.PrintString("HWP Error description", "Zero valued data found in #V for UltraTubro point. Continuing Pstate generation");
        break;
    case 0xc885f8:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR");
        i_parser.PrintString("HWP Error description", "Pstate for given frequency is greater than pmax");
        break;
    case 0x06c9d5:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GET_VOLTAGE_FREQ2PSTATE_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure freq2pState() returned an error");
        break;
    case 0x74cc8c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP");
        i_parser.PrintString("HWP Error description", "MBMSRQ[0] = 1, unsuccessful forced maint cmd stop.");
        break;
    case 0x2311cb:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_START_NOT_RESET");
        i_parser.PrintString("HWP Error description", "MBMCCQ[0]: maint_cmd_start not reset by hw.");
        break;
    case 0x834838:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_STOP_NOT_RESET");
        i_parser.PrintString("HWP Error description", "MBMCCQ[1]: maint_cmd_stop not reset by hw.");
        break;
    case 0x465a4d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_CMD_IN_PROGRESS");
        i_parser.PrintString("HWP Error description", "MBMSRQ[0]: Can't start new cmd if previous cmd still in progress.");
        break;
    case 0x83929b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_MEM_CNFG");
        i_parser.PrintString("HWP Error description", "MBAXCRn[0:3] = 0, meaning no memory configured behind this MBA.");
        break;
    case 0x77042f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE");
        i_parser.PrintString("HWP Error description", "CCS_MODEQ[29] = 1, meaning mux set for CCS instead of mainline.");
        break;
    case 0x349a3e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_ECC_DISABLED");
        i_parser.PrintString("HWP Error description", "MBSECC[0] non zero, meaning ECC check/correct disabled.");
        break;
    case 0x7bea86:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_CMD");
        i_parser.PrintString("HWP Error description", "MBAFIRQ[0], invalid_maint_cmd.");
        break;
    case 0xf64376:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_ADDR");
        i_parser.PrintString("HWP Error description", "MBAFIRQ[1], cmd started with invalid_maint_address.");
        break;
    case 0x86b101:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_CMD_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Maint cmd timeout.");
        break;
    case 0x73b47e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_ZERO_DDR_FREQ");
        i_parser.PrintString("HWP Error description", "ATTR_MSS_FREQ set to zero so can't calculate scrub rate.");
        break;
    case 0xc74899:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH");
        i_parser.PrintString("HWP Error description", "Invalid dramSize or dramWidth in MBAXCRn.");
        break;
    case 0xa2e7f4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_DIMM_CNFG");
        i_parser.PrintString("HWP Error description", "MBAXCRn configured with invalid combination of configType, configSubType, slotConfig.");
        break;
    case 0xa42115:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT");
        i_parser.PrintString("HWP Error description", "i_rank input to mss_get_address_range out of range");
        break;
    case 0x4a6ab3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT");
        i_parser.PrintString("HWP Error description", "i_rank input to mss_get_mark_store out of range");
        break;
    case 0x882ae3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_X4_SYMBOL_ON_READ");
        i_parser.PrintString("HWP Error description", "Symbol mark not allowed in x4 mode.");
        break;
    case 0xf9cc99:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_MARKSTORE");
        i_parser.PrintString("HWP Error description", "Invalid galois field in markstore.");
        break;
    case 0x8af6f0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT");
        i_parser.PrintString("HWP Error description", "i_rank input to mss_put_mark_store out of range");
        break;
    case 0x67ada7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_X4_SYMBOL_ON_WRITE");
        i_parser.PrintString("HWP Error description", "Symbol mark not allowed in x4 mode.");
        break;
    case 0x4eea4f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_SYMBOL_INDEX");
        i_parser.PrintString("HWP Error description", "Symbol index out of range.");
        break;
    case 0x266ad3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_CHIP_INDEX");
        i_parser.PrintString("HWP Error description", "Not first symbol index of a chip.");
        break;
    case 0xf7d525:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED");
        i_parser.PrintString("HWP Error description", "Markstore write may have been blocked due to MPE FIR set.");
        break;
    case 0xdcfbdf:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT");
        i_parser.PrintString("HWP Error description", "i_rank or i_muxType input to mss_get_steer_mux out of range");
        break;
    case 0x4c1416:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_STEER_MUX");
        i_parser.PrintString("HWP Error description", "Steer mux index out of range");
        break;
    case 0xf06353:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT");
        i_parser.PrintString("HWP Error description", "i_rank or i_muxType or i_steerType or i_symbol input to mss_put_steer_mux out of range");
        break;
    case 0x08b5b9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER");
        i_parser.PrintString("HWP Error description", "Trying to steer invalid symbol.");
        break;
    case 0x3f8f5b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_X8_ECC_SPARE");
        i_parser.PrintString("HWP Error description", "Invalid to use ECC spare in x8 mode.");
        break;
    case 0x030afa:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE");
        i_parser.PrintString("HWP Error description", "i_rank or i_symbol input to mss_do_steer out of range");
        break;
    case 0xb50112:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_UE_TRAP");
        i_parser.PrintString("HWP Error description", "IPL UE trapping didn't work.");
        break;
    case 0x561288:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_MPIPL_FORCE_WINKLE_TARGET_TYPE_ERR");
        i_parser.PrintString("HWP Error description", "Invalid target type passed to proc_mpipl_force_winkle HWP");
        break;
    case 0x212654:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_MPIPL_FORCE_WINKLE_CANNOT_UNLOCK_IPMS_STATE");
        i_parser.PrintString("HWP Error description", "Chiplet is in a Winkle entry/exit state that cannot be unlocked");
        break;
    case 0x1f4573:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "EX chiplet timed out waiting for L2 purge to complete");
        break;
    case 0x59e16b:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "EX chiplet timed out waiting for L3 purge to complete");
        break;
    case 0xfde003:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "EX chiplet timed out waiting for PB purge to complete");
        break;
    case 0xafebea:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_INACCESSIBLE");
        i_parser.PrintString("HWP Error description", "EX chiplet PCB Fence is up");
        break;
    case 0xfc9a6a:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_EXNUMBER_CODE_BUG");
        i_parser.PrintString("HWP Error description", "Impossible value for ex_number");
        break;
    case 0x6011fa:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_PMHIST_CODE_BUG");
        i_parser.PrintString("HWP Error description", "Impossible value for pmhist_state");
        break;
    case 0x8af9e2:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_PIRRX_NO_QUEUE_REQUEST");
        i_parser.PrintString("HWP Error description", "There is not an idle request in the PMC queue for this chiplet");
        break;
    case 0xc702d4:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_PIRRX_CODE_BUG");
        i_parser.PrintString("HWP Error description", "Impossible value for pmc_queue_state");
        break;
    case 0xd81474:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_UNSUPPORTED_SV_VALUE");
        i_parser.PrintString("HWP Error description", "trans_sv has an unsupported value");
        break;
    case 0x87fca9:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_SUSPICIOUS_PCBS_FSM");
        i_parser.PrintString("HWP Error description", "Value of PCB-slave FSM suggest a problem in the core PM section");
        break;
    case 0x5ca11f:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_PIRRX_UNSUPPORTED_IDLE_REQUEST");
        i_parser.PrintString("HWP Error description", "There is an unsupported idle request on the PMC queue.");
        break;
    case 0x48c307:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_STATE_NOT_FOUND_BUG");
        i_parser.PrintString("HWP Error description", "An IPMS state was NOT found. This should never happen. Code bug.");
        break;
    case 0x394e0d:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_CONFLICTING_IDLE_STATES");
        i_parser.PrintString("HWP Error description", "Conflicting values between PM state registers");
        break;
    case 0x0e6aff:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE");
        i_parser.PrintString("HWP Error description", "Unsupported DIMM type found. All dimms must be DDR3 or DDR4");
        break;
    case 0x81cba2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED");
        i_parser.PrintString("HWP Error description", "Mixing of DDR3 and DDR4 not supported.");
        break;
    case 0x3c6a8e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE");
        i_parser.PrintString("HWP Error description", "One or more DIMMs do not support required voltage for DDR type.");
        break;
    case 0x20dc1b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_DDR_TYPE_COMPLIANT_VOLTAGE");
        i_parser.PrintString("HWP Error description", "One or more DIMMs do not support compliant voltage for DDR type.");
        break;
    case 0xc8b657:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION");
        i_parser.PrintString("HWP Error description", "One or more DIMMs classified non-functional has a tolerated voltage below selected voltage.");
        break;
    case 0x0b0cbd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_OVERIDE_MIXING");
        i_parser.PrintString("HWP Error description", "An override is trying to be applied to only a part of the voltage domain. It needs to be applied to the entire domain.");
        break;
    case 0xcedbd0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_OVERIDE_UKNOWN");
        i_parser.PrintString("HWP Error description", "An uknown override is trying to be applied to the voltage domain. It needs to be none, 1.2 or 1.35V.");
        break;
    case 0xf98b7a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_AVDD_OFFSET_VALUE_ERROR");
        i_parser.PrintString("HWP Error description", "One or more dynamic AVDD attributes is 0.");
        break;
    case 0x1e39b2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDD_OFFSET_VALUE_ERROR");
        i_parser.PrintString("HWP Error description", "One or more dynamic VDD attributes is 0.");
        break;
    case 0x876c2e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VCS_OFFSET_VALUE_ERROR");
        i_parser.PrintString("HWP Error description", "One or more dynamic VCS attributes is 0.");
        break;
    case 0xc6b4e0:
        i_parser.PrintString("HwpReturnCode", "RC_VOLT_VPP_FUNCTIONAL_CENTAUR_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Code did not find a functional centaur.");
        break;
    case 0x734b17:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE");
        i_parser.PrintString("HWP Error description", "One or more DIMMs has a different generation of DRAM technology level.");
        break;
    case 0x39f4ab:
        i_parser.PrintString("HwpReturnCode", "RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR");
        i_parser.PrintString("HWP Error description", "Unable to read the VPD from a non-functional dimm.");
        break;
    case 0x7ac166:
        i_parser.PrintString("HwpReturnCode", "RC_VPP_FUNCTIONAL_CENTAUR_VPD_READ_ERROR");
        i_parser.PrintString("HWP Error description", "Unable to read the VPD from a non-functional dimm.");
        break;
    case 0x5f0b3c:
        i_parser.PrintString("HwpReturnCode", "RC_VOLT_VPP_DRAM_GEN_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Code did not find a DIMM with a readable attribute for DRAM_GEN.");
        break;
    case 0x43c0c9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VPP_OFFSET_VALUE_ERROR");
        i_parser.PrintString("HWP Error description", "One or more dynamic VPP attributes is 0.");
        break;
    case 0x37e8e4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE");
        i_parser.PrintString("HWP Error description", "One or more DIMMs has a different generation of DRAM technology level.");
        break;
    case 0xa65a0f:
        i_parser.PrintString("HwpReturnCode", "RC_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR");
        i_parser.PrintString("HWP Error description", "Unable to read the VPD from a non-functional dimm.");
        break;
    case 0xd7fe76:
        i_parser.PrintString("HwpReturnCode", "RC_VOLT_VDDR_FUNCTIONAL_CENTAUR_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Code did not find a functional centaur.");
        break;
    case 0xc99c98:
        i_parser.PrintString("HwpReturnCode", "RC_VOLT_VDDR_DRAM_GEN_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Code did not find a DIMM with a readable attribute for DRAM_GEN.");
        break;
    case 0x62ea3b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR");
        i_parser.PrintString("HWP Error description", "one or more VPD voltage attributes is 0.");
        break;
    case 0x884f66:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR");
        i_parser.PrintString("HWP Error description", "One or more dynamic VDDR attributes is 0.");
        break;
    case 0xb0434b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_SPD_DATA_DDR4");
        i_parser.PrintString("HWP Error description", "Invalid SPD data returned.");
        break;
    case 0x342f88:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_SPD_DATA_DDR3");
        i_parser.PrintString("HWP Error description", "Invalid SPD data returned.");
        break;
    case 0x1ee451:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_SPD_DATA_COMMON");
        i_parser.PrintString("HWP Error description", "Invalid SPD data returned.");
        break;
    case 0xdbbbf2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MODULE_TYPE_MIX");
        i_parser.PrintString("HWP Error description", "Differing DIMM types in the same configuration.");
        break;
    case 0xa494fd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_COMMON_SUPPORTED_CL");
        i_parser.PrintString("HWP Error description", "Current Configuration has no common supported CL Values.");
        break;
    case 0x46adc9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EXCEED_TAA_MAX_NO_CL");
        i_parser.PrintString("HWP Error description", "Exceeded TAA MAX with Lowest frequency. No compatable CL.");
        break;
    case 0x5ec764:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_FREQ_CALCULATED");
        i_parser.PrintString("HWP Error description", "The frequency calculated with spd data is not supported by the jedec standards.");
        break;
    case 0x08c7c0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MIRROR_DISABLED");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that mirroring is disabled but mirror placement policy is selective or flipped. Firmware error - ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING is true - ATTR_MEM_MIRROR_PLACEMENT_POLICY is SELECTIVE or FLIPPED");
        break;
    case 0xd474dc:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INTERLEAVE_MODE_INVALID_MCS_PER_GROUP");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that ATTR_ALL_MCS_IN_INTERLEAVING_GROUP indicates interleaving mode. but ATTR_MSS_INTERLEAVE_ENABLE does not contain a valid (>1) MCS per group number");
        break;
    case 0xe2fd49:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_CHECKERBOARD_MODE_INVALID_MCS_PER_GROUP");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that ATTR_ALL_MCS_IN_INTERLEAVING_GROUP indicates checkerboard mode. but ATTR_MSS_INTERLEAVE_ENABLE does not contain a valid (>=1) MCS per group number");
        break;
    case 0x2e4087:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_SELCTIVE_MODE_HTM_OCC_BAR");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that there is an HTM or OCC Sandbox bar in selective mode. This is not allowed - ATTR_MEM_MIRROR_PLACEMENT_POLICY is SELECTIVE");
        break;
    case 0x276899:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_MCS");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found an MCS that could not be grouped. This is a memory plugging error. Refer to memory plugging rules. The attached Memory Buffer Chip is deconfigured as a result");
        break;
    case 0xd6c1b4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that one or more MCS could not be grouped. Other errors have been logged for each MCS to deconfigure their associated membuf chip and callout the MEMORY_PLUGGING_ERROR procedure.");
        break;
    case 0xaf853c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that the base address overlaps with the mirror base address");
        break;
    case 0xb9bd29:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that there is not enough space available for the HTM and OCC Sandbox bars");
        break;
    case 0x8e2872:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that the HTM and OCC Sandbox bars are not possible");
        break;
    case 0xed224b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DIMM_POWER_CURVE_DATA_INVALID");
        i_parser.PrintString("HWP Error description", "DIMM power curve data is invalid");
        break;
    case 0xd3cea1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE");
        i_parser.PrintString("HWP Error description", "Unable to find matching entry in DIMM power table");
        break;
    case 0x284320:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER");
        i_parser.PrintString("HWP Error description", "Unable to find throttle setting that has DIMM power underneath the limit.");
        break;
    case 0x7cd4ae:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_READ_MISCOMPARE");
        i_parser.PrintString("HWP Error description", "The ccs errors at runtime and registers a read miscompare.");
        break;
    case 0x00ffca:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_UE_SUE");
        i_parser.PrintString("HWP Error description", "The ccs errors at runtime and registers a UE or SUE");
        break;
    case 0xdd6d71:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_CAL_TIMEOUT");
        i_parser.PrintString("HWP Error description", "The ccs errors at runtime and registers a calibration operation timeout");
        break;
    case 0x48678c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_HUNG");
        i_parser.PrintString("HWP Error description", "The ccs failed to return from in_progress status and failed to describe an error further.");
        break;
    case 0x0da535:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_RCD_PARITY_ERROR_LIMIT");
        i_parser.PrintString("HWP Error description", "The number of rcd parity errors have exceeded the maximum allowable number");
        break;
    case 0x66b676:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_RCD_PARITY_ERROR_PORT0");
        i_parser.PrintString("HWP Error description", "An rcd parity error has been registered on port_0");
        break;
    case 0xfc907d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_RCD_PARITY_ERROR_PORT1");
        i_parser.PrintString("HWP Error description", "An rcd parity error has been registered on port_1");
        break;
    case 0xb0dfd9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_INDEX_OUT_OF_BOUNDS");
        i_parser.PrintString("HWP Error description", "An invalid CCS array index was passsed to the function.");
        break;
    case 0x4351b8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_SETBBM");
        i_parser.PrintString("HWP Error description", "Unknown Value for DRAM_WIDTH being used.");
        break;
    case 0x8fa287:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_GETBBM");
        i_parser.PrintString("HWP Error description", "Unknown Value for DRAM_WIDTH being used.");
        break;
    case 0x530fca:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown Value for DIMM_SPARE being used.");
        break;
    case 0x57babf:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR");
        i_parser.PrintString("HWP Error description", "Incorrect translation of bad bit mask between C4 and PHY");
        break;
    case 0x532bb7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR");
        i_parser.PrintString("HWP Error description", "Write Leveling has returned a fail for a given position within this calibration.");
        break;
    case 0xeca5e2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR");
        i_parser.PrintString("HWP Error description", "DQS Alignment has returned a fail for a given position within this calibration.");
        break;
    case 0x50e5e4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR");
        i_parser.PrintString("HWP Error description", "Read CLK to SYS CLK Alignment has returned a fail for a given position within this calibration.");
        break;
    case 0x77c6e0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR");
        i_parser.PrintString("HWP Error description", "Read Centering has returned a fail for a given position within this calibration.");
        break;
    case 0x8cbb6c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR");
        i_parser.PrintString("HWP Error description", "Write centering has returned a fail for a given position within this calibration.");
        break;
    case 0xb61f6b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR");
        i_parser.PrintString("HWP Error description", "Course Read Centering has returned a fail for a given position within this calibration.");
        break;
    case 0xdd0599:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR");
        i_parser.PrintString("HWP Error description", "Custom Pattern Read Centering has returned a fail for a given position within this calibration.");
        break;
    case 0xe43ae4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR");
        i_parser.PrintString("HWP Error description", "Custom Pattern Write Centering has returned a fail for a given position within this calibration.");
        break;
    case 0x86f0fc:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR");
        i_parser.PrintString("HWP Error description", "Digital Eye has returned a fail for a given position within this calibration.");
        break;
    case 0x2bee06:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DP18_0_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("HWP Error description", "mss_ddr_phy_reset: DP18 0x0C000 PLL failed to lock! Value in DPHY01_DDRPHY_PC_DP18_PLL_LOCK_STATUS_P0_0x8000C0000301143F not as expected");
        break;
    case 0x89619b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DP18_1_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("HWP Error description", "mss_ddr_phy_reset: DP18 0x1C000 PLL failed to lock! Value in DPHY01_DDRPHY_PC_DP18_PLL_LOCK_STATUS_P1_0x8001C0000301143F not as expected");
        break;
    case 0x5e377a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("HWP Error description", "mss_ddr_phy_reset: AD32S 0x0C001 PLL failed to lock! Value in DPHY01_DDRPHY_PC_AD32S_PLL_LOCK_STATUS_P0_0x8000C0010301143F not as expected");
        break;
    case 0x8e6d41:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("HWP Error description", "mss_ddr_phy_reset: AD32S 0x1C001 PLL failed to lock! Value in DPHY01_DDRPHY_PC_AD32S_PLL_LOCK_STATUS_P1_0x8001C0010301143F not as expected");
        break;
    case 0x7fa53d:
        i_parser.PrintString("HwpReturnCode", "RC_CONFIG_DRV_IMP_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The config_drv_imp utility function received a bad parameter");
        break;
    case 0x613089:
        i_parser.PrintString("HwpReturnCode", "RC_CONFIG_RCV_IMP_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The config_rcv_imp utility function received a bad parameter");
        break;
    case 0x8bdf99:
        i_parser.PrintString("HwpReturnCode", "RC_CONFIG_SLEW_RATE_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The config_slew_rate utility function received a bad parameter");
        break;
    case 0xcfb3ab:
        i_parser.PrintString("HwpReturnCode", "RC_CONFIG_WR_DRAM_VREF_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The config_wr_dram_vref utility function received a bad parameter");
        break;
    case 0xebbcc3:
        i_parser.PrintString("HwpReturnCode", "RC_CONFIG_RD_CEN_VREF_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The config_rd_cen_vref utility function received a bad parameter");
        break;
    case 0xcc29fd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_INVALID_DRAM_GEN");
        i_parser.PrintString("HWP Error description", "mss_slew_cal found an invalid DRAM type in ATTR_EFF_DRAM_GEN (not DDR3/4)");
        break;
    case 0x403b0f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_INVALID_FREQ");
        i_parser.PrintString("HWP Error description", "mss_slew_cal found a zero frequency in ATTR_MSS_FREQ");
        break;
    case 0xef4e16:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_TIMEOUT_PORT0");
        i_parser.PrintString("HWP Error description", "mss_slew_cal found slew calibration timeout on MBA port 0");
        break;
    case 0x00d63b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_TIMEOUT_PORT1");
        i_parser.PrintString("HWP Error description", "mss_slew_cal found slew calibration timeout on MBA port 1");
        break;
    case 0x6e833f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_ERROR_PORT0");
        i_parser.PrintString("HWP Error description", "mss_slew_cal found slew calibration error on MBA port 0");
        break;
    case 0x9db362:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_ERROR_PORT1");
        i_parser.PrintString("HWP Error description", "mss_slew_cal found slew calibration error on MBA port 1");
        break;
    case 0xc56784:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_IMP_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "Impedance is invalid for driver/receiver type.");
        break;
    case 0xd7c70d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNEXPECTED_MEM_CLOCK_STATUS");
        i_parser.PrintString("HWP Error description", "cen_stopclocks got unexpected clock status in MEM_CLK_STATUS_0x03030008 This error could happen for a number of reasons and probably not on the IPL path, so callout the memory buffer chip, but do not deconfigure/GARD.");
        break;
    case 0xce5c7d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNEXPECTED_NEST_CLOCK_STATUS");
        i_parser.PrintString("HWP Error description", "cen_stopclocks got unexpected clock status in NEST_CLK_STATUS_0x02030008 This error could happen for a number of reasons and probably not on the IPL path, so callout the memory buffer chip, but do not deconfigure/GARD.");
        break;
    case 0x45c96c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNEXPECTED_TP_CLOCK_STATUS");
        i_parser.PrintString("HWP Error description", "cen_stopclocks got unexpected clock status in TP_CLK_STATUS_0x01030008 This error could happen for a number of reasons and probably not on the IPL path, so callout the memory buffer chip, but do not deconfigure/GARD.");
        break;
    case 0xa2fe16:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SCOMINIT_NUM_MBA_ERROR");
        i_parser.PrintString("HWP Error description", "mss_scominit did not see 2 present membuf child MBAs returned by fapiGetChildChiplets");
        break;
    case 0x3d926a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SCOMINIT_NUM_L4_ERROR");
        i_parser.PrintString("HWP Error description", "mss_scominit did not see 1 present membuf child L4 returned by fapiGetChildChiplets");
        break;
    case 0x94b1f6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MCBIST_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "Timeout on MCBIST configuration register polling.");
        break;
    case 0xbb1f66:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR");
        i_parser.PrintString("HWP Error description", "Invalid non-mirrored alternate BAR configuration.");
        break;
    case 0x064451:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_M_ALT_BAR_ERR");
        i_parser.PrintString("HWP Error description", "Invalid mirrored alternate BAR configuration.");
        break;
    case 0xd7db78:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR");
        i_parser.PrintString("HWP Error description", "MCS is listed as a member in multiple groups.");
        break;
    case 0xfe185c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_REF_CLK_ENABLE_SWIZZLE_ERR");
        i_parser.PrintString("HWP Error description", "Translated Centaur refclock enable bit position is out of range.");
        break;
    case 0xe68ddd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_REF_CLK_ENABLE_CONFIG_ERR");
        i_parser.PrintString("HWP Error description", "Not all Centaurs marked as attached were configured.");
        break;
    case 0x9e06b1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CDIMM_INVALID_NUMBER_SENSORS");
        i_parser.PrintString("HWP Error description", "Invalid number of dimm temperature sensors specified in the CDIMM VPD MW keyword. Number of sensors greater than 8.");
        break;
    case 0x73bd98:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown Value for RTT_NOM within the VPD");
        break;
    case 0x0c0d4c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown Value for RTT_WR within the VPD");
        break;
    case 0x46a713:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR");
        i_parser.PrintString("HWP Error description", "Display invalid address.");
        break;
    case 0xabc7e2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Display timeout.");
        break;
    case 0x3b1112:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME");
        i_parser.PrintString("HWP Error description", "Injected RCD parity error detected too late for RCD retry to be effective.");
        break;
    case 0x26c3ba:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The mss_access_delay_reg utility function received a bad parameter");
        break;
    case 0x4cdd23:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_BAD_MBA_POS");
        i_parser.PrintString("HWP Error description", "The mss_access_delay_reg utility function received a bad MBA position from the ATTR_CHIP_UNIT_POS attribute");
        break;
    case 0x41e87f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_BAD_DRAM_WIDTH");
        i_parser.PrintString("HWP Error description", "The mss_access_delay_reg utility function received a bad DRAM width from the ATTR_EFF_DRAM_WIDTH attribute");
        break;
    case 0x015503:
        i_parser.PrintString("HwpReturnCode", "RC_CROSS_COUPLED_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The cross_coupled utility function received a bad input type parameter");
        break;
    case 0xcfda1b:
        i_parser.PrintString("HwpReturnCode", "RC_CROSS_COUPLED_INVALID_DQS");
        i_parser.PrintString("HWP Error description", "The cross_coupled utility function received a invalid DQS");
        break;
    case 0x9f6284:
        i_parser.PrintString("HwpReturnCode", "RC_ROSETTA_MAP_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The rosetta_map utility function received a bad parameter");
        break;
    case 0x143d63:
        i_parser.PrintString("HwpReturnCode", "RC_ROSETTA_MAP_BAD_SWIZZLE_VALUE");
        i_parser.PrintString("HWP Error description", "The rosetta_map utility function received a bad swizzle value from the ATTR_MSS_DQS_SWIZZLE_TYPE attribute");
        break;
    case 0x0ace18:
        i_parser.PrintString("HwpReturnCode", "RC_ROSETTA_MAP_BAD_MBA_POS");
        i_parser.PrintString("HWP Error description", "The rosetta_map utility function received a bad MBA position from the ATTR_CHIP_UNIT_POS attribute");
        break;
    case 0xc9c9bd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_C4_PHY_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The mss_c4_phy utility function received a bad input type parameter");
        break;
    case 0x0cf9b9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The mss_access_delay_reg_schmoo utility function received a bad parameter");
        break;
    case 0xe2748c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_MBA_POS");
        i_parser.PrintString("HWP Error description", "The mss_access_delay_reg utility function received a bad MBA position from the ATTR_CHIP_UNIT_POS attribute");
        break;
    case 0x8d1f60:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_DRAM_WIDTH");
        i_parser.PrintString("HWP Error description", "The mss_access_delay_reg utility function received a bad DRAM width from the ATTR_EFF_DRAM_WIDTH attribute");
        break;
    case 0xa6e65e:
        i_parser.PrintString("HwpReturnCode", "RC_DRV_IMPED_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("HWP Error description", "The drv_imped_shmoo utility function got bad margin data from the find_best_margin function");
        break;
    case 0x150307:
        i_parser.PrintString("HwpReturnCode", "RC_SLEW_RATE_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("HWP Error description", "The slew_rate_shmoo utility function got bad margin data from the find_best_margin function");
        break;
    case 0x7d3883:
        i_parser.PrintString("HwpReturnCode", "RC_WR_VREF_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("HWP Error description", "The wr_vref_shmoo utility function got bad margin data from the find_best_margin function");
        break;
    case 0xa72eda:
        i_parser.PrintString("HwpReturnCode", "RC_RD_VREF_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("HWP Error description", "The rd_vref_shmoo utility function got bad margin data from the find_best_margin function");
        break;
    case 0x41e34f:
        i_parser.PrintString("HwpReturnCode", "RC_RCV_IMP_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("HWP Error description", "The rcv_imp_shmoo utility function got bad margin data from the find_best_margin function");
        break;
    case 0xf61063:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PDA_NONMRS_ATTR_NAME");
        i_parser.PrintString("HWP Error description", "An attribute that is not associated with an MRS was inputted into the PDA function");
        break;
    case 0x535a23:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PDA_MRS_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "An MRS id from 0 to 6 (valid MRS) was not selected.");
        break;
    case 0xc85556:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PDA_DRAM_DNE");
        i_parser.PrintString("HWP Error description", "An invalid DRAM was selected for this given configuration for PDA. The DRAM does not exist (DNE).");
        break;
    case 0x79571e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_GENERIC_SHMOO_MCBIST_FAILED");
        i_parser.PrintString("HWP Error description", "The mss_generic_shmoo file found an MCBIST Failure");
        break;
    case 0x347f59:
        i_parser.PrintString("HwpReturnCode", "RC_CFG_MCB_TEST_MEM_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The cfg_mcb_test_mem function received a bad test type parameter");
        break;
    case 0xb0af0f:
        i_parser.PrintString("HwpReturnCode", "RC_CFG_MCB_DGEN_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The cfg_mcb_dgen function received a bad data mode parameter");
        break;
    case 0x62918a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_DDR4_SPD_TB");
        i_parser.PrintString("HWP Error description", "Invalid DDR4 MTB/FTB Timebase received from SPD attribute");
        break;
    case 0xea6142:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_SPD_DRAM_GEN");
        i_parser.PrintString("HWP Error description", "Incompatable SPD DRAM generation");
        break;
    case 0xc24f4f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_FREQ");
        i_parser.PrintString("HWP Error description", "Invalid RDIMM ATTR_MSS_FREQ, freq is higher than 1600Mbps");
        break;
    case 0x5a1725:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_VOLT");
        i_parser.PrintString("HWP Error description", "Invalid RDIMM ATTR_MSS_VOLT, Volt is less than 1.2V");
        break;
    case 0x6402ad:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT");
        i_parser.PrintString("HWP Error description", "Invalid RDIMM_RCD_IBT");
        break;
    case 0xeb6c18:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING");
        i_parser.PrintString("HWP Error description", "Invalid RDIMM_RCD_OUTPUT_TIMING");
        break;
    case 0x7ee38f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_LRDIMM_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of mss_lrdimm_eff_config function in mss_eff_config");
        break;
    case 0x5403ca:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_TERM_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of mss_eff_config_termination function in mss_eff_config");
        break;
    case 0xcdbc50:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_DDR4_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of mss_eff_config_ddr4 function in mss_eff_config");
        break;
    case 0x7593b6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_EMPTY");
        i_parser.PrintString("HWP Error description", "Plug rule violation, one position is empty but other are present");
        break;
    case 0x1a73c1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_SIDE");
        i_parser.PrintString("HWP Error description", "Plug rule violation, sides do not match");
        break;
    case 0x7c8bfd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_TOP");
        i_parser.PrintString("HWP Error description", "Plug rule violation, top and bottom do not match");
        break;
    case 0xeed519:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN");
        i_parser.PrintString("HWP Error description", "Incompatable DRAM generation");
        break;
    case 0x77ed8b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE");
        i_parser.PrintString("HWP Error description", "Incompatable DIMM type");
        break;
    case 0xec962a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS");
        i_parser.PrintString("HWP Error description", "Incompatable DIMM ranks");
        break;
    case 0xcc06bc:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS");
        i_parser.PrintString("HWP Error description", "Incompatable DIMM banks");
        break;
    case 0x98fad8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS");
        i_parser.PrintString("HWP Error description", "Incompatable DIMM rows");
        break;
    case 0x931f02:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS");
        i_parser.PrintString("HWP Error description", "Incompatable DIMM columns");
        break;
    case 0x499a6e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH");
        i_parser.PrintString("HWP Error description", "Incompatable DRAM primary bus width");
        break;
    case 0x266573:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_UNSUPPORTED_MODULE_MEMORY_BUS_WIDTH");
        i_parser.PrintString("HWP Error description", "Unsupported DRAM bus width, only 64bit with ECC extension is allowed");
        break;
    case 0x4fb2a5:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH");
        i_parser.PrintString("HWP Error description", "Incompatable DRAM width");
        break;
    case 0x26b692:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_DRAM_DEVICE_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown DRAM type");
        break;
    case 0x500ed2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MOD_TYPE_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown DIMM type");
        break;
    case 0x68751c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_SDRAM_BANK_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown DRAM bank");
        break;
    case 0x7e8a8e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_SDRAM_ROWS_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown DRAM rows");
        break;
    case 0x6e6ec1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_SDRAM_COLS_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown DRAM cols");
        break;
    case 0x62de42:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_DRAM_WIDTH_16_ERROR");
        i_parser.PrintString("HWP Error description", "Unsupported DRAM width x16");
        break;
    case 0xce8611:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_DRAM_WIDTH_32_ERROR");
        i_parser.PrintString("HWP Error description", "Unsupported DRAM width x32");
        break;
    case 0x9cc390:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_DRAM_WIDTH_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown DRAM width");
        break;
    case 0xef29a9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_DRAM_DENSITY_ERR");
        i_parser.PrintString("HWP Error description", "Unsupported DRAM density");
        break;
    case 0x42f900:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_CWL_CALC_ERR");
        i_parser.PrintString("HWP Error description", "Error calculating CWL");
        break;
    case 0x0c4af2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_RDIMM_UNSUPPORTED_TYPE");
        i_parser.PrintString("HWP Error description", "Currently unsupported IBM_TYPE");
        break;
    case 0x60c795:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_UDIMM_UNSUPPORTED_TYPE");
        i_parser.PrintString("HWP Error description", "Currently unsupported IBM_TYPE");
        break;
    case 0xba649f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_DIMM_UNSUPPORTED_TYPE");
        i_parser.PrintString("HWP Error description", "Currently unsupported IBM_TYPE");
        break;
    case 0xc56d0d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MSS_FREQ");
        i_parser.PrintString("HWP Error description", "Invalid ATTR_MSS_FREQ");
        break;
    case 0x70ecd6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_RANK_GROUP_NON_MATCH_RANKS");
        i_parser.PrintString("HWP Error description", "Plug rule violation in mss_eff_config_rank_group 		due to num_ranks_per_dimm not matching.");
        break;
    case 0x84b2b4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_RANK_GROUP_NUM_RANKS_NEQ1");
        i_parser.PrintString("HWP Error description", "Plug rule violation in mss_eff_config_rank_group 		due to num_ranks_per_dimm not being set correctly.");
        break;
    case 0x014005:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_RANK_GROUP_NO_MATCH");
        i_parser.PrintString("HWP Error description", "Plug rule violation in mss_eff_config_rank_group 		due to no matching case.");
        break;
    case 0xae7bae:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_REWRITE_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of LRDIMM function in mss_eff_config_termination");
        break;
    case 0x300ae4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_TERM_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of LRDIMM function in mss_eff_config_termination");
        break;
    case 0x842ac8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_DDR4_TERM_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of DDR4 LRDIMM function in mss_eff_config_termination");
        break;
    case 0xc5a674:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_DDR4_TERM_ATTS_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of DDR4 term attrs function in mss_eff_config_termination");
        break;
    case 0xb3d72e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_CREATE_DB_DDR4_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of DDR4 DB function in mss_eff_config_termination");
        break;
    case 0x3616f7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_CREATE_RCD_DDR4_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of DDR4 RCD function in mss_eff_config_termination");
        break;
    case 0xfe6eeb:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_FREQ");
        i_parser.PrintString("HWP Error description", "Invalid ATTR_MSS_FREQ value");
        break;
    case 0x2d802c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_DIMM_USE_ERROR");
        i_parser.PrintString("HWP Error description", "Invalid Dimm SIM this should not have happened");
        break;
    case 0x55589f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1333Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG3 FREQ MBA0 where freq is less than equal 1333Mbps");
        break;
    case 0x39d6e0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1600Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG3 FREQ MBA0 where freq is less than equal 1600Mbps");
        break;
    case 0xd4350b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1333Mbps_MBA1");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG3 FREQ MBA1 where freq is less than equal 1333Mbps");
        break;
    case 0xcf7ef2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1600Mbps_MBA1");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG3 FREQ MBA1 where freq is less than equal 1600Mbps");
        break;
    case 0xf98d77:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_B4_1600Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type B4 CDIMM 1600 MBA0/1 where freq is less than equal 1600Mbps");
        break;
    case 0x4c7936:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_1600Mbps_MBA0");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type UDIMM FREQ MBA1 where freq is less than equal 1600Mbps");
        break;
    case 0xc352f1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_MBA0");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type UDIMM FREQ MBA0 where freq is greater than 1600Mbps");
        break;
    case 0x8c774f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_1600Mbps_MBA1");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type UDIMM FREQ MBA1 where freq is less than equal 1600Mbps");
        break;
    case 0x7ca56b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_MBA1");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type UDIMM FREQ MBA1 where freq is greater than 1600Mbps");
        break;
    case 0x5964fe:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA0_1333Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type RDIMM FREQ MBA0 where freq is less than equal 1333Mbps");
        break;
    case 0x7a1587:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA0_1600Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type RDIMM FREQ MBA0 where freq is less than equal 1600Mbps");
        break;
    case 0x70a639:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1066Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type RDIMM FREQ MBA1 where freq is less than equal 1066Mbps");
        break;
    case 0x85c8fb:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1333Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type RDIMM FREQ MBA1 where freq is less than equal 1333Mbps");
        break;
    case 0x81dc4f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1600Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type RDIMM FREQ MBA1 where freq is less than equal 1600Mbps");
        break;
    case 0x7ee5d1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_LRDIMM_MBA1_1333Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type LRDIMM FREQ MBA1 where freq is less than equal 1333Mbps");
        break;
    case 0x8724c0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_LRDIMM_MBA1_1600Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type LRDIMM FREQ MBA1 where freq is less than equal 1600Mbps");
        break;
    case 0x1bf3b6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_ERROR_RETRIEVING_DIMMS");
        i_parser.PrintString("HWP Error description", "Could Not get termination information for dimm");
        break;
    case 0x6b092c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_SETTING_LRDIMM_TERM_ATTRS");
        i_parser.PrintString("HWP Error description", "Termination ATTR Setup LRDIMM");
        break;
    case 0x99d941:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_LRDIMM_ODT_RD");
        i_parser.PrintString("HWP Error description", "FAILED ODT Setup LRDIMM");
        break;
    case 0x3842e8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_DDR4_RCD");
        i_parser.PrintString("HWP Error description", "DDR4 RCD Setup Failed");
        break;
    case 0x1027ca:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_TYPE");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type");
        break;
    case 0x39cda6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_FREQ");
        i_parser.PrintString("HWP Error description", "Invalid RDIMM ATTR_MSS_FREQ, freq is 1866Mbps");
        break;
    case 0xa8bc3d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_VOLT");
        i_parser.PrintString("HWP Error description", "Invalid RDIMM ATTR_MSS_VOLT, Volt is less than 1.2V");
        break;
    case 0x0829ae:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_RCD_IBT");
        i_parser.PrintString("HWP Error description", "Invalid DIMM_RCD_IBT");
        break;
    case 0x5e94b1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_RCD_MIRROR_MODE");
        i_parser.PrintString("HWP Error description", "Invalid DIMM_RCD_MIRROR_MODE");
        break;
    case 0x88dd78:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_CARD_TYPE_RLO");
        i_parser.PrintString("HWP Error description", "Invalid Card Type RLO Settings");
        break;
    case 0x295f74:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1333Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG4 FREQ MBA0 where freq is less than equal 1333Mbps");
        break;
    case 0xcee106:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1600Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG4 FREQ MBA0 where freq is less than equal 1600Mbps");
        break;
    case 0xaf445a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1333Mbps_MBA1");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG4 FREQ MBA1 where freq is less than equal 1333Mbps");
        break;
    case 0x2ac82e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1600Mbps_MBA1");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG4 FREQ MBA1 where freq is less than equal 1600Mbps");
        break;
    case 0xa9ec30:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_BLKWKUP_CODE_BAD_OP");
        i_parser.PrintString("HWP Error description", "An invalid operation (eg besides Set or Clear ENUM) was passed to p8_block_wakeup_intr");
        break;
    case 0x08c399:
        i_parser.PrintString("HwpReturnCode", "RC_P8_MAILBOX_UTILS_PROC_REFCLK_ZERO_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_mailbox_utils (p8_mailbox_utils_get_mbox1) The ATTR_FREQ_PROC_REFCLOCK specified a zero for proc refclk, which is invalid");
        break;
    case 0x3723ce:
        i_parser.PrintString("HwpReturnCode", "RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p8_mailbox_utils (p8_mailbox_utils_get_mbox1) The calculated DPLL frequency multiplier is too bit to fit in the bit field");
        break;
    case 0xef8375:
        i_parser.PrintString("HwpReturnCode", "PROC_ENABLE_RECONFIG_CLEANUP_INVALID_MCS_RC");
        i_parser.PrintString("HWP Error description", "io_cleanup invoked with invalid mcs target");
        break;
    case 0x5fa0a1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ENABLE_RECONFIG_CLEANUP_UNSUPPORTED");
        i_parser.PrintString("HWP Error description", "Processor Hardware does not support reconfiguration loops. For Venice and Murano, DD2.0 and greater hardware support this function");
        break;
    case 0x5bd606:
        i_parser.PrintString("HwpReturnCode", "PROC_ENABLE_RECONFIG_CLEANUP_POST_RESET_MCS_UNIT_ID_FAIL");
        i_parser.PrintString("HWP Error description", "io cleanup was unable to determine the correct mcs unit id to set the bus id.");
        break;
    case 0xe016a3:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MEM_STARTCLOCKS_UNEXPECTED_CLOCK_STATUS");
        i_parser.PrintString("HWP Error description", "cen_mem_startclocks got unexpected clock status in the MEM_CLK_STATUS register. Membuf chip is most likely bad, but could be reference clock.");
        break;
    case 0x317df8:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MEM_PLL_INITF_UNSUPPORTED_MSS_FREQ");
        i_parser.PrintString("HWP Error description", "cen_mem_pll_initf found unsupported memory channel frequency in ATTR_MSS_FREQ attribute.");
        break;
    case 0xeb606b:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MEM_PLL_INITF_UNSUPPORTED_NEST_FREQ");
        i_parser.PrintString("HWP Error description", "cen_mem_pll_initf found unsupported nest frequency in ATTR_FREQ_PB attribute.");
        break;
    case 0x03cacb:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MEM_PLL_SETUP_PLL_LOCK_TIMEOUT");
        i_parser.PrintString("HWP Error description", "cen_mem_pll_setup timed out waiting for PLL lock. Membuf chip is most likely bad, but could be reference clock.");
        break;
    case 0xb96bd0:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_INVALID_STATE");
        i_parser.PrintString("HWP Error description", "The PORE SLW is in an unexpected state for completing a Winkle transition");
        break;
    case 0x243345:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_NOT_IN_ETR");
        i_parser.PrintString("HWP Error description", "The targeted EX chiplet is not in current SLW EXE Trigger register.");
        break;
    case 0x00e3aa:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_ADDRESS_MISMATCH");
        i_parser.PrintString("HWP Error description", "SLW engine address does not match the expected address");
        break;
    case 0xe2e28d:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_PMC_FIR_ERRORS");
        i_parser.PrintString("HWP Error description", "PMC LFIR has unexpeced SLW bits on");
        break;
    case 0x155585:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_EX_NOT_RUNNING");
        i_parser.PrintString("HWP Error description", "The targeted EX chiplet is not in the expected RUNNING state per PMHistory register.");
        break;
    case 0x3e5d63:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_MCSYNC_THERMAL_RETRY_EXCEEDED");
        i_parser.PrintString("HWP Error description", "The DMI lost the sync operation too many times");
        break;
    case 0x3f98dc:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_POWER_CLEANUP_MBA0_UNEXPECTED_BAD_RC");
        i_parser.PrintString("HWP Error description", "Procedure got an unexpected fail in a cfam or scom access for mba0");
        break;
    case 0xd86b04:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_POWER_CLEANUP_MBA1_UNEXPECTED_BAD_RC");
        i_parser.PrintString("HWP Error description", "Procedure got an unexpected fail in a cfam or scom access for mba1");
        break;
    case 0x95c1cb:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_POWER_CLEANUP_FENCING_UNEXPECTED_BAD_RC");
        i_parser.PrintString("HWP Error description", "Procedure got an unexpected fail in a cfam or scom access during fencing");
        break;
    case 0xb1ad59:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_POWER_CLEANUP_CENTAUR_UNEXPECTED_BAD_RC");
        i_parser.PrintString("HWP Error description", "Procedure got an unexpected fail in a cfam or scom access during centaur cleanup");
        break;
    case 0x5d1e00:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_MB_INTERLEAVE_PLUG_DECONFIG_DIMM");
        i_parser.PrintString("HWP Error description", "This DIMM violated a plugging rules for MBA interleaving.");
        break;
    case 0xd4bd9f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_UNSUPPORTED_TYPE");
        i_parser.PrintString("HWP Error description", "Currently unsuported IBM type");
        break;
    case 0x75be01:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_MSS_FREQ");
        i_parser.PrintString("HWP Error description", "Invalid LRDIMM ATTR_MSS_FREQ");
        break;
    case 0x79d226:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_MSS_VOLT");
        i_parser.PrintString("HWP Error description", "Invalid LRDIMM ATTR_MSS_VOLT");
        break;
    case 0x8b49a2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_DRAM_DENSITY");
        i_parser.PrintString("HWP Error description", "Invalid ATTR_EFF_DRAM_DENSITY for mult_mode = 1");
        break;
    case 0x239cdf:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_MULT_2");
        i_parser.PrintString("HWP Error description", "Invalid ATTR_EFF_DRAM_DENSITY for mult_mode = 2");
        break;
    case 0x6169da:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_SPD_DRV_IMP");
        i_parser.PrintString("HWP Error description", "Invalid SPD LR MR1,2 DRAM drv imp on");
        break;
    case 0x957acf:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_SPD_RTT_NOM");
        i_parser.PrintString("HWP Error description", "Invalid SPD LR MR1,2 DRAM drv imp on");
        break;
    case 0xc95434:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_SPD_RTT_WR");
        i_parser.PrintString("HWP Error description", "Invalid SPD LR MR1,2 DRAM RTT_WR");
        break;
    case 0xc61da2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_RANK_MULT_MODE");
        i_parser.PrintString("HWP Error description", "Invalid LR rank mult mode");
        break;
    case 0x682c94:
        i_parser.PrintString("HwpReturnCode", "IO_GCR_WRITE_MISMATCH_RC");
        i_parser.PrintString("HWP Error description", "IO GCR write operation failed to readback data that was written");
        break;
    case 0x19e05c:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_SET_PLL_INVALID_INVOCATION_RC");
        i_parser.PrintString("HWP Error description", "io_training_set_pll_post_wiretest invoked with incorrect target type");
        break;
    case 0x68c643:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_POST_TRAINING_INVALID_INVOCATION_RC");
        i_parser.PrintString("HWP Error description", "io_training_set_pll_post_wiretest invoked with incorrect target type");
        break;
    case 0x341486:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_CHECK_DLL_VAL_OUT_OF_BOUND_RC");
        i_parser.PrintString("HWP Error description", "DLL Workaround encountered unexpected start value");
        break;
    case 0xabe431:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_CHECK_DLL_WORKAROUND_FAIL");
        i_parser.PrintString("HWP Error description", "DLL Workaround failed to arrive at a solution");
        break;
    case 0xfe004f:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_FIR_MAX_SPARES_EXCEEDED_RC");
        i_parser.PrintString("HWP Error description", "maximum spares possible to deploy exceeded");
        break;
    case 0xdd9815:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_INVALID_TARGET_PAIR_RC");
        i_parser.PrintString("HWP Error description", "io_run_training invoked with wrong pair of targets");
        break;
    case 0xccd080:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_TIMEOUT_RC");
        i_parser.PrintString("HWP Error description", "io run training wiretest timed out waiting for pass/fail indication in the p8 or centaur Status Registers");
        break;
    case 0xa4201b:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_TIMEOUT_RC");
        i_parser.PrintString("HWP Error description", "io run training deskew timed out waiting for pass/fail indication in the p8 or centaur Status Registers");
        break;
    case 0x01e796:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_TIMEOUT_RC");
        i_parser.PrintString("HWP Error description", "io run training Eyeopt timed out waiting for pass/fail indication in the p8 or centaur Status Registers");
        break;
    case 0x1b2208:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_TIMEOUT_RC");
        i_parser.PrintString("HWP Error description", "io run training repair timed out waiting for pass/fail indication in the p8 or centaur Status Registers");
        break;
    case 0xc39a13:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_MODE_TIMEOUT_RC");
        i_parser.PrintString("HWP Error description", "io run training functional mode timed out waiting for pass/fail indication in the p8 or centaur Status Registers");
        break;
    case 0x69d9d8:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("HWP Error description", "Wiretest Training fail was reported in a P8 or Centaur status register");
        break;
    case 0xde1b4f:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("HWP Error description", "FFDC for Wiretest failure in training ( PER LANE MASTER DATA )");
        break;
    case 0xba7380:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("HWP Error description", "FFDC for Wiretest failure in training (PER LANE SLAVE DATA )");
        break;
    case 0xd5bbee:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("HWP Error description", "Deskew Training fail was reported in a P8 or Centaur status register");
        break;
    case 0xd70d06:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("HWP Error description", "FFDC for Deskew in training ( PER LANE MASTER DATA )");
        break;
    case 0x558bf5:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("HWP Error description", "FFDC for Deskew in training ( PER LANE SLAVE DATA )");
        break;
    case 0xbd94fa:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_RC");
        i_parser.PrintString("HWP Error description", "Eye Optimization Training fail was reported in a P8 or Centaur status register");
        break;
    case 0x40eca3:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("HWP Error description", "FFDC for Deskew in training ( PER LANE MASTER DATA )");
        break;
    case 0x6ff2f5:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("HWP Error description", "FFDC for Deskew in training ( PER LANE SLAVE DATA )");
        break;
    case 0xafe269:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_FAIL_RC");
        i_parser.PrintString("HWP Error description", "Static Repair Training fail was reported in a P8 or Centaur status register");
        break;
    case 0xcfc43b:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_FAIL_RC");
        i_parser.PrintString("HWP Error description", "Functional mode Training fail was reported in a P8 or Centaur status register");
        break;
    case 0xfea223:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_OFFCAL_ERROR_RC");
        i_parser.PrintString("HWP Error description", "io offset cal errored out");
        break;
    case 0xffc93c:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_OFFCAL_TIMEOUT_RC");
        i_parser.PrintString("HWP Error description", "io offset cal timedout");
        break;
    case 0x77103d:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCAL_K2_EXCEEDED_RC");
        i_parser.PrintString("HWP Error description", "Post cursor drive ratio has exceeded 0.25");
        break;
    case 0x10b80e:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCAL_M_EXCEEDED_RC");
        i_parser.PrintString("HWP Error description", "Margin Ratio has exceeded 100 percentage");
        break;
    case 0xe1ca3f:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCAL_ERROR_RC");
        i_parser.PrintString("HWP Error description", "io impedance cal errored out");
        break;
    case 0xfd4cdc:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCAL_TIMEOUT_RC");
        i_parser.PrintString("HWP Error description", "io impedance cal timed out");
        break;
    case 0xf5be49:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC");
        i_parser.PrintString("HWP Error description", "Impedance calibration zcal_n value out of range");
        break;
    case 0xf02524:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC");
        i_parser.PrintString("HWP Error description", "Impedance calibration zcal_p value out of range");
        break;
    case 0xd8f0b4:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_INVALID_INVOCATION_RC");
        i_parser.PrintString("HWP Error description", "io dc cal invoked with wrong pair of targets");
        break;
    case 0x188839:
        i_parser.PrintString("HwpReturnCode", "IO_POWER_DOWN_LANES_INVALID_INVOCATION_RC");
        i_parser.PrintString("HWP Error description", "io_power_down_lanes invoked with incorrect target type");
        break;
    case 0x385d66:
        i_parser.PrintString("HwpReturnCode", "IO_READ_EREPAIR_INVALID_INVOCATION_RC");
        i_parser.PrintString("HWP Error description", "io_run_training invoked with wrong pair of targets");
        break;
    case 0x412135:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_TOO_MANY_BUS_ERROR_RC");
        i_parser.PrintString("HWP Error description", "A bus has experienced too many random lane errors");
        break;
    case 0x93d630:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_RECALIBRATION_ERROR_RC");
        i_parser.PrintString("HWP Error description", "recalibration or a repair error has been detected");
        break;
    case 0xcbb3fe:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC");
        i_parser.PrintString("HWP Error description", "maximum spares possible to deploy exceeded");
        break;
    case 0x59fd07:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_SPARES_DEPLOYED_FIR_RC");
        i_parser.PrintString("HWP Error description", "A spare has been deployed");
        break;
    case 0xfbad9e:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_LANE_TX_PARITY_ERROR_RC");
        i_parser.PrintString("HWP Error description", "io lane level tx parity error set");
        break;
    case 0x059b0b:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_GROUP_TX_PARITY_ERROR_RC");
        i_parser.PrintString("HWP Error description", "io group level tx parity error set");
        break;
    case 0xbc6c93:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_LANE_RX_PARITY_ERROR_RC");
        i_parser.PrintString("HWP Error description", "io lane level rx parity error set");
        break;
    case 0x13a61e:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_GROUP_RX_PARITY_ERROR_RC");
        i_parser.PrintString("HWP Error description", "io group level rx parity error set");
        break;
    case 0xb44741:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_BUS_RX_PARITY_ERROR_RC");
        i_parser.PrintString("HWP Error description", "io bus level rx parity error set");
        break;
    case 0x306108:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_GCR_HANG_ERROR_RC");
        i_parser.PrintString("HWP Error description", "gcr hang error detected");
        break;
    case 0x873fef:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_INVALID_INVOCATION_RC");
        i_parser.PrintString("HWP Error description", "io clear firs hwp invoked with wrong pair of targets");
        break;
    case 0x6f748a:
        i_parser.PrintString("HwpReturnCode", "IO_CLEAR_FIRS_INVALID_INVOCATION_RC");
        i_parser.PrintString("HWP Error description", "io clear firs hwp invoked with wrong pair of targets");
        break;
    case 0x826603:
        i_parser.PrintString("HwpReturnCode", "IO_RESTORE_EREPAIR_INVALID_INVOCATION_RC");
        i_parser.PrintString("HWP Error description", "io_restore_erepair invoked with incorrect target type");
        break;
    case 0x56c529:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_CHECK_MASTER_NO_VALID_MCS");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_check_master Both MCL/MCR fences asserted, no functional MCS units are available for use on master chip.");
        break;
    case 0x8fb65c:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_MPIPL_CLOCK_START_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_chiplet_init Check that clocks were started to allow AISS access for PCB Fencing failed");
        break;
    case 0x080a56:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_MPIPL_PBC_FENCE_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_chiplet_init Check that the PCB Fence was raised for MPIPL reset failed");
        break;
    case 0xab9d22:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_MPIPL_SECURITY_UNLOCK_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_chiplet_init The security function failed to unlock for MPIPL restart");
        break;
    case 0xb22e8d:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SCAN_MULTICAST_TYPE_ERROR");
        i_parser.PrintString("HWP Error description", "Subroutine: proc_sbe_decompress_scan The subroutine was given a chiplet Id that is a multicast chiplet, however it is not a multicast WRITE type as required. The bad chiplet Id will be found in P0 at the halt.");
        break;
    case 0x868f39:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SCAN_MAGIC_MISMATCH");
        i_parser.PrintString("HWP Error description", "Subroutine: proc_sbe_decompress_scan The subroutine was passed a data structure whose magic number was incorrect. The magic number of the data structure can be found in PORE register D0. The most likely cause of this error is a problem with the tool chain used to build the SBE IPL images.");
        break;
    case 0x20ef90:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SCAN_HEADER_VERSION_ERROR");
        i_parser.PrintString("HWP Error description", "Subroutine: proc_sbe_decompress_scan The subroutine was passed a data structure whose header version is different from the one the code was expecting. The header version of the data structure can be found in PORE register D0. The most likely cause of this error is a problem with the tool chain used to build the SBE IPL images.");
        break;
    case 0xb575cf:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SCAN_DATA_SIZE_ERROR");
        i_parser.PrintString("HWP Error description", "Subroutine: proc_sbe_decompress_scan Each scan data structure contains the total expected size of the structure, however in this case the compressed scan string required either more or less data than indicated in the header. The PORE register D0 contains the number (signed) of excess doublewords. The most likely cause of this error is a problem with the tool chain used to build the SBE IPL images.");
        break;
    case 0xa3a610:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SCAN_RING_LENGTH_ERROR");
        i_parser.PrintString("HWP Error description", "Subroutine: proc_sbe_decompress_scan The number of bits scanned does not match the ring length stored in the scan data header. The PORE register D0 contains the number (signed) of excess bits. The most likely cause of this error is a problem with the tool chain used to build the SBE IPL images.");
        break;
    case 0xcb0da9:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SCAN_CHECKWORD_ERROR");
        i_parser.PrintString("HWP Error description", "Subroutine: proc_sbe_decompress_scan The initial checkword did not rotate back into the scan data register at the completion of the scan. The contents of the PORE D0 register have been loaded with the received checkword, whose value may provide a clue as to what happened. The expected value is 0xa5a55a5a00000000. This error could be caused by broken hardware, or by any tool problem that would misrepresent the length of the actual hardware scan ring.");
        break;
    case 0x21fdf4:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_DPLL_SETUP_NOLOCK");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_ex_dpll_setup This error is signalled when the EX DPLL fails to lock after ~150us.");
        break;
    case 0xc192b3:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_EX_STARTCLOCKS_CLOCKS_NOT_STARTED");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_ex_startclocks After trying to start all of the EX clocks, some of the tholds were still high");
        break;
    case 0x3eb7ed:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_EX_STARTCLOCKS_CHIP_XSTOPPED");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_ex_startclocks After starting the EX clocks the system was xstopped");
        break;
    case 0x57de86:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_FABRICINIT_FBC_STOPPED_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_fabricinit Fabric init sequence not attempted, fabric arbitration is stopped.");
        break;
    case 0x6b000a:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_FABRICINIT_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_fabricinit Fabric init failed, or mismatch in expected ADU status.");
        break;
    case 0xff0688:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_INSTR_START_SPWU_FAILED");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_instruct_start Special wakeup before starting instructions failed.");
        break;
    case 0xbee098:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_INSTR_START_THREAD0_NOT_RUNNING");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_instruct_start Thread 0 is still in nap/sleep/winkle after the instruct start");
        break;
    case 0xce8d32:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_INSTR_START_MAINT_MODE");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_instruct_start Can't start instructions because the core is still in maintenance mode.");
        break;
    case 0x56af8a:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LCO_LOADER_MULTICAST_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_lco_loader Attempted to execute procedure with cv_multicast option.");
        break;
    case 0x238877:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LCO_LOADER_FBC_STOPPED_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_lco_loader LCO load sequence not attempted, fabric arbitration is stopped.");
        break;
    case 0x0ad963:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LCO_LOADER_IMAGE_SIZE_PAD_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_lco_loader Hostboot image size is not evenly divisible by cacheline size.");
        break;
    case 0x3bea0e:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LCO_LOADER_IMAGE_SIZE_OVERFLOW_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_lco_loader Hostboot image size is larger than master chiplet cache size.");
        break;
    case 0xeb21e0:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LCO_LOADER_IMAGE_WRAP_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_lco_loader Combination of target base address and hostboot image size will wrap OCB address.");
        break;
    case 0x07913e:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LCO_LOADER_IMAGE_ALIGN_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_lco_loader Target base address is not cacheline aligned.");
        break;
    case 0x86babb:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LCO_LOADER_PBA_RESET_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_lco_loader PBA slave reset still in progress or buffer is busy.");
        break;
    case 0x137290:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LCO_LOADER_LPCM_FIR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_lco_loader LPCM FIR register was non-zero after PNOR read.");
        break;
    case 0x0f00b6:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LCO_LOADER_OCB_STATUS_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_lco_loader Unexpected state in OCB Status Control Register at end of write stream.");
        break;
    case 0x98d3f0:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LCO_LOADER_PBA_FIR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_lco_loader Unexpected state in PBA FIR Register at end of write stream.");
        break;
    case 0xb73b21:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LCO_LOADER_PBA_WBUF0_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_lco_loader Unexpected state in PBA Write Buffer0 Register at end of write stream.");
        break;
    case 0x94d71e:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LCO_LOADER_PBA_WBUF1_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_lco_loader Unexpected state in PBA Write Buffer1 Register at end of write stream.");
        break;
    case 0x7d6e88:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_NPLL_SETUP_CPFILT_NOLOCK");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_npll_setup CP Filter PLL failed to lock.");
        break;
    case 0x7e9808:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_NPLL_SETUP_EMFILT_NOLOCK");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_npll_setup EM Filter PLL failed to lock.");
        break;
    case 0xac1964:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_NPLL_SETUP_XBUS_NOLOCK");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_npll_setup X-Bus PLL failed to lock.");
        break;
    case 0xef56c0:
        i_parser.PrintString("HwpReturnCode", "PROC_SBE_PB_START_CLOCK_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_pb_startclocks Failed to start clocks on PB chiplet.");
        break;
    case 0x420982:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PIBMEM_PRE_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_pibmem_loader The PIBMEM either shows error status or is not in the idle state prior to the execution of the procedure. The contents of the PIBMEM Status Register are in D0 at the time of the halt. Resetting the PIBMEM prior to running proc_sbe_pibmem_loader should clear up this error.");
        break;
    case 0xc60e41:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PIBMEM_POST_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_pibmem_loader The PIBMEM either shows error status or is not in the idle state after execution of the procedure. The contents of the PIBMEM Status Register are in D0 at the time of the halt.");
        break;
    case 0xe196d6:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PIBMEM_IMAGE_SIZE_ALIGNMENT");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_pibmem_loader The size of the PIBMEM image to load is not a multiple of 8 bytes, which is a hard requirement due to the PORE architecture. The image size passed to the procedure can be found in SPRG0.");
        break;
    case 0x53c85a:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PIBMEM_LOAD_ADDRESS_ALIGNMENT");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_pibmem_loader The load address of the PIBMEM image is not a multiple of 8 bytes, which is a hard requirement due to the PORE architecture. The load address passed to the procedure can be found in SPRG0.");
        break;
    case 0xbf584d:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PIBMEM_OVERFLOW");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_pibmem_loader The load address and size of the PIBMEM image would overflow the physical PIBMEM. The image size (in bytes) passed to the procedure is in SPRG0; D1 contains the PIBMEM load address passed to the procedure.");
        break;
    case 0x3bb5c2:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_WINKLE_STATE_OR_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_scominit Check of winkle state across all IPLed chiplets using READ-OR failed.");
        break;
    case 0x3ae2ef:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_WINKLE_STATE_AND_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_scominit Check of winkle state across all IPLed chiplets using READ-AND failed.");
        break;
    case 0xccc639:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_WINKLE_FSM_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_scominit Polling of Idle FSM timed out.");
        break;
    case 0x8e6707:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_WINKLE_PFET_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_scominit Polling of PFET controller for idle timed out.");
        break;
    case 0x724047:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SELECT_EX_NO_GOOD_BOOT_CORES_FOUND");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_select_ex None of the valid boot cores are enabled");
        break;
    case 0x8bf188:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SELECT_EX_NO_SECOND_GOOD_BOOT_CORE_FOUND");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_select_ex Skipped the first good boot core and no other good boot core was found");
        break;
    case 0x5ec1b2:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SET_VID_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_setup_evid Setting EVID during boot timed out on the SPIVID bus");
        break;
    case 0x902aac:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SPIVID_STATUS_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_setup_evid Errors detected in O2S Status Reg setting Boot Voltage");
        break;
    case 0x45d3cd:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SPIVID_WRITE_RETURN_STATUS_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_setup_evid SPIVID Device did not return good status the Boot Voltage Write operation");
        break;
    case 0x203b89:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_TP_SWITCH_GEARS_XBUS_NOLOCK");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_tp_switch_gears X-Bus PLL failed to lock (Murano DD1.x workaround).");
        break;
    case 0xe5fb4f:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_TP_SWITCH_GEARS_XBUS_HEADER_CHECK_FAIL");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_tp_switch_gears X-Bus Murano DD1.x workaround header check fail (ie. scan failed)");
        break;
    case 0x7b0719:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_TRIGGER_WINKLE_EX_DID_NOT_ENTER_WINKLE");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_trigger_winkle The master EX chiplet did not enter winkle before the deadman timer expired.");
        break;
    case 0xa88bd7:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_TRIGGER_WINKLE_EX_WAKEUP_DID_NOT_HIT_GOTO");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_trigger_winkle The master EX chiplet wakeup did not hit GOTO before the deadman timer expired.");
        break;
    case 0x8f9233:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_TRIGGER_WINKLE_EX_WAKEUP_DID_NOT_FINISH");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_trigger_winkle The master EX chiplet wakeup didn't finish before the deadman timer expired.");
        break;
    case 0x866354:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_TRIGGER_WINKLE_HOSTBOOT_DID_NOT_RESPOND");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_trigger_winkle The master EX chiplet woke up but hostboot didn't indicate that it was running before the deadman timer expired.");
        break;
    case 0x5a8176:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_UNDEFINED_SV");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_base and indicates that an invalid start vector was detected in the EXE_TRIGGER (ETR) register when kicking off an idle transition. The start vector is in ETR(8:11).");
        break;
    case 0xd84d99:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_PFET_VDD_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_poweronoff and indicates that a timeout occured waiting for the VDD PFET sequencer(s) to complete.");
        break;
    case 0x1ffcce:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_PFET_VCS_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_poweronoff and indicates that a timeout occured waiting for the VCS PFET sequencer(s) to complete.");
        break;
    case 0xd6a6b9:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_PFET_DECODE_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_poweronoff and indicates that an invalid PFET decode was detected. This is an SLW firmware issue.");
        break;
    case 0xc04e72:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_IVRM_BS_SLEEP_ENTRY_TIMEOUT");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_base and indicates that a timeout occured waiting for the internal VRM babystepper to synchronize the idle transition command during sleep entry.");
        break;
    case 0x70a61e:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_IVRM_BS_WINKLE_ENTRY_TIMEOUT");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_base and indicates that a timeout occured waiting for the internal VRM babystepper to synchronize the idle transition command during winkle entry.");
        break;
    case 0x792d8d:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_IVRM_BS_EXIT_TIMEOUT");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_base and indicates that a timeout occured waiting for the internal VRM babystepper to synchronize the idle transition command during a fast exit.");
        break;
    case 0x5d3041:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_IVRM_CAL_TIMEOUT");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_base and indicates that a timeout occured while polling for the iVRM calibration to complete.");
        break;
    case 0xd92289:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_IVRM_CAL_BS_EXIT_TIMEOUT");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_base and indicates that a timeout occured waiting for the internal VRM babystepper to synchronize the idle transition command during a deep exit after iVRM calibration.");
        break;
    case 0x7b5221:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_IVRM_FORCESM_TIMEOUT");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_base and indicates that a timeout occured waiting for the internal VRM force safe mode to take effect.");
        break;
    case 0x5ee631:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_RAM_THREAD_CHECK_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_ram and indicates that a timeout occured waiting the RAM hardware to accept the instruction given to it..");
        break;
    case 0xe2dbef:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_RAM_THREAD_QUIESCE_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_ram and indicates that a timeout occured waiting the RAM hardware to quiesce.");
        break;
    case 0xe061ca:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_RAM_CONTROL_EXCEPTION_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_ram and indicates that RAM controller indicates recovery is inprogress or an exception has occured..");
        break;
    case 0x91c26c:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_RAM_STATUS_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_ram and indicates that a timeout occured looking for good status from the RAM Controller.");
        break;
    case 0x6c2abc:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_GOTO_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_base and indicates that a timeout occured looking for the proper PCBS-PM state before issuing a PCBS-PM GOTO command.");
        break;
    case 0xe3d84a:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_ERRINJ_NEVER_REACH_HALT");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_pro_epi_log and indicates that the image updated the PMC status reg but never reached the subsequent halt op. PMC SLW Timeouts will be indicated without further FIR bits.");
        break;
    case 0x5d46a3:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_ERRINJ_SIMPLE_HALT");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_pro_epi_log and indicates that the image executed the simple halt error injection. PMC SLW Timeouts will be indicated without further FIR bits.");
        break;
    case 0x706b2b:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_ERRINJ_INVALID_INSTR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_pro_epi_log and indicates that the image enabled invalid instruction error injection occured.");
        break;
    case 0xdc13d1:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_ERRINJ_INVALID_OCI_ADDRESS");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_pro_epi_log and indicates that the image enabled invalid OCI address error injection occured.");
        break;
    case 0x4d2279:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_ERRINJ_INVALID_PIB_ADDRESS");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_pro_epi_log and indicates that the image enabled invalid PIB address error injection occured.");
        break;
    case 0xe05008:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_ERRINJ_PC_UNDERFLOW");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_pro_epi_log and indicates that the image enabled PC underflow error injection occured.");
        break;
    case 0xf5fec4:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_ERRINJ_PC_OVERRFLOW");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_pro_epi_log and indicates that the image enabled PC overflow error injection occured.");
        break;
    case 0x1d6dd2:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_ERRINJ_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_pro_epi_log and indicates that the image enabled timeout error injection occured.");
        break;
    case 0x24658e:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_EH_PIB_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_error_handler upon a detected error 0 event (non-masked PIB error code).");
        break;
    case 0xf00298:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_EH_OCI_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_error_handler upon a detected error 1 event (non-masked OCI error code).");
        break;
    case 0x735682:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_EH_INSTRUCTION_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_error_handler upon a detected error 2 event (instruction fetch or decode).");
        break;
    case 0x2b7149:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_EH_INTERNAL_DATA_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_error_handler upon a detected error 3 event (internal data error).");
        break;
    case 0x001258:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_EH_ERROR_ON_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_error_handler upon a detected error 4 event (an error was detected upon an error).");
        break;
    case 0xcaf874:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_PMGP1_ENABLE_CONFIG_ERROR");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_base code when the multicast read AND and the multicast read OR of the PMGP1 register for the chiplets represented in the EXE Trigger register do not match. This could be caused by a configuration error with the Deep Sleep power up and/or down bits or Deep Winkle power up bit. If these bits match, then a hardware fault is the next most probable.");
        break;
    case 0x38a29c:
        i_parser.PrintString("HwpReturnCode", "SLW_RC_ILLEGAL_WINKLE_ENTRY_POWER_DOWN");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_base code (poweronoff portion) and indicates that the PMGP1 bit for WINKLE_POWER_DOWN when WINKLE_POWER_OFF_SEL is set to 1 (eg a Deep Winkle) has been detected. This is an illegal configuration as it causes the loss of the High Availability Log Write pointer in the L3 before it could be saved for restoration upon Deep Winkle Exit.");
        break;
    case 0x08ae2c:
        i_parser.PrintString("HwpReturnCode", "SLW_RC_OHA_SPWUP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_base code when the polling for OHA AISS achieving the special wake-up state after hitting the PCBS GOTO operation to complete deep sleep exit.");
        break;
    case 0xe2b03f:
        i_parser.PrintString("HwpReturnCode", "RC_SLW_CPM_SPWKUP_NOT_SET");
        i_parser.PrintString("HWP Error description", "This error is signalled by proc_slw_occ_cpm code when it is detected that special wake-up override isnt enabled which it must be prior to calling any of the CPM install or enable routines.");
        break;
    case 0x96e5b5:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SUCCESS");
        i_parser.PrintString("HWP Error description", "This halt code does not represent an error; This is the code associated with the normal successful completion of an IPL by an SBE istep procedure.");
        break;
    case 0x90bd6a:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SUCCESS_SLAVE_CHIP");
        i_parser.PrintString("HWP Error description", "This halt code does not represent an error; This is the code associated with the normal successful completion of an IPL by an SBE istep procedure on a slave chip.");
        break;
    case 0xf78421:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PAUSE_WITH_SUCCESS");
        i_parser.PrintString("HWP Error description", "This halt code does not represent an error; This is the code associated with a procedure initiated halt of the SBE code, with the expectation that it will be resumed at a later point in time.");
        break;
    case 0x824a30:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PROC_ENTRY_HALT");
        i_parser.PrintString("HWP Error description", "This halt code does not represent an error; This is the code associated with a HALT requested by the user prior to the execution of a procedure by setting the PROC_CONTROL_ENTRY_HALT bit in the control word for the procedure.");
        break;
    case 0x0855e1:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PROC_EXIT_HALT");
        i_parser.PrintString("HWP Error description", "This halt code does not represent an error; This is the code associated with a HALT requested by the user after the execution of a procedure by setting the PROC_CONTROL_EXIT_HALT bit in the control word for the procedure.");
        break;
    case 0x5fc804:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PROC_CHECKSTOP");
        i_parser.PrintString("HWP Error description", "This halt code indicates that a checkstop was detected after executing a procedure. Use the fields of the SBEVITAL register to identify the procedure that failed.");
        break;
    case 0xdf0682:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PROC_RECOVERABLE");
        i_parser.PrintString("HWP Error description", "This halt code indicates that a recoverable error was detected after executing a procedure. Use the fields of the SBEVITAL register to identify the procedure that failed.");
        break;
    case 0x8e8f7f:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PROC_SPATTN");
        i_parser.PrintString("HWP Error description", "This halt code indicates that a Special Attention was detected after executing a procedure. Use the fields of the SBEVITAL register to identify the procedure that failed.");
        break;
    case 0x1b8903:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PORE_ERROR0");
        i_parser.PrintString("HWP Error description", "This halt code indicates that an execution-phase PIB/PCB access returned a non-0 response. The PORE PIBMS_DBG registers 0 and 1 (plus the remainder of the PORE state) contain the information required for an initial debug of the problem. This error should never occur for SBE/SLW, based on the fact that the HW error handler mechanism is disabled.");
        break;
    case 0x88b94b:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PORE_ERROR1");
        i_parser.PrintString("HWP Error description", "This halt code indicates that an execution-phase OCI accesss had an error. The PORE PIBMS_DBG registers 0 and 1 (plus the remainder of the PORE state) contain the information required for an initial debug of the problem. This error should never occur for SBE/SLW, based on the fact that the HW error handler mechanism is disabled.");
        break;
    case 0xf484e9:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PORE_ERROR2");
        i_parser.PrintString("HWP Error description", "This halt code indicates an instruction fetch or decode error. The PORE specification lists several causes of this error code. The most likely causes in a production system are: o An I2C hang when fetching code from SEEPROM; o A bad branch that starts executing garbage or data; o Memory corruption This error should never occur for SBE/SLW, based on the fact that the HW error handler mechanism is disabled.");
        break;
    case 0x933473:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PORE_ERROR3");
        i_parser.PrintString("HWP Error description", "This halt code indicates an internal data error during consistency checking, e.g., a bad scan-data CRC. This error should never occur for SBE/SLW, based on the fact that the HW error handler mechanism is disabled.");
        break;
    case 0xe91b1b:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PORE_ERROR4");
        i_parser.PrintString("HWP Error description", "This halt code indicates that a second error occurred during processing of an initial error. This error should never occur for SBE/SLW, based on the fact that the HW error handler mechanism is disabled.");
        break;
    case 0x87f13d:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SCAN0_DONE_POLL_THRESHOLD");
        i_parser.PrintString("HWP Error description", "This error is signalled by the scan0 subroutine, indicating that the scan0 DONE polling reached the specified threshold value. The scan0 subroutine could have been called by various procedures.");
        break;
    case 0xb5a913:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_ARRAYINIT_POLL_THRESHOLD");
        i_parser.PrintString("HWP Error description", "This error is signalled by the arrayinit subroutine, indicating that the arrayinit DONE polling reached the specified threshold value. The arrayinit subroutine could have been called by various procedures.");
        break;
    case 0x6d7600:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LOAD_RING_VEC_EX_ex_time_core_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_ex_core_gptr_time_initf Failed to find a chiplet to scan for ex_time_core");
        break;
    case 0x759e0d:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LOAD_RING_VEC_EX_ex_time_eco_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_ex_gptr_time_initf Failed to find a chiplet to scan for ex_time_eco");
        break;
    case 0x37472e:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LOAD_RING_VEC_EX_ex_repr_core_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_ex_core_repair_initf Failed to find a chiplet to scan for ex_repr_core");
        break;
    case 0x49e9e7:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_LOAD_RING_VEC_EX_ex_repr_eco_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_ex_repair_initf Failed to find a chiplet to scan for ex_repr_eco");
        break;
    case 0x03bf3f:
        i_parser.PrintString("HwpReturnCode", "RC_TP_COLLECT_DBG_DATA");
        i_parser.PrintString("HWP Error description", "Procedure: proc_tp_collect_dbg_data");
        break;
    case 0xee1031:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_MODEL_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_pore_engine_state Virtual SBE model error occurred when attempting to access SBE vital state.");
        break;
    case 0x057af0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_PIB_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_pore_engine_state PIB error occurred when attempting to access SBE vital state from virtual SBE model.");
        break;
    case 0xf75642:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION");
        i_parser.PrintString("HWP Error description", "Procedure: proc_extract_pore_engine_state Unsupported engine type presented for analysis.");
        break;
    case 0xbaa13b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC");
        i_parser.PrintString("HWP Error description", "Base error code used to invoke PORE engine state FFDC logging function");
        break;
    case 0x38cf23:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("HWP Error description", "PORE engine state collected on all SBE/SLW fails");
        break;
    case 0x8f65ba:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA");
        i_parser.PrintString("HWP Error description", "SBE specific register FFDC to collect (via chip target) on all fails, exclude TP ring data");
        break;
    case 0x3657d2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA");
        i_parser.PrintString("HWP Error description", "SBE specific register FFDC to collect (via chip target) on all fails, include TP ring data");
        break;
    case 0x086dd7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_SLW");
        i_parser.PrintString("HWP Error description", "SLW specific register FFDC to collect (via chip target) on all fails");
        break;
    case 0x0fad05:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_HALT_FFDC");
        i_parser.PrintString("HWP Error description", "FFDC collected on selected PORE engine halt failures");
        break;
    case 0x437545:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_MULTICAST");
        i_parser.PrintString("HWP Error description", "Unsupported multicast analysis requested");
        break;
    case 0xb1cda2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_TYPE");
        i_parser.PrintString("HWP Error description", "Unsupported halt type analysis requested");
        break;
    case 0x0088b2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FIR_FFDC");
        i_parser.PrintString("HWP Error description", "FFDC collected on processor FIR errors");
        break;
    case 0x1e5d09:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_FIR_FFDC");
        i_parser.PrintString("HWP Error description", "FFDC collected on Centaur FIR errors");
        break;
    case 0xe5674f:
        i_parser.PrintString("HwpReturnCode", "RC_GET_TP_DBG_DATA_ERR");
        i_parser.PrintString("HWP Error description", "No matching entry was found for requested chip type and EC level.");
        break;
    case 0x6d72b6:
        i_parser.PrintString("HwpReturnCode", "RC_GET_TP_DBG_DATA_PARAMETER_ERR");
        i_parser.PrintString("HWP Error description", "Invalid target type passed on invocation.");
        break;
    case 0x489356:
        i_parser.PrintString("HwpReturnCode", "RC_GET_TP_DEBUG_DATA_ERR");
        i_parser.PrintString("HWP Error description", "No matching entry was found for requested chip type and EC level.");
        break;
    case 0x5cf6a5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SBE_SCAN_SERVICE_INVALID_OPERATION");
        i_parser.PrintString("HWP Error description", "Procedure: proc_sbe_scan_service Invalid PLL configuration requested by caller.");
        break;
    case 0x800715:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_NOT_STOPPED");
        i_parser.PrintString("HWP Error description", "Procedure: proc_stop_sbe_scan_service The slave SBE is still running, when expected to be halted");
        break;
    case 0x8840e3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_BAD_HALT");
        i_parser.PrintString("HWP Error description", "Procedure: proc_stop_sbe_scan_service The slave SBE is not halted at the correct istep/substep number");
        break;
    case 0xf5aa01:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("HWP Error description", "Procedure: proc_stop_sbe_scan_service SBE did not reahch acceptable final state");
        break;
    default:
        i_parser.PrintNumber("Unrecognized Error ID", "0x%x", l_rc);
    }
}

void fapiParseHwpFfdc(ErrlUsrParser & i_parser,
                      void * i_pBuffer,
                      const uint32_t i_buflen)
{
    const uint32_t CFAM_DATA_LEN = 4;
    const uint32_t SCOM_DATA_LEN = 8;
    const uint32_t POS_LEN = 4;
    uint8_t * l_pBuffer = static_cast<uint8_t *>(i_pBuffer);
    uint32_t l_buflen = i_buflen;

    // The first uint32_t is the FFDC ID
    uint32_t * l_pFfdcId = static_cast<uint32_t *>(i_pBuffer);
    uint32_t l_ffdcId = ntohl(*l_pFfdcId);
    l_pBuffer += sizeof(l_ffdcId);
    l_buflen -= sizeof(l_ffdcId);
    switch(l_ffdcId)
    {
    case 0x8e6db82f:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_ERROR_A");
        i_parser.PrintString("FFDC:", "UNIT_TEST_FFDC_DATA_INTEGER");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbfc180c9:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_ERROR_A");
        i_parser.PrintString("FFDC:", "UNIT_TEST_FFDC_DATA_BUF");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8453d87f:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_ERROR_A");
        i_parser.PrintString("FFDC:", "UNIT_TEST_CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5186f9b2:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_ERROR_B");
        i_parser.PrintString("FFDC:", "UNIT_TEST_FFDC_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb03bd885:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_DQ_BAD_DATA");
        i_parser.PrintString("FFDC:", "FFDC_DATA1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4d059579:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_DQ_BAD_DATA");
        i_parser.PrintString("FFDC:", "FFDC_DATA2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4002ab96:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_INCORRECT_VER");
        i_parser.PrintString("FFDC:", "FFDC_IF_VER");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2feb6247:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_ATTR_ID_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "FFDC_IF_ATTR_ID_OUT_OF_RANGE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd819f781:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_LIT_ID_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "FFDC_IF_LIT_ID_OUT_OF_RANGE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x41b2db47:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_TGT_NUM_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "FFDC_IF_TGT_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9e4ca7d3:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_TGT_NUM_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "FFDC_IF_NUM_TGTS_PASSED_IN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd07646d2:
        i_parser.PrintString("HwpReturnCode", "RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND");
        i_parser.PrintString("FFDC:", "FFDC_IF_TEST_NUM_MBAS_FOUND");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf07c23cd:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_EXECUTION_ERROR");
        i_parser.PrintString("FFDC:", "FFDC_SCOM_ADDRID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xed0eac6f:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_EXECUTION_ERROR");
        i_parser.PrintString("FFDC:", "FFDC_SCOM_OFFSET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x26a7b51f:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_EXECUTION_ERROR");
        i_parser.PrintString("FFDC:", "FFDC_SCOM_LEN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2fcaff51:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_EXECUTION_ERROR");
        i_parser.PrintString("FFDC:", "FFDC_COLUMN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6f4e6670:
        i_parser.PrintString("HwpReturnCode", "RC_INITFILE_EXECUTION_ERROR");
        i_parser.PrintString("FFDC:", "FFDC_ROW");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc5d7b0de:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_COLLECT_TRACE");
        i_parser.PrintString("FFDC:", "FFDC_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x975d53e4:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_TEST_X_PROC_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP8_0x00002817");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_STATUS_0x00060000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_CONTROL_0x00060001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_RESET_0x00060002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_ERROR_MASK_0x00060003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xb225f1ca:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_TEST_X_EX_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_GP0_0x10000000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_L3_FIR_REG_0x10010800");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x44d5b54c:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_TEST_X_MBA_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBAFIRQ_0x03010600");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBAFIRMASK_0x03010603");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xf335860d:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_TEST_X_PROC_REGISTERS_PRES_CHILDREN");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "HANG_PULSE_0_REG_0x010F0020");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "HANG_PULSE_1_REG_0x010F0021");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x772b30bc:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_INVALID_ARGS");
        i_parser.PrintString("FFDC:", "ARGS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2851048a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8710bc0c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7930c630:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0aabf54d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5142c9a8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x01574777:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xba247d31:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3414d7bb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xda4c2be8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe0fe6dab:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x35200d96:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf8d9dd1e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3e33db64:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd015617f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa199c676:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2d8ccdd1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd0deeaac:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x519cd8e2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x370c9274:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xffb81369:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7b64e807:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf55d58f2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe460b100:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x79d446bb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x27c0f8bf:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xeb5d5a47:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3f6176ce:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1f05b797:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcb31500f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x436be24d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb2178888:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2e13dfa6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xab261ddc:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2cead37c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x82decab0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdc5dbd19:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbb8b022a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x34a141c8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x94ee9f7a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x99b93be3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfdef4bdd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3fa4b865:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x205530c3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfdbef25f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe98fe968:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x63e7e120:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe7207b05:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x58aaf225:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MCS");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x73502d9d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0c738482:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x39671013:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xad6fcb9d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FIR_ERR_MEMBUF");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9c1549fa:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x143ba4b2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xedb9cd8f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2cec313a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9d7c0624:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x263f4586:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe5f3dd94:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3cc51521:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5a7a8b14:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x965aac9c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcfa0ba40:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x09755475:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe7364f42:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5b9d4a73:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x771e962e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb26e00bb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x19f0a5be:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8d8f840c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P8_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf91f37a3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x470d7d78:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd3e2a34c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa3acc4ad:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x33a572c6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe1697b7d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7a72ca32:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x13070b33:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x72d02a4f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5112eb7f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8a64b163:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdfe48c7c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x69cb4fa9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf733de00:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1cfbdd60:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MCI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe4e6faa4:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MCI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdca9c277:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MBI_STAT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe6dc8009:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("FFDC:", "MBI_FIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc1843f4c:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_DIMM_BAD_PARAM");
        i_parser.PrintString("FFDC:", "FFDC_PORT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x965649ec:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_DIMM_BAD_PARAM");
        i_parser.PrintString("FFDC:", "FFDC_DIMM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0c386e0b:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_DIMM_BAD_PARAM");
        i_parser.PrintString("FFDC:", "FFDC_RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xab70075e:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_DIMM_NOT_FOUND");
        i_parser.PrintString("FFDC:", "FFDC_MBA_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x814769c8:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_DIMM_NOT_FOUND");
        i_parser.PrintString("FFDC:", "FFDC_PORT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe6cb4d12:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_DIMM_NOT_FOUND");
        i_parser.PrintString("FFDC:", "FFDC_DIMM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x61ef643e:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET");
        i_parser.PrintString("FFDC:", "DIMM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x594e14d9:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET");
        i_parser.PrintString("FFDC:", "CLEAN_BAD_DQ_BITMAP_RANK0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xed8f2978:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET");
        i_parser.PrintString("FFDC:", "CLEAN_BAD_DQ_BITMAP_RANK1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa11b433c:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET");
        i_parser.PrintString("FFDC:", "CLEAN_BAD_DQ_BITMAP_RANK2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd31d9051:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET");
        i_parser.PrintString("FFDC:", "CLEAN_BAD_DQ_BITMAP_RANK3");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3790497b:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET");
        i_parser.PrintString("FFDC:", "CURRENT_BAD_DQ_BITMAP_RANK0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb2f8340f:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET");
        i_parser.PrintString("FFDC:", "CURRENT_BAD_DQ_BITMAP_RANK1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd370d00a:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET");
        i_parser.PrintString("FFDC:", "CURRENT_BAD_DQ_BITMAP_RANK2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x67ef0e3f:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET");
        i_parser.PrintString("FFDC:", "CURRENT_BAD_DQ_BITMAP_RANK3");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x96b13071:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET");
        i_parser.PrintString("FFDC:", "DIMM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xedd4da8c:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET");
        i_parser.PrintString("FFDC:", "CLEAN_BAD_DQ_BITMAP_RANK0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf28a3701:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET");
        i_parser.PrintString("FFDC:", "CLEAN_BAD_DQ_BITMAP_RANK1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe569429d:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET");
        i_parser.PrintString("FFDC:", "CLEAN_BAD_DQ_BITMAP_RANK2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf019ac7f:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET");
        i_parser.PrintString("FFDC:", "CLEAN_BAD_DQ_BITMAP_RANK3");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf9ddd40b:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET");
        i_parser.PrintString("FFDC:", "UPDATE_BAD_DQ_BITMAP_RANK0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x69b85ca9:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET");
        i_parser.PrintString("FFDC:", "UPDATE_BAD_DQ_BITMAP_RANK1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1df34769:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET");
        i_parser.PrintString("FFDC:", "UPDATE_BAD_DQ_BITMAP_RANK2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa4419509:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET");
        i_parser.PrintString("FFDC:", "UPDATE_BAD_DQ_BITMAP_RANK3");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6e9d28ff:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_UNEXPECTED_CHIP_TYPE");
        i_parser.PrintString("FFDC:", "FFDC_CHIP_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9186a805:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_UNEXPECTED_CHIP_POSITION");
        i_parser.PrintString("FFDC:", "FFDC_CHIP_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x232453b7:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_UNEXPECTED_CHIP_EC");
        i_parser.PrintString("FFDC:", "FFDC_CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe094f2ed:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_CTL_UNEXPECTED_CHIP_TYPE");
        i_parser.PrintString("FFDC:", "FFDC_CHIP_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0d1cae88:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_CTL_UNEXPECTED_ATTR");
        i_parser.PrintString("FFDC:", "FFDC_UNEXPECTED_ATTR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9defc140:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_CTL_INVALID_ATTR_SIZE");
        i_parser.PrintString("FFDC:", "FFDC_ATTR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x25583197:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_CTL_INVALID_ATTR_SIZE");
        i_parser.PrintString("FFDC:", "FFDC_EXPECTED_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7c69ed6f:
        i_parser.PrintString("HwpReturnCode", "RC_OSC_SWITCH_CTL_INVALID_ATTR_SIZE");
        i_parser.PrintString("FFDC:", "FFDC_PASSED_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe71b3bcc:
        i_parser.PrintString("HwpReturnCode", "RC_INSUFFICIENT_VPD_RETURNED");
        i_parser.PrintString("FFDC:", "KEYWORD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x80ad402c:
        i_parser.PrintString("HwpReturnCode", "RC_INSUFFICIENT_VPD_RETURNED");
        i_parser.PrintString("FFDC:", "RETURNED_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x95c66f93:
        i_parser.PrintString("HwpReturnCode", "RC_INSUFFICIENT_VPD_RETURNED");
        i_parser.PrintString("FFDC:", "EXPECTED_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdc09f88d:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_PROC_POS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0d0eecb6:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_CEN_POS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9261dda2:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_CHIP_UNIT_POS_MBA0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd593b1bb:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_CHIP_UNIT_POS_MBA1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0b65b4f2:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_EFF_DIMM_SIZE0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5684567a:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_EFF_DIMM_SIZE1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf8468e45:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_MSS_INTERLEAVE_ENABLE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x655f6b93:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_ALL_MCS_IN_INTERLEAVING_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1e0b22ac:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_PROC_MEM_BASE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x482fd223:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_PROC_MIRROR_BASE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd9ac1efc:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_MSS_MEM_MC_IN_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3b80efb5:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_PROC_MEM_BASES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5a6b4012:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_PROC_MEM_SIZES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x72f8622a:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_MSS_MCS_GROUP_32");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcd2a6259:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_PROC_MIRROR_BASES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe488b9c6:
        i_parser.PrintString("HwpReturnCode", "RC_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("FFDC:", "_ATTR_PROC_MIRROR_SIZES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xaa048078:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CEN_STANDBY_REGION");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_STATUS_0x00001007");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP3_0x00001012");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP4_0x00001013");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP4_0x00001013");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP5_0x00001014");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP6_0x00001015");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP7_0x00001016");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP3_MIRROR_0x0000101B");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
        }
        break;
    case 0x67d6d7a6:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_INVALID_ADDR");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBMACAQ_0x0301060D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBMEAQ_0x0301060E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBA_MCBERRPTQ_0x030106e7");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x45611bb6:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CMD_TIMEOUT_MBA_REGS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBMCTQ_0x0301060A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBMCCQ_0x0301060B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBMSRQ_0x0301060C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBMACAQ_0x0301060D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBMEAQ_0x0301060E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBASCTLQ_0x0301060F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBECTLQ_0x03010610");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBSPAQ_0x03010611");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBSPAMSKQ_0x03010614");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBAFIRQ_0x03010600");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBAFIRMASK_0x03010603");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBAFIRACT0_0x03010606");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBAFIRACT1_0x03010607");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBA_MCBERRPTQ_0x030106e7");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBACALFIR_0x03010400");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBACALFIR_MASK_0x03010403");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBACALFIR_ACTION0_0x03010406");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBACALFIR_ACTION1_0x03010407");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBA_ERR_REPORTQ_0x0301041A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x65d21927:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CMD_TIMEOUT_MBS_REGS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC0_MBECCFIR_0x02011440");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC0_MBECCFIR_MASK_0x02011443");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC0_MBECCFIR_ACTION0_0x02011446");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC0_MBECCFIR_ACTION1_0x02011447");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC1_MBECCFIR_0x02011480");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC1_MBECCFIR_MASK_0x02011483");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC1_MBECCFIR_ACTION0_0x02011486");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC1_MBECCFIR_ACTION1_0x02011487");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x499487ab:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_MBA_FIR_REGS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBSPAQ_0x03010611");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBSPAMSKQ_0x03010614");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBAFIRQ_0x03010600");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBAFIRMASK_0x03010603");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBAFIRACT0_0x03010606");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBAFIRACT1_0x03010607");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBA_MCBERRPTQ_0x030106e7");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBACALFIR_0x03010400");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBACALFIR_MASK_0x03010403");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBACALFIR_ACTION0_0x03010406");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBACALFIR_ACTION1_0x03010407");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBA_ERR_REPORTQ_0x0301041A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xed8fa221:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_MBI_FIR_REGS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBI_FIR_0x02010800");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBI_FIRMASK_0x02010803");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBI_FIRACT0_0x02010806");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBI_FIRACT1_0x02010807");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xfb8d9f71:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_MBS_FIR_REGS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_FIR_REG_0x02011400");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_FIR_MASK_REG_0x02011403");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_FIR_ACTION0_REG_0x02011406");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_FIR_ACTION1_REG_0x02011407");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_FIR_WOF_REG_0x02011408");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC0_MBECCFIR_0x02011440");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC0_MBECCFIR_MASK_0x02011443");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC0_MBECCFIR_ACTION0_0x02011446");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC0_MBECCFIR_ACTION1_0x02011447");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC0_MBECCFIR_WOF_0x02011448");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC1_MBECCFIR_0x02011480");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC1_MBECCFIR_MASK_0x02011483");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC1_MBECCFIR_ACTION0_0x02011486");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC1_MBECCFIR_ACTION1_0x02011487");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC1_MBECCFIR_WOF_0x02011488");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS01_MBSFIRQ_0x02011600");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS01_MBSFIRMASK_0x02011603");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS01_MBSFIRACT0_0x02011606");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS01_MBSFIRACT1_0x02011607");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS01_MBSFIRWOF_0x02011608");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS23_MBSFIRQ_0x02011700");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS23_MBSFIRMASK_0x02011703");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS23_MBSFIRACT0_0x02011706");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS23_MBSFIRACT1_0x02011707");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS23_MBSFIRWOF_0x02011708");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x4659d2c2:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_SCAC_FIR_REGS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SCAC_LFIR_0x020115C0");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SCAC_FIRMASK_0x020115C3");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SCAC_FIRACTION0_0x020115C6");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SCAC_FIRACTION1_0x020115C7");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SCAC_FIRWOF_0x020115C8");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xa4f8cd85:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_DDR_PHY_FIR_REGS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PHY01_DDRPHY_FIR_REG_0x800200900301143f");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PHY01_DDRPHY_FIR_MASK_REG_0x800200930301143f");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PHY01_DDRPHY_FIR_ACTION0_REG_0x800200960301143f");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PHY01_DDRPHY_FIR_ACTION1_REG_0x800200970301143f");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PHY01_DDRPHY_FIR_WOF_REG_0x800200980301143f");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x1ac6556d:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_DMI_FIR_REGS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "CEN_DMIFIR_0x02010400");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "CEN_DMIFIR_MASK_0x02010403");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "CEN_DMIFIR_ACT0_0x02010406");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "CEN_DMIFIR_ACT1_0x02010407");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "CEN_DMIFIR_WOF_0x02010408");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xd5280d51:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR");
        i_parser.PrintString("FFDC:", "STATUS_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xba96e7df:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR");
        i_parser.PrintString("FFDC:", "EXPECTED_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x836b3f7e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR");
        i_parser.PrintString("FFDC:", "STATUS_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfe7ba21b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR");
        i_parser.PrintString("FFDC:", "EXPECTED_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb5ad3d7c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR");
        i_parser.PrintString("FFDC:", "STATUS_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5959199a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR");
        i_parser.PrintString("FFDC:", "EXPECTED_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcd023ceb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR");
        i_parser.PrintString("FFDC:", "FIR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9a539c16:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR");
        i_parser.PrintString("FFDC:", "FIR_EXP_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x304b1c5f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR");
        i_parser.PrintString("FFDC:", "FIR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2a518502:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR");
        i_parser.PrintString("FFDC:", "FIR_EXP_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3b2a2cf9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR");
        i_parser.PrintString("FFDC:", "FIR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe1054038:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR");
        i_parser.PrintString("FFDC:", "FIR_EXP_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbfd3b640:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_START_CLOCKS_CHIPLETS_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "CHIPLET_BASE_SCOM_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x746f6a7d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6660e7f8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR");
        i_parser.PrintString("FFDC:", "ATTR_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7bef746b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8337f2a5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR");
        i_parser.PrintString("FFDC:", "ATTR_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb149708b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6a16785a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR");
        i_parser.PrintString("FFDC:", "ATTR_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x18f2de51:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR");
        i_parser.PrintString("FFDC:", "ATTR_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x186833da:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR");
        i_parser.PrintString("FFDC:", "ATTR_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9e1cb122:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR");
        i_parser.PrintString("FFDC:", "ATTR_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb8f37507:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR");
        i_parser.PrintString("FFDC:", "ATTR_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3f7cd63c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR");
        i_parser.PrintString("FFDC:", "ATTR_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5f17eb4c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR");
        i_parser.PrintString("FFDC:", "ATTR_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x121ad260:
        i_parser.PrintString("HwpReturnCode", "RC_REPAIR_RING_NOT_FOUND");
        i_parser.PrintString("FFDC:", "RING_MODIFIER");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf7283a7e:
        i_parser.PrintString("HwpReturnCode", "RC_REPAIR_RING_NOT_FOUND");
        i_parser.PrintString("FFDC:", "CHIPLET_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x98d5b572:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_EX_L2_SINGLE_MEMBER_ENABLE_BAD_FIELD_SIZE");
        i_parser.PrintString("FFDC:", "FIELD_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1d96f502:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_ATTRIBUTE_ID");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4efbc72e:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x55c488ab:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE");
        i_parser.PrintString("FFDC:", "EXPECTED_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd9ea036e:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE");
        i_parser.PrintString("FFDC:", "PASSED_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcfdb2d97:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INSUFFICIENT_VPD_RETURNED");
        i_parser.PrintString("FFDC:", "KEYWORD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x508e64d8:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INSUFFICIENT_VPD_RETURNED");
        i_parser.PrintString("FFDC:", "RETURNED_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x529e334e:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_VM_DATA_RETURNED");
        i_parser.PrintString("FFDC:", "KEYWORD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x175e7619:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_VM_DATA_RETURNED");
        i_parser.PrintString("FFDC:", "RETURNED_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x88bff29e:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_VM_DATA_RETURNED");
        i_parser.PrintString("FFDC:", "RECORD_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x430190fb:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_VM_DATA_RETURNED");
        i_parser.PrintString("FFDC:", "DIMM_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf08d3ebb:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_VM_VERSION_RETURNED");
        i_parser.PrintString("FFDC:", "KEYWORD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3eaecb66:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_VM_VERSION_RETURNED");
        i_parser.PrintString("FFDC:", "RETURNED_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x695b979b:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_VM_VERSION_RETURNED");
        i_parser.PrintString("FFDC:", "RECORD_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd5d47939:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_VM_VERSION_RETURNED");
        i_parser.PrintString("FFDC:", "DIMM_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xce056c84:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_KEYWORD");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x776e7965:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_KEYWORD");
        i_parser.PrintString("FFDC:", "KEYWORD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfa309a67:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_KEYWORD");
        i_parser.PrintString("FFDC:", "VERSION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xac5eb60e:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_KEYWORD");
        i_parser.PrintString("FFDC:", "DIMM_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd9984f85:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_SUPPLIER_ID_NOT_IN_MV_VPD");
        i_parser.PrintString("FFDC:", "MODULE_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1376d43b:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_TERM_DATA_UNSUPPORTED_VPD_ENCODE");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb3edda13:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_TERM_DATA_UNSUPPORTED_VPD_ENCODE");
        i_parser.PrintString("FFDC:", "VPD_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x49ec27de:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_DRAM_2N_MODE_NOT_EQUAL");
        i_parser.PrintString("FFDC:", "PORT0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4a7da87f:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_DRAM_2N_MODE_NOT_EQUAL");
        i_parser.PrintString("FFDC:", "PORT1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6b6f0bee:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_MODE_PARAMETER");
        i_parser.PrintString("FFDC:", "MODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xed0fc897:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_MEM_TYPE");
        i_parser.PrintString("FFDC:", "MEM_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4010a692:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_MT_DATA");
        i_parser.PrintString("FFDC:", "RANK_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd0f8ee1d:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_DQ_DATA");
        i_parser.PrintString("FFDC:", "DQ_COPY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb2baccc9:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_DIMMS_NOT_FOUND");
        i_parser.PrintString("FFDC:", "DIMM_P0S0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x89688e31:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_DIMMS_NOT_FOUND");
        i_parser.PrintString("FFDC:", "DIMM_P0S1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3314e9a2:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_DIMMS_NOT_FOUND");
        i_parser.PrintString("FFDC:", "DIMM_P1S0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x73dce582:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_DIMMS_NOT_FOUND");
        i_parser.PrintString("FFDC:", "DIMM_P1S1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1eb4c89c:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_DIMM_FOUND");
        i_parser.PrintString("FFDC:", "INVALID_DIMM_P0S0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x283725e0:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_DIMM_FOUND");
        i_parser.PrintString("FFDC:", "INVALID_DIMM_P0S1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x166515dc:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_DIMM_FOUND");
        i_parser.PrintString("FFDC:", "INVALID_DIMM_P1S0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4caed18a:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_DIMM_FOUND");
        i_parser.PrintString("FFDC:", "INVALID_DIMM_P1S1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xecf1b52e:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_M0_DATA");
        i_parser.PrintString("FFDC:", "M0_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd22c8b93:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_INVALID_DQS_DATA");
        i_parser.PrintString("FFDC:", "DQS_COPY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb58afa48:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_ISDIMM_KEYWORD");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb8ff8a99:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_ISDIMM_KEYWORD");
        i_parser.PrintString("FFDC:", "KEYWORD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb541a603:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2a783bb1:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("FFDC:", "DIMM_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x84c042b7:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("FFDC:", "OUTPUT_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5c5333dd:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6df6c704:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("FFDC:", "DIMM_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd74cb1d7:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("FFDC:", "OUTPUT_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x89379ae6:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xedb29442:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("FFDC:", "DIMM_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdf11618e:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("FFDC:", "OUTPUT_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xedce5230:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_ATTRIBUTE_NOT_FOUND");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe7ba4e95:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_ATTRIBUTE_NOT_FOUND");
        i_parser.PrintString("FFDC:", "DIMM_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xac7e887c:
        i_parser.PrintString("HwpReturnCode", "RC_MBVPD_ATTRIBUTE_NOT_FOUND");
        i_parser.PrintString("FFDC:", "VERSION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x27806b4d:
        i_parser.PrintString("HwpReturnCode", "RC_GET_SPD_ACCESSOR_INVALID_ATTRIBUTE_ID");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x01a55415:
        i_parser.PrintString("HwpReturnCode", "RC_GET_SPD_ACCESSOR_INVALID_OUTPUT_SIZE");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcfea9f61:
        i_parser.PrintString("HwpReturnCode", "RC_GET_SPD_ACCESSOR_INVALID_OUTPUT_SIZE");
        i_parser.PrintString("FFDC:", "ACTUAL_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1d01eb3d:
        i_parser.PrintString("HwpReturnCode", "RC_GET_SPD_ACCESSOR_INVALID_OUTPUT_SIZE");
        i_parser.PrintString("FFDC:", "EXPECTED_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5886daf3:
        i_parser.PrintString("HwpReturnCode", "RC_GET_SPD_ACCESSOR_INVALID_DDR_TYPE");
        i_parser.PrintString("FFDC:", "DIMM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf5ccc3c8:
        i_parser.PrintString("HwpReturnCode", "RC_GET_SPD_ACCESSOR_INVALID_DDR_TYPE");
        i_parser.PrintString("FFDC:", "TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8c9b44f3:
        i_parser.PrintString("HwpReturnCode", "RC_GET_L3_DELTA_DATA_ERR");
        i_parser.PrintString("FFDC:", "CHIP_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc6afb2f6:
        i_parser.PrintString("HwpReturnCode", "RC_GET_L3_DELTA_DATA_ERR");
        i_parser.PrintString("FFDC:", "CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x35256b84:
        i_parser.PrintString("HwpReturnCode", "RC_GET_L3_DELTA_DATA_PARAMETER_ERR");
        i_parser.PrintString("FFDC:", "TARGET_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x66739733:
        i_parser.PrintString("HwpReturnCode", "RC_GET_L3_DELTA_DATA_SELECT_ERR");
        i_parser.PrintString("FFDC:", "SELECT_VAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcce2e332:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_INFO_ATTR_INVALID_ATTRIBUTE_ID");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd3164108:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_INFO_ATTR_INVALID_OUTPUT_SIZE");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4869485a:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_INFO_ATTR_INVALID_OUTPUT_SIZE");
        i_parser.PrintString("FFDC:", "ACTUAL_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc67306ec:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_INFO_ATTR_INVALID_OUTPUT_SIZE");
        i_parser.PrintString("FFDC:", "EXPECTED_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x03e31624:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "PROC_CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa1069956:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf0e81ad0:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x64f7057d:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "PROC_CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1379b922:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6b3c328e:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0f3efc0c:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_ABUS_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "PROC_CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcdefcb67:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_ABUS_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x229cf6b5:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_ABUS_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8834895a:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "PROC_CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2e26b3c4:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5ba426ef:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd39707a3:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEMB_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "MEMBUF_CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7e6f2aff:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEMB_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xba23c235:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEMB_DMI_CUPLL_PFD360_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0110c045:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "MEMBUF_CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x19f5e91c:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x10639763:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x90da6699:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_INVALID_ATTRIBUTE_ID");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8c62b127:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x23c7fce1:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "PROC_CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x896a695a:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfc7dd93e:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_BAD_CHIP_NAME_EC");
        i_parser.PrintString("FFDC:", "CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfa95d2dd:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe66b68ca:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1");
        i_parser.PrintString("FFDC:", "PROC_CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x12fdbed6:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1");
        i_parser.PrintString("FFDC:", "CHIP_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd913afe9:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1");
        i_parser.PrintString("FFDC:", "CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x93ad6297:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_1");
        i_parser.PrintString("FFDC:", "FREQ_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0a6dc524:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x32e5d63e:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2");
        i_parser.PrintString("FFDC:", "PROC_CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcb30245c:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2");
        i_parser.PrintString("FFDC:", "CHIP_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7b8f99a9:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2");
        i_parser.PrintString("FFDC:", "CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x31f14125:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2");
        i_parser.PrintString("FFDC:", "FREQ_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8d9f1be5:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_2");
        i_parser.PrintString("FFDC:", "FREQ_2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe6dde7f4:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x988cf330:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4");
        i_parser.PrintString("FFDC:", "PROC_CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbfd71d8c:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4");
        i_parser.PrintString("FFDC:", "CHIP_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe397714a:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4");
        i_parser.PrintString("FFDC:", "CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x876b895c:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4");
        i_parser.PrintString("FFDC:", "FREQ_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5514906d:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4");
        i_parser.PrintString("FFDC:", "FREQ_2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2b46a146:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4");
        i_parser.PrintString("FFDC:", "FREQ_3");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb20f6018:
        i_parser.PrintString("HwpReturnCode", "RC_GET_PLL_RING_ATTR_UNSUPPORTED_FREQ_4");
        i_parser.PrintString("FFDC:", "FREQ_4");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x903dfa3e:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_FAILED_TO_INSTALL_STATE");
        i_parser.PrintString("FFDC:", "ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x736c408d:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_UNKNOWN_ARG_TYPE");
        i_parser.PrintString("FFDC:", "TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8952dad8:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ERROR_DETACHING_SLAVE");
        i_parser.PrintString("FFDC:", "ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x942ba86d:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ERROR_DETACHING_SLAVE");
        i_parser.PrintString("FFDC:", "TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x20a39a5b:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ENTRY_POINT_NOT_FOUND");
        i_parser.PrintString("FFDC:", "ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3518a6e1:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_INVALID_ENTRY_POINT_TYPE");
        i_parser.PrintString("FFDC:", "TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc2c1fc22:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ERROR_SETTING_PC");
        i_parser.PrintString("FFDC:", "ADDRESS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x69aecc6a:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ERROR_SETTING_PC");
        i_parser.PrintString("FFDC:", "ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe52eaafa:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_BREAKPOINT_NOT_FOUND");
        i_parser.PrintString("FFDC:", "ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x05e6ca57:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_INVALID_BREAK_POINT_TYPE");
        i_parser.PrintString("FFDC:", "TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6cb00175:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ERROR_SETTING_BREAKPOINT");
        i_parser.PrintString("FFDC:", "ADDRESS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8129b43e:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ERROR_SETTING_BREAKPOINT");
        i_parser.PrintString("FFDC:", "ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x446266a0:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ERROR_SETTING_MRR");
        i_parser.PrintString("FFDC:", "MRR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb560de90:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_ERROR_SETTING_MRR");
        i_parser.PrintString("FFDC:", "ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x208d8482:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_HALTED_WITH_ERROR");
        i_parser.PrintString("FFDC:", "ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf54b2c1e:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_HALTED_WITH_ERROR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcb8b2acb:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_PIB_ERROR_READING_SBEVITAL");
        i_parser.PrintString("FFDC:", "ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfaa3e88d:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_PIB_ERROR_READING_SBEVITAL");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x27329a80:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_MODEL_ERROR_GETTING_HALT_CODE");
        i_parser.PrintString("FFDC:", "ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x39c018b4:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_MODEL_ERROR_GETTING_HALT_CODE");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xccf0075e:
        i_parser.PrintString("HwpReturnCode", "RC_FAPIPOREVE_UNKNOWN_STATUS_ERROR");
        i_parser.PrintString("FFDC:", "STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe1e6aaf9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_QUERY_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc58b4d75:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_QUERY_ERR");
        i_parser.PrintString("FFDC:", "FAPI_ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf075b16d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_QUERY_ERR");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x24bac11c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_QUERY_ERR");
        i_parser.PrintString("FFDC:", "ATTR_IDX1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x40fe4cec:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_QUERY_ERR");
        i_parser.PrintString("FFDC:", "ATTR_IDX2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9b720cb3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xee9da0a1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xca74fcae:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR");
        i_parser.PrintString("FFDC:", "ATTR_IDX1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1dfd48d8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR");
        i_parser.PrintString("FFDC:", "ATTR_IDX2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf3812185:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_LOOKUP_ERR");
        i_parser.PrintString("FFDC:", "ERR_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc2e56ec7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc66ccc50:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR");
        i_parser.PrintString("FFDC:", "ATTR_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x86d0cff7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR");
        i_parser.PrintString("FFDC:", "ATTR_IDX1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe0518eb3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR");
        i_parser.PrintString("FFDC:", "ATTR_IDX2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3a95fdd6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR");
        i_parser.PrintString("FFDC:", "BASE_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x84dbd761:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR");
        i_parser.PrintString("FFDC:", "ENABLED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe2e01546:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_ATTR_CONTENT_ERR");
        i_parser.PrintString("FFDC:", "SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2f1c420e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x17bece36:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "RANGE_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xda990787:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "ATTR_IDX1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xca44a13b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "BASE_ADDR1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2eecece9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "END_ADDR1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x91f4cd1c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "ENABLED1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x91c1c9a3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "ATTR_IDX2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5c3a34d0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "BASE_ADDR2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8a2dd5d9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "END_ADDR2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x99d6707b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ATTR_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "ENABLED2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf7e5b822:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x752323b2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR");
        i_parser.PrintString("FFDC:", "RANGE_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6a0f191b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR");
        i_parser.PrintString("FFDC:", "BASE_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x799de37a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR");
        i_parser.PrintString("FFDC:", "END_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0a553475:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_CHIP_MEMORY_RANGE_ERR");
        i_parser.PrintString("FFDC:", "ENABLED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2534cd00:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x92d59f46:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR");
        i_parser.PrintString("FFDC:", "NODE_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x69f60caa:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0cc153db:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR");
        i_parser.PrintString("FFDC:", "NODE_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x89a14b43:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR");
        i_parser.PrintString("FFDC:", "TARGET1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa7b54520:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR");
        i_parser.PrintString("FFDC:", "TARGET2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xef045ec8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR");
        i_parser.PrintString("FFDC:", "NODE_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa36cab2d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR");
        i_parser.PrintString("FFDC:", "CHIP_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcc0ec6ba:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "TARGET1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x476d7d6b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "RANGE_ID1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe203648f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "BASE_ADDR1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe831322a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "END_ADDR1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3b8ad407:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "ENABLED1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x990a849a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "TARGET2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3299ae2f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "RANGE_ID2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7dc5f214:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "BASE_ADDR2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x31085339:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "END_ADDR2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe5b42727:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SYSTEM_RANGE_OVERLAP_ERR");
        i_parser.PrintString("FFDC:", "ENABLED2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf412f2be:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x747fa75f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF");
        i_parser.PrintString("FFDC:", "SCOM_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc2bb390b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF");
        i_parser.PrintString("FFDC:", "BASE_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x65129924:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF");
        i_parser.PrintString("FFDC:", "ENABLED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x29b756ba:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF");
        i_parser.PrintString("FFDC:", "SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9c0cc18f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SIZE_XLATE_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8c216a58:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SIZE_XLATE_ERR");
        i_parser.PrintString("FFDC:", "SCOM_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x317f12e9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SIZE_XLATE_ERR");
        i_parser.PrintString("FFDC:", "BASE_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfbda800a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SIZE_XLATE_ERR");
        i_parser.PrintString("FFDC:", "ENABLED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6a2ea7a2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SETUP_BARS_SIZE_XLATE_ERR");
        i_parser.PrintString("FFDC:", "SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3b43ab27:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CHIPLET_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1ff0ab00:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_INP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x37ce83d3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_MAX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x63eeeca1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_IMG_PTR_ERROR");
        i_parser.PrintString("FFDC:", "DATA_BUF1_PTR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfc9fba2d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_IMG_PTR_ERROR");
        i_parser.PrintString("FFDC:", "DATA_BUF2_PTR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9e214ed0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_BUF_PTR_ERROR");
        i_parser.PrintString("FFDC:", "DATA_BUF1_PTR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9488ef75:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_BUF_PTR_ERROR");
        i_parser.PrintString("FFDC:", "DATA_BUF2_PTR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x38da5bfd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_BUF_SIZE_NOT_FIXED");
        i_parser.PrintString("FFDC:", "DATA_BUF1_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x46c52ac2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_BUF_SIZE_NOT_FIXED");
        i_parser.PrintString("FFDC:", "DATA_BUF2_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8d852e31:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_BUF_SIZE_NOT_FIXED");
        i_parser.PrintString("FFDC:", "DATA_BUF_SIZE_FIXED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xae8aff0e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_MAX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3fe29fa0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_FIXED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xebcd3edf:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_IMAGE_SIZE_MISMATCH");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_INP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x840894bc:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_IMAGE_SIZE_MISMATCH");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4c2a2140:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_INP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd6c027ea:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x82695fae:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_RING_BLOCK_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_RING_BLOCK_SIZEOFTHIS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x73d96070:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_RING_BLOCK_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_SIZE_OF_BUF1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc6e19582:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR");
        i_parser.PrintString("FFDC:", "DATA_RING_BLOCK_ENTRYOFFSET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfd5b3933:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR");
        i_parser.PrintString("FFDC:", "DATA_RING_BLOCK_SIZEOFTHIS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x41603bd6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_IMGBUILD_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x12ea4e49:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_OLD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbc82b047:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_EST");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3bbf309d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_MAX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x733fb976:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_INTERNAL_IMAGE_ERR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8478d062:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x387da335:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR");
        i_parser.PrintString("FFDC:", "SBE_XIP_SECTION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf3d3e245:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfafdb4b0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_RING_RETRIEVAL_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7a654e95:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbc57418c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR");
        i_parser.PrintString("FFDC:", "DATA_FAIL_BYTE_NO");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x70590291:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR");
        i_parser.PrintString("FFDC:", "DATA_EXISTING_RING_BYTE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1dc83fde:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR");
        i_parser.PrintString("FFDC:", "DATA_OVERLAY_RING_BYTE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x01eb31ac:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_L2_FARY_OVERLAY_ERROR");
        i_parser.PrintString("FFDC:", "DATA_FAIL_BYTE_NO");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x159d4b88:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_L2_FARY_OVERLAY_ERROR");
        i_parser.PrintString("FFDC:", "DATA_EXISTING_RING_BYTE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x61f4c06f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_L2_FARY_OVERLAY_ERROR");
        i_parser.PrintString("FFDC:", "DATA_OVERLAY_RING_BYTE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x37834030:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_SLEEP_PROCESSING_ERROR");
        i_parser.PrintString("FFDC:", "CT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x962ed0fe:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_SLEEP_PROCESSING_ERROR");
        i_parser.PrintString("FFDC:", "EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x631c839b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_WF_CREATION_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x526e6893:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_IMAGE_UPDATE_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa79bbe0d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfaaf44c6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_CREATE_FIXED_IMAGE_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x90b26d5f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd0c4cc96:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_UNKNOWN_XIP_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfd3729c2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_UNKNOWN_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd8698266:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_BAD_CODE_OR_PARM");
        i_parser.PrintString("FFDC:", "MODE_BUILD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb8accba9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_SLWB_MEMORY_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x90f9cb4e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_MAX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0c01c73b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_WORK_SPACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1351ca3d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_IMAGE_SIZE_MESS");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2ea95396:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_IMAGE_SIZE_MESS");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_MAX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6cfa062b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_INTERNAL_IMAGE_ERR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xee1d1c92:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd2e5250e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_INP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6d7cc1cd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x81839a59:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_BUF_PTR_ERROR");
        i_parser.PrintString("FFDC:", "DATA_BUF1_PTR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb0f1141f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_BUF_PTR_ERROR");
        i_parser.PrintString("FFDC:", "DATA_BUF2_PTR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x183611de:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_BUF_SIZE_NOT_FIXED");
        i_parser.PrintString("FFDC:", "DATA_BUF1_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf4175681:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_BUF_SIZE_NOT_FIXED");
        i_parser.PrintString("FFDC:", "DATA_BUF2_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x20eed4f2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_BUF_SIZE_NOT_FIXED");
        i_parser.PrintString("FFDC:", "DATA_BUF_SIZE_FIXED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x51354ed8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_UNEXPECTED_FIELD_SIZE");
        i_parser.PrintString("FFDC:", "DATA_SIZE_VPD_FIELD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbbe42699:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_GEN_SCOM_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe92b1213:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_GEN_RAM_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4ed4b521:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_ATTRIBUTE_RING_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x86c5c24b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_MAX_PLL_RING_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x798b8a19:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_SIZE_OF_BUF1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x535916c1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_IMGBUILD_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xedce541d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RS4_COMPRESS_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa335905d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS");
        i_parser.PrintString("FFDC:", "DATA_SIZE_RS4_COMPRESS_RETURN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb3d3f077:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS");
        i_parser.PrintString("FFDC:", "DATA_SIZE_RS4_COMPRESS_CONTAINER");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x442de850:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_ILLEGAL_RS4_DECOMPRESS_ADDR");
        i_parser.PrintString("FFDC:", "DATA_RS4_DECOMPRESS_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4a15051f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PORE_INLINE_CTX_CREATE_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x28fbee0e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PORE_INLINE_RS4_LAUNCH_CREATE_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x562a2e28:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_RING_BLOCK_SIZEOFTHIS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0631ac08:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_SIZE_OF_BUF1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x14c00ada:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR");
        i_parser.PrintString("FFDC:", "DATA_SIZE_OF_RS4_LAUNCH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfd1c9c0f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR");
        i_parser.PrintString("FFDC:", "DATA_RING_BLOCK_ENTRYOFFSET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4c8ab1d0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR");
        i_parser.PrintString("FFDC:", "DATA_RING_BLOCK_SIZEOFTHIS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc77a31e6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_CHIPLET_ID_MESS");
        i_parser.PrintString("FFDC:", "DATA_CHIPLET_ID_VPD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x216a28ae:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_CHIPLET_ID_MESS");
        i_parser.PrintString("FFDC:", "DATA_CHIPLET_ID_REQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf6427c80:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PG_RING_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_RING_SIZE_REQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x31757138:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PG_RING_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_RING_SIZE_MAX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbf4b9853:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PR_RING_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_RING_SIZE_REQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe15a6e5c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PR_RING_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_RING_SIZE_MAX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x071c3ea6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_INVALID_VPD_TYPE");
        i_parser.PrintString("FFDC:", "DATA_VPD_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x85737c0a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd097cb88:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_VPD_KEYWORD_RESOLVE_ERROR");
        i_parser.PrintString("FFDC:", "DATA_RING_LIST_VPD_KEYWORD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbdbd1f51:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_PERFORM_RING_DATACARE_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x43bdf227:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_CHECK_REDUNDANT_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x656ac84d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x029ab904:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW");
        i_parser.PrintString("FFDC:", "CHIPLET_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xba81479b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW");
        i_parser.PrintString("FFDC:", "RING_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf03580fe:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW");
        i_parser.PrintString("FFDC:", "RING_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1d35d1b7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW");
        i_parser.PrintString("FFDC:", "IMAGE_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4f77a894:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO");
        i_parser.PrintString("FFDC:", "VALID_COUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf1d76aa5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO");
        i_parser.PrintString("FFDC:", "MINIMUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc7bdf62b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO");
        i_parser.PrintString("FFDC:", "DESIRED_CORES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc47b4949:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_INFO");
        i_parser.PrintString("FFDC:", "BOOT_CORE_MASK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x38c6b752:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS");
        i_parser.PrintString("FFDC:", "VALID_COUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd0407337:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS");
        i_parser.PrintString("FFDC:", "MINIMUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2dc12207:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS");
        i_parser.PrintString("FFDC:", "DESIRED_CORES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa5af436e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_OVERFLOW_BEFORE_REACHING_MINIMUM_EXS");
        i_parser.PrintString("FFDC:", "BOOT_CORE_MASK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6cbdca8e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_WRITE_VPD_RING_TO_IPL_IMAGE_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x15ffc277:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_WRITE_VPD_RING_TO_SLW_IMAGE_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x218e0f83:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_XIP_DELETE_SECTION_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc3c51f8b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_CREATE_FIXED_IMAGE_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5044796d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_NEW");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd344d648:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_MAX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8e1e771c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_APPEND_SLW_SECTION_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x33de9a75:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XIPC_BAD_CODE_OR_PARM");
        i_parser.PrintString("FFDC:", "MODE_BUILD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x21b7e2c9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "i_index");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdb298dc5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "i_pba_bar_addr");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x47d8a46f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "i_pba_bar_size");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3d261ab4:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "i_pba_cmd_scope");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd21338e3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "exp_PBA_CMD_SCOPE_FOREIGN1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x60f61c43:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_ADDR_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "i_index");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9204177a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_ADDR_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "i_pba_bar_addr");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa39f38d4:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_ADDR_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "i_pba_bar_size");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa27572e3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_ADDR_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "i_pba_cmd_scope");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa3928904:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_ADDR_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "exp_BAR_ADDR_RANGECHECK_HIGH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x73a8377d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_ADDR_ALIGNMENT_ERROR");
        i_parser.PrintString("FFDC:", "i_index");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa7f7f10d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_ADDR_ALIGNMENT_ERROR");
        i_parser.PrintString("FFDC:", "i_pba_bar_addr");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbcc6541d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_ADDR_ALIGNMENT_ERROR");
        i_parser.PrintString("FFDC:", "i_pba_bar_size");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x87643951:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_ADDR_ALIGNMENT_ERROR");
        i_parser.PrintString("FFDC:", "i_pba_cmd_scope");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x50158706:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_ADDR_ALIGNMENT_ERROR");
        i_parser.PrintString("FFDC:", "exp_BAR_ADDR_RANGECHECK_LOW");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdb6d65f6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_BAR_SIZE_INVALID");
        i_parser.PrintString("FFDC:", "i_index");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4dd12c8e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_BAR_SIZE_INVALID");
        i_parser.PrintString("FFDC:", "i_pba_bar_addr");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x90696e1d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_BAR_SIZE_INVALID");
        i_parser.PrintString("FFDC:", "i_pba_bar_size");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0ece4d3e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PBA_BAR_SIZE_INVALID");
        i_parser.PrintString("FFDC:", "i_pba_cmd_scope");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1896a957:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_SBE_STOPPED");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb88398c4:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_SBE_STOPPED");
        i_parser.PrintString("FFDC:", "SBE_CONTROL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x351a4350:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_SBE_TIMEOUT_ERROR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe0c6de1c:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_SBE_TIMEOUT_ERROR");
        i_parser.PrintString("FFDC:", "POLL_COUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x79997a65:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_SBE_TIMEOUT_ERROR");
        i_parser.PrintString("FFDC:", "SBE_VITAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0c973a43:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_SBE_SCAN_ERROR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd388c4a5:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_SBE_SCAN_ERROR");
        i_parser.PrintString("FFDC:", "PLL_RING_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x083b17b8:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_SBE_SCAN_ERROR");
        i_parser.PrintString("FFDC:", "PLL_RING_OP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x53a58f49:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_SBE_SCAN_ERROR");
        i_parser.PrintString("FFDC:", "PLL_BUS_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd83609a4:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_SBE_SCAN_ERROR");
        i_parser.PrintString("FFDC:", "MBOX1_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd8957cf3:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_INVALID_OPERATION");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbaa8e902:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_INVALID_OPERATION");
        i_parser.PrintString("FFDC:", "PLL_RING_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x01a9a031:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_INVALID_OPERATION");
        i_parser.PrintString("FFDC:", "PLL_RING_OP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xaed6807b:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_INVALID_OPERATION");
        i_parser.PrintString("FFDC:", "PLL_BUS_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x866ad638:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_INVALID_OPERATION");
        i_parser.PrintString("FFDC:", "INVALID_RING_ADDRESS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x54daa8b3:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_INVALID_OPERATION");
        i_parser.PrintString("FFDC:", "INVALID_RING_OP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x201a53d5:
        i_parser.PrintString("HwpReturnCode", "RC_P8_PLL_UTILS_INVALID_OPERATION");
        i_parser.PrintString("FFDC:", "INVALID_BUS_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc90a9567:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK");
        i_parser.PrintString("FFDC:", "LOCK_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1a630cb6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK");
        i_parser.PrintString("FFDC:", "LOCK_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xadc32093:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK");
        i_parser.PrintString("FFDC:", "LOCK_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xea4c31d6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING");
        i_parser.PrintString("FFDC:", "SBE_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x973c13b2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM");
        i_parser.PrintString("FFDC:", "SBE_VITAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x452274c9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM");
        i_parser.PrintString("FFDC:", "SBE_VITAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcdab8b1d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE");
        i_parser.PrintString("FFDC:", "SBE_RUNNING");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1cc9ee29:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE");
        i_parser.PrintString("FFDC:", "HALT_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xab5c78fc:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE");
        i_parser.PrintString("FFDC:", "ISTEP_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xeab1c65b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_INITIAL_STATE");
        i_parser.PrintString("FFDC:", "SUBSTEP_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf7f8814d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("FFDC:", "SBE_RUNNING");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5f3e5c05:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("FFDC:", "HALT_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb35755db:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("FFDC:", "ISTEP_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa154d811:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_DEADMAN_TIMER_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("FFDC:", "SUBSTEP_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb40a46c6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_FREQ_RANGE_ERR");
        i_parser.PrintString("FFDC:", "FREQ_CORE_CEILING");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa70d7ce5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_FREQ_RANGE_ERR");
        i_parser.PrintString("FFDC:", "FREQ_CORE_NOM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x57efa877:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_FREQ_RANGE_ERR");
        i_parser.PrintString("FFDC:", "FREQ_CORE_FLOOR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xeb903578:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR");
        i_parser.PrintString("FFDC:", "FREQ_PB");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa43e0b38:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR");
        i_parser.PrintString("FFDC:", "FREQ_CORE_FLOOR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xeb69e9d9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_CEILING_FREQ_RATIO_ERR");
        i_parser.PrintString("FFDC:", "FREQ_PB");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9e43da6b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_CEILING_FREQ_RATIO_ERR");
        i_parser.PrintString("FFDC:", "FREQ_CORE_CEILING");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8e9931be:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR");
        i_parser.PrintString("FFDC:", "OP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x86337cb7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x70a4f7cf:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR");
        i_parser.PrintString("FFDC:", "OP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xad1d23d1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_SYS_CURR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6e1220c0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_NODE_CURR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x26918a76:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_SYS_NEXT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9448af98:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_NODE_NEXT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd1495c9f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR");
        i_parser.PrintString("FFDC:", "SYS_RECONFIG_MASTER_SET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe2af01ad:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf5806cfb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR");
        i_parser.PrintString("FFDC:", "NODE_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x099f826e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR");
        i_parser.PrintString("FFDC:", "TARGET1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa50ced6f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR");
        i_parser.PrintString("FFDC:", "TARGET2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8aef3017:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR");
        i_parser.PrintString("FFDC:", "NODE_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x61bae87c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR");
        i_parser.PrintString("FFDC:", "CHIP_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0f679806:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_NO_MASTER_SPECIFIED_ERR");
        i_parser.PrintString("FFDC:", "OP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7f6d7c96:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x26d692b3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "ADU_STATUS_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3a248f4a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "ADU_NUM_POLLS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1771785f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "FFDC_VALID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xee18d917:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "NUM_CHIPS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x63730710:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "CHIP_IDS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x12008797:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "PB_MODE_CENT_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa510caa0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "PB_HP_MODE_NEXT_CENT_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8f9a159a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "PB_HP_MODE_CURR_CENT_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd57e8771:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "PB_HPX_MODE_NEXT_CENT_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5d1ddefa:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "PB_HPX_MODE_CURR_CENT_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2a184199:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "X_GP0_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc990047c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "PB_X_MODE_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7728f517:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "A_GP0_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb5036cb2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "ADU_IOS_LINK_EN_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x277d358a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "PB_A_MODE_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9b91e7ee:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH");
        i_parser.PrintString("FFDC:", "ADU_PMISC_MODE_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xba62f5bb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR");
        i_parser.PrintString("FFDC:", "VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5e902604:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR");
        i_parser.PrintString("FFDC:", "MAX_HW_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x82a34d56:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR");
        i_parser.PrintString("FFDC:", "UNIT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5c982bb9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_EPSILON_INVALID_TABLE_ERR");
        i_parser.PrintString("FFDC:", "TABLE_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x360c3856:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xed4a074e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR");
        i_parser.PrintString("FFDC:", "X_NOT_A");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6e8fd65e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR");
        i_parser.PrintString("FFDC:", "ALLOW_AGGREGATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x34391fb0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR");
        i_parser.PrintString("FFDC:", "AGGREGATE_DEST_ID1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf9260dab:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR");
        i_parser.PrintString("FFDC:", "AGGREGATE_DEST_ID2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa2ed552e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_X_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "FREQ_PB");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe84f083c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_X_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "FREQ_X");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb0f6aaad:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_X_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "X_IS_8B");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x53b312bb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_X_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "X_AGGREGATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x532d7d10:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_X_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "N");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa99b21d5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_X_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "D");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa5c9d9ef:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_X_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "CMD_RATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd98891b2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_X_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "MIN_CMD_RATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7e4c5ea1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_X_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "MAX_CMD_RATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3e466821:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_A_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "FREQ_PB");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x56bcb9ce:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_A_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "FREQ_A");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7abaab5e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_A_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "A_OW_PACK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x36eea615:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_A_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "A_OW_PACK_PRIORITY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfefa1b47:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_A_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "A_AGGREGATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfee1d68a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_A_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "N");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x54a69d6d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_A_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "D");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0928073f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_A_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "CMD_RATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x168eb54c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_A_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "MIN_CMD_RATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x661635f8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_A_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "MAX_CMD_RATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xaca55692:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_F_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "FREQ_PB");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x845a3e45:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_F_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "FREQ_F");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x848995c2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_F_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "F_OW_PACK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb4917226:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_F_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "F_OW_PACK_PRIORITY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9c2d7174:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_F_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "F_AGGREGATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7e67000a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_F_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "N");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x831e308d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_F_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "D");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0048cfdd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_F_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "CMD_RATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9941a7f3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_F_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "MIN_CMD_RATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe4021a74:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_F_CMD_RATE_ERR");
        i_parser.PrintString("FFDC:", "MAX_CMD_RATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2037586d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR");
        i_parser.PrintString("FFDC:", "ADDRESS0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x496c6a84:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR");
        i_parser.PrintString("FFDC:", "ADDRESS1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x408ef566:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR");
        i_parser.PrintString("FFDC:", "DATA0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x08628ff9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR");
        i_parser.PrintString("FFDC:", "DATA1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3d209574:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "SOURCE_CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa1e6f175:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "CHIPLET_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x922b4c1d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "SOURCE_LINK_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd3e4ab77:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "REGION_ENABLED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7427849e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "REGIONS_TO_ENABLE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x125bcd5c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "REGIONS_TO_ENABLE_VALID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x08f0ab27:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_AX_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "DEST_LINK_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xce6c9ea8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_LINK_TARGET_TYPE_ERR");
        i_parser.PrintString("FFDC:", "SOURCE_CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9c382fe9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_LINK_TARGET_TYPE_ERR");
        i_parser.PrintString("FFDC:", "SOURCE_LINK_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdeca7179:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_LINK_TARGET_TYPE_ERR");
        i_parser.PrintString("FFDC:", "DEST_LINK_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb142534c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "SOURCE_CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x21d9d9b8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "CHIPLET_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa5c254cd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "SOURCE_LINK_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6bea7161:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "REGION_ENABLED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x42f5f36b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "REGIONS_TO_ENABLE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe6ee4324:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "REGIONS_TO_ENABLE_VALID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0d4c5870:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "DEST_NODE_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd97b69d4:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_CEILING_RATIO_ERR");
        i_parser.PrintString("FFDC:", "FREQ_PB");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf019b79f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_CEILING_RATIO_ERR");
        i_parser.PrintString("FFDC:", "FREQ_CORE_CEILING");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf598e354:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_CEILING_RATIO_ERR");
        i_parser.PrintString("FFDC:", "CORE_CEILING_RATIO");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x41eb2e50:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR");
        i_parser.PrintString("FFDC:", "FREQ_PB");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfd2ebc65:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR");
        i_parser.PrintString("FFDC:", "FREQ_CORE_FLOOR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xad8d2c1e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR");
        i_parser.PrintString("FFDC:", "CORE_FLOOR_RATIO");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb7f85ed5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6436246d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR");
        i_parser.PrintString("FFDC:", "GROUP_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd8f2c5c8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR");
        i_parser.PrintString("FFDC:", "NODE_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x33c69a3f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1ae3f179:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR");
        i_parser.PrintString("FFDC:", "GROUP_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x229d7502:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR");
        i_parser.PrintString("FFDC:", "NODE_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x274436e3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_TOPOLOGY");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1dfce005:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_TOPOLOGY");
        i_parser.PrintString("FFDC:", "A_CONNECTIONS_OK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6283c2a1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_TOPOLOGY");
        i_parser.PrintString("FFDC:", "A_CONNECTED_NODE_IDS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x916b3fbb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_TOPOLOGY");
        i_parser.PrintString("FFDC:", "X_CONNECTIONS_OK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x913f6b33:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_BUILD_SMP_INVALID_TOPOLOGY");
        i_parser.PrintString("FFDC:", "X_CONNECTED_CHIP_IDS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5369ac59:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ADU_UTILS_INVALID_LOCK_ATTEMPTS");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x517e68b1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ADU_UTILS_INVALID_LOCK_ATTEMPTS");
        i_parser.PrintString("FFDC:", "ATTEMPTS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xecfdc4cf:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ADU_UTILS_INVALID_LOCK_OPERATION");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x310e6c13:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ADU_UTILS_INVALID_LOCK_OPERATION");
        i_parser.PrintString("FFDC:", "OPERATION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x54ca6a26:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ADU_UTILS_INVALID_FBC_OP");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd7abd54e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ADU_UTILS_INVALID_FBC_OP");
        i_parser.PrintString("FFDC:", "ADDRESS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2c3f7958:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ADU_UTILS_INVALID_FBC_OP");
        i_parser.PrintString("FFDC:", "FBC_OP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x53a2773e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ADU_UTILS_INVALID_FBC_OP");
        i_parser.PrintString("FFDC:", "FBC_OP_HP_CTL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5a311533:
        i_parser.PrintString("HwpReturnCode", "RC_I2C_FIFO_INCOMPLETE_RC");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x50b43951:
        i_parser.PrintString("HwpReturnCode", "RC_I2C_FIFO_INCOMPLETE_RC");
        i_parser.PrintString("FFDC:", "ADDRESS_VAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf2ca8c9d:
        i_parser.PrintString("HwpReturnCode", "RC_I2C_FIFO_INCOMPLETE_RC");
        i_parser.PrintString("FFDC:", "DATA_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf45e4256:
        i_parser.PrintString("HwpReturnCode", "RC_I2C_ERROR_BIT_PRESENT_RC");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xac5d7c23:
        i_parser.PrintString("HwpReturnCode", "RC_I2C_ERROR_BIT_PRESENT_RC");
        i_parser.PrintString("FFDC:", "ADDRESS_VAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x965c37ec:
        i_parser.PrintString("HwpReturnCode", "RC_I2C_ERROR_BIT_PRESENT_RC");
        i_parser.PrintString("FFDC:", "DATA_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdf4dcca1:
        i_parser.PrintString("HwpReturnCode", "RC_I2C_COMPLETE_BIT_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x946a526d:
        i_parser.PrintString("HwpReturnCode", "RC_I2C_COMPLETE_BIT_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "ADDRESS_VAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfe449b41:
        i_parser.PrintString("HwpReturnCode", "RC_I2C_COMPLETE_BIT_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "DATA_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe11d850f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_INV_COMMAND");
        i_parser.PrintString("FFDC:", "COMMAND");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0be8c9bb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_SRESET_FAIL");
        i_parser.PrintString("FFDC:", "CORE_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x11a4e1c0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_SRESET_FAIL");
        i_parser.PrintString("FFDC:", "THREAD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9e14cc6b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_SRESET_FAIL");
        i_parser.PrintString("FFDC:", "RAS_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xef5f18e8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT");
        i_parser.PrintString("FFDC:", "CORE_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf35014d6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT");
        i_parser.PrintString("FFDC:", "THREAD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xac18f374:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT");
        i_parser.PrintString("FFDC:", "RAS_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x966dd3b2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_START_FAIL");
        i_parser.PrintString("FFDC:", "CORE_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9526db15:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_START_FAIL");
        i_parser.PrintString("FFDC:", "THREAD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1a28338c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_START_FAIL");
        i_parser.PrintString("FFDC:", "RAS_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe0a4e0c9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STOP_FAIL");
        i_parser.PrintString("FFDC:", "CORE_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x749ae513:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STOP_FAIL");
        i_parser.PrintString("FFDC:", "THREAD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf373949a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STOP_FAIL");
        i_parser.PrintString("FFDC:", "RAS_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x60334297:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT");
        i_parser.PrintString("FFDC:", "CORE_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc07c7139:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT");
        i_parser.PrintString("FFDC:", "THREAD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfdcb7922:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT");
        i_parser.PrintString("FFDC:", "RAS_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf9737c97:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STEP_FAIL");
        i_parser.PrintString("FFDC:", "CORE_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe89d9e1a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STEP_FAIL");
        i_parser.PrintString("FFDC:", "THREAD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd58202d1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STEP_FAIL");
        i_parser.PrintString("FFDC:", "RAS_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfdfe54c8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STEP_FAIL");
        i_parser.PrintString("FFDC:", "PTC_STEP_COMP_POLL_LIMIT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1623e9ad:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STEP_FAIL");
        i_parser.PrintString("FFDC:", "PTC_RAS_MODE_SINGLE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x26da4fdc:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_STEP_FAIL");
        i_parser.PrintString("FFDC:", "stepCompletePollCount");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x15928d35:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL");
        i_parser.PrintString("FFDC:", "CORE_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7ed9152f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL");
        i_parser.PrintString("FFDC:", "THREAD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x891a5d6b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL");
        i_parser.PrintString("FFDC:", "RAS_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4bcc9471:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL");
        i_parser.PrintString("FFDC:", "thd_activate_bit");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd8ada35a:
        i_parser.PrintString("HwpReturnCode", "RC_EREPAIR_RESTORE_SPARE_LANES_IN_VPD");
        i_parser.PrintString("FFDC:", "FFDC_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5634fd4b:
        i_parser.PrintString("HwpReturnCode", "RC_EREPAIR_THRESHOLD_EXCEED");
        i_parser.PrintString("FFDC:", "FFDC_TX_NUM_LANES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf936fe91:
        i_parser.PrintString("HwpReturnCode", "RC_EREPAIR_THRESHOLD_EXCEED");
        i_parser.PrintString("FFDC:", "FFDC_RX_NUM_LANES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x55ade2d6:
        i_parser.PrintString("HwpReturnCode", "RC_EREPAIR_THRESHOLD_EXCEED");
        i_parser.PrintString("FFDC:", "FFDC_THRESHOLD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbd7eaff3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCIE_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2daf03e5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xebf8ee3c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR");
        i_parser.PrintString("FFDC:", "ATTR_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc65ff977:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3e4711ab:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR");
        i_parser.PrintString("FFDC:", "IOP_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd1b045f1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR");
        i_parser.PrintString("FFDC:", "ATTR_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa3ae0ae8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCIE_CONFIG_INVALID_TARGET");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x351fae10:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfa4eeeb5:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "IMAGEADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9ee04130:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "XIPRC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6d30da7a:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "BRANCHTABLEADDRESS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3f54f582:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_LOC_ERROR");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x00b15f9d:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_LOC_ERROR");
        i_parser.PrintString("FFDC:", "MEMLOC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7c943c9a:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_PBABAR_ERROR");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9ac3d7b9:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_PBABAR_ERROR");
        i_parser.PrintString("FFDC:", "MEMBAR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x33987626:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_PBABAR_ERROR");
        i_parser.PrintString("FFDC:", "REGIONMASKEDADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x98be6155:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PBA_SLVRST_TIMED_OUT");
        i_parser.PrintString("FFDC:", "POLLCOUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0a843688:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PBA_SLVRST_TIMED_OUT");
        i_parser.PrintString("FFDC:", "POLLVALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x87427b21:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PBA_SLVRST_TIMED_OUT");
        i_parser.PrintString("FFDC:", "PSR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2c7d8aef:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PBA_SLVRST_TIMED_OUT");
        i_parser.PrintString("FFDC:", "SLVID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x72b29a97:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5456175c:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR");
        i_parser.PrintString("FFDC:", "IMAGEADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0c5e7390:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR");
        i_parser.PrintString("FFDC:", "XIPRC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8da1c3e8:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_XIP_IMAGE_SIZE_ERROR");
        i_parser.PrintString("FFDC:", "IMAGESIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd53298c3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR");
        i_parser.PrintString("FFDC:", "IMAGEADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5532f076:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR");
        i_parser.PrintString("FFDC:", "XIPRC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0247abf3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR");
        i_parser.PrintString("FFDC:", "BRANCHTABLEADDRESS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe4210a54:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_SIZE0_ERROR");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x05164a8a:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_SIZE0_ERROR");
        i_parser.PrintString("FFDC:", "IMAGEADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9c1cd786:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_SIZE0_ERROR");
        i_parser.PrintString("FFDC:", "MEMSIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa0c80927:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_SIZE0_ERROR");
        i_parser.PrintString("FFDC:", "MEMBAR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x782b0966:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x11d77ef9:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR");
        i_parser.PrintString("FFDC:", "IMAGEADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc42ba7e8:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR");
        i_parser.PrintString("FFDC:", "XIPRC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x59c1b81c:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_CONTROL_VECTOR_ERROR");
        i_parser.PrintString("FFDC:", "SLWCONTROLVECTOR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3009ecde:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb4523c27:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR");
        i_parser.PrintString("FFDC:", "IMAGEADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x21f35a6b:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR");
        i_parser.PrintString("FFDC:", "XIPRC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe08ef96a:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_WINKLE_EXIT_HALT_ERROR");
        i_parser.PrintString("FFDC:", "SLWDEEPWINKLEEXITHALT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x320c59f7:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf634b53d:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR");
        i_parser.PrintString("FFDC:", "IMAGEADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa5c95dc3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR");
        i_parser.PrintString("FFDC:", "XIPRC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdc0bc798:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_POREBAR_IMAGE_SLW_DEEP_SLEEP_EXIT_HALT_ERROR");
        i_parser.PrintString("FFDC:", "SLWDEEPSLEEPEXITHALT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3dbbadc1:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_BAD_DOMAIN");
        i_parser.PrintString("FFDC:", "EX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5e9fd070:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_BAD_DOMAIN");
        i_parser.PrintString("FFDC:", "DOMAIN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x15f5405b:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_BAD_OP");
        i_parser.PrintString("FFDC:", "EX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf22af26c:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_BAD_OP");
        i_parser.PrintString("FFDC:", "DOMAIN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8505ea95:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_BAD_OP");
        i_parser.PrintString("FFDC:", "OPERATION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x25ec7712:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_RAIL_ON");
        i_parser.PrintString("FFDC:", "EX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf185c4b2:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_RAIL_ON");
        i_parser.PrintString("FFDC:", "DOMAIN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x334bcfe5:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_RAIL_ON");
        i_parser.PrintString("FFDC:", "OPERATION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x92dbcc6d:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_RAIL_OFF");
        i_parser.PrintString("FFDC:", "EX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x63fae357:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_RAIL_OFF");
        i_parser.PrintString("FFDC:", "DOMAIN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x01d4da3a:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PFETLIB_RAIL_OFF");
        i_parser.PrintString("FFDC:", "OPERATION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x77d4dceb:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PFETLIB_TIMEOUT");
        i_parser.PrintString("FFDC:", "ADDRESS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2036cc42:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PFETLIB_TIMEOUT");
        i_parser.PrintString("FFDC:", "PFETCONTROLVALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x88752471:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PFETLIB_TIMEOUT");
        i_parser.PrintString("FFDC:", "DOMAIN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf0101bef:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SLW_RESET_TIMEOUT");
        i_parser.PrintString("FFDC:", "POLLCOUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4e2bf5da:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SLW_RESET_TIMEOUT");
        i_parser.PrintString("FFDC:", "MAXPOLLS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x96db04dd:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PORESLW_CODE_BAD_MODE");
        i_parser.PrintString("FFDC:", "IMODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3f38555e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM");
        i_parser.PrintString("FFDC:", "ISTEP_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd6b7a1e7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM");
        i_parser.PrintString("FFDC:", "SUBSTEP_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0b83eccd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("FFDC:", "SBE_RUNNING");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbd9d8234:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("FFDC:", "HALT_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2855f265:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("FFDC:", "ISTEP_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x21a17807:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("FFDC:", "SUBSTEP_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x52dd725d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_INTERNAL_ERROR");
        i_parser.PrintString("FFDC:", "GROUP_PARITY_ERROR_0_4");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8a29470e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_INTERNAL_ERROR");
        i_parser.PrintString("FFDC:", "SCAN_DATA_CRC_ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe9b0f4dc:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_I2C_ERROR");
        i_parser.PrintString("FFDC:", "I2C_BAD_STATUS_0_3");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc7dfa830:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_I2C_ERROR");
        i_parser.PrintString("FFDC:", "FI2C_HANG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x92d4dd4e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_ENGINE_RETRY");
        i_parser.PrintString("FFDC:", "SCOM_ADDRESS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa60f3930:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_ENGINE_RETRY");
        i_parser.PrintString("FFDC:", "PIB_ERROR_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x427f377c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_ENGINE_RETRY");
        i_parser.PrintString("FFDC:", "PIB_DATA_READ_PARITY_ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x70e5ee43:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_PCI_CLOCK_ERROR");
        i_parser.PrintString("FFDC:", "SCOM_ADDRESS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7f04835c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_PCI_CLOCK_ERROR");
        i_parser.PrintString("FFDC:", "PIB_ERROR_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7a91681f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_PCI_CLOCK_ERROR");
        i_parser.PrintString("FFDC:", "PIB_DATA_READ_PARITY_ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x23ec41b8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR");
        i_parser.PrintString("FFDC:", "SCOM_ADDRESS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe36b735c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR");
        i_parser.PrintString("FFDC:", "PIB_ERROR_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x870d1b5f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR");
        i_parser.PrintString("FFDC:", "PIB_DATA_READ_PARITY_ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc27e06c5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_OCI_ERROR");
        i_parser.PrintString("FFDC:", "OCI_ERROR_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf8cb665b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_OCI_ERROR");
        i_parser.PrintString("FFDC:", "OCI_DATA_READ_PARITY_ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5c972d5a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR");
        i_parser.PrintString("FFDC:", "INSTRUCTION_PARITY_ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xaefd01ae:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR");
        i_parser.PrintString("FFDC:", "INVALID_INSTRUCTION_NON_ROTATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x56fcde3c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR");
        i_parser.PrintString("FFDC:", "PC_OVERFLOW_UNDERFLOW");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe8e78dae:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR");
        i_parser.PrintString("FFDC:", "PC_STACK_ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xef92cc96:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR");
        i_parser.PrintString("FFDC:", "INSTRUCTION_FETCH_ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7014ec1f:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR");
        i_parser.PrintString("FFDC:", "INVALID_OPERAND");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0e38b14d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR");
        i_parser.PrintString("FFDC:", "I2C_ENGINE_MISS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd8ad3e82:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR");
        i_parser.PrintString("FFDC:", "INVALID_START_VECTOR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x02934e12:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_SBE_RC_INSTRUCTION_ERROR");
        i_parser.PrintString("FFDC:", "INVALID_INSTRUCTION_ROTATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9b8b4845:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_I2C_ERROR_REGS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "I2CM_MODE_REGISTER_0_0x000A0006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "I2CM_WATER_MARK_0_0x000A0007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "I2CM_INTERRUPT_MASK_0_0x000A0008");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "I2CM_INTERRUPT_COND_0_0x000A0009");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "I2CM_INTERRUPTS_0_0x000A000A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "I2CM_STATUS_REGISTER_ENGINE_0_0x000A000B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "I2CM_EXTENDED_STATUS_0_0x000A000C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "I2CM_RESIDUAL_FE_BE_LENGTH_0_0x000A000D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "I2CM_BUSY_REGISTER_0_0x000A000E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xd767afc2:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_SBE_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_STATUS_0x000E0000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_CONTROL_0x000E0001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_RESET_0x000E0002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_ERROR_MASK_0x000E0003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_PRV_BASE_ADDRESS0_0x000E0004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_PRV_BASE_ADDRESS1_0x000E0005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_OCI_BASE_ADDRESS0_0x000E0006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_OCI_BASE_ADDRESS1_0x000E0007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_TABLE_BASE_ADDR_0x000E0008");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_EXE_TRIGGER_0x000E0009");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_SCRATCH0_0x000E000A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_SCRATCH1_0x000E000B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_SCRATCH2_0x000E000C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_IBUF_01_0x000E000D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_IBUF_2_0x000E000E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_DBG0_0x000E000F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_DBG1_0x000E0010");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_PC_STACK0_0x000E0011");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_PC_STACK1_0x000E0012");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_PC_STACK2_0x000E0013");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_ID_FLAGS_0x000E0014");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_DATA0_0x000E0015");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_MEMORY_RELOC_0x000E0016");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_I2C_E0_PARAM_0x000E0017");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_I2C_E1_PARAM_0x000E0018");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SBE_I2C_E2_PARAM_0x000E0019");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xf00899c1:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCC_CONTROL_BAD_405RESET_PARM");
        i_parser.PrintString("FFDC:", "RESET_PARM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdf62c2b1:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCC_CONTROL_BAD_405BOOT_PARM");
        i_parser.PrintString("FFDC:", "BOOT_PARM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe2b11602:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_OCCSRAM_CODE_BAD_MODE");
        i_parser.PrintString("FFDC:", "MODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd1ed366a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_OHA_CODE_PUTGETSCOM_FAILED");
        i_parser.PrintString("FFDC:", "ERRORS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x66729be8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT");
        i_parser.PrintString("FFDC:", "LOOPCOUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb1e45665:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT");
        i_parser.PrintString("FFDC:", "PMSR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2a4c1efd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT");
        i_parser.PrintString("FFDC:", "PCBSPM_MON1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xae20e43d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT");
        i_parser.PrintString("FFDC:", "PCBSPM_MON2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x45392165:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT");
        i_parser.PrintString("FFDC:", "PMGP0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x028913bd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT");
        i_parser.PrintString("FFDC:", "PMGP1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe5545226:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT");
        i_parser.PrintString("FFDC:", "PMERR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x994ef48d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT");
        i_parser.PrintString("FFDC:", "IVRM_CTRL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdf463aec:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT");
        i_parser.PrintString("FFDC:", "IVRM_VAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8dd89947:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT");
        i_parser.PrintString("FFDC:", "PCBSMODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x63e7c8ce:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_PCBS_CODE_BAD_MODE");
        i_parser.PrintString("FFDC:", "MODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x134891f7:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PREP_UNSUPPORTED_MODE_ERR");
        i_parser.PrintString("FFDC:", "MODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf10d04e8:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PREP_TARGET_ERR");
        i_parser.PrintString("FFDC:", "PRIMARY_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1532fa19:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_VLT_TIMEOUT");
        i_parser.PrintString("FFDC:", "PSTATETARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xeae7d53b:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_VLT_TIMEOUT");
        i_parser.PrintString("FFDC:", "PSTATESTEPTARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf38b662f:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_VLT_TIMEOUT");
        i_parser.PrintString("FFDC:", "PSTATEACTUAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xce9e22b9:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_MONITOR_ERR");
        i_parser.PrintString("FFDC:", "THISCHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8d650d36:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_MONITOR_ERR");
        i_parser.PrintString("FFDC:", "PSTATETARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf7f9b002:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_MONITOR_ERR");
        i_parser.PrintString("FFDC:", "PSTATESTEPTARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8994c4ad:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_MONITOR_ERR");
        i_parser.PrintString("FFDC:", "PSTATEACTUAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf957c048:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_VOLTAGE_CHANGE_MODE_ERR");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x40b734a3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_VOLTAGE_CHANGE_MODE_ERR");
        i_parser.PrintString("FFDC:", "PMCMODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe9f65875:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_MST_SEQUENCER_STATE_ERR");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5f6777d8:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_MST_SEQUENCER_STATE_ERR");
        i_parser.PrintString("FFDC:", "PMCMODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x294b335f:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMC_CODE_BAD_MODE");
        i_parser.PrintString("FFDC:", "MODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x297193fc:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_SPIVID_CONFIG_ERROR");
        i_parser.PrintString("FFDC:", "MASTER_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8979e75b:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_SPIVID_CONFIG_ERROR");
        i_parser.PrintString("FFDC:", "ATTR_SPIVID_PORT_ENABLE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb0cd874c:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "MASTER_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb06b46f2:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "SLAVE_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb9e86d58:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "DCM_INSTALLED_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7dbb887a:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_SCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "DCM_INSTALLED_2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc4a8c20e:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "MASTER_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xaa6c287c:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "SLAVE_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x03b7e419:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "DCM_INSTALLED_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xefe66959:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "DCM_INSTALLED_2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x98a5ab6b:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMC_MASTER_CONFIG_ERROR");
        i_parser.PrintString("FFDC:", "MASTERPMCMODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5ef82730:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMC_SLAVE_CONFIG_ERROR");
        i_parser.PrintString("FFDC:", "SLAVEPMCMODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1eeeae0f:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMC_INTERCHIP_CONFIG_ERROR");
        i_parser.PrintString("FFDC:", "MASTERPMCMODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5f6c3f18:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMC_INTERCHIP_CONFIG_ERROR");
        i_parser.PrintString("FFDC:", "SLAVEPMCMODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbeccea3f:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMC_FW_MODE_ERROR");
        i_parser.PrintString("FFDC:", "MASTERPMCMODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x646a24ed:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMC_FW_MODE_ERROR");
        i_parser.PrintString("FFDC:", "SLAVEPMCMODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x999da668:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_IDLE_ERROR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc4ff74de:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_IDLE_ERROR");
        i_parser.PrintString("FFDC:", "PORR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xad7872b0:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_IDLE_ERROR");
        i_parser.PrintString("FFDC:", "PMCSTATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x931660b8:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_IDLE_TIMEOUT_ERROR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9e7194f6:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_IDLE_TIMEOUT_ERROR");
        i_parser.PrintString("FFDC:", "PORR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x61d7d590:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_IDLE_TIMEOUT_ERROR");
        i_parser.PrintString("FFDC:", "PMCSTATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc5ea6306:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_O2P_TIMEOUT_ERROR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x821827f8:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCRESET_O2P_TIMEOUT_ERROR");
        i_parser.PrintString("FFDC:", "O2PSTATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x291ea81a:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "MASTER_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8d4f4b9e:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "SLAVE_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbf353d08:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "DCM_INSTALLED_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x29185bc4:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCINIT_SCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "DCM_INSTALLED_2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x18ef32e5:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "MASTER_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0fe37317:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "SLAVE_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1052dd3b:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "DCM_INSTALLED_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1a10f7bf:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PMCINIT_DCM_INSTALL_ERROR");
        i_parser.PrintString("FFDC:", "DCM_INSTALLED_2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7c8c6711:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSS_CODE_BAD_MODE");
        i_parser.PrintString("FFDC:", "IMODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6fcdfa37:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSS_CODE_BAD_MODE");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x592c11e6:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_TIMEOUT");
        i_parser.PrintString("FFDC:", "I_OPERATION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xea3e3932:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_TIMEOUT");
        i_parser.PrintString("FFDC:", "EX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4615bbb6:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_TIMEOUT");
        i_parser.PrintString("FFDC:", "ENTITY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x55b45e2e:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_TIMEOUT");
        i_parser.PrintString("FFDC:", "POLLCOUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xedeb6fce:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_TIMEOUT");
        i_parser.PrintString("FFDC:", "PMGP0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7eda3623:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_TIMEOUT");
        i_parser.PrintString("FFDC:", "SP_WKUP_REG_ADDRESS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfa629e9c:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_TIMEOUT");
        i_parser.PrintString("FFDC:", "SP_WKUP_REG_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7e08bce2:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_TIMEOUT");
        i_parser.PrintString("FFDC:", "HISTORY_ADDRESS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x634db6ae:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_TIMEOUT");
        i_parser.PrintString("FFDC:", "HISTORY_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd81da3dc:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY");
        i_parser.PrintString("FFDC:", "I_ENTITY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcc7fe5a4:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_CODE_BAD_OP");
        i_parser.PrintString("FFDC:", "I_OPERATION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6da1c78d:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_CHKSTOP");
        i_parser.PrintString("FFDC:", "PCBSINTRTYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc33eed48:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_CHKSTOP");
        i_parser.PrintString("FFDC:", "ATTRIGNOREXSTOP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3ac7dcda:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_CHKSTOP");
        i_parser.PrintString("FFDC:", "EX_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3b1ac62b:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_SLW_IN_CHKSTOP");
        i_parser.PrintString("FFDC:", "EX_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x39a87562:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_NOT_SET");
        i_parser.PrintString("FFDC:", "PMGP0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc40999a3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_NOT_SET");
        i_parser.PrintString("FFDC:", "ENTITY_COUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x51a55b61:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_NOT_SET");
        i_parser.PrintString("FFDC:", "I_ENTITY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa598b7ab:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT");
        i_parser.PrintString("FFDC:", "I_OPERATION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7ab5ca96:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT");
        i_parser.PrintString("FFDC:", "EX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd0c26314:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT");
        i_parser.PrintString("FFDC:", "ENTITY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x28fe24d3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT");
        i_parser.PrintString("FFDC:", "PHYP_SPCWKUP_COUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0a011f9d:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT");
        i_parser.PrintString("FFDC:", "FSP_SPCWKUP_COUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2f60eb17:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT");
        i_parser.PrintString("FFDC:", "OCC_SPCWKUP_COUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x94387d8c:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_SPCWKUP_INVALID_PMHISTORY");
        i_parser.PrintString("FFDC:", "PMHIST");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xee1d25f6:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GPE_RESET_TIMEOUT");
        i_parser.PrintString("FFDC:", "POLLCOUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x56378bd3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GPE_RESET_TIMEOUT");
        i_parser.PrintString("FFDC:", "MAXPOLLS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x559ef851:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GPE_RESET_TIMEOUT");
        i_parser.PrintString("FFDC:", "IENGINE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf6695988:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GPE_CODE_BAD_MODE");
        i_parser.PrintString("FFDC:", "IMODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8a7ff11e:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GPE_CODE_BAD_MODE");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc27e8db8:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GPE_BAD_ENGINE");
        i_parser.PrintString("FFDC:", "IENGINE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xff26d2c1:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GPE_BAD_ENGINE");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x816287e6:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PBA_INIT_INCORRECT_MODE");
        i_parser.PrintString("FFDC:", "PM_MODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe7a2c07b:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PBA_SLAVE_RESET_TIMEOUT");
        i_parser.PrintString("FFDC:", "POLLCOUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x041d38d4:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PBA_SLAVE_RESET_TIMEOUT");
        i_parser.PrintString("FFDC:", "SLAVENUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa7c0b6f9:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PBA_SLAVE_RESET_TIMEOUT");
        i_parser.PrintString("FFDC:", "PBASLVREG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf056a915:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET");
        i_parser.PrintString("FFDC:", "POLLCOUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5cfb7d67:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET");
        i_parser.PrintString("FFDC:", "SLAVENUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf8e7baf2:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET");
        i_parser.PrintString("FFDC:", "PBASLVREG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc89d9573:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PBA_BCDE_STOP_TIMEOUT");
        i_parser.PrintString("FFDC:", "POLLCOUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x54afef8a:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PBA_BCDE_STOP_TIMEOUT");
        i_parser.PrintString("FFDC:", "POLLVALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x97b6b73f:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PBA_BCUE_STOP_TIMEOUT");
        i_parser.PrintString("FFDC:", "POLLCOUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2e4c0279:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PBA_BCUE_STOP_TIMEOUT");
        i_parser.PrintString("FFDC:", "POLLVALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf95b3cc1:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_PBA_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_MODE_0x00064000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_CONFIG_0x0201084B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_SLVCTL2_0x00064006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_SLVCTL0_0x00064004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_SLVCTL1_0x00064005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_SLVCTL2_0x00064006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_SLVCTL3_0x00064007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_FIR_0x02010840");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_ERR_RPT0_0x0201084C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_ERR_RPT1_0x0201084D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_ERR_RPT2_0x0201084E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BCDE_CTL_0x00064010");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BCDE_SET_0x00064011");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BCDE_STAT_0x00064012");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BCDE_PBADR_0x00064013");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BCDE_OCIBAR_0x00064014");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BCUE_CTL_0x00064015");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BCUE_SET_0x00064016");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BCUE_STAT_0x00064017");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BCUE_PBADR_0x00064018");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BCUE_OCIBAR_0x00064019");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_PBOCR0_0x00064020");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_PBOCR1_0x00064021");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_PBOCR2_0x00064022");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_PBOCR3_0x00064023");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_PBOCR4_0x00064024");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BAR0_0x02013F00");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BARMSK0_0x02013F04");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BAR1_0x02013F01");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BARMSK1_0x02013F05");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BAR2_0x02013F02");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BARMSK2_0x02013F06");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BAR3_0x02013F03");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BARMSK3_0x02013F07");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_TRUSTMODE_0x02013F08");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x61fd7737:
        i_parser.PrintString("HwpReturnCode", "RC_MPIPL_MCD_RECOVERY_NOT_DISABLED_RC");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa05785d0:
        i_parser.PrintString("HwpReturnCode", "RC_MPIPL_MCD_RECOVERY_NOT_DISABLED_RC");
        i_parser.PrintString("FFDC:", "MCD_RECOV_CTRL_REG_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa46b2352:
        i_parser.PrintString("HwpReturnCode", "RC_MPIPL_MCD_RECOVERY_NOT_DISABLED_RC");
        i_parser.PrintString("FFDC:", "MCD_RECOV_CTRL_REG_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xeca8a463:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_IOVALID_X_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb512e6dd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FAB_IOVALID_A_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6be304ed:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ABUS_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("FFDC:", "THIS_ABUS_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbf0d8655:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ABUS_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("FFDC:", "CONNECTED_ABUS_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3655b767:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_ABUS_SCOMINIT_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x80be5be9:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XBUS_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("FFDC:", "THIS_XBUS_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x01ea35f2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XBUS_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("FFDC:", "CONNECTED_XBUS_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc0c99304:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_XBUS_SCOMINIT_PARTIAL_GOOD_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x06f9cdd5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_DMI_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("FFDC:", "MCS_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8e48c070:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_DMI_SCOMINIT_INVALID_TARGET");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6c4ebfdc:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_UNSPECIFIED_IMAGE_ERR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x147f964c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_IMAGE_SIZE_MISMATCH");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE_INP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xef5303ba:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_IMAGE_SIZE_MISMATCH");
        i_parser.PrintString("FFDC:", "DATA_IMG_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xff7dc991:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_ATTRIBUTE_RING_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbacdaf95:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_MAX_PLL_RING_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb8120534:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_SIZE_OF_BUF1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbc2b152e:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_IMGBUILD_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xeb2c0baf:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_RING_BLOCK_SIZEOFTHIS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x19f9cda2:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE");
        i_parser.PrintString("FFDC:", "DATA_SIZE_OF_BUF1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5a947850:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR");
        i_parser.PrintString("FFDC:", "DATA_RING_BLOCK_ENTRYOFFSET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x89f5fbdf:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR");
        i_parser.PrintString("FFDC:", "DATA_RING_BLOCK_SIZEOFTHIS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6a3a4d3f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_XIPC_KEYWORD_NOT_FOUND_ERROR");
        i_parser.PrintString("FFDC:", "RC_LOCAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4439bc37:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_INIT_NOT_RUNNING");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x797fcc09:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_INIT_ERROR");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x72cb5b43:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_INIT_ERROR");
        i_parser.PrintString("FFDC:", "TOD_ERROR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5914f11c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x69ad0c19:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR");
        i_parser.PrintString("FFDC:", "TOD_ERROR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xeda5965b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x964a0f48:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR");
        i_parser.PrintString("FFDC:", "TOD_ERROR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x40c437df:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_TOD_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_M_PATH_CTRL_REG_00040000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_PRI_PORT_0_CTRL_REG_00040001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_PRI_PORT_1_CTRL_REG_00040002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_SEC_PORT_0_CTRL_REG_00040003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_SEC_PORT_1_CTRL_REG_00040004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_S_PATH_CTRL_REG_00040005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_I_PATH_CTRL_REG_00040006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_PSS_MSS_CTRL_REG_00040007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_PSS_MSS_STATUS_REG_00040008");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_M_PATH_STATUS_REG_00040009");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_S_PATH_STATUS_REG_0004000A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_MISC_RESET_REG_0004000B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_PROBE_SELECT_REG_0004000C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_CHIP_CTRL_REG_00040010");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_TRACE_DATA_1_REG_0004001D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_TRACE_DATA_2_REG_0004001E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_TRACE_DATA_3_REG_0004001F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_VALUE_REG_00040020");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_LOAD_TOD_REG_00040021");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_START_TOD_REG_00040022");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_LOW_ORDER_STEP_REG_00040023");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_FSM_REG_00040024");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_TX_TTYPE_CTRL_REG_00040027");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_RX_TTYPE_CTRL_REG_00040029");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_ERROR_REG_00040030");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_ERROR_MASK_STATUS_REG_00040032");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TOD_ERROR_ROUTING_REG_00040033");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xef0614d5:
        i_parser.PrintString("HwpReturnCode", "RC_OPT_MEMMAP_MEM_BASE_ERR");
        i_parser.PrintString("FFDC:", "ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb46436be:
        i_parser.PrintString("HwpReturnCode", "RC_OPT_MEMMAP_MIRROR_BASE_ERR");
        i_parser.PrintString("FFDC:", "ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x84dad8e0:
        i_parser.PrintString("HwpReturnCode", "RC_OPT_MEMMAP_GROUP_ERR");
        i_parser.PrintString("FFDC:", "GROUP_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe869ae7d:
        i_parser.PrintString("HwpReturnCode", "RC_OPT_MEMMAP_GROUP_ERR");
        i_parser.PrintString("FFDC:", "MATCH_COUNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc23f27a0:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_NO_CORES_PRESENT_ERROR");
        i_parser.PrintString("FFDC:", "PRESENT_CHIPLETS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7921a9ae:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_BUFFER_SIZE_ERROR");
        i_parser.PrintString("FFDC:", "BUFFER_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x414fe2f5:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDM_BUFFER_SIZE_ERROR");
        i_parser.PrintString("FFDC:", "BUFFER_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbf089c37:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL");
        i_parser.PrintString("FFDC:", "ATTR_MVPD_DATA_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x489bb9c4:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL");
        i_parser.PrintString("FFDC:", "ATTR_MVPD_DATA_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe19e170b:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL");
        i_parser.PrintString("FFDC:", "ATTR_MVPD_DATA_2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x47217e25:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL");
        i_parser.PrintString("FFDC:", "ATTR_MVPD_DATA_3");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2db5c401:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL");
        i_parser.PrintString("FFDC:", "ATTR_MVPD_DATA_4");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x167d32e4:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_OBJECT_ERROR");
        i_parser.PrintString("FFDC:", "CHAR_RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x422729ba:
        i_parser.PrintString("HwpReturnCode", " RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ARGUMENT_ERROR");
        i_parser.PrintString("FFDC:", "CHAR_RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7c93a901:
        i_parser.PrintString("HwpReturnCode", " RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ARGUMENT_ERROR");
        i_parser.PrintString("FFDC:", "POINTS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x71904d3d:
        i_parser.PrintString("HwpReturnCode", " RC_PROCPM_PSTATE_DATABLOCK_CHARACTERIZATION_ERROR");
        i_parser.PrintString("FFDC:", "CHAR_RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x22191630:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_OBJECT_ERROR");
        i_parser.PrintString("FFDC:", "GPST_RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x51d56156:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ARGUMENT_ERROR");
        i_parser.PrintString("FFDC:", "GPST_RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbe877fa9:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ARGUMENT_ERROR");
        i_parser.PrintString("FFDC:", "OPS_PMIN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x79051039:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ARGUMENT_ERROR");
        i_parser.PrintString("FFDC:", "OPS_PMAX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6d610340:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ENTRY_ERROR");
        i_parser.PrintString("FFDC:", "GPST_RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x545236b0:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_GPST_CREATE_ERROR");
        i_parser.PrintString("FFDC:", "GPST_RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5560798d:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_OBJECT_ERROR");
        i_parser.PrintString("FFDC:", "LPST_RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3e854adb:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_IVID_ERROR");
        i_parser.PrintString("FFDC:", "LPST_RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xaa4a0500:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_VID_INCR_CLIP_INREG_ERROR");
        i_parser.PrintString("FFDC:", "LPST_RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe8e7ab75:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_LPST_CREATE_ERROR");
        i_parser.PrintString("FFDC:", "LPST_RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0cb85964:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR");
        i_parser.PrintString("FFDC:", "PM_RES_CLOCK_LOW_BAND_LOWER_FREQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xca329780:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR");
        i_parser.PrintString("FFDC:", "PM_RES_CLOCK_LOW_BAND_UPPER_FREQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe21110fc:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR");
        i_parser.PrintString("FFDC:", "PM_RES_CLOCK_HIGH_BAND_LOWER_FREQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe39349aa:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_RESCLK_BAND_ERROR");
        i_parser.PrintString("FFDC:", "PM_RES_CLOCK_HIGH_BAND_UPPER_FREQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xabd2cb0c:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_ERROR");
        i_parser.PrintString("FFDC:", "OP_POINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc07bb47d:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_ERROR");
        i_parser.PrintString("FFDC:", "CHIPLET_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd8b53a83:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_ERROR");
        i_parser.PrintString("FFDC:", "BUCKET_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc9b9f211:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_OPPOINT_ORDER_ERROR");
        i_parser.PrintString("FFDC:", "OP_POINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1028ffbb:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_OPPOINT_ORDER_ERROR");
        i_parser.PrintString("FFDC:", "CHIPLET_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6b0bf407:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_OPPOINT_ORDER_ERROR");
        i_parser.PrintString("FFDC:", "BUCKET_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x159091da:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("FFDC:", "RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2f040ce9:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("FFDC:", "PSTATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x076896b2:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("FFDC:", "FREQ_KHZ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0d73c413:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_PSTATE_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("FFDC:", "RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc6535932:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_PSTATE_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("FFDC:", "PSTATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb49bac84:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_PSTATE_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("FFDC:", "FREQ_KHZ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb0ecb700:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_GT_GPSTPMAX_ERROR");
        i_parser.PrintString("FFDC:", "RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4e8c3189:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_GT_GPSTPMAX_ERROR");
        i_parser.PrintString("FFDC:", "PSTATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe7b18d26:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_GT_GPSTPMAX_ERROR");
        i_parser.PrintString("FFDC:", "FREQ_KHZ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4f014440:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_ERROR");
        i_parser.PrintString("FFDC:", "RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4429cce9:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_FREQ2PSTATE_ERROR");
        i_parser.PrintString("FFDC:", "RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x22acb820:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSAFE_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("FFDC:", "RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd02ceafa:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSAFE_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("FFDC:", "PSTATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe928af68:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSAFE_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("FFDC:", "FREQ_KHZ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x90055716:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSAFE_GT_GPSTPMAX_ERROR");
        i_parser.PrintString("FFDC:", "RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xee768960:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSAFE_GT_GPSTPMAX_ERROR");
        i_parser.PrintString("FFDC:", "PSTATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xccd81abb:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSAFE_GT_GPSTPMAX_ERROR");
        i_parser.PrintString("FFDC:", "FREQ_KHZ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9c094156:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSAFE_ERROR");
        i_parser.PrintString("FFDC:", "RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa60f5308:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("FFDC:", "RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x24ae9c31:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("FFDC:", "PSTATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1eacfe73:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_MINMAX_BOUNDS_ERROR");
        i_parser.PrintString("FFDC:", "FREQ_KHZ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x295b1f24:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_GT_GPSTPMAX_ERROR");
        i_parser.PrintString("FFDC:", "RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x589b82e4:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_GT_GPSTPMAX_ERROR");
        i_parser.PrintString("FFDC:", "PSTATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x51956fe0:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_GT_GPSTPMAX_ERROR");
        i_parser.PrintString("FFDC:", "FREQ_KHZ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x41ffd490:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PFLOOR_ERROR");
        i_parser.PrintString("FFDC:", "RETURN_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x44fc7619:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR");
        i_parser.PrintString("FFDC:", "PSTATEDIFF");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa768eb15:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR");
        i_parser.PrintString("FFDC:", "BOOSTEDFREQKHZ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x979b4404:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR");
        i_parser.PrintString("FFDC:", "PSTATE0FREQKHZ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf75d45cc:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR");
        i_parser.PrintString("FFDC:", "FREQSTEPKHZ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xaff277ae:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR");
        i_parser.PrintString("FFDC:", "ATTRBOOSTPERCENT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x265c1073:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PSTATE_DIFF_ERROR");
        i_parser.PrintString("FFDC:", "BOOSTEDPCT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcb0f48ba:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_INVALID_BOOST_PERCENTAGE_ERROR");
        i_parser.PrintString("FFDC:", "MAXBOOSTPERCENT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xda032849:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_INVALID_BOOST_PERCENTAGE_ERROR");
        i_parser.PrintString("FFDC:", "ATTRBOOSTPERCENT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x05f8b472:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_IQ_BUFFER_SIZE_ERROR");
        i_parser.PrintString("FFDC:", "BUFFER_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2f1e4953:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_IQ_MVPD_ERROR");
        i_parser.PrintString("FFDC:", "CHIPLET_NUMBER");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2df877a6:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VDD_ERROR");
        i_parser.PrintString("FFDC:", "RAW_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb43fe2ff:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VDD_ERROR");
        i_parser.PrintString("FFDC:", "LRP_NUMBER");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x105c674f:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VCS_ERROR");
        i_parser.PrintString("FFDC:", "RAW_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf70c121d:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VCS_ERROR");
        i_parser.PrintString("FFDC:", "LRP_NUMBER");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x46bf113e:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_IQ_INVALID_VIO_ERROR");
        i_parser.PrintString("FFDC:", "RAW_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdf361f2f:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_UT_ERROR");
        i_parser.PrintString("FFDC:", "OP_POINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfc5f8297:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_UT_ERROR");
        i_parser.PrintString("FFDC:", "CHIPLET_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x31a329bd:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_PSTATE_DATABLOCK_PDV_ZERO_DATA_UT_ERROR");
        i_parser.PrintString("FFDC:", "BUCKET_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc9f94053:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR");
        i_parser.PrintString("FFDC:", "FREQ_PSTATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7dff0bf4:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR");
        i_parser.PrintString("FFDC:", "PMAX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbce93888:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR");
        i_parser.PrintString("FFDC:", "PMIN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1b3a24ec:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GET_VOLTAGE_FREQ_PSTATE_GT_PMAX_ERROR");
        i_parser.PrintString("FFDC:", "ENTRIES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x72cd7bd3:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GET_VOLTAGE_FREQ2PSTATE_ERROR");
        i_parser.PrintString("FFDC:", "FREQ_MHZ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x99999499:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_GET_VOLTAGE_FREQ2PSTATE_ERROR");
        i_parser.PrintString("FFDC:", "FREQ2PSTATE_RC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5d934cc9:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_CFAM_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_STATUS_0x00001007");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP3_0x00002812");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP4_0x00002813");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP5_0x00002814");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP6_0x00002815");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP7_0x00002816");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP8_0x00002817");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_WRITE_PROTECT_0x00002818");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_OSCSW_SENSE1_0x00002819");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_OSCSW_SENSE2_0x0000281A");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP3_MIRROR_0x0000281B");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_SBE_VITAL_0x0000281C");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
        }
        break;
    case 0xb7d0b9a0:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_STATUS_0x00001007");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_SBE_VITAL_0x0000281C");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
        }
        break;
    case 0x0a10fb43:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_MBOX_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "MBOX_SCRATCH_REG0_0x00002838");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "MBOX_SCRATCH_REG1_0x00002839");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "MBOX_SCRATCH_REG2_0x0000283A");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "MBOX_SCRATCH_REG3_0x0000283B");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
        }
        break;
    case 0x01da27ff:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_SLW_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_STATUS_0x00068000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_CONTROL_0x00068001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_RESET_0x00068002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_ERROR_MASK_0x00068003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_PRV_BASE_ADDRESS0_0x00068004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_PRV_BASE_ADDRESS1_0x00068005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_OCI_BASE_ADDRESS0_0x00068006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_OCI_BASE_ADDRESS1_0x00068007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_TABLE_BASE_ADDR_0x00068008");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_EXE_TRIGGER_0x00068009");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_SCRATCH0_0x0006800A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_SCRATCH1_0x0006800B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_SCRATCH2_0x0006800C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_IBUF_01_0x0006800D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_IBUF_2_0x0006800E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_DBG0_0x0006800F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_DBG1_0x00068010");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_PC_STACK0_0x00068011");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_PC_STACK1_0x00068012");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_PC_STACK2_0x00068013");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_ID_FLAGS_0x00068014");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_DATA0_0x00068015");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_MEMORY_RELOC_0x00068016");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_I2C_E0_PARAM_0x00068017");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_I2C_E1_PARAM_0x00068018");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_SLW_I2C_E2_PARAM_0x00068019");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xfa4ded92:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_SLW_FIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_LFIR_0x01010840");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "OCC_LFIR_0x01010800");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_FIR_0x02010840");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x54122ce5:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_SLW_PMC_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_MODE_REG_0x00062000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_STATUS_REG_0x00062009");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_CORE_DECONFIG_REG_0x0006200D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_FSMSTATE_STATUS_REG_0x00062020");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_PORRR0_REG_0x0006208E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_PORRR1_REG_0x0006208F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_PORE_REQ_REG0_0x0006208E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_DEEPEXIT_MASK_0x00062092");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x7f68245b:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_SLW_PBA_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BAR2_0x02013F02");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BARMSK2_0x02013F06");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_CONFIG_0x0201084B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_SLVCTL2_0x00064006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x6efb6473:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_SLW_OHA_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_OHA_RO_STATUS_REG_0x1002000B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_OHA_MODE_REG_RWx1002000D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_OHA_ARCH_IDLE_STATE_REG_RWx10020011");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_OHA_RO_STATUS_REG_0x1002000B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_OHA_AISS_IO_REG_0x10020014");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xcc4c8511:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_SLW_PCBS_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_GP3_0x100F0012");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PMGP0_0x100F0100");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PMGP1_0x100F0103");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PFET_CTL_REG_0x100F0106");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PFET_STAT_REG_0x100F0107");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PFET_CTL_REG_0x100F010E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PMSTATEHISTPERF_REG_0x100F0113");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_FSM_MONITOR1_REG_0x100F0170");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_FSM_MONITOR2_REG_0x100F0171");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PMErr_REG_0x100F0109");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_DPLL_STATUS_REG_100F0161");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_DPLL_CPM_PARM_REG_0x100F0152");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xe1507a70:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_SLW_SPWKUP_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PM_SPECIAL_WKUP_FSP_0x100F010B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PM_SPECIAL_WKUP_OCC_0x100F010C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PM_SPECIAL_WKUP_PHYP_0x100F010D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x632db60f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP");
        i_parser.PrintString("FFDC:", "MBMCC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x00fcafc5:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP");
        i_parser.PrintString("FFDC:", "MBMSR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x610dbf11:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP");
        i_parser.PrintString("FFDC:", "CMD_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7a8498ef:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_START_NOT_RESET");
        i_parser.PrintString("FFDC:", "MBMCC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1cb88804:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_START_NOT_RESET");
        i_parser.PrintString("FFDC:", "CMD_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xed0bb517:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_START_NOT_RESET");
        i_parser.PrintString("FFDC:", "MBMCT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x69f7f099:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_STOP_NOT_RESET");
        i_parser.PrintString("FFDC:", "MBMCC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0e7b7a5c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_STOP_NOT_RESET");
        i_parser.PrintString("FFDC:", "CMD_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x858f7a88:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_STOP_NOT_RESET");
        i_parser.PrintString("FFDC:", "MBMCT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8578f104:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_CMD_IN_PROGRESS");
        i_parser.PrintString("FFDC:", "MBMSR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x502d5a72:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_CMD_IN_PROGRESS");
        i_parser.PrintString("FFDC:", "CMD_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x89e80c30:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_CMD_IN_PROGRESS");
        i_parser.PrintString("FFDC:", "MBMCT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x353b62b4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_MEM_CNFG");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf68c7d97:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_MEM_CNFG");
        i_parser.PrintString("FFDC:", "MBAXCR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x85f0b0ac:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd4933fd8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE");
        i_parser.PrintString("FFDC:", "CCS_MODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf3ca9411:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE");
        i_parser.PrintString("FFDC:", "CMD_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcdf9108b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_ECC_DISABLED");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb7d0b6bf:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_ECC_DISABLED");
        i_parser.PrintString("FFDC:", "MBSECC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2b5f2104:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_ECC_DISABLED");
        i_parser.PrintString("FFDC:", "CMD_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbad5c4db:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_CMD");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd81d755c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_CMD");
        i_parser.PrintString("FFDC:", "MBAFIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd9b279b4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_CMD");
        i_parser.PrintString("FFDC:", "CMD_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6489cbe4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_CMD");
        i_parser.PrintString("FFDC:", "MBMCT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc3b5a390:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_ADDR");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa9010474:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_ADDR");
        i_parser.PrintString("FFDC:", "MBAFIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb820b2e4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_ADDR");
        i_parser.PrintString("FFDC:", "CMD_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xedf546e1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_ADDR");
        i_parser.PrintString("FFDC:", "MBMCT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8e548b74:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_CMD_TIMEOUT");
        i_parser.PrintString("FFDC:", "CMD_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8858ad83:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_ZERO_DDR_FREQ");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0a1d8195:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_ZERO_DDR_FREQ");
        i_parser.PrintString("FFDC:", "CMD_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x553bd9e3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x828373d2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH");
        i_parser.PrintString("FFDC:", "MBAXCR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x22b4d203:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1a3a0e40:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH");
        i_parser.PrintString("FFDC:", "DRAM_GEN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf7221f0a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_DIMM_CNFG");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfc37f457:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_DIMM_CNFG");
        i_parser.PrintString("FFDC:", "MBAXCR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb6e00ecf:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5295a95e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcba817c9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb2d644e3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5ffd7a23:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_X4_SYMBOL_ON_READ");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdb94dba2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_X4_SYMBOL_ON_READ");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x48fd7c91:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_X4_SYMBOL_ON_READ");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xed834ffb:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_X4_SYMBOL_ON_READ");
        i_parser.PrintString("FFDC:", "MARKSTORE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd2f36934:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_MARKSTORE");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x66c1b88f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_MARKSTORE");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa517a607:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_MARKSTORE");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x76ff742d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_MARKSTORE");
        i_parser.PrintString("FFDC:", "MARKSTORE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc3560774:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xff72b733:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8f52e7af:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_X4_SYMBOL_ON_WRITE");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x24383396:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_X4_SYMBOL_ON_WRITE");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6dd2d2a7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_X4_SYMBOL_ON_WRITE");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7382998c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_X4_SYMBOL_ON_WRITE");
        i_parser.PrintString("FFDC:", "SYMBOL_MARK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0069d6b3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_X4_SYMBOL_ON_WRITE");
        i_parser.PrintString("FFDC:", "CHIP_MARK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x73b0c01c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_SYMBOL_INDEX");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x078ce5ed:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_SYMBOL_INDEX");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x30a8a8e9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_SYMBOL_INDEX");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe95533ee:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_SYMBOL_INDEX");
        i_parser.PrintString("FFDC:", "SYMBOL_MARK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7eb77498:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_SYMBOL_INDEX");
        i_parser.PrintString("FFDC:", "CHIP_MARK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x34a020f5:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_CHIP_INDEX");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8994e37a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_CHIP_INDEX");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9cf4d07e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_CHIP_INDEX");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3b13bd07:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_CHIP_INDEX");
        i_parser.PrintString("FFDC:", "SYMBOL_MARK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0f6b1155:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_CHIP_INDEX");
        i_parser.PrintString("FFDC:", "CHIP_MARK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x327e86b9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa0373d80:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x43bc4d22:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcace50fd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED");
        i_parser.PrintString("FFDC:", "SYMBOL_MARK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xaa6d906e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED");
        i_parser.PrintString("FFDC:", "CHIP_MARK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd2750b08:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED");
        i_parser.PrintString("FFDC:", "MBECCFIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcc7e644f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1f0a1521:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbce1fbea:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT");
        i_parser.PrintString("FFDC:", "MUX_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6bcfc305:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_STEER_MUX");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd607d98b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_STEER_MUX");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x564415b9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_STEER_MUX");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4c3770aa:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_STEER_MUX");
        i_parser.PrintString("FFDC:", "MUX_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8ae4e8c1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_STEER_MUX");
        i_parser.PrintString("FFDC:", "STEER_MUX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4cac0332:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe40808c8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x00f45ccd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT");
        i_parser.PrintString("FFDC:", "MUX_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x98dd93bf:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT");
        i_parser.PrintString("FFDC:", "STEER_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6ce9549a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT");
        i_parser.PrintString("FFDC:", "SYMBOL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4dd51821:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x887dd493:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbc554097:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5e0072aa:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER");
        i_parser.PrintString("FFDC:", "MUX_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x46825997:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER");
        i_parser.PrintString("FFDC:", "STEER_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd51ca8e5:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER");
        i_parser.PrintString("FFDC:", "SYMBOL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb5fbe5c7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_X8_ECC_SPARE");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x05b91081:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_X8_ECC_SPARE");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x26ab39e9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_X8_ECC_SPARE");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x51861da7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_X8_ECC_SPARE");
        i_parser.PrintString("FFDC:", "MUX_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4663bdb9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_X8_ECC_SPARE");
        i_parser.PrintString("FFDC:", "STEER_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb204c9cd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_X8_ECC_SPARE");
        i_parser.PrintString("FFDC:", "SYMBOL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcf0d284b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x761698e1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd2bf15db:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "SYMBOL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x05c091d8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE");
        i_parser.PrintString("FFDC:", "X4ECCSPARE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9749e072:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_UE_TRAP");
        i_parser.PrintString("FFDC:", "UE_TRAP0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb853302e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_UE_TRAP");
        i_parser.PrintString("FFDC:", "UE_TRAP1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x875f4850:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_UE_TRAP");
        i_parser.PrintString("FFDC:", "MBMCT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9d6c8219:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_UE_TRAP");
        i_parser.PrintString("FFDC:", "MBMMR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc6f50f95:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAINT_NO_UE_TRAP");
        i_parser.PrintString("FFDC:", "MBSTR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4ac66571:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_MPIPL_FORCE_WINKLE_TARGET_TYPE_ERR");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xae966c23:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_MPIPL_FORCE_WINKLE_CANNOT_UNLOCK_IPMS_STATE");
        i_parser.PrintString("FFDC:", "IPMS_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd590b1dd:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAMODEADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x982cb3c6:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAMODEREG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa45931de:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAROADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf32ea035:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAROREG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x99064fc4:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAAISSIOADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb8410ea4:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAAISSIOREG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x823efc7e:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAMODEADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x68c020c4:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAMODEREG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x613845a2:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAROADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf33064a9:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAROREG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4e2de8d7:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAAISSIOADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xae18cff9:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAAISSIOREG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x70c3d724:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAMODEADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb2e271d0:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAMODEREG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9d6b4fcf:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAROADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x045831c7:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAROREG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfde3a5ed:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAAISSIOADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x02fd54eb:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT");
        i_parser.PrintString("FFDC:", "OHAAISSIOREG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x13ec79da:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_INACCESSIBLE");
        i_parser.PrintString("FFDC:", "GP3ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf0aa4e8d:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_INACCESSIBLE");
        i_parser.PrintString("FFDC:", "GP3REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x72bb2b53:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_INACCESSIBLE");
        i_parser.PrintString("FFDC:", "PMGP0ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3a01aa84:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_INACCESSIBLE");
        i_parser.PrintString("FFDC:", "PMGP0REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x08ece8d5:
        i_parser.PrintString("HwpReturnCode", "RC_EX_CHIPLET_AISS_WA_INACCESSIBLE");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe2156a16:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_EXNUMBER_CODE_BUG");
        i_parser.PrintString("FFDC:", "EX_NUMBER");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2f39b4bb:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_PMHIST_CODE_BUG");
        i_parser.PrintString("FFDC:", "PMHIST_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x78504efd:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_PIRRX_CODE_BUG");
        i_parser.PrintString("FFDC:", "PCBS_FSM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xffdee6ea:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_PIRRX_CODE_BUG");
        i_parser.PrintString("FFDC:", "PMC_QUEUE_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x19bf7828:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_UNSUPPORTED_SV_VALUE");
        i_parser.PrintString("FFDC:", "PCBS_FSM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x085ebffd:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_UNSUPPORTED_SV_VALUE");
        i_parser.PrintString("FFDC:", "PMHIST_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x76d0d799:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_UNSUPPORTED_SV_VALUE");
        i_parser.PrintString("FFDC:", "PMC_QUEUE_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc872b3a0:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_UNSUPPORTED_SV_VALUE");
        i_parser.PrintString("FFDC:", "TRANS_SV");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x883dca05:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_UNSUPPORTED_SV_VALUE");
        i_parser.PrintString("FFDC:", "TRANS_SV_ETR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe2fdc4d0:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_SUSPICIOUS_PCBS_FSM");
        i_parser.PrintString("FFDC:", "PCBS_FSM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc1aaeb23:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_SUSPICIOUS_PCBS_FSM");
        i_parser.PrintString("FFDC:", "PMHIST_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6a23826c:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_SUSPICIOUS_PCBS_FSM");
        i_parser.PrintString("FFDC:", "PMC_QUEUE_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x42baa798:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_PIRRX_UNSUPPORTED_IDLE_REQUEST");
        i_parser.PrintString("FFDC:", "PMC_QUEUE_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xaa9370d2:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_STATE_NOT_FOUND_BUG");
        i_parser.PrintString("FFDC:", "PORRR0_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6167769e:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_STATE_NOT_FOUND_BUG");
        i_parser.PrintString("FFDC:", "PORRR1_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x808137cb:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_STATE_NOT_FOUND_BUG");
        i_parser.PrintString("FFDC:", "ETR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x846dd0e9:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_STATE_NOT_FOUND_BUG");
        i_parser.PrintString("FFDC:", "PCBS_FSM_PREV");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe50b5c5b:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_STATE_NOT_FOUND_BUG");
        i_parser.PrintString("FFDC:", "PCBS_FSM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9a1dd94f:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_STATE_NOT_FOUND_BUG");
        i_parser.PrintString("FFDC:", "PMHIST_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x80cb537e:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_STATE_NOT_FOUND_BUG");
        i_parser.PrintString("FFDC:", "PMC_QUEUE_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf99e5c8b:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_STATE_NOT_FOUND_BUG");
        i_parser.PrintString("FFDC:", "IPMS_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x95fbd208:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_STATE_NOT_FOUND_BUG");
        i_parser.PrintString("FFDC:", "PIRR0_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8a82f390:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_STATE_NOT_FOUND_BUG");
        i_parser.PrintString("FFDC:", "PIRR1_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x095da29d:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_STATE_NOT_FOUND_BUG");
        i_parser.PrintString("FFDC:", "PIRR2_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd8a13847:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_STATE_NOT_FOUND_BUG");
        i_parser.PrintString("FFDC:", "PIRR3_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x976247e4:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_CONFLICTING_IDLE_STATES");
        i_parser.PrintString("FFDC:", "PORRR0_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x74bd281e:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_CONFLICTING_IDLE_STATES");
        i_parser.PrintString("FFDC:", "PORRR1_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x02090fda:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_CONFLICTING_IDLE_STATES");
        i_parser.PrintString("FFDC:", "ETR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0313054a:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_CONFLICTING_IDLE_STATES");
        i_parser.PrintString("FFDC:", "PCBS_FSM_PREV");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4ad1c594:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_CONFLICTING_IDLE_STATES");
        i_parser.PrintString("FFDC:", "PCBS_FSM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x863a472d:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_CONFLICTING_IDLE_STATES");
        i_parser.PrintString("FFDC:", "PMHIST_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfb4b278f:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_CONFLICTING_IDLE_STATES");
        i_parser.PrintString("FFDC:", "PMC_QUEUE_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb35d3be5:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_CONFLICTING_IDLE_STATES");
        i_parser.PrintString("FFDC:", "IPMS_STATE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfef22c2e:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_CONFLICTING_IDLE_STATES");
        i_parser.PrintString("FFDC:", "PIRR0_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x69f9ff0c:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_CONFLICTING_IDLE_STATES");
        i_parser.PrintString("FFDC:", "PIRR1_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4da85025:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_CONFLICTING_IDLE_STATES");
        i_parser.PrintString("FFDC:", "PIRR2_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5d0f55ea:
        i_parser.PrintString("HwpReturnCode", "RC_IPMS_CONFLICTING_IDLE_STATES");
        i_parser.PrintString("FFDC:", "PIRR3_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8c4547c3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE");
        i_parser.PrintString("FFDC:", "DEVICE_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbec81743:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED");
        i_parser.PrintString("FFDC:", "DEVICE_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcadf671e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE");
        i_parser.PrintString("FFDC:", "DIMM_VOLTAGE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3a62c81d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_DDR_TYPE_COMPLIANT_VOLTAGE");
        i_parser.PrintString("FFDC:", "DIMM_VOLTAGE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb3acb424:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION");
        i_parser.PrintString("FFDC:", "DIMM_VOLTAGE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd4cbf06f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_OVERIDE_MIXING");
        i_parser.PrintString("FFDC:", "OVERRIDE_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x47050cb5:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_OVERIDE_MIXING");
        i_parser.PrintString("FFDC:", "OVERRIDE_DOMAIN_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xea3eef61:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_OVERIDE_UKNOWN");
        i_parser.PrintString("FFDC:", "OVERRIDE_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe33ffed1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_AVDD_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "AVDD_SLOPE_ACTIVE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcc4a6050:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_AVDD_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "AVDD_SLOPE_INACTIVE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x90160289:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_AVDD_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "AVDD_SLOPE_INTERCEPT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x784fd9d7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDD_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "VDD_SLOPE_ACTIVE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3b9bd159:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDD_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "VDD_SLOPE_INACTIVE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa502f779:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDD_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "VDD_SLOPE_INTERCEPT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x244ef634:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VCS_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "VCS_SLOPE_ACTIVE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x83d0ee96:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VCS_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "VCS_SLOPE_INACTIVE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe0b99ef0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VCS_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "VCS_SLOPE_INTERCEPT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbf1e69c8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE");
        i_parser.PrintString("FFDC:", "DRAM_GEN_MISCOMPARE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbdc1c882:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE");
        i_parser.PrintString("FFDC:", "DRAM_GEN_START");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe2015921:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE");
        i_parser.PrintString("FFDC:", "CEN_MBA_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x12e3067a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VPP_OFFSET_DRAM_GEN_MISCOMPARE");
        i_parser.PrintString("FFDC:", "CEN_TARGET_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9cf25ea4:
        i_parser.PrintString("HwpReturnCode", "RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR");
        i_parser.PrintString("FFDC:", "TARGET_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc235df55:
        i_parser.PrintString("HwpReturnCode", "RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR");
        i_parser.PrintString("FFDC:", "MBA_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd911f380:
        i_parser.PrintString("HwpReturnCode", "RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR");
        i_parser.PrintString("FFDC:", "DIMM_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe24c3d57:
        i_parser.PrintString("HwpReturnCode", "RC_VPP_FUNCTIONAL_DIMM_VPD_READ_ERROR");
        i_parser.PrintString("FFDC:", "FAILING_ATTRIBUTE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7acde537:
        i_parser.PrintString("HwpReturnCode", "RC_VPP_FUNCTIONAL_CENTAUR_VPD_READ_ERROR");
        i_parser.PrintString("FFDC:", "TARGET_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x778cbba7:
        i_parser.PrintString("HwpReturnCode", "RC_VPP_FUNCTIONAL_CENTAUR_VPD_READ_ERROR");
        i_parser.PrintString("FFDC:", "MBA_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x77d55152:
        i_parser.PrintString("HwpReturnCode", "RC_VPP_FUNCTIONAL_CENTAUR_VPD_READ_ERROR");
        i_parser.PrintString("FFDC:", "FAILING_ATTRIBUTE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1fbfd613:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VPP_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "VPP_SLOPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb7d04971:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VPP_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "VPP_INTERCEPT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4422c4e3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE");
        i_parser.PrintString("FFDC:", "DRAM_GEN_MISCOMPARE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0d806956:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE");
        i_parser.PrintString("FFDC:", "DRAM_GEN_START");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5be879e4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE");
        i_parser.PrintString("FFDC:", "CEN_MBA_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xee92f20d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE");
        i_parser.PrintString("FFDC:", "CEN_TARGET_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x38eef2a4:
        i_parser.PrintString("HwpReturnCode", "RC_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR");
        i_parser.PrintString("FFDC:", "TARGET_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x40a16727:
        i_parser.PrintString("HwpReturnCode", "RC_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR");
        i_parser.PrintString("FFDC:", "MBA_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbd1816a7:
        i_parser.PrintString("HwpReturnCode", "RC_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR");
        i_parser.PrintString("FFDC:", "DIMM_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfcdd0325:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "VPD_MASTER_POWER_SLOPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa746aed9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "VPD_MASTER_POWER_INTERCEPT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd0e2f605:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "CEN_TARGET_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x21ea9d38:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "VDDR_SLOPE_ACTIVE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x38f3b04d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "VDDR_SLOPE_INACTIVE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2a6d86f5:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR");
        i_parser.PrintString("FFDC:", "VDDR_SLOPE_INTERCEPT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdc8de1ba:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_SPD_DATA_DDR4");
        i_parser.PrintString("FFDC:", "MTB_DDR4");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6dc8c31f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_SPD_DATA_DDR4");
        i_parser.PrintString("FFDC:", "FTB_DDR4");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xec91c03f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_SPD_DATA_DDR3");
        i_parser.PrintString("FFDC:", "MTB_DIVIDEND");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbbf933c7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_SPD_DATA_DDR3");
        i_parser.PrintString("FFDC:", "MTB_DIVISOR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x06bc7897:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_SPD_DATA_DDR3");
        i_parser.PrintString("FFDC:", "FTB_DIVIDEND");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7706e1df:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_SPD_DATA_DDR3");
        i_parser.PrintString("FFDC:", "FTB_DIVISOR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3411a192:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_SPD_DATA_COMMON");
        i_parser.PrintString("FFDC:", "MIN_TCK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x47264ff6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_SPD_DATA_COMMON");
        i_parser.PrintString("FFDC:", "MIN_TAA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf5ff37f7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MODULE_TYPE_MIX");
        i_parser.PrintString("FFDC:", "MODULE_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6b645890:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_COMMON_SUPPORTED_CL");
        i_parser.PrintString("FFDC:", "CL_SUPPORTED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x952f4078:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EXCEED_TAA_MAX_NO_CL");
        i_parser.PrintString("FFDC:", "CL_SUPPORTED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6cf117ba:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_FREQ_CALCULATED");
        i_parser.PrintString("FFDC:", "DIMM_MIN_FREQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbef41dd6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MIRROR_DISABLED");
        i_parser.PrintString("FFDC:", "MIRROR_PLACEMENT_POLICY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x119c30d8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INTERLEAVE_MODE_INVALID_MCS_PER_GROUP");
        i_parser.PrintString("FFDC:", "ALL_MCS_IN_INTERLEAVING_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xadff1436:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INTERLEAVE_MODE_INVALID_MCS_PER_GROUP");
        i_parser.PrintString("FFDC:", "MSS_INTERLEAVE_ENABLE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcb488384:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_CHECKERBOARD_MODE_INVALID_MCS_PER_GROUP");
        i_parser.PrintString("FFDC:", "ALL_MCS_IN_INTERLEAVING_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5dfb7f57:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_CHECKERBOARD_MODE_INVALID_MCS_PER_GROUP");
        i_parser.PrintString("FFDC:", "MSS_INTERLEAVE_ENABLE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x925ad3cb:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_SELCTIVE_MODE_HTM_OCC_BAR");
        i_parser.PrintString("FFDC:", "HTM_BAR_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3609e84c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_SELCTIVE_MODE_HTM_OCC_BAR");
        i_parser.PrintString("FFDC:", "OCC_SANDBOX_BAR_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3074a890:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS");
        i_parser.PrintString("FFDC:", "PROC_CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0b4a45d1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS");
        i_parser.PrintString("FFDC:", "MEM_BASE_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9ae9c205:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS");
        i_parser.PrintString("FFDC:", "MIRROR_BASE_ADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd9ab18f4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS");
        i_parser.PrintString("FFDC:", "SIZE_NON_MIRROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x49504033:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR");
        i_parser.PrintString("FFDC:", "TOTAL_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x61f9a754:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR");
        i_parser.PrintString("FFDC:", "HTM_BAR_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x471ced8f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR");
        i_parser.PrintString("FFDC:", "OCC_SANDBOX_BAR_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf7c97e86:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR");
        i_parser.PrintString("FFDC:", "MIRROR_PLACEMENT_POLICY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x10d3ffe9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE");
        i_parser.PrintString("FFDC:", "TOTAL_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x96f27df5:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE");
        i_parser.PrintString("FFDC:", "HTM_BAR_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfb7c2471:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE");
        i_parser.PrintString("FFDC:", "OCC_SANDBOX_BAR_SIZE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x68cf8753:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE");
        i_parser.PrintString("FFDC:", "MIRROR_PLACEMENT_POLICY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x37c03a2a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DIMM_POWER_CURVE_DATA_INVALID");
        i_parser.PrintString("FFDC:", "FFDC_DATA_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x87e515d2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DIMM_POWER_CURVE_DATA_INVALID");
        i_parser.PrintString("FFDC:", "FFDC_DATA_2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8a0b6dd3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DIMM_POWER_CURVE_DATA_INVALID");
        i_parser.PrintString("FFDC:", "FFDC_DATA_3");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3e86e8b4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DIMM_POWER_CURVE_DATA_INVALID");
        i_parser.PrintString("FFDC:", "FFDC_DATA_4");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc2d4016e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE");
        i_parser.PrintString("FFDC:", "FFDC_DATA_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4dcd0902:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE");
        i_parser.PrintString("FFDC:", "FFDC_DATA_2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x47049850:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE");
        i_parser.PrintString("FFDC:", "FFDC_DATA_3");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe06d81fc:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER");
        i_parser.PrintString("FFDC:", "PAIR_POWER");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6c575f91:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER");
        i_parser.PrintString("FFDC:", "PAIR_WATT_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa879c8d9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_READ_MISCOMPARE");
        i_parser.PrintString("FFDC:", "REG_CONTENTS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfbeeba20:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_UE_SUE");
        i_parser.PrintString("FFDC:", "REG_CONTENTS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4a37a533:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_CAL_TIMEOUT");
        i_parser.PrintString("FFDC:", "REG_CONTENTS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x33cf12d4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_INDEX_OUT_OF_BOUNDS");
        i_parser.PrintString("FFDC:", "INDEX_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2a24ec79:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_MSS_CCS_FAILURE");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MEM_MBA01_CCS_MODEQ_0x030106A7");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MEM_MBA01_STATQ_0x030106A6");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MEM_MBA01_CCS_CNTLQ_0x030106A5");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x106a8a33:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_MSS_RCD_PARITY_FAILURE");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MEM_MBA01_CALFIR_0x03010402");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x40b8a798:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_SETBBM");
        i_parser.PrintString("FFDC:", "WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe41736b8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_GETBBM");
        i_parser.PrintString("FFDC:", "WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x40c30703:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR");
        i_parser.PrintString("FFDC:", "PORT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe6e5f6f5:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR");
        i_parser.PrintString("FFDC:", "DIMM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x04783cf4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc6b3f502:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR");
        i_parser.PrintString("FFDC:", "SPARE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9cbcb01f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR");
        i_parser.PrintString("FFDC:", "PORT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x60547aa8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR");
        i_parser.PrintString("FFDC:", "BLOCK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdf8b3abf:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR");
        i_parser.PrintString("FFDC:", "QUAD");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0b2085b8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR");
        i_parser.PrintString("FFDC:", "PHYLANE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x75f8f236:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR");
        i_parser.PrintString("FFDC:", "MBA_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd1566b2d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR");
        i_parser.PrintString("FFDC:", "PORT_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1c119c72:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR");
        i_parser.PrintString("FFDC:", "RANKGROUP_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4c8f2237:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR");
        i_parser.PrintString("FFDC:", "MBA_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x25d4fbd0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR");
        i_parser.PrintString("FFDC:", "PORT_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5861718e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR");
        i_parser.PrintString("FFDC:", "RANKGROUP_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x83bd1243:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR");
        i_parser.PrintString("FFDC:", "MBA_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf81f7804:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR");
        i_parser.PrintString("FFDC:", "PORT_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x830d0b0a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR");
        i_parser.PrintString("FFDC:", "RANKGROUP_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa060f1f0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "MBA_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x252c32a0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "PORT_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xeeaefc89:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "RANKGROUP_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7bfebbef:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "MBA_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x55cd1a2d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "PORT_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2b53b657:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "RANKGROUP_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xde95e0b4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "MBA_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4f6dc0c2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "PORT_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf53bc98e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "RANKGROUP_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7e098a6a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "MBA_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x31e25761:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "PORT_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4e727775:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "RANKGROUP_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x057628fa:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "MBA_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0ef450b4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "PORT_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc5678501:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR");
        i_parser.PrintString("FFDC:", "RANKGROUP_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7ab09069:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR");
        i_parser.PrintString("FFDC:", "MBA_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc2c9b67b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR");
        i_parser.PrintString("FFDC:", "PORT_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe49cdab1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR");
        i_parser.PrintString("FFDC:", "RANKGROUP_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2d8cef6e:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_MSS_DRAMINIT_TRAINING_FAILURE_DISABLE_REGS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP0_P0_0_0x8000007c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP0_P0_1_0x8000047c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP0_P0_2_0x8000087c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP0_P0_3_0x80000c7c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP0_P0_4_0x8000107c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP1_P0_0_0x8000017c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP1_P0_1_0x8000057c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP1_P0_2_0x8000097c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP1_P0_3_0x80000d7c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP1_P0_4_0x8000117c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP2_P0_0_0x8000027c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP2_P0_1_0x8000067c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP2_P0_2_0x80000a7c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP2_P0_3_0x80000e7c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP2_P0_4_0x8000127c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP3_P0_0_0x8000037c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP3_P0_1_0x8000077c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP3_P0_2_0x80000b7c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP3_P0_3_0x80000f7c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP3_P0_4_0x8000137c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP0_P1_0_0x8001007c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP0_P1_1_0x8001047c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP0_P1_2_0x8001087c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP0_P1_3_0x80010c7c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP0_P1_4_0x8001107c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP1_P1_0_0x8001017c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP1_P1_1_0x8001057c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP1_P1_2_0x8001097c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP1_P1_3_0x80010d7c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP1_P1_4_0x8001117c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP2_P1_0_0x8001027c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP2_P1_1_0x8001067c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP2_P1_2_0x80010a7c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP2_P1_3_0x80010e7c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP2_P1_4_0x8001127c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP3_P1_0_0x8001037c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP3_P1_1_0x8001077c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP3_P1_2_0x80010b7c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP3_P1_3_0x80010f7c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_DATA_BIT_DISABLE0_RP3_P1_4_0x8001137c0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x1efa8fb9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DP18_0_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("FFDC:", "EXPECTED_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x274832d8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DP18_0_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("FFDC:", "ACTUAL_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9a8ba389:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DP18_1_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("FFDC:", "EXPECTED_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9bec7bd8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DP18_1_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("FFDC:", "ACTUAL_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfcf52106:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("FFDC:", "EXPECTED_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa4158864:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("FFDC:", "ACTUAL_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x34551119:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("FFDC:", "EXPECTED_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9fc279ea:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("FFDC:", "ACTUAL_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8c088fe9:
        i_parser.PrintString("HwpReturnCode", "RC_CONFIG_DRV_IMP_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "PORT_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x90ee59c3:
        i_parser.PrintString("HwpReturnCode", "RC_CONFIG_RCV_IMP_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "PORT_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9439a35f:
        i_parser.PrintString("HwpReturnCode", "RC_CONFIG_SLEW_RATE_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "PORT_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb6558880:
        i_parser.PrintString("HwpReturnCode", "RC_CONFIG_SLEW_RATE_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "SLEW_TYPE_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa4777288:
        i_parser.PrintString("HwpReturnCode", "RC_CONFIG_SLEW_RATE_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "SLEW_IMP_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0a2bd317:
        i_parser.PrintString("HwpReturnCode", "RC_CONFIG_SLEW_RATE_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "SLEW_RATE_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x64391d88:
        i_parser.PrintString("HwpReturnCode", "RC_CONFIG_WR_DRAM_VREF_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "PORT_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x97d9103c:
        i_parser.PrintString("HwpReturnCode", "RC_CONFIG_RD_CEN_VREF_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "PORT_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x972b227d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_INVALID_DRAM_GEN");
        i_parser.PrintString("FFDC:", "DRAM_GEN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9ad2d043:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_TIMEOUT_PORT0");
        i_parser.PrintString("FFDC:", "DATA_ADR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd3c21343:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_TIMEOUT_PORT0");
        i_parser.PrintString("FFDC:", "IMP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x901962f1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_TIMEOUT_PORT0");
        i_parser.PrintString("FFDC:", "SLEW");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x294a2133:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_TIMEOUT_PORT0");
        i_parser.PrintString("FFDC:", "STAT_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xefb33814:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_TIMEOUT_PORT1");
        i_parser.PrintString("FFDC:", "DATA_ADR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x93495739:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_TIMEOUT_PORT1");
        i_parser.PrintString("FFDC:", "IMP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x53cde1ea:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_TIMEOUT_PORT1");
        i_parser.PrintString("FFDC:", "SLEW");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7cbc41a1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_TIMEOUT_PORT1");
        i_parser.PrintString("FFDC:", "STAT_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x50f71a68:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_ERROR_PORT0");
        i_parser.PrintString("FFDC:", "DATA_ADR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x84863987:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_ERROR_PORT0");
        i_parser.PrintString("FFDC:", "IMP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xef918e96:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_ERROR_PORT0");
        i_parser.PrintString("FFDC:", "SLEW");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa873a013:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_ERROR_PORT0");
        i_parser.PrintString("FFDC:", "STAT_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xea53b405:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_ERROR_PORT1");
        i_parser.PrintString("FFDC:", "DATA_ADR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3f3b87a7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_ERROR_PORT1");
        i_parser.PrintString("FFDC:", "IMP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9513494e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_ERROR_PORT1");
        i_parser.PrintString("FFDC:", "SLEW");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x529cb218:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLEW_CAL_ERROR_PORT1");
        i_parser.PrintString("FFDC:", "STAT_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd45f6310:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_MSS_SLEW_CAL_FAILURE_PORT0");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_ADR_IO_SLEW_CTL_VALUE_P0_ADR0_0x8000401A0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_ADR_IO_SLEW_CTL_VALUE_P0_ADR1_0x8000441A0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_ADR_IO_SLEW_CTL_VALUE_P0_ADR2_0x8000481A0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_ADR_IO_SLEW_CTL_VALUE_P0_ADR3_0x80004C1A0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_IO_TX_CONFIG0_P0_0_0x800000750301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_IO_TX_CONFIG0_P0_1_0x800004750301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_IO_TX_CONFIG0_P0_2_0x800008750301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_IO_TX_CONFIG0_P0_3_0x80000C750301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_IO_TX_CONFIG0_P0_4_0x800010750301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x1207119d:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_MSS_SLEW_CAL_FAILURE_PORT1");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_ADR_IO_SLEW_CTL_VALUE_P1_ADR0_0x8001401A0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_ADR_IO_SLEW_CTL_VALUE_P1_ADR1_0x8001441A0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_ADR_IO_SLEW_CTL_VALUE_P1_ADR2_0x8001481A0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_ADR_IO_SLEW_CTL_VALUE_P1_ADR3_0x80014C1A0301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_IO_TX_CONFIG0_P1_0_0x800100750301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_IO_TX_CONFIG0_P1_1_0x800104750301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_IO_TX_CONFIG0_P1_2_0x800108750301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_IO_TX_CONFIG0_P1_3_0x80010C750301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DPHY01_DDRPHY_DP18_IO_TX_CONFIG0_P1_4_0x800110750301143F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xe36df9e7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNEXPECTED_MEM_CLOCK_STATUS");
        i_parser.PrintString("FFDC:", "EXPECTED_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8af77fee:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNEXPECTED_MEM_CLOCK_STATUS");
        i_parser.PrintString("FFDC:", "ACTUAL_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbe511aec:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNEXPECTED_NEST_CLOCK_STATUS");
        i_parser.PrintString("FFDC:", "EXPECTED_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xeca9e687:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNEXPECTED_NEST_CLOCK_STATUS");
        i_parser.PrintString("FFDC:", "ACTUAL_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1eb7716a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNEXPECTED_TP_CLOCK_STATUS");
        i_parser.PrintString("FFDC:", "EXPECTED_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xca6e2512:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNEXPECTED_TP_CLOCK_STATUS");
        i_parser.PrintString("FFDC:", "ACTUAL_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6ca6b21a:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CLOCK_STOP_BAD_STATUS_REGS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP3_0x00002812");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP4_0x00002813");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP3_MIRROR_0x0000101B");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MEM_GP3_0x030F0012");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_GP3_0x020F0012");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xee40e9e1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SCOMINIT_NUM_MBA_ERROR");
        i_parser.PrintString("FFDC:", "NUM_MBAS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x54f0800e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SCOMINIT_NUM_L4_ERROR");
        i_parser.PrintString("FFDC:", "NUM_L4S");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3efa2cf1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR");
        i_parser.PrintString("FFDC:", "ALT_BASE_INDEX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf154ccac:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR");
        i_parser.PrintString("FFDC:", "BASE_INDEX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6e7a12ad:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR");
        i_parser.PrintString("FFDC:", "SIZE_INDEX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf660d183:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_M_ALT_BAR_ERR");
        i_parser.PrintString("FFDC:", "ALT_BASE_INDEX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf7f1f459:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_M_ALT_BAR_ERR");
        i_parser.PrintString("FFDC:", "BASE_INDEX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x84f89eee:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_M_ALT_BAR_ERR");
        i_parser.PrintString("FFDC:", "SIZE_INDEX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1f419391:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR");
        i_parser.PrintString("FFDC:", "MCS_POS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8c4a4994:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR");
        i_parser.PrintString("FFDC:", "GROUP_INDEX_A");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xef394c89:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR");
        i_parser.PrintString("FFDC:", "GROUP_INDEX_B");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6169b28e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_REF_CLK_ENABLE_SWIZZLE_ERR");
        i_parser.PrintString("FFDC:", "PROC_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x991d2e48:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_REF_CLK_ENABLE_SWIZZLE_ERR");
        i_parser.PrintString("FFDC:", "CENTAUR_POSITION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4792ff2c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_REF_CLK_ENABLE_SWIZZLE_ERR");
        i_parser.PrintString("FFDC:", "REFCLOCK_BIT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x94e471f2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_REF_CLK_ENABLE_CONFIG_ERR");
        i_parser.PrintString("FFDC:", "PROC_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x20f70acc:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_REF_CLK_ENABLE_CONFIG_ERR");
        i_parser.PrintString("FFDC:", "CONFIGURED_CENTAUR_POSITIONS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1f93e7ee:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_REF_CLK_ENABLE_CONFIG_ERR");
        i_parser.PrintString("FFDC:", "ATTACHED_CENTAUR_POSITIONS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x117c4384:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CDIMM_INVALID_NUMBER_SENSORS");
        i_parser.PrintString("FFDC:", "FFDC_DATA_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4a2270a7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CDIMM_INVALID_NUMBER_SENSORS");
        i_parser.PrintString("FFDC:", "FFDC_DATA_2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x23b4eac6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR");
        i_parser.PrintString("FFDC:", "IMP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb5134f6b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR");
        i_parser.PrintString("FFDC:", "PORT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x12fd5332:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR");
        i_parser.PrintString("FFDC:", "DIMM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x36b7eeaf:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7da6cf9c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR");
        i_parser.PrintString("FFDC:", "IMP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb1aa1471:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR");
        i_parser.PrintString("FFDC:", "PORT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa01deff4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR");
        i_parser.PrintString("FFDC:", "DIMM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x343a2e1f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR");
        i_parser.PrintString("FFDC:", "RANK");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9ca7813c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR");
        i_parser.PrintString("FFDC:", "MBA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5a4efd73:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR");
        i_parser.PrintString("FFDC:", "MBMACA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0c629631:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR");
        i_parser.PrintString("FFDC:", "MBAFIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe6c07043:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT");
        i_parser.PrintString("FFDC:", "MBMCT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x94d8c7c7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT");
        i_parser.PrintString("FFDC:", "MBMACA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8efdfe8d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT");
        i_parser.PrintString("FFDC:", "MBASCTL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x718c94d0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT");
        i_parser.PrintString("FFDC:", "MBMCC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7a5dcd74:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT");
        i_parser.PrintString("FFDC:", "MBMSR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x008a3838:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT");
        i_parser.PrintString("FFDC:", "MBAFIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe48bd3c8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME");
        i_parser.PrintString("FFDC:", "PORT_SELECT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3324dd62:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME");
        i_parser.PrintString("FFDC:", "DIMM_SELECT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x56385dfc:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME");
        i_parser.PrintString("FFDC:", "CFG_WRDONE_DLY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbba08e91:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME");
        i_parser.PrintString("FFDC:", "CFG_RDTAG_DLY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb440ec81:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME");
        i_parser.PrintString("FFDC:", "MAX_CFG_RCD_PROTECTION_TIME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6ba2c16b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME");
        i_parser.PrintString("FFDC:", "MBA_FARB0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8e8dcb95:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME");
        i_parser.PrintString("FFDC:", "MBACALFIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1467ddca:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "MBA_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb5d72698:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "ACCESS_TYPE_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9a5918a7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "PORT_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2cfdaae4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "RANK_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd9993a08:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "TYPE_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa149a83d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "INDEX_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x399fa159:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_BAD_MBA_POS");
        i_parser.PrintString("FFDC:", "MBA_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8d760e1c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_BAD_MBA_POS");
        i_parser.PrintString("FFDC:", "MBA_POS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xabea25dc:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_BAD_DRAM_WIDTH");
        i_parser.PrintString("FFDC:", "MBA_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe91981c1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_BAD_DRAM_WIDTH");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xaf668b10:
        i_parser.PrintString("HwpReturnCode", "RC_CROSS_COUPLED_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "TYPE_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x272ae67d:
        i_parser.PrintString("HwpReturnCode", "RC_CROSS_COUPLED_INVALID_DQS");
        i_parser.PrintString("FFDC:", "INVALID_DQS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x29f82b93:
        i_parser.PrintString("HwpReturnCode", "RC_ROSETTA_MAP_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "MBA_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe95994ef:
        i_parser.PrintString("HwpReturnCode", "RC_ROSETTA_MAP_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "PORT_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x51e892bf:
        i_parser.PrintString("HwpReturnCode", "RC_ROSETTA_MAP_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "TYPE_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbe6d5d90:
        i_parser.PrintString("HwpReturnCode", "RC_ROSETTA_MAP_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "INDEX_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x92c44779:
        i_parser.PrintString("HwpReturnCode", "RC_ROSETTA_MAP_BAD_SWIZZLE_VALUE");
        i_parser.PrintString("FFDC:", "SWIZZLE_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x23528603:
        i_parser.PrintString("HwpReturnCode", "RC_ROSETTA_MAP_BAD_MBA_POS");
        i_parser.PrintString("FFDC:", "MBA_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf9b238b0:
        i_parser.PrintString("HwpReturnCode", "RC_ROSETTA_MAP_BAD_MBA_POS");
        i_parser.PrintString("FFDC:", "MBA_POS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8c7535ea:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_C4_PHY_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "TYPE_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5935f67b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "MBA_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x70b30a80:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "ACCESS_TYPE_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xac9b6d0d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "PORT_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x94cc2635:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "RANK_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x851de8db:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "TYPE_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3e55e3bd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "INDEX_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd19624c2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_MBA_POS");
        i_parser.PrintString("FFDC:", "MBA_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa1c94d65:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_MBA_POS");
        i_parser.PrintString("FFDC:", "MBA_POS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd9b769a3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_DRAM_WIDTH");
        i_parser.PrintString("FFDC:", "MBA_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbdb8f5ed:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_DRAM_WIDTH");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8fd269fb:
        i_parser.PrintString("HwpReturnCode", "RC_DRV_IMPED_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("FFDC:", "COUNT_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9543ea31:
        i_parser.PrintString("HwpReturnCode", "RC_SLEW_RATE_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("FFDC:", "COUNT_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x49c125ff:
        i_parser.PrintString("HwpReturnCode", "RC_WR_VREF_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("FFDC:", "COUNT_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xaef0b49f:
        i_parser.PrintString("HwpReturnCode", "RC_RD_VREF_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("FFDC:", "COUNT_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5add2c1c:
        i_parser.PrintString("HwpReturnCode", "RC_RCV_IMP_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("FFDC:", "COUNT_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x51a7bc72:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PDA_NONMRS_ATTR_NAME");
        i_parser.PrintString("FFDC:", "NONMRS_ATTR_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd6fcc891:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PDA_NONMRS_ATTR_NAME");
        i_parser.PrintString("FFDC:", "MBA_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd76a40f6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PDA_MRS_NOT_FOUND");
        i_parser.PrintString("FFDC:", "MRS_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x597ffb4a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PDA_MRS_NOT_FOUND");
        i_parser.PrintString("FFDC:", "MBA_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbd2077f8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PDA_DRAM_DNE");
        i_parser.PrintString("FFDC:", "PORT_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc6d11217:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PDA_DRAM_DNE");
        i_parser.PrintString("FFDC:", "DIMM_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x110948af:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PDA_DRAM_DNE");
        i_parser.PrintString("FFDC:", "RANK_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb484f4fc:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PDA_DRAM_DNE");
        i_parser.PrintString("FFDC:", "DRAM_VALUE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4f6671b0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PDA_DRAM_DNE");
        i_parser.PrintString("FFDC:", "MBA_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4f284b71:
        i_parser.PrintString("HwpReturnCode", "RC_CFG_MCB_TEST_MEM_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "TEST_TYPE_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0f19abba:
        i_parser.PrintString("HwpReturnCode", "RC_CFG_MCB_DGEN_INVALID_INPUT");
        i_parser.PrintString("FFDC:", "DATA_MODE_PARAM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdac6ff9c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_FREQ");
        i_parser.PrintString("FFDC:", "INVALID_RDIMM_FREQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2bd4c9a9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_VOLT");
        i_parser.PrintString("FFDC:", "INVALID_RDIMM_VOLT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcddaa64c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT");
        i_parser.PrintString("FFDC:", "INVALID_RDIMM_RCD_IBT_U32ARRAY_0_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x58a801a8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT");
        i_parser.PrintString("FFDC:", "INVALID_RDIMM_RCD_IBT_U32ARRAY_0_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x58532056:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT");
        i_parser.PrintString("FFDC:", "INVALID_RDIMM_RCD_IBT_U32ARRAY_1_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe8dfc0c7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT");
        i_parser.PrintString("FFDC:", "INVALID_RDIMM_RCD_IBT_U32ARRAY_1_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc4b210e8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING");
        i_parser.PrintString("FFDC:", "INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_0_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb2825934:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING");
        i_parser.PrintString("FFDC:", "INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_0_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8d6fde41:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING");
        i_parser.PrintString("FFDC:", "INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_1_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x84fedb90:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING");
        i_parser.PrintString("FFDC:", "INVALID_RDIMM_RCD_OUTPUT_TIMING_U8ARRAY_1_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x27b38fd3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_EMPTY");
        i_parser.PrintString("FFDC:", "CUR_DIMM_SPD_VALID_U8ARRAY_0_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x442dc61b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_EMPTY");
        i_parser.PrintString("FFDC:", "CUR_DIMM_SPD_VALID_U8ARRAY_0_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfd18c590:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_EMPTY");
        i_parser.PrintString("FFDC:", "CUR_DIMM_SPD_VALID_U8ARRAY_1_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9c73d7a4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_EMPTY");
        i_parser.PrintString("FFDC:", "CUR_DIMM_SPD_VALID_U8ARRAY_1_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc935152f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_SIDE");
        i_parser.PrintString("FFDC:", "CUR_DIMM_SPD_VALID_U8ARRAY_0_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9a4c4a3f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_SIDE");
        i_parser.PrintString("FFDC:", "CUR_DIMM_SPD_VALID_U8ARRAY_0_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf093e230:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_SIDE");
        i_parser.PrintString("FFDC:", "CUR_DIMM_SPD_VALID_U8ARRAY_1_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf8b50a42:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_SIDE");
        i_parser.PrintString("FFDC:", "CUR_DIMM_SPD_VALID_U8ARRAY_1_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcf1fff72:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_TOP");
        i_parser.PrintString("FFDC:", "CUR_DIMM_SPD_VALID_U8ARRAY_0_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa6e36b55:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_TOP");
        i_parser.PrintString("FFDC:", "CUR_DIMM_SPD_VALID_U8ARRAY_0_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbcf6c69d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_TOP");
        i_parser.PrintString("FFDC:", "CUR_DIMM_SPD_VALID_U8ARRAY_1_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb78c711e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MISMATCH_TOP");
        i_parser.PrintString("FFDC:", "CUR_DIMM_SPD_VALID_U8ARRAY_1_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xea996195:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN");
        i_parser.PrintString("FFDC:", "DRAM_DEVICE_TYPE_0_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x85efb37e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN");
        i_parser.PrintString("FFDC:", "DRAM_DEVICE_TYPE_0_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x11c6846a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN");
        i_parser.PrintString("FFDC:", "DRAM_DEVICE_TYPE_1_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfeab824b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN");
        i_parser.PrintString("FFDC:", "DRAM_DEVICE_TYPE_1_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x27458849:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE");
        i_parser.PrintString("FFDC:", "MODULE_TYPE_0_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9ee2d9ff:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE");
        i_parser.PrintString("FFDC:", "MODULE_TYPE_0_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8d723041:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE");
        i_parser.PrintString("FFDC:", "MODULE_TYPE_1_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x28571cb7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE");
        i_parser.PrintString("FFDC:", "MODULE_TYPE_1_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4e4eb2f8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS");
        i_parser.PrintString("FFDC:", "NUM_RANKS_0_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa3b675a9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS");
        i_parser.PrintString("FFDC:", "NUM_RANKS_0_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd9e6e358:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS");
        i_parser.PrintString("FFDC:", "NUM_RANKS_1_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2d9aad49:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS");
        i_parser.PrintString("FFDC:", "NUM_RANKS_1_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x895e7c26:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS");
        i_parser.PrintString("FFDC:", "SDRAM_BANKS_0_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x848f9575:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS");
        i_parser.PrintString("FFDC:", "SDRAM_BANKS_0_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x975a4ad3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS");
        i_parser.PrintString("FFDC:", "SDRAM_BANKS_1_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa4f155ea:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS");
        i_parser.PrintString("FFDC:", "SDRAM_BANKS_1_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x61b82e9f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS");
        i_parser.PrintString("FFDC:", "SDRAM_ROWS_0_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfc453315:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS");
        i_parser.PrintString("FFDC:", "SDRAM_ROWS_0_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfa9339cb:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS");
        i_parser.PrintString("FFDC:", "SDRAM_ROWS_1_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5f6cf989:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS");
        i_parser.PrintString("FFDC:", "SDRAM_ROWS_1_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9ce18074:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS");
        i_parser.PrintString("FFDC:", "SDRAM_COLS_0_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd7cddd84:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS");
        i_parser.PrintString("FFDC:", "SDRAM_COLS_0_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb3f1b2a0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS");
        i_parser.PrintString("FFDC:", "SDRAM_COLS_1_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf5ccbf42:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS");
        i_parser.PrintString("FFDC:", "SDRAM_COLS_1_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x38634eee:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH");
        i_parser.PrintString("FFDC:", "BUS_WIDTH_0_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x703d2010:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH");
        i_parser.PrintString("FFDC:", "BUS_WIDTH_0_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd1beb3e0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH");
        i_parser.PrintString("FFDC:", "BUS_WIDTH_1_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8f5ea45f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH");
        i_parser.PrintString("FFDC:", "BUS_WIDTH_1_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6ff5d32c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_UNSUPPORTED_MODULE_MEMORY_BUS_WIDTH");
        i_parser.PrintString("FFDC:", "MODULE_MEMORY_BUS_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc906b037:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH_0_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb301daed:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH_0_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x434d8d60:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH_1_0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa9d73d54:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH_1_1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfedc1ce4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_DRAM_DEVICE_ERROR");
        i_parser.PrintString("FFDC:", "DRAM_DEVICE_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5031bc8d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MOD_TYPE_ERROR");
        i_parser.PrintString("FFDC:", "MOD_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xba26d21d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_SDRAM_BANK_ERROR");
        i_parser.PrintString("FFDC:", "SDRAM_BANKS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc9eef2a3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_SDRAM_ROWS_ERROR");
        i_parser.PrintString("FFDC:", "SDRAM_ROWS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe092bd7b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_SDRAM_COLS_ERROR");
        i_parser.PrintString("FFDC:", "SDRAM_COLS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1ab9a6aa:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_DRAM_WIDTH_16_ERROR");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x16611517:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_DRAM_WIDTH_32_ERROR");
        i_parser.PrintString("FFDC:", "DRAM_WIDTH");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbf2b86b4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_DRAM_DENSITY_ERR");
        i_parser.PrintString("FFDC:", "SDRAM_DENSITY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcfced1a3:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_CWL_CALC_ERR");
        i_parser.PrintString("FFDC:", "CWL_VAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7d3d86d5:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_RDIMM_UNSUPPORTED_TYPE");
        i_parser.PrintString("FFDC:", "UNSUPPORTED_VAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x64bcea5d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_UDIMM_UNSUPPORTED_TYPE");
        i_parser.PrintString("FFDC:", "UNSUPPORTED_VAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x69f2a160:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_DIMM_UNSUPPORTED_TYPE");
        i_parser.PrintString("FFDC:", "UNSUPPORTED_VAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x741826f6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MSS_FREQ");
        i_parser.PrintString("FFDC:", "FREQ_VAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb2572bb9:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_BLKWKUP_CODE_BAD_OP");
        i_parser.PrintString("FFDC:", "EX_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd2eb4abc:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_BLKWKUP_CODE_BAD_OP");
        i_parser.PrintString("FFDC:", "OPERATION");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8e9d4f20:
        i_parser.PrintString("HwpReturnCode", "RC_P8_MAILBOX_UTILS_PROC_REFCLK_ZERO_ERROR");
        i_parser.PrintString("FFDC:", "REF_FREQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdc04ddca:
        i_parser.PrintString("HwpReturnCode", "RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR");
        i_parser.PrintString("FFDC:", "BOOT_FREQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd03cd1f1:
        i_parser.PrintString("HwpReturnCode", "RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR");
        i_parser.PrintString("FFDC:", "REF_FREQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x211526c0:
        i_parser.PrintString("HwpReturnCode", "RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR");
        i_parser.PrintString("FFDC:", "DPLL_DIV");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe9a3aeec:
        i_parser.PrintString("HwpReturnCode", "RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR");
        i_parser.PrintString("FFDC:", "FREQ_MULT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1f5e9be2:
        i_parser.PrintString("HwpReturnCode", "RC_P8_MAILBOX_UTILS_FREQ_MULT_OOB_ERROR");
        i_parser.PrintString("FFDC:", "MAX_BITS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb19e9faf:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_FIRST_OTPROM_INSTRUCTIONS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "OTPC_M_MODE_REGISTER_0x00010008");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ECID_PART_12_0x0001800C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ECID_PART_13_0x0001800D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ECID_PART_14_0x0001800E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ECID_PART_15_0x0001800F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ECID_PART_16_0x00018010");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ECID_PART_17_0x00018011");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ECID_PART_18_0x00018012");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ECID_PART_19_0x00018013");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ECID_PART_20_0x00018014");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ECID_PART_21_0x00018015");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ECID_PART_22_0x00018016");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ECID_PART_23_0x00018017");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x2cad6c2f:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_GPE_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_STATUS_0x00060000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_CONTROL_0x00060001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_RESET_0x00060002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_ERROR_MASK_0x00060003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_PRV_BASE_ADDRESS0_0x00060004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_PRV_BASE_ADDRESS1_0x00060005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_OCI_BASE_ADDRESS0_0x00060006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_OCI_BASE_ADDRESS1_0x00060007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_TABLE_BASE_ADDR_0x00060008");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_EXE_TRIGGER_0x00060009");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_SCRATCH0_0x0006000A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_SCRATCH1_0x0006000B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_SCRATCH2_0x0006000C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_IBUF_01_0x0006000D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_IBUF_2_0x0006000E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_DBG0_0x0006000F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_DBG1_0x00060010");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_PC_STACK0_0x00060011");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_PC_STACK1_0x00060012");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_PC_STACK2_0x00060013");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_ID_FLAGS_0x00060014");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_DATA0_0x00060015");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE0_MEMORY_RELOC_0x00060016");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_STATUS_0x00060020");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_CONTROL_0x00060021");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_RESET_0x00060022");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_ERROR_MASK_0x00060023");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_PRV_BASE_ADDRESS0_0x00060024");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_PRV_BASE_ADDRESS1_0x00060025");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_OCI_BASE_ADDRESS0_0x00060026");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_OCI_BASE_ADDRESS1_0x00060027");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_TABLE_BASE_ADDR_0x00060028");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_EXE_TRIGGER_0x00060029");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_SCRATCH0_0x0006002A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_SCRATCH1_0x0006002B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_SCRATCH2_0x0006002C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_IBUF_01_0x0006002D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_IBUF_2_0x0006002E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_DBG0_0x0006002F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_DBG1_0x00060030");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_PC_STACK0_0x00060031");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_PC_STACK1_0x00060032");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_PC_STACK2_0x00060033");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_ID_FLAGS_0x00060034");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_DATA0_0x00060035");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PORE_GPE1_MEMORY_RELOC_0x00060036");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x17659d84:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_PSS_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_ADC_CTRL_REG0_0x00070000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_ADC_CTRL_REG1_0x00070001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_ADC_CTRL_REG2_0x00070002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_ADC_STATUS_REG_0x00070003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_ADC_CMD_REG_0x00070004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_ADC_WDATA_REG_0x00070010");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_ADC_RDATA_REG0_0x00070020");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_ADC_RDATA_REG1_0x00070021");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_ADC_RDATA_REG2_0x00070022");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_ADC_RDATA_REG3_0x00070023");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_100NS_REG_0x00070028");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_P2S_CTRL_REG0_0x00070040");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_P2S_CTRL_REG1_0x00070041");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_P2S_CTRL_REG2_0x00070042");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_P2S_STATUS_REG_0x00070043");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_P2S_COMMAND_REG_0x00070044");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_P2S_WDATA_REG_0x00070050");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_P2S_RDATA_REG_0x00070060");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_ADC_RESET_REGISTER_0x00070005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SPIPSS_P2S_RESET_REGISTER_0x00070045");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xc2ac2831:
        i_parser.PrintString("HwpReturnCode", "PROC_ENABLE_RECONFIG_CLEANUP_INVALID_MCS_RC");
        i_parser.PrintString("FFDC:", "MASTER_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5cef8257:
        i_parser.PrintString("HwpReturnCode", "PROC_ENABLE_RECONFIG_CLEANUP_POST_RESET_MCS_UNIT_ID_FAIL");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x513f5484:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MEM_STARTCLOCKS_UNEXPECTED_CLOCK_STATUS");
        i_parser.PrintString("FFDC:", "MEM_CLK_STATUS_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbcff43ce:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MEM_STARTCLOCKS_UNEXPECTED_CLOCK_STATUS");
        i_parser.PrintString("FFDC:", "MEM_CLK_STATUS_REG_EXP_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbaf227a9:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MEM_PLL_INITF_UNSUPPORTED_MSS_FREQ");
        i_parser.PrintString("FFDC:", "MSS_FREQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa452f9f6:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MEM_PLL_INITF_UNSUPPORTED_NEST_FREQ");
        i_parser.PrintString("FFDC:", "NEST_FREQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x50027c2c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MEM_PLL_SETUP_PLL_LOCK_TIMEOUT");
        i_parser.PrintString("FFDC:", "CFAM_FSI_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x14007cda:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_INVALID_STATE");
        i_parser.PrintString("FFDC:", "EX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0fe26e4f:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_NOT_IN_ETR");
        i_parser.PrintString("FFDC:", "GP3");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x735d232c:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_NOT_IN_ETR");
        i_parser.PrintString("FFDC:", "PMGP0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x48be40e5:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_NOT_IN_ETR");
        i_parser.PrintString("FFDC:", "PMGP1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd7ccd03a:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_NOT_IN_ETR");
        i_parser.PrintString("FFDC:", "PMERR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdad0f052:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_NOT_IN_ETR");
        i_parser.PrintString("FFDC:", "PMHIST");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7edb776a:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_NOT_IN_ETR");
        i_parser.PrintString("FFDC:", "EX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc9abec3c:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_ADDRESS_MISMATCH");
        i_parser.PrintString("FFDC:", "GP3");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x648a6f6a:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_ADDRESS_MISMATCH");
        i_parser.PrintString("FFDC:", "PMGP0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x977251ea:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_ADDRESS_MISMATCH");
        i_parser.PrintString("FFDC:", "PMGP1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1fd8cb19:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_ADDRESS_MISMATCH");
        i_parser.PrintString("FFDC:", "PMERR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcf0a7984:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_ADDRESS_MISMATCH");
        i_parser.PrintString("FFDC:", "PMHIST");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf00efb9b:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_ADDRESS_MISMATCH");
        i_parser.PrintString("FFDC:", "GOODHALTADDR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc44c8082:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_ADDRESS_MISMATCH");
        i_parser.PrintString("FFDC:", "EX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xad3366fa:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_PMC_FIR_ERRORS");
        i_parser.PrintString("FFDC:", "GP3");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x09c59e23:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_PMC_FIR_ERRORS");
        i_parser.PrintString("FFDC:", "PMGP0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x32ec1bdc:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_PMC_FIR_ERRORS");
        i_parser.PrintString("FFDC:", "PMGP1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf39ecd4f:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_PMC_FIR_ERRORS");
        i_parser.PrintString("FFDC:", "PMERR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfd48b803:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_PMC_FIR_ERRORS");
        i_parser.PrintString("FFDC:", "PMCLFIR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5c0e5f76:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_PMC_FIR_ERRORS");
        i_parser.PrintString("FFDC:", "EX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x887e70f4:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_EX_NOT_RUNNING");
        i_parser.PrintString("FFDC:", "GP3");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x94d8c372:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_EX_NOT_RUNNING");
        i_parser.PrintString("FFDC:", "PMGP0");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa7be1691:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_EX_NOT_RUNNING");
        i_parser.PrintString("FFDC:", "PMGP1");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc61fc12d:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_EX_NOT_RUNNING");
        i_parser.PrintString("FFDC:", "PMERR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa1f5fbfa:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_EX_NOT_RUNNING");
        i_parser.PrintString("FFDC:", "PMHIST");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x473c3561:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CHKSLW_EX_NOT_RUNNING");
        i_parser.PrintString("FFDC:", "EX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1efe6d86:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PSTATE_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_STATUS_REG_0x00062009");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_LFIR_0x01010840");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_LFIR_MASK_0x01010843");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_MODE_REG_0x00062000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_PSTATE_MONITOR_AND_CTRL_REG_0x00062002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_RAIL_BOUNDS_0x00062003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_PARAMETER_REG0_0x00062005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_PARAMETER_REG1_0x00062006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_EFF_GLOBAL_ACTUAL_VOLTAGE_REG_0x00062007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_INTCHP_CTRL_REG1_0x00062010");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_INTCHP_CTRL_REG4_0x00062012");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_INTCHP_STATUS_REG_0x00062013");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_INTCHP_PSTATE_REG_0x00062017");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_INTCHP_COMMAND_REG_0x00062014");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x7c9ccf32:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_O2S_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_O2S_CTRL_REG0A_0x00062050");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_O2S_CTRL_REG0B_0x00062051");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_O2S_CTRL_REG1_0x00062052");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_O2S_CTRL_REG2_0x00062053");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_O2S_CTRL_REG4_0x00062055");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_O2S_STATUS_REG_0x00062056");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_O2S_COMMAND_REG_0x00062057");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_O2S_WDATA_REG_0x00062058");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_O2S_RDATA_REG_0x00062059");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x8083ec2c:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_SPIVID_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_SPIV_CTRL_REG0A_0x00062040");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_SPIV_CTRL_REG0B_0x00062041");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_SPIV_CTRL_REG1_0x00062042");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_SPIV_CTRL_REG2_0x00062043");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_SPIV_CTRL_REG3_0x00062044");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_SPIV_CTRL_REG4_0x00062045");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_SPIV_STATUS_REG_0x00062046");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_SPIV_COMMAND_REG_0x00062047");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x8d6e7cdb:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PCBS_PSSTATE_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_DPLL_CPM_PARM_REG_0x100F0152");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_POWER_MANAGEMENT_STATUS_REG_0x100F0153");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_iVRM_Control_Status_Reg_0x100F0154");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_iVRM_Value_Setting_Reg_0x100F0155");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBSPM_MODE_REG_0x100F0156");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_iVRM_PFETSTR_Sense_Reg_0x100F0157");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_Power_Management_Idle_Control_Reg_0x100F0158");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_Power_Management_Control_Reg_0x100F0159");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_PMC_VF_CTRL_REG_0x100F015A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_UNDERVOLTING_REG_0x100F015B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_Pstate_Index_Bound_Reg_0x100F015C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_Power_Management_Bounds_Reg_0x100F015D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_PSTATE_TABLE_CTRL_REG_0x100F015E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_PSTATE_TABLE_REG_0x100F015F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_Pstate_Step_Target_Register_0x100F0160");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_iVRM_VID_Control_Reg0_0x100F0162");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_DPLL_STATUS_REG_100F0161");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_iVRM_VID_Control_Reg1_0x100F0163");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_Resonant_Clock_Control_Reg0_0x100F0165");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_Resonant_Clock_Control_Reg1_0x100F0166");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_Resonant_Clock_Status_Reg_0x100F0167");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_FSM_MONITOR1_REG_0x100F0170");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_FSM_MONITOR2_REG_0x100F0171");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x2b00006e:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PCBS_PSSTATE_MONITOR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_DPLL_CPM_PARM_REG_0x100F0152");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_PMC_VF_CTRL_REG_0x100F015A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_FSM_MONITOR1_REG_0x100F0170");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PCBS_FSM_MONITOR2_REG_0x100F0171");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x3bdd0a1c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_MB_INTERLEAVE_PLUG_DECONFIG_DIMM");
        i_parser.PrintString("FFDC:", "CASE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x38353a68:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_DMI_PLL_NO_LOCK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP3_0x00002812");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP4_0x00002813");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP6_0x00002815");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP7_0x00002816");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_GP3_0x020F0012");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_PLLLOCKREG_0x020F0019");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x95437f1f:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_ABUS_PLL_NO_LOCK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP3_0x00002812");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP4_0x00002813");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP6_0x00002815");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP7_0x00002816");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_GP3_0x080F0012");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_PLLLOCKREG_0x080F0019");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x2bd14560:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PCIE_PLL_NO_LOCK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP3_0x00002812");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP4_0x00002813");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP6_0x00002815");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP7_0x00002816");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_GP3_0x090F0012");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_PLLLOCKREG_0x090F0019");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x925a08a2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_UNSUPPORTED_TYPE");
        i_parser.PrintString("FFDC:", "IBM_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x21abb44f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_UNSUPPORTED_TYPE");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa9f1d5f6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_MSS_FREQ");
        i_parser.PrintString("FFDC:", "L_MSS_FREQ");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5baf1a91:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_MSS_VOLT");
        i_parser.PrintString("FFDC:", "L_MSS_VOLT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x24c5cb6b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_DRAM_DENSITY");
        i_parser.PrintString("FFDC:", "L_LRDIMM_RANK_MULT_MODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0817600f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_DRAM_DENSITY");
        i_parser.PrintString("FFDC:", "L_DRAM_DENSITY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa4f89ebc:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_MULT_2");
        i_parser.PrintString("FFDC:", "L_LRDIMM_RANK_MULT_MODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd0bfed99:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_DRAM_DENSITY_MULT_2");
        i_parser.PrintString("FFDC:", "L_DRAM_DENSITY");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6182338c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_SPD_DRV_IMP");
        i_parser.PrintString("FFDC:", "L_DRAM_RON");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xde9f4e1c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_SPD_RTT_NOM");
        i_parser.PrintString("FFDC:", "L_DRAM_RTT_NOM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd018c2b2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_SPD_RTT_WR");
        i_parser.PrintString("FFDC:", "L_DRAM_RTT_WR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbf30d275:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_LRDIMM_INVALID_RANK_MULT_MODE");
        i_parser.PrintString("FFDC:", "L_LRDIMM_RANK_MULT_MODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2baf3c63:
        i_parser.PrintString("HwpReturnCode", "IO_GCR_WRITE_MISMATCH_RC");
        i_parser.PrintString("FFDC:", "READ_BUF");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbc7b90a4:
        i_parser.PrintString("HwpReturnCode", "IO_GCR_WRITE_MISMATCH_RC");
        i_parser.PrintString("FFDC:", "WRITE_BUF");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x561db348:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_SET_PLL_INVALID_INVOCATION_RC");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe620ceca:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_POST_TRAINING_INVALID_INVOCATION_RC");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd5d587c7:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_CHECK_DLL_VAL_OUT_OF_BOUND_RC");
        i_parser.PrintString("FFDC:", "DLL_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2f4e8db2:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_CHECK_DLL_WORKAROUND_FAIL");
        i_parser.PrintString("FFDC:", "DLL_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x62ec9951:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_FIR_MAX_SPARES_EXCEEDED_RC");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcb287b98:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_FIR_MAX_SPARES_EXCEEDED_RC");
        i_parser.PrintString("FFDC:", "SPARE_ERROR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf80e0ada:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_INVALID_TARGET_PAIR_RC");
        i_parser.PrintString("FFDC:", "MASTER_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdab301b3:
        i_parser.PrintString("HwpReturnCode", "IO_RUN_TRAINING_INVALID_TARGET_PAIR_RC");
        i_parser.PrintString("FFDC:", "SLAVE_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb63bfeed:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "FFDC_NUM_CYCLES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x872b881d:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa70a4b74:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "MASTER_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe2c0d4e4:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "SLAVE_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe333f09c:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "SLAVE_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3ad80b8e:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "FFDC_NUM_CYCLES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7a6b056e:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x67948dfa:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "MASTER_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xef3413cb:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "SLAVE_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xaaf2fb97:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "SLAVE_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf11be264:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "FFDC_NUM_CYCLES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2dea5c5c:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe058695d:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "MASTER_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa366f51b:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "SLAVE_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6300f426:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "SLAVE_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1ae2bb55:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "FFDC_NUM_CYCLES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xdd7b0bbe:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7b7c80ec:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "MASTER_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe7a1c893:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "SLAVE_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x038c0b2d:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "SLAVE_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd85e50fd:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_MODE_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "FFDC_NUM_CYCLES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xebb74203:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_MODE_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe5a902f4:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_MODE_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "MASTER_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x80bcced2:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_MODE_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "SLAVE_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1c14504e:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_MODE_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "SLAVE_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5af6e4c2:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd4b9f660:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2fc599ae:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3b6cf2da:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6921c8b6:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_LANE_DISABLED_VEC_0_15_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe7b580fd:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_LANE_DISABLED_VEC_16_31_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x43427761:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_LANE_SWAPPED_VEC_0_15_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe69aa8a2:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_INIT_STATE_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9f61b47a:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_WIRETEST_STATE_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xab5ec216:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_WIRETEST_LANEINFO_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x27840458:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_TRAINING_STATUS_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7497bf0b:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_WT_CLK_STATUS_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd5265f6b:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_LANE_DISABLED_VEC_0_15_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf3ff440a:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_LANE_DISABLED_VEC_16_31_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x14cc5220:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_LANE_SWAPPED_VEC_0_15_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x06e529c1:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_INIT_STATE_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8c89a326:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_WIRETEST_STATE_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xec7de5ea:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_WIRETEST_LANEINFO_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4a568113:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_TRAINING_STATUS_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2424ee1b:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_WT_CLK_STATUS_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb5482261:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0e9c9746:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "LANEID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc426a271:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_WT_STATUS_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x661da563:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x883a9fe8:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "LANEID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1e771eeb:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_WIRETEST_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_WT_STATUS_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1f15bfe2:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd45942f6:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfc4a7ff7:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcbd7b469:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x66c83dea:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_INIT_STATE_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5d3a17b8:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_TRAINING_STATUS_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1359a58c:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_DESKEW_STATE_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x618d565d:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_LANE_BAD_0_15_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa506c112:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_LANE_BAD_16_31_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x67e3ecc9:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_INIT_STATE_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc74ce8d6:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_TRAINING_STATUS_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x167d84c2:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_DESKEW_STATE_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x420a00f4:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_LANE_BAD_0_15_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2bd7f665:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_LANE_BAD_16_31_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x433eeb70:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcd9fb5eb:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "LANEID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xafc8f38d:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_DESKEW_STAT_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x997bb1b9:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_STAT_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcb1bc681:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_VREF_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5d715f76:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_FIFO_STAT_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1e4cf897:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_PROT_STATUS_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0f047e57:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x711a1534:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "LANEID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3a902666:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_DESKEW_STAT_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6ec2f2e9:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_STAT_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x76335ea7:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_VREF_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x780a008b:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_FIFO_STAT_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x69b9b6d4:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_DESKEW_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_PROT_STATUS_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4bacd106:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8b6e6887:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xab916e56:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5db535d2:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0d94a8d5:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_TRAINING_STATUS_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x59dd7e91:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_EO_RECAL_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xad87c957:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_LANE_BAD_0_15_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x68726957:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_LANE_BAD_16_31_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x799abda6:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_TRAINING_STATUS_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0c872f1d:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_EO_RECAL_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xca0e136a:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_LANE_BAD_0_15_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc7d79960:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_LANE_BAD_16_31_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x97de2866:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x39895cf6:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "LANEID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe5786753:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_AP_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf75aeedf:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_AN_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd483277c:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_AMIN_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5fc083db:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_H1_EVEN_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x79a73652:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_H1_ODD_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1d6dbad7:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_EYE_OPT_STATE_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x47e2a832:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_EYE_WIDTH_STATUS_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x600693f7:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_MASTER_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_DCD_ADJ_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xabf0e5eb:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "CHIP_TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9a691d37:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "LANEID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb911a58a:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_AP_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd1c9ad40:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_AN_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x583fcc15:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_AMIN_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf3f5974a:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_H1_EVEN_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3f308ff0:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_H1_ODD_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x63802ce5:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_EYE_OPT_STATE_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1e57f513:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_EYE_WIDTH_STATUS_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x927afd54:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_EYEOPT_FAIL_LANE_SLAVE_DATA_RC");
        i_parser.PrintString("FFDC:", "RX_DCD_ADJ_PL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe6c6e418:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6e222279:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x942c1eec:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7b8c05a6:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x806cb5b2:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_STATIC_REPAIR_STATE_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc26e0f54:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_TRAINING_STATUS_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x433d282c:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_BAD_LANE_ENC_GCRMSG_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8a843a32:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_STATIC_REPAIR_STATE_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x83625e59:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_TRAINING_STATUS_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9466b0ed:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_REPAIR_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_BAD_LANE_ENC_GCRMSG_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc396949b:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xac134e6c:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2a0e3ed4:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xce3a44db:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2ff947b2:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_FUNC_STATE_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x27518eba:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_FAIL_RC");
        i_parser.PrintString("FFDC:", "MASTER_RX_TRAINING_STATUS_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x344933c9:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_FUNC_STATE_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf5111806:
        i_parser.PrintString("HwpReturnCode", "IO_FUNCS_FUNC_FAIL_RC");
        i_parser.PrintString("FFDC:", "SLAVE_RX_TRAINING_STATUS_PG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x58b9b8eb:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_OFFCAL_ERROR_RC");
        i_parser.PrintString("FFDC:", "CHIP_INTERFACE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6ab565c1:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_OFFCAL_ERROR_RC");
        i_parser.PrintString("FFDC:", "DATA_BUFFER");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x15ad7073:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_OFFCAL_ERROR_RC");
        i_parser.PrintString("FFDC:", "FAIL_BIT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3b0cd1ba:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_OFFCAL_ERROR_RC");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7f541787:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_OFFCAL_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "TIMEOUTCNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x2ec08102:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCAL_K2_EXCEEDED_RC");
        i_parser.PrintString("FFDC:", "K2");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x31bb9ae5:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCAL_M_EXCEEDED_RC");
        i_parser.PrintString("FFDC:", "M");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x832a37bb:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCAL_ERROR_RC");
        i_parser.PrintString("FFDC:", "FAIL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa6a86cf8:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCAL_ERROR_RC");
        i_parser.PrintString("FFDC:", "DATA_BUFFER");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xec7632bb:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCAL_TIMEOUT_RC");
        i_parser.PrintString("FFDC:", "TIMEOUTCNT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf8eb2566:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC");
        i_parser.PrintString("FFDC:", "ZCAL_N");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf6bbde43:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC");
        i_parser.PrintString("FFDC:", "MIN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x48d027f5:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC");
        i_parser.PrintString("FFDC:", "MAX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6c000784:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC");
        i_parser.PrintString("FFDC:", "ZCAL_P");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x00ff2aa3:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC");
        i_parser.PrintString("FFDC:", "MIN");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5e43e82c:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC");
        i_parser.PrintString("FFDC:", "MAX");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x33b81910:
        i_parser.PrintString("HwpReturnCode", "IO_DCCAL_INVALID_INVOCATION_RC");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x81ca1058:
        i_parser.PrintString("HwpReturnCode", "IO_POWER_DOWN_LANES_INVALID_INVOCATION_RC");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7a6f6411:
        i_parser.PrintString("HwpReturnCode", "IO_READ_EREPAIR_INVALID_INVOCATION_RC");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x295571ef:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_TOO_MANY_BUS_ERROR_RC");
        i_parser.PrintString("FFDC:", "ENDPOINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe6454293:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_TOO_MANY_BUS_ERROR_RC");
        i_parser.PrintString("FFDC:", "BUS_ERROR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x14b63ece:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_RECALIBRATION_ERROR_RC");
        i_parser.PrintString("FFDC:", "ENDPOINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3b133b64:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_RECALIBRATION_ERROR_RC");
        i_parser.PrintString("FFDC:", "RECAL_ERROR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5e4072e9:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC");
        i_parser.PrintString("FFDC:", "ENDPOINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x8c5cb972:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC");
        i_parser.PrintString("FFDC:", "SPARE_ERROR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd512fafc:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_SPARES_DEPLOYED_FIR_RC");
        i_parser.PrintString("FFDC:", "ENDPOINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf5b87e97:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_SPARES_DEPLOYED_FIR_RC");
        i_parser.PrintString("FFDC:", "SPARE_ERROR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x05d99d84:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_LANE_TX_PARITY_ERROR_RC");
        i_parser.PrintString("FFDC:", "ENDPOINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9bc3a7ce:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_LANE_TX_PARITY_ERROR_RC");
        i_parser.PrintString("FFDC:", "LANE_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5d6acf80:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_LANE_TX_PARITY_ERROR_RC");
        i_parser.PrintString("FFDC:", "TX_ERROR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xec2cf92a:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_GROUP_TX_PARITY_ERROR_RC");
        i_parser.PrintString("FFDC:", "ENDPOINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xca53bfcb:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_GROUP_TX_PARITY_ERROR_RC");
        i_parser.PrintString("FFDC:", "TX_ERROR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1f0b5fbd:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_LANE_RX_PARITY_ERROR_RC");
        i_parser.PrintString("FFDC:", "ENDPOINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcafab7ef:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_LANE_RX_PARITY_ERROR_RC");
        i_parser.PrintString("FFDC:", "LANE_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x659e3cc4:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_LANE_RX_PARITY_ERROR_RC");
        i_parser.PrintString("FFDC:", "RX_ERROR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcc09de91:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_GROUP_RX_PARITY_ERROR_RC");
        i_parser.PrintString("FFDC:", "ENDPOINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x87332347:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_GROUP_RX_PARITY_ERROR_RC");
        i_parser.PrintString("FFDC:", "RX_ERROR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc0eeaca8:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_BUS_RX_PARITY_ERROR_RC");
        i_parser.PrintString("FFDC:", "ENDPOINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x967befff:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_BUS_RX_PARITY_ERROR_RC");
        i_parser.PrintString("FFDC:", "RX_ERROR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x54f1f28d:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_GCR_HANG_ERROR_RC");
        i_parser.PrintString("FFDC:", "ENDPOINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4669426c:
        i_parser.PrintString("HwpReturnCode", "IO_FIR_INVALID_INVOCATION_RC");
        i_parser.PrintString("FFDC:", "ENDPOINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd7051fff:
        i_parser.PrintString("HwpReturnCode", "IO_CLEAR_FIRS_INVALID_INVOCATION_RC");
        i_parser.PrintString("FFDC:", "ENDPOINT");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x72a2a0bd:
        i_parser.PrintString("HwpReturnCode", "IO_RESTORE_EREPAIR_INVALID_INVOCATION_RC");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9196873f:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_PIBMEM_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PIBMEM_STATUS_0x00088005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xf0ef5248:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_TP_CLOCK_CONTROLLER");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_OPCG_CNTL0_0x01030002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_OPCG_CNTL1_0x01030003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_OPCG_CNTL2_0x01030004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_OPCG_CNTL3_0x01030005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_CLK_REGION_0x01030006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_CLK_SCANSEL_0x01030007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_CLK_STATUS_0x01030008");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xfe5c1c9d:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_NEST_CLOCK_CONTROLLER");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_OPCG_CNTL0_0x02030002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_OPCG_CNTL1_0x02030003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_OPCG_CNTL2_0x02030004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_OPCG_CNTL3_0x02030005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_CLK_REGION_0x02030006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_CLK_SCANSEL_0x02030007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_CLK_STATUS_0x02030008");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x762052bc:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_XBUS_CLOCK_CONTROLLER");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_OPCG_CNTL0_0x04030002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_OPCG_CNTL1_0x04030003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_OPCG_CNTL2_0x04030004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_OPCG_CNTL3_0x04030005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_CLK_REGION_0x04030006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_CLK_SCANSEL_0x04030007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_CLK_STATUS_0x04030008");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x6efafc00:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_ABUS_CLOCK_CONTROLLER");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_OPCG_CNTL0_0x08030002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_OPCG_CNTL1_0x08030003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_OPCG_CNTL2_0x08030004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_OPCG_CNTL3_0x08030005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_CLK_REGION_0x08030006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_CLK_SCANSEL_0x08030007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_CLK_STATUS_0x08030008");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x3f383e12:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_PCIE_CLOCK_CONTROLLER");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_OPCG_CNTL0_0x09030002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_OPCG_CNTL1_0x09030003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_OPCG_CNTL2_0x09030004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_OPCG_CNTL3_0x09030005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_CLK_REGION_0x09030006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_CLK_SCANSEL_0x09030007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_CLK_STATUS_0x09030008");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xf03a2975:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_EX_CLOCK_CONTROLLER");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_SYNC_CONFIG_0x10030000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_OPCG_CNTL0_0x10030002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_OPCG_CNTL1_0x10030003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_OPCG_CNTL2_0x10030004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_OPCG_CNTL3_0x10030005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_CLK_REGION_0x10030006");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_CLK_SCANSEL_0x10030007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_CLK_STATUS_0x10030008");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x06326a13:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_SBE_CHECK_MASTER");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_GP0_0x02000000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "DEVICE_ID_REG_0x000F000F");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x85ec6e22:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_SBE_FABRICINIT");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_MODE_CENT_0x02010C4A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_HP_MODE_NEXT_CENT_0x02010C4B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_HP_MODE_CURR_CENT_0x02010C4C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_HPX_MODE_NEXT_CENT_0x02010C4D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_HPX_MODE_CURR_CENT_0x02010C4E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ADU_PMISC_MODE_0x0202000B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x49962787:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_SBE_NPLL_SETUP_FILTER_PLL");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP3_0x00002812");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP4_0x00002813");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP6_0x00002815");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP7_0x00002816");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_PLL_LOCK_0x010F0019");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x3e487ad2:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_SBE_NPLL_SETUP_XBUS_PLL");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP3_0x00002812");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP4_0x00002813");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP6_0x00002815");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP7_0x00002816");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_GP3_MIRROR_0x0000281B");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_PLLLOCKREG_0x040F0019");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x1de32024:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_SBE_SELECT_EX");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PARTIAL_GOOD_0x520F0012");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x1e5725c0:
        i_parser.PrintString("HwpReturnCode", "RC_TP_COLLECT_DBG_DATA");
        i_parser.PrintString("FFDC:", "VITL_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4e780e12:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_MODEL_ERROR");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf0ac62c3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_MODEL_ERROR");
        i_parser.PrintString("FFDC:", "MODEL_ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd1e90841:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_PIB_ERROR");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa8228c8c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_ENGINE_STATE_VSBE_PIB_ERROR");
        i_parser.PrintString("FFDC:", "PIB_ERROR");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6ee93928:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3aa28685:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION");
        i_parser.PrintString("FFDC:", "ENGINE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x01cf1a49:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION");
        i_parser.PrintString("FFDC:", "VIRTUAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x0325ff14:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_ENGINE_STATE_UNSUPPORTED_INVOCATION");
        i_parser.PrintString("FFDC:", "VIRTUAL_IS_SUPPORTED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe6e59c0b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "CHIP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc14ba2cb:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "ENGINE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x27a498f0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "VIRTUAL");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x220c3a3b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_VITAL_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfc704a11:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_STATUS_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb43ebd14:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_CONTROL_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb33d4749:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_RESET_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x205a08ea:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_ERR_MASK_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x44a40670:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_P0_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfb7648e5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_P1_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd49aa885:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_A0_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1bae1690:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_A1_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb86d3141:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_TBL_BASE_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x37b39d29:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_EXE_TRIGGER_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc1fb1234:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_CTR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcb296dc8:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_D0_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc4826d43:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_D1_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xe00b7659:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_IBUF0_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3fdc049d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_IBUF1_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xd079ac61:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_DEBUG0_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbb42360d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_DEBUG1_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xfb2d919c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_STACK0_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9da5a218:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_STACK1_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3fc9a2c0:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_STACK2_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9aebd3b3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_IDFLAGS_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xeb6d9508:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_SPRG0_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbe5b4779:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_MRR_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf6849797:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_I2CE0_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5a971c74:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_I2CE1_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf98cba40:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_I2CE2_REG");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4f197596:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_PC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbc7ce3be:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_ENGINE_STATE");
        i_parser.PrintString("FFDC:", "PORE_RC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbbd7e9bd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA");
        i_parser.PrintString("FFDC:", "PNOR_ECCB_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x06d56dc3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA");
        i_parser.PrintString("FFDC:", "SEEPROM_ECCB_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xbf8fa7c7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA");
        i_parser.PrintString("FFDC:", "SOFT_ERROR_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5af9e00c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_WO_TP_DATA");
        i_parser.PrintString("FFDC:", "ATTN_REPORTED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3d639727:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA");
        i_parser.PrintString("FFDC:", "PNOR_ECCB_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc1e1049d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA");
        i_parser.PrintString("FFDC:", "SEEPROM_ECCB_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xf9950311:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA");
        i_parser.PrintString("FFDC:", "SOFT_ERROR_STATUS");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x440677ec:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_BASE_FFDC_SBE_W_TP_DATA");
        i_parser.PrintString("FFDC:", "ATTN_REPORTED");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9c152b7b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_HALT_FFDC");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7430c87b:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_HALT_FFDC");
        i_parser.PrintString("FFDC:", "PORE_HALT_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb12e0464:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_HALT_FFDC");
        i_parser.PrintString("FFDC:", "FFDC_ADDRESSES");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcda58470:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_HALT_FFDC");
        i_parser.PrintString("FFDC:", "FFDC_DATA");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5bc15ba2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_MULTICAST");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xeb610934:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_MULTICAST");
        i_parser.PrintString("FFDC:", "CHIPLET_ID");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x078ced0c:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_MULTICAST");
        i_parser.PrintString("FFDC:", "MC_GROUP");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xcee4b946:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_TYPE");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x4cadb1a7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXTRACT_PORE_HALT_FFDC_BAD_TYPE");
        i_parser.PrintString("FFDC:", "PORE_HALT_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa79a4960:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_PROC_PBA_UTILS_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "OTPC_M_SECURITY_SWITCH_0x00010005");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_MODE_0x00064000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_SLVRST_0x00064001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_SLVCTL3_0x00064007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "OCB3_ADDRESS_0x0006B070");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "OCB3_STATUS_CONTROL_0x0006B071");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "OCB3_ERROR_STATUS_0x0006B074");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BAR3_0x02013F03");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_BARMSK3_0x02013F07");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_RBUFVAL2_0x02010852");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_RBUFVAL3_0x02010853");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_WBUFVAL0_0x02010858");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_WBUFVAL1_0x02010859");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_FIR_0x02010840");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_FIR_MASK_0x02010843");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_FIR_ACTION0_0x02010846");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_FIR_ACTION1_0x02010847");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_CONFIG_0x0201084B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_ERR_RPT0_0x0201084C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_ERR_RPT1_0x0201084D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_ERR_RPT2_0x0201084E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_MODE_CENT_0x02010C4A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ADU_PMISC_MODE_0x0202000B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x54636b2e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_FIR_FFDC");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x889408e7:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CHIP_MASTER_INTERRUPT_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_STATUS_0x00001007");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MASTER_PCB_INT_0x000F001A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x8e9e983c:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CHIP_GLOB_XFIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "READ_GLOBAL_XSTOP_FIR_0x570F001B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_XSTOP_0x01040000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_XSTOP_0x02040000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_XSTOP_0x04040000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_XSTOP_0x08040000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_XSTOP_0x09040000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_RAS_FIR_0x02010C6E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x0dee0f26:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CHIP_GLOB_RFIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "READ_GLOBAL_RECOV_FIR_0x570F001C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_RECOV_0x01040001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_RECOV_0x02040001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_RECOV_0x04040001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_RECOV_0x08040001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_RECOV_0x09040001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x87426611:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CHIP_GLOB_FIR_MASK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_FIR_MASK_0x01040002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_FIR_MASK_0x02040002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_FIR_MASK_0x04040002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_FIR_MASK_0x08040002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_FIR_MASK_0x09040002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_RAS_FIR_MASK_0x02010C71");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x27beca25:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CHIP_GLOB_ATTN_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "READ_GLOBAL_SPATT_FIR_0x570F001A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_SPATTN_0x01040004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_SPATTN_0x02040004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_SPATTN_0x04040004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_SPATTN_0x08040004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_SPATTN_0x09040004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x3ae1c3c5:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CHIP_GLOB_ATTN_MASK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_SPATTN_MASK_0x01040007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_SPATTN_MASK_0x02040007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_SPATTN_MASK_0x04040007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_SPATTN_MASK_0x08040007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_SPATTN_MASK_0x09040007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x2bd3362f:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CHIP_LFIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "OCC_LFIR_0x01010800");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_LFIR_0x01010840");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "OCC_PMC_LFIR_0x01010C00");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_PERV_LFIR_0x0104000A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_FIR_0x02010840");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PSI_HB_FIR_0x02010900");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "HCA_EN_FIR_0x02010940");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "HCA_EN_EHHCA_FIR_0x02010980");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EN_TPC_INTP_SYNC_FIR_0x020109C0");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_FIR_WEST_0x02010C00");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_FIR_CENT_0x02010C40");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_FIR_EAST_0x02010C80");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE0_FIR_0x02012000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE1_FIR_0x02012400");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE2_FIR_0x02012800");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NX_CQ_FIR_0x02013080");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NX_AS_FIR_0x020130C0");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NX_DMA_ENG_FIR_0x02013100");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NX_CAPP_FIR_0x02013000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MCD_FIR_0x02013400");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_PERV_LFIR_0x0204000A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_X_FIR_0x04010C00");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_PSI_FIR_0x04012400");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_PERV_LFIR_0x0404000A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_A_FIR_0x08010800");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_PERV_LFIR_0x0804000A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ES_PBES_WRAP_TOP_FIR_0x09010800");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_IOP0_PLL_FIR_0x09011400");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_IOP1_PLL_FIR_0x09011840");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_PERV_LFIR_0x0904000A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xb3f27625:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CHIP_LFIR_MASK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "OCC_LFIR_MASK_0x01010803");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PMC_LFIR_MASK_0x01010843");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "OCC_PMC_LFIR_MASK_0x01010C03");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_PERV_LFIR_MASK_0x0104000D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PBA_FIR_MASK_0x02010843");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PSI_HB_FIR_MASK_0x02010903");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "HCA_EN_FIR_MASK_0x02010943");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "HCA_EN_EHHCA_FIR_MASK_0x02010983");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EN_TPC_INTP_SYNC_FIR_MASK_0x020109C3");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_FIR_MASK_WEST_0x02010C03");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_FIR_MASK_CENT_0x02010C43");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_FIR_MASK_EAST_0x02010C83");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE0_FIR_MASK_0x02012003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE1_FIR_MASK_0x02012403");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE2_FIR_MASK_0x02012803");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NX_CQ_FIR_MASK_0x02013083");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NX_AS_FIR_MASK_0x020130C3");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NX_DMA_ENG_FIR_MASK_0x02013103");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NX_CAPP_FIR_MASK_0x02013003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MCD_FIR_MASK_0x02013403");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_PERV_LFIR_MASK_0x0204000D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_X_FIR_MASK_0x04010C03");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_PSI_FIR_MASK_0x04012403");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_PERV_LFIR_MASK_0x0404000D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PB_A_FIR_MASK_0x08010803");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_PERV_LFIR_MASK_0x0804000D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "ES_PBES_WRAP_TOP_FIR_MASK_0x09010803");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_IOP0_PLL_FIR_MASK_0x09011403");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_IOP1_PLL_FIR_MASK_0x09011843");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PCIE_PERV_LFIR_MASK_0x0904000D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xd31b06b2:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_EX_GLOB_XFIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_XSTOP_0x10040000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xa1c8f7a8:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_EX_GLOB_RFIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_RECOV_0x10040001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x3694608d:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_EX_GLOB_FIR_MASK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_FIR_MASK_0x10040002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xaef7912a:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_EX_GLOB_ATTN_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_SPATTN_0x10040004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x49de5d5b:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_EX_GLOB_ATTN_MASK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_SPATTN_MASK_0x10040007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x07fab6b1:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_EX_LFIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_CORE_FIR_0x10013100");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_L2_FIR_REG_0x10012800");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_L3_FIR_REG_0x10010800");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_NCU_FIR_REG_0x10010C00");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PERV_LFIR_0x1004000A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x2718d5fb:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_EX_LFIR_MASK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_CORE_FIR_MASK_0x10013103");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_L2_FIR_MASK_REG_0x10012803");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_L3_FIR_MASK_REG_0x10010803");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_NCU_FIR_MASK_REG_0x10010C03");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "EX_PERV_LFIR_MASK_0x1004000D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xe339b3d7:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_MCS_LFIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MCS_MCIFIR_0x02011840");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "IOMC0_BUSCNTL_FIR_0x02011A00");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x187913bd:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_MCS_LFIR_MASK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MCS_MCIFIRMASK_0x02011843");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "IOMC0_BUSCNTL_FIR_MASK_0x02011A03");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x28a41f2b:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_XBUS_LFIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_XBUS0_BUSCNTL_FIR_0x04011000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x0ab35ef1:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_XBUS_LFIR_MASK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "X_XBUS0_BUSCNTL_FIR_MASK_0x04011003");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xf16a6299:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_ABUS_LFIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_ABUS_BUSCNTL_FIR_0x08010C00");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xc2b0b4c3:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_ABUS_LFIR_MASK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "A_ABUS_BUSCNTL_FIR_MASK_0x08010C03");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xe8a1ab36:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_FIR_FFDC");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x1e31409f:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CEN_CHIP_MASTER_INTERRUPT_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= CFAM_DATA_LEN)
            {
                i_parser.PrintString("CFAM Register:", "CFAM_FSI_STATUS_0x00001007");
                i_parser.PrintHexDump(l_pBuffer, CFAM_DATA_LEN);
                l_pBuffer+= CFAM_DATA_LEN;
                l_buflen -= CFAM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MASTER_PCB_INT_0x000F001A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x2d88f844:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CEN_CHIP_GLOB_XFIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "READ_GLOBAL_XSTOP_FIR_0x570F001B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_XSTOP_0x01040000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_XSTOP_0x02040000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MEM_XSTOP_0x03040000");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x99940760:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CEN_CHIP_GLOB_RFIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "READ_GLOBAL_RECOV_FIR_0x570F001C");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_RECOV_0x01040001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_RECOV_0x02040001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MEM_RECOV_0x03040001");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xd06196f1:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CEN_CHIP_GLOB_FIR_MASK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_FIR_MASK_0x01040002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_FIR_MASK_0x02040002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MEM_FIR_MASK_0x03040002");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x9a1f5200:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CEN_CHIP_GLOB_ATTN_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "READ_GLOBAL_SPATT_FIR_0x570F001A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_SPATTN_0x01040004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_SPATTN_0x02040004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MEM_SPATTN_0x03040004");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xa38be1df:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CEN_CHIP_GLOB_ATTN_MASK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_SPATTN_MASK_0x01040007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_SPATTN_MASK_0x02040007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MEM_SPATTN_MASK_0x03040007");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x547f0b22:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CEN_CHIP_LFIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_PERV_LFIR_0x0104000A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_PERV_LFIR_0x0204000A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "CEN_DMIFIR_0x02010400");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBI_FIR_0x02010800");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_FIR_REG_0x02011400");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC0_MBECCFIR_0x02011440");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC1_MBECCFIR_0x02011480");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS01_MBSFIRQ_0x02011600");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS23_MBSFIRQ_0x02011700");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "FBISTN_FIR_REG_0x02010880");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SCAC_LFIR_0x020115C0");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBSS_FIR_REG_0x0201141E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MEM_PERV_LFIR_0x0304000A");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "FBISTM_FIR_REG_0x03010480");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xab8a108d:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CEN_CHIP_LFIR_MASK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "TP_PERV_LFIR_MASK_0x0104000D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "NEST_PERV_LFIR_MASK_0x0204000D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "CEN_DMIFIR_MASK_0x02010403");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBI_FIRMASK_0x02010803");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_FIR_MASK_REG_0x02011403");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC0_MBECCFIR_MASK_0x02011443");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS_ECC1_MBECCFIR_MASK_0x02011483");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS01_MBSFIRMASK_0x02011603");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBS23_MBSFIRMASK_0x02011703");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "FBISTN_FIR_MASK_REG_0x02010883");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "SCAC_FIRMASK_0x020115C3");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBSS_FIR_MASK_REG_0x02011421");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MEM_PERV_LFIR_MASK_0x0304000D");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "FBISTM_FIR_MASK_REG_0x03010483");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x7d60a3fd:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CEN_MBA_LFIR_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBACALFIR_0x03010400");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBAFIRQ_0x03010600");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PHY01_DDRPHY_FIR_REG_0x800200900301143f");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBAS_FIR_REG_0x0301041B");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x15b069db:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_CEN_MBA_LFIR_MASK_REGISTERS");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBACALFIR_MASK_0x03010403");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBA01_MBAFIRMASK_0x03010603");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "PHY01_DDRPHY_FIR_MASK_REG_0x800200930301143f");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBAS_FIR_MASK_REG_0x0301041E");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0xb283f369:
        i_parser.PrintString("HwpReturnCode", "RC_GET_TP_DBG_DATA_ERR");
        i_parser.PrintString("FFDC:", "CHIP_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x5fbc735e:
        i_parser.PrintString("HwpReturnCode", "RC_GET_TP_DBG_DATA_ERR");
        i_parser.PrintString("FFDC:", "CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa3ac6dda:
        i_parser.PrintString("HwpReturnCode", "RC_GET_TP_DBG_DATA_PARAMETER_ERR");
        i_parser.PrintString("FFDC:", "TARGET_TYPE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x3b3c6a98:
        i_parser.PrintString("HwpReturnCode", "RC_GET_TP_DEBUG_DATA_ERR");
        i_parser.PrintString("FFDC:", "CHIP_NAME");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x633a9391:
        i_parser.PrintString("HwpReturnCode", "RC_GET_TP_DEBUG_DATA_ERR");
        i_parser.PrintString("FFDC:", "CHIP_EC");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xc490544c:
        i_parser.PrintString("Register FFDC:", "REG_FFDC_SBE_SCAN_SERVICE");
        while (l_buflen > 0)
        {
            if (l_buflen >= POS_LEN)
            {
                uint32_t * l_pBufferTemp = reinterpret_cast<uint32_t *>(l_pBuffer);
                i_parser.PrintNumber("Chip Position:","%X",ntohl(*l_pBufferTemp));
                l_pBufferTemp = NULL;
                l_pBuffer+= POS_LEN;
                l_buflen -= POS_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBOX_SCRATCH_REG0_0x00050038");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
            if (l_buflen >= SCOM_DATA_LEN)
            {
                i_parser.PrintString("SCOM Register:", "MBOX_SCRATCH_REG1_0x00050039");
                i_parser.PrintHexDump(l_pBuffer, SCOM_DATA_LEN);
                l_pBuffer+= SCOM_DATA_LEN;
                l_buflen -= SCOM_DATA_LEN;
            }
        }
        break;
    case 0x890d24ab:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_NOT_STOPPED");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x7a77e1d5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_BAD_HALT");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xb64b76cf:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_BAD_HALT");
        i_parser.PrintString("FFDC:", "ISTEP_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x88b8d893:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_SBE_SCAN_SERVICE_SBE_BAD_HALT");
        i_parser.PrintString("FFDC:", "SUBSTEP_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x9a97a3e2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("FFDC:", "TARGET");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x778fbbd1:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("FFDC:", "SBE_RUNNING");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x347f0b25:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("FFDC:", "HALT_CODE");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0xa756a775:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("FFDC:", "ISTEP_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    case 0x6a53139d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_STOP_SBE_SCAN_SERVICE_UNEXPECTED_FINAL_STATE");
        i_parser.PrintString("FFDC:", "SUBSTEP_NUM");
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
        break;
    default:
        i_parser.PrintNumber("Unrecognized FFDC", "0x%x", l_ffdcId);
        if (l_buflen) {i_parser.PrintHexDump(l_pBuffer, l_buflen);}
    }

}

}

#endif
#endif
