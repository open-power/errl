// hbfwPlatHwpErrParser.H
// This file is generated by perl script platCreateHwpErrParser.pl

#ifndef HBFWPLATHWPERRPARSER_H_
#define HBFWPLATHWPERRPARSER_H_

#ifdef LOGPARSER

namespace fapi2
{

void hbfwParseHwpRc(ErrlUsrParser & i_parser,
                    void * i_pBuffer,
                    const uint32_t i_buflen)
{
    uint32_t l_rc = ntohl(*(static_cast<uint32_t *>(i_pBuffer)));
    switch(l_rc)
    {
    case 0x775cc6:
        i_parser.PrintString("HwpReturnCode", "RC_P9_ADU_COHERENT_UTILS_INVALID_ARGS");
        i_parser.PrintString("HWP Error description", "Procedure: p9_adu_coherent_utils There is an invalid argument (misaligned address or address out of the fabric address range) being passed to the adu access or adu setup procedure");
        break;
    case 0x4a99c5:
        i_parser.PrintString("HwpReturnCode", "RC_P9_ADU_FBC_NOT_INITIALIZED_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_adu_coherent_utils The fabric was not initialized or not running");
        break;
    case 0xe2a2ba:
        i_parser.PrintString("HwpReturnCode", " RC_P9_ADU_STATUS_REG_ERR_NO_ADDR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_adu_coherent_utils The ALTD_STATUS_REGISTER contains unexpected status with no indication of a combined response address error");
        break;
    case 0x5af820:
        i_parser.PrintString("HwpReturnCode", " RC_P9_ADU_STATUS_REG_ERR_ADDR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_adu_coherent_utils The ALTD_STATUS_REGISTER contains unexpected status with an indication of a combined response address error");
        break;
    case 0xf37da0:
        i_parser.PrintString("HwpReturnCode", "RC_P9_ADU_COHERENT_UTILS_LOCK_ERR");
        i_parser.PrintString("HWP Error description", "Procedure:p9_adu_coherent_utils Number of lock attempts exceeded when attempting to acquire the ADU lock or error occured when attempting to pick the ADU lock");
        break;
    case 0xdf4492:
        i_parser.PrintString("HwpReturnCode", "RC_P9_ADU_COHERENT_UTILS_EXTRA_INPUT_DATA");
        i_parser.PrintString("HWP Error description", "Procedure:p9_adu_coherent_utils Error code used to collect HWP input arguments");
        break;
    case 0x898265:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_AVSBUS_POLL_TIMEOUT");
        i_parser.PrintString("HWP Error description", "A timeout occured while polling OCB status register O2SST for o2s_ongoing=0");
        break;
    case 0x6f6e83:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_AVSBUS_VOLTAGE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "A timeout occured reading/writing voltage from an AVSBus interface");
        break;
    case 0xb5f060:
        i_parser.PrintString("HwpReturnCode", "RC_PROCPM_AVSBUS_IDLEFRAME_TIMEOUT");
        i_parser.PrintString("HWP Error description", "A timeout occured writing an idle from to an AVSBus interface");
        break;
    case 0xc9b7f3:
        i_parser.PrintString("HwpReturnCode", "RC_PM_AVSBUS_ZERO_RESP_ERROR");
        i_parser.PrintString("HWP Error description", "AVS command failed. All 0 response data received possibly due to AVSBus IO RI/DIs disabled.");
        break;
    case 0xf7f170:
        i_parser.PrintString("HwpReturnCode", "RC_PM_AVSBUS_NO_RESP_ERROR");
        i_parser.PrintString("HWP Error description", "AVS command failed. No response from VRM device, Check AVSBus interface connectivity to VRM in system.");
        break;
    case 0x0e1382:
        i_parser.PrintString("HwpReturnCode", "RC_PM_AVSBUS_MASTER_BAD_CRC_ERROR");
        i_parser.PrintString("HWP Error description", "AVS command failed. Bad CRC detected by P9 on AVSBus Slave Segement.");
        break;
    case 0xbf1f21:
        i_parser.PrintString("HwpReturnCode", "RC_PM_AVSBUS_SLAVE_BAD_CRC_ERROR");
        i_parser.PrintString("HWP Error description", "AVS command failed failed. Bad CRC indicated by Slave VRM on AVSBus Master Segement.");
        break;
    case 0x0423fb:
        i_parser.PrintString("HwpReturnCode", "RC_PM_AVSBUS_UNAVAILABLE_RESOURCE_ERROR");
        i_parser.PrintString("HWP Error description", "AVS command failed. Valid data sent but no action is taken due to unavailable resource.");
        break;
    case 0x38aedf:
        i_parser.PrintString("HwpReturnCode", "RC_PM_AVSBUS_INVALID_DATA_ERROR");
        i_parser.PrintString("HWP Error description", "AVS command failed. Unknown resource, invalid data, incorrect data or incorrect action.");
        break;
    case 0x5c7b9f:
        i_parser.PrintString("HwpReturnCode", "RC_INVALID_VOLTAGE_RAIL");
        i_parser.PrintString("HWP Error description", "Procedure: p9_avsbus_cmds Invalid input voltage rail detected.");
        break;
    case 0x3cdada:
        i_parser.PrintString("HwpReturnCode", "RC_BLOCK_WAKEUP_INTR_OP");
        i_parser.PrintString("HWP Error description", "Unknown operation passed to p9_block_wakeup_intr");
        break;
    case 0xbc1b90:
        i_parser.PrintString("HwpReturnCode", "RC_BLOCK_WAKEUP_INTR_CHECK_FAIL");
        i_parser.PrintString("HWP Error description", "Test of p9_block_wakeup_intr failed. Note: this is NOT a production error definition; used by test infrastructure.");
        break;
    case 0xfa2256:
        i_parser.PrintString("HwpReturnCode", "RC_P9_BUILD_SMP_MASTER_DESIGNATION_ERR");
        i_parser.PrintString("HWP Error description", "Node or system master chip designation error.");
        break;
    case 0xee6a8d:
        i_parser.PrintString("HwpReturnCode", "RC_P9_BUILD_SMP_GROUP_ADD_INTERNAL_ERR");
        i_parser.PrintString("HWP Error description", "Internal program error. SMP data structure map insert failed.");
        break;
    case 0x9b0795:
        i_parser.PrintString("HwpReturnCode", "RC_P9_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR");
        i_parser.PrintString("HWP Error description", "Multiple chips found with identical fabric node/chip ID attribute values.");
        break;
    case 0xc0fed7:
        i_parser.PrintString("HwpReturnCode", "RC_P9_BUILD_SMP_MULTIPLE_MASTER_DESIGNATION_ERR");
        i_parser.PrintString("HWP Error description", "Input parameter designating post-reconfiguration master chip matches more than one chip in HWP input targets to process.");
        break;
    case 0x17100f:
        i_parser.PrintString("HwpReturnCode", "RC_P9_BUILD_SMP_NO_MASTER_DESIGNATION_ERR");
        i_parser.PrintString("HWP Error description", "Input parameter designating post-reconfiguration master chip does not match any chips in HWP input targets to process.");
        break;
    case 0xfce771:
        i_parser.PrintString("HwpReturnCode", "RC_P9_BUILD_SMP_MAX_SIZE_ERR");
        i_parser.PrintString("HWP Error description", "Number of chips in HWP input arguments exceeds supported SMP size");
        break;
    case 0x20b2d2:
        i_parser.PrintString("HwpReturnCode", "RC_P9_BUILD_SMP_INVALID_TOPOLOGY");
        i_parser.PrintString("HWP Error description", "Invalid fabric topology specified by input parameters.");
        break;
    case 0x739789:
        i_parser.PrintString("HwpReturnCode", "RC_P9_BUILD_SMP_HOTPLUG_SHADOW_ERR");
        i_parser.PrintString("HWP Error description", "Fabric hotplug (CURR or NEXT) shadow register contents are not equivalent.");
        break;
    case 0x9f5cbf:
        i_parser.PrintString("HwpReturnCode", "RC_P9_BUILD_SMP_BAD_ADU_ACTION_ERR");
        i_parser.PrintString("HWP Error description", "Invalid ADU action specified.");
        break;
    case 0x8263e3:
        i_parser.PrintString("HwpReturnCode", "RC_P9_BUILD_SMP_ADU_STATUS_MISMATCH_ERR");
        i_parser.PrintString("HWP Error description", "Status mismatch detected on ADU operation execution for SMP configuration.");
        break;
    case 0x147209:
        i_parser.PrintString("HwpReturnCode", "RC_P9_BUILD_SMP_UNKNOWN_CD_HP_ERR");
        i_parser.PrintString("HWP Error description", "Program logic error -- attempted to run non-existent CD HP initfile");
        break;
    case 0x3625cf:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_INVALID_ARGS");
        i_parser.PrintString("HWP Error description", "Invalid or out-of-range argument value(s) presented to proc_cen_framelock HWP.");
        break;
    case 0x702686:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_P9_FIR_ERR_DMI");
        i_parser.PrintString("HWP Error description", "Framelock sequence set FIR bit in P9 MCI FIR Register. FIR bit indicates DMI issue.");
        break;
    case 0xf36498:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_P9_FIR_ERR_MEMBUF");
        i_parser.PrintString("HWP Error description", "Framelock sequence set FIR bit in P9 MCI FIR Register. FIR bit indicates MEMBUF issue.");
        break;
    case 0x2b0328:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P9_FIR_ERR_DMI");
        i_parser.PrintString("HWP Error description", "Framelock errstate sequence set FIR bit in P9 MCI FIR Register. FIR bit indicates DMI issue.");
        break;
    case 0x1e160e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P9_FIR_ERR_MEMBUF");
        i_parser.PrintString("HWP Error description", "Framelock errstate sequence set FIR bit in P9 MCI FIR Register. FIR bit indicates MEMBUF issue.");
        break;
    case 0x25dae2:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FIR_ERR");
        i_parser.PrintString("HWP Error description", "Framelock errstate sequence set FIR bit in Centaur MBI FIR Register.");
        break;
    case 0x307801:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_P9_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "Framelock sequence fail reported in P9 MCI Status Register.");
        break;
    case 0x9a69b6:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_P9_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "Framelock errstate sequence fail reported in P9 MCI Status Register.");
        break;
    case 0xb9cfa7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_CEN_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "Framelock errstate sequence fail reported in Centaur MBI Status Register.");
        break;
    case 0xc4f88a:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR");
        i_parser.PrintString("HWP Error description", "Framelock sequence timed out waiting for pass/fail indication in P9 MCI Status Register.");
        break;
    case 0x8f88f7:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FL_TIMEOUT_ERR");
        i_parser.PrintString("HWP Error description", "Framelock errstate sequence timed out waiting for pass/fail indication in P9 MCI Status Register.");
        break;
    case 0x793c30:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_P9_FIR_ERR_DMI");
        i_parser.PrintString("HWP Error description", "FRTL sequence set FIR bit in P9 MCI FIR Register. FIR bit indicates DMI issue.");
        break;
    case 0xf3f074:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_P9_FIR_ERR_MEMBUF");
        i_parser.PrintString("HWP Error description", "FRTL sequence set FIR bit in P9 MCI FIR Register. FIR bit indicates MEMBUF issue.");
        break;
    case 0x05d491:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P9_FIR_ERR_DMI");
        i_parser.PrintString("HWP Error description", "FRTL manual sequence set FIR bit in P9 MCI FIR Register. FIR bit indicates DMI issue.");
        break;
    case 0xd70c0d:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P9_FIR_ERR_MEMBUF");
        i_parser.PrintString("HWP Error description", "FRTL manual sequence set FIR bit in P9 MCI FIR Register. FIR bit indicates MEMBUF issue.");
        break;
    case 0x2661fd:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P9_FIR_ERR_DMI");
        i_parser.PrintString("HWP Error description", "FRTL errstate sequence set FIR bit in P9 MCI FIR Register. FIR bit indicates DMI issue.");
        break;
    case 0x0889b3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P9_FIR_ERR_MEMBUF");
        i_parser.PrintString("HWP Error description", "FRTL errstate sequence set FIR bit in P9 MCI FIR Register. FIR bit indicates MEMBUF issue.");
        break;
    case 0x93571e:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FIR_ERR");
        i_parser.PrintString("HWP Error description", "FRTL mannual sequence set FIR bit in Centaur MBI FIR Register.");
        break;
    case 0x3035ac:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FIR_ERR");
        i_parser.PrintString("HWP Error description", "FRTL errstate sequence set FIR bit in Centaur MBI FIR Register.");
        break;
    case 0xdb8467:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_P9_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "FRTL sequence fail reported in P9 MCI Status Register.");
        break;
    case 0x841b50:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_P9_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "FRTL manual sequence fail reported in P9 MCI Status Register.");
        break;
    case 0xae24f5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_P9_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "FRTL errstate sequence fail reported in P9 MCI Status Register.");
        break;
    case 0xd1f927:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_CEN_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "FRTL manual sequence fail reported in Centaur MBI Status Register.");
        break;
    case 0x2d2459:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_CEN_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "FRTL errstate sequence fail reported in Centaur MBI Status Register.");
        break;
    case 0xdcd227:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("HWP Error description", "FRTL sequence timed out waiting for pass/fail indication in P9 MCI Status Register.");
        break;
    case 0x4dd245:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_MANUAL_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("HWP Error description", "FRTL manual sequence timed out waiting for pass/fail indication in Centaur MBI Status Register or P9 MCI Status Register.");
        break;
    case 0x62b344:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_CEN_FRAMELOCK_ERRSTATE_FRTL_TIMEOUT_ERR");
        i_parser.PrintString("HWP Error description", "FRTL errstate sequence timed out waiting for pass/fail indication in Centaur MBI Status Register or P9 MCI Status Register.");
        break;
    case 0x604ae7:
        i_parser.PrintString("HwpReturnCode", "RC_P9_CEN_REF_CLK_ENABLE_SWIZZLE_BIT_OUT_OF_RANGE_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_cen_ref_clk_enable Swizzle bit in Root CTRL6 is out of range");
        break;
    case 0x9b52bd:
        i_parser.PrintString("HwpReturnCode", "RC_SGPE_HCODE_HALTED");
        i_parser.PrintString("HWP Error description", "SGPE Hcode is in HALT state");
        break;
    case 0x8597b7:
        i_parser.PrintString("HwpReturnCode", "RC_SGPE_HW_HALTED");
        i_parser.PrintString("HWP Error description", "SGPE is in HALT state due to an error detected by hardware");
        break;
    case 0xbcfbc2:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_ATTENTION");
        i_parser.PrintString("HWP Error description", "Special Attention is detected in core");
        break;
    case 0x402947:
        i_parser.PrintString("HwpReturnCode", "RC_CME_NOT_ACCESSIBLE");
        i_parser.PrintString("HWP Error description", "CME is not accessible");
        break;
    case 0x54b4c8:
        i_parser.PrintString("HwpReturnCode", "RC_SGPE_NOT_ACCESSIBLE");
        i_parser.PrintString("HWP Error description", "SGPE is not accessible");
        break;
    case 0x944d51:
        i_parser.PrintString("HwpReturnCode", "RC_CME_HCODE_HALTED");
        i_parser.PrintString("HWP Error description", "CME halt due to hardware error");
        break;
    case 0xb47773:
        i_parser.PrintString("HwpReturnCode", "RC_CME_ERROR_HALT");
        i_parser.PrintString("HWP Error description", "CME Hardware is in HALT state.");
        break;
    case 0xca88f9:
        i_parser.PrintString("HwpReturnCode", "RC_UNKNOWN_PM_STATE");
        i_parser.PrintString("HWP Error description", "PM Complex in unknown state.");
        break;
    case 0x29d44f:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_OBUS_BRICK_POSITION");
        i_parser.PrintString("HWP Error description", "OBus brick position is unexpected or incorrect.");
        break;
    case 0x33d30f:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_PROC_TARGET");
        i_parser.PrintString("HWP Error description", "Processor target passed as input is either not functional or not valid.");
        break;
    case 0x47f2f4:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_INPUT_BUFFER");
        i_parser.PrintString("HWP Error description", "Input buffer which should point to HOMER base is not valid.");
        break;
    case 0x006e8e:
        i_parser.PrintString("HwpReturnCode", "RC_P9_CHIPLET_SCOMINIT_UNSUPPORTED_OBRICK_POS_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_chiplet_scominit OBUS BRICK target position not supported.");
        break;
    case 0x3fd011:
        i_parser.PrintString("HwpReturnCode", "RC_CME_SRAM_ACCESS_ERROR");
        i_parser.PrintString("HWP Error description", "Incorrect Address passed to CME SRAM Display routine");
        break;
    case 0xbe25f2:
        i_parser.PrintString("HwpReturnCode", "RC_COLLECT_PPE_FFDC");
        i_parser.PrintString("HWP Error description", "Collect PPE internal state as additional FFDC - test only");
        break;
    case 0xdafae4:
        i_parser.PrintString("HwpReturnCode", "RC_PPE_BASE_ADDR_XIXCR");
        i_parser.PrintString("HWP Error description", "PPE Instance Base Address Used for Ramming");
        break;
    case 0xbb5207:
        i_parser.PrintString("HwpReturnCode", "RC_PPE_STATE_DATA_SPR");
        i_parser.PrintString("HWP Error description", "PPE SPR Data");
        break;
    case 0xcc28b4:
        i_parser.PrintString("HwpReturnCode", "RC_PPE_STATE_DATA_XIR");
        i_parser.PrintString("HWP Error description", "PPE XIR Data");
        break;
    case 0x3af267:
        i_parser.PrintString("HwpReturnCode", "RC_PPE_STATE_DATA_GPR");
        i_parser.PrintString("HWP Error description", "PPE GPR Data");
        break;
    case 0xb3f469:
        i_parser.PrintString("HwpReturnCode", "RC_PIB_ERROR_1");
        i_parser.PrintString("HWP Error description", "Return code used for testing collectFfdc - returns single piece of data");
        break;
    case 0xb669d1:
        i_parser.PrintString("HwpReturnCode", "RC_PIB_ERROR_2");
        i_parser.PrintString("HWP Error description", "Return code used for testing collectFfdc - returns two pieces of ffdc data");
        break;
    case 0xd42f6e:
        i_parser.PrintString("HwpReturnCode", "RC_PFET_FORCE_STATE_ERROR");
        i_parser.PrintString("HWP Error description", "SCOM request failed.");
        break;
    case 0x23feb3:
        i_parser.PrintString("HwpReturnCode", "RC_VDD_CORE_PFET_TIMEOUT");
        i_parser.PrintString("HWP Error description", "PFET sequencer timed out in p9_pfet_control. Bad Core Chiplet");
        break;
    case 0xa951d4:
        i_parser.PrintString("HwpReturnCode", "RC_VDD_QUAD_PFET_TIMEOUT");
        i_parser.PrintString("HWP Error description", "PFET sequencer timed out in p9_pfet_control. Bad EQ Chiplet");
        break;
    case 0xe94555:
        i_parser.PrintString("HwpReturnCode", "RC_VCS_CORE_PFET_TIMEOUT");
        i_parser.PrintString("HWP Error description", "PFET sequencer timed out in p9_pfet_control. Bad Core Chiplet");
        break;
    case 0xca8bf9:
        i_parser.PrintString("HwpReturnCode", "RC_VCS_QUAD_PFET_TIMEOUT");
        i_parser.PrintString("HWP Error description", "PFET sequencer timed out in p9_pfet_control. Bad EQ Chiplet");
        break;
    case 0xb42382:
        i_parser.PrintString("HwpReturnCode", "RC_CBS_ACK_NOT_SEEN_ERR");
        i_parser.PrintString("HWP Error description", "CBS_ACK did not transition within timeout");
        break;
    case 0x7fce2c:
        i_parser.PrintString("HwpReturnCode", "RC_SPCWKUP_EQ_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Special wakeup to EQ chiplet timed out.");
        break;
    case 0xb12b5b:
        i_parser.PrintString("HwpReturnCode", "RC_SPCWKUP_EX_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Special wakeup to EX chiplet timed out.");
        break;
    case 0x710114:
        i_parser.PrintString("HwpReturnCode", "RC_SPCWKUP_CORE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Special wakeup to core chiplet timed out.");
        break;
    case 0x9a4ec6:
        i_parser.PrintString("HwpReturnCode", "RC_INTERNAL_SPCWKUP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Special wakeup for targeted chiplet timed out. It is an internal return code and will not show up in platform error log.");
        break;
    case 0xe1a2af:
        i_parser.PrintString("HwpReturnCode", "RC_SPCWKUP_CODE_BAD_ENTITY");
        i_parser.PrintString("HWP Error description", "An invalid entity (eg besides FSP, OCC, or PHYP ENUM) was passed to p9_cpu_special_wakeup");
        break;
    case 0x1baaf8:
        i_parser.PrintString("HwpReturnCode", "RC_SPCWKUP_CODE_BAD_OP");
        i_parser.PrintString("HWP Error description", "An invalid operation (eg besides Set or Clear ENUM) was passed to p9_cpu_special_wakeup");
        break;
    case 0x3cd452:
        i_parser.PrintString("HwpReturnCode", "RC_SPCWKUP_CHKSTOP");
        i_parser.PrintString("HWP Error description", "Special_wakeup requested with the system checkstopped and ATTR_PM_SPWUP_IGNORE_XSTOP_FLAG not set");
        break;
    case 0x63dcd5:
        i_parser.PrintString("HwpReturnCode", "RC_SPCWKUP_STOP_IN_CHKSTOP");
        i_parser.PrintString("HWP Error description", "Special_wakeup requested to a chiplet in a STOP state with the system checkstopped. Calling firmware will have to check for this return code to influence dump flow. Note: this is NOT a loggable error.");
        break;
    case 0x2585e3:
        i_parser.PrintString("HwpReturnCode", "RC_SPCWKUP_NOT_SET");
        i_parser.PrintString("HWP Error description", "Special wake-up done is not set but a platform COUNT greater than 0 exists. Hardware and code are out of sync.");
        break;
    case 0xbb910b:
        i_parser.PrintString("HwpReturnCode", "RC_SPCWKUP_INVALID_PMHISTORY");
        i_parser.PrintString("HWP Error description", "Invalid PM History detected in p9_cpu_special_wakeup");
        break;
    case 0x06e304:
        i_parser.PrintString("HwpReturnCode", "RC_SPWKUP_EX_EVEN_CORE_ERROR");
        i_parser.PrintString("HWP Error description", "Appropriate Even Core was not found");
        break;
    case 0xe21546:
        i_parser.PrintString("HwpReturnCode", "RC_SPWKUP_EX_EQ_ERROR");
        i_parser.PrintString("HWP Error description", "Appropriate Even Core was not found");
        break;
    case 0x0ade30:
        i_parser.PrintString("HwpReturnCode", "RC_SPCWKUP_NOEXCORES");
        i_parser.PrintString("HWP Error description", "No good cores to special wake-up in targeted EX");
        break;
    case 0xb832d3:
        i_parser.PrintString("HwpReturnCode", "RC_SPCWKUP_DD1_HW389511_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Maximum number of retries reached for SCOM write (DD1 HW389511)");
        break;
    case 0xc0c7ae:
        i_parser.PrintString("HwpReturnCode", "RC_INTERNAL_SPCWKUP_IN_PROGRESS");
        i_parser.PrintString("HWP Error description", "Special wakeup is already in progress. Ignoring current request.");
        break;
    case 0xcb9045:
        i_parser.PrintString("HwpReturnCode", "RC_EX_SPECIAL_WAKEUP_NOT_FEASIBLE");
        i_parser.PrintString("HWP Error description", "Special Wakeup can't be serviced for given ex.");
        break;
    case 0xabafd7:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_SPECIAL_WAKEUP_NOT_FEASIBLE");
        i_parser.PrintString("HWP Error description", "Special Wakeup can't be serviced for given core.");
        break;
    case 0xfdba75:
        i_parser.PrintString("HwpReturnCode", "RC_QUAD_SPECIAL_WAKEUP_NOT_FEASIBLE");
        i_parser.PrintString("HWP Error description", "Special Wakeup can't be serviced for given quad.");
        break;
    case 0x641d7b:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_POWERCHECK_FAIL");
        i_parser.PrintString("HWP Error description", "VDN_PGOOD C4 pin is not set high. Action:Retrigger IPL or HRESET [RESTART_SBE]");
        break;
    case 0xd966ff:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_RUNNING");
        i_parser.PrintString("HWP Error description", "SBE engine is in running state, but an error was raised by external FW code. Action:Retrigger IPL or HRESET [RESTART_SBE]");
        break;
    case 0xfe1093:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_NEVER_STARTED");
        i_parser.PrintString("HWP Error description", "SBE engine was probably never started or SBE got halted by programming XCR to halt Action:Retrigger IPL or HRESET [RESTART_SBE]");
        break;
    case 0x72ca6f:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_PROGRAM_INTERRUPT");
        i_parser.PrintString("HWP Error description", "Program interrupt promoted Action:Retrigger IPL or HRESET [RESTART_SBE]");
        break;
    case 0xf43665:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_INST_STORE_INTR");
        i_parser.PrintString("HWP Error description", "Instruction storage interrupt Action:Retrigger IPL or HRESET [RESTART_SBE]");
        break;
    case 0x13f35a:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_ALIGN_INTR");
        i_parser.PrintString("HWP Error description", "Alignment interrupt Action:Retrigger IPL or HRESET [RESTART_SBE]");
        break;
    case 0x66847b:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_DATA_STORE_INTR");
        i_parser.PrintString("HWP Error description", "Data storage interrupt Action:Retrigger IPL or HRESET [RESTART_SBE]");
        break;
    case 0x4292c9:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED");
        i_parser.PrintString("HWP Error description", "Address scope out of range Action:Retrigger IPL or HRESET [RESTART_SBE]");
        break;
    case 0x2a7844:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_OTP_ECC_ERR_NONSECURE_MODE");
        i_parser.PrintString("HWP Error description", "Uncorrectable error detected in OTPROM memory read Action:No recovery action possible to correct this error [NO_RECOVERY_ACTION]");
        break;
    case 0xfae593:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_MAGIC_NUMBER_MISMATCH");
        i_parser.PrintString("HWP Error description", "SEEPROM magic number didn't match Action:Update of SEEPROM required or switch seeprom [REIPL_UPD_SEEPROM]");
        break;
    case 0x85286d:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_SBE_L1_LOADER_FAIL");
        i_parser.PrintString("HWP Error description", "Program Interrupt occured during base loader Action:Switch seeprom [REIPL_BKP_SEEPROM]");
        break;
    case 0x0c35ae:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_SBE_L2_LOADER_FAIL");
        i_parser.PrintString("HWP Error description", "Program Interrupt occured during L2 loader or pk boot Action:Switch seeprom [REIPL_BKP_SEEPROM]");
        break;
    case 0x08a345:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_BRANCH_TO_SEEPROM_FAIL");
        i_parser.PrintString("HWP Error description", "Branch to SEEPROM didn't happen Action:No recovery action possible to correct this error [NO_RECOVERY_ACTION]");
        break;
    case 0xa5b4ba:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_UNEXPECTED_OTPROM_HALT");
        i_parser.PrintString("HWP Error description", "Halted in OTPROM, but not at an expected halt location Action:No recovery action possible to correct this error [NO_RECOVERY_ACTION]");
        break;
    case 0xa8a695:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_PIBMEM_ECC_ERR");
        i_parser.PrintString("HWP Error description", "Uncorrectable error occurred while PIB memory access, Check if REPAIR solution is applied Action:Retrigger IPL or HRESET [RESTART_SBE]");
        break;
    case 0xd0729f:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_FI2CM_BIT_RATE_ERR_NONSECURE_MODE");
        i_parser.PrintString("HWP Error description", "I2C bit rate divisor is less than min speed value Action:Retrigger IPL or HRESET [RESTART_SBE]");
        break;
    case 0xb07cb3:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_FI2C_ERR_NONSECURE_MODE");
        i_parser.PrintString("HWP Error description", "There are an FI2C I2C Error detected Action:Switch seeprom [REIPL_BKP_SEEPROM]");
        break;
    case 0xd27c78:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_FI2C_ECC_ERR_NONSECURE_MODE");
        i_parser.PrintString("HWP Error description", "There are 2 bit flips in read data which cannot be corrected Action:Update of SEEPROM required or switch seeprom [REIPL_UPD_SEEPROM]");
        break;
    case 0x67d845:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_LOCAL_FI2C_BIT_RATE_ERROR");
        i_parser.PrintString("HWP Error description", "I2C bit rate divisor is less than min speed value Action:Retrigger IPL or HRESET [RESTART_SBE]");
        break;
    case 0x9ed4c0:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_LOCAL_FI2C_ECC_ERR");
        i_parser.PrintString("HWP Error description", "There is an ECC error reported in LOCAL_FI2C status registered Action:Update of SEEPROM required or switch seeprom [REIPL_UPD_SEEPROM]");
        break;
    case 0x2d0e8e:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_LOCAL_FI2C_STATUS_ERR");
        i_parser.PrintString("HWP Error description", "There are an FI2C local status error detected Action:Switch seeprom [REIPL_BKP_SEEPROM]");
        break;
    case 0xcc20e3:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_OTP_ECC_ERR");
        i_parser.PrintString("HWP Error description", "Uncorrectable error detected in OTPROM memory read Action:No recovery action possible to correct this error [NO_RECOVERY_ACTION]");
        break;
    case 0xe37834:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_OTP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "PIB Timeout error detected Action:Warm ipl where we don't switch off VSB just toggle start_cbs from FSP [RESTART_CBS]");
        break;
    case 0x9fb509:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_OTP_PIB_ERR");
        i_parser.PrintString("HWP Error description", "Scom error detected Action:Warm ipl where we don't switch off VSB just toggle start_cbs from FSP [RESTART_CBS]");
        break;
    case 0x6c7628:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_PIBMEM_PIB_ERR");
        i_parser.PrintString("HWP Error description", "Error detected during pibmem access Action:Warm ipl where we don't switch off VSB just toggle start_cbs from FSP [RESTART_CBS]");
        break;
    case 0xd36cbe:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_FI2C_TIMEOUT");
        i_parser.PrintString("HWP Error description", "FI2C Timeout error detected Action:Reload/update of SEEPROM required or switch seeprom [REIPL_BKP_SEEPROM]");
        break;
    case 0x45aafe:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_FI2C_ECC_ERR");
        i_parser.PrintString("HWP Error description", "There are 2 bit flips in read data which cannot be corrected Action:Update of SEEPROM required or switch seeprom [REIPL_UPD_SEEPROM]");
        break;
    case 0x14d66e:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_FI2C_SPRM_CFG_ERR");
        i_parser.PrintString("HWP Error description", "FI2C SEEPROM config error detected Action:Warm ipl where we don't switch off VSB just toggle start_cbs from FSP [RESTART_CBS]");
        break;
    case 0x1f9e04:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_FI2C_PIB_ERR");
        i_parser.PrintString("HWP Error description", "FI2C PIB error detected Action:Warm ipl where we don't switch off VSB just toggle start_cbs from FSP [RESTART_CBS]");
        break;
    case 0xb4a5c5:
        i_parser.PrintString("HwpReturnCode", "RC_EXTRACT_SBE_RC_UNKNOWN_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown error has occured, So debug has to be done to understand the error Action:Switch seeprom [REIPL_BKP_SEEPROM]");
        break;
    case 0xfd7814:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FAB_IOVALID_DL_FFDC_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_fab_iovalid FFDC collected for DL layer training failure");
        break;
    case 0x72958d:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FAB_IOVALID_TL_FFDC_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_fab_iovalid FFDC collected for TL layer training failure");
        break;
    case 0x204b70:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FAB_IOVALID_REM_ENDP_TARGET_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_fab_iovalid Attribute state (ATTR_PROC_FABRIC_[XA]_ATTACHED_CHIP_CNFG) is inconsistent with targeting model -- no matching remote endpoint target found for link which should be enabled.");
        break;
    case 0xc14a16:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FAB_IOVALID_LOC_ENDP_TARGET_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_fab_iovalid Attribute state (ATTR_PROC_FABRIC_[XA]_ATTACHED_CHIP_CNFG) is inconsistent with targeting model -- no matching local endpoint target found for link which should be enabled.");
        break;
    case 0xd66d48:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FAB_IOVALID_DL_NOT_TRAINED_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_fab_iovalid Link DL training did not complete successfully");
        break;
    case 0x47e48d:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FAB_IOVALID_TL_NOT_TRAINED_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_fab_iovalid Link TL training did not complete successfully");
        break;
    case 0xdbe0df:
        i_parser.PrintString("HwpReturnCode", "RC_FASTARRAY_ALL_PLUS_INDIVIDUAL_SPECIFIED");
        i_parser.PrintString("HWP Error description", "Additional arrays were requested together with the special ALL value.");
        break;
    case 0x40787b:
        i_parser.PrintString("HwpReturnCode", "RC_FASTARRAY_INVALID_ARRAY_ID");
        i_parser.PrintString("HWP Error description", "An unknown array ID was requested.");
        break;
    case 0xd021e9:
        i_parser.PrintString("HwpReturnCode", "RC_FASTARRAY_TARGET_MISMATCH");
        i_parser.PrintString("HWP Error description", "An array ID was requested that does not belong to the target");
        break;
    case 0x39b0af:
        i_parser.PrintString("HwpReturnCode", "RC_FASTARRAY_UNKNOWN_RING");
        i_parser.PrintString("HWP Error description", "An array specified a ring ID that was not defined in the ring table");
        break;
    case 0x3fcf61:
        i_parser.PrintString("HwpReturnCode", "RC_RS5_RANGE_OUT_OF_ORDER");
        i_parser.PrintString("HWP Error description", "A range was added to an RS5 care list that violated the in order of increasing start bit requirement.");
        break;
    case 0xe1e9f1:
        i_parser.PrintString("HwpReturnCode", "RC_RS5_LENGTH_OVERFLOW");
        i_parser.PrintString("HWP Error description", "An RS5 length value exceeded the maximum value for variable-length integers.");
        break;
    case 0x284fb6:
        i_parser.PrintString("HwpReturnCode", "RC_FASTARRAY_INVALID_SWIZZLE_MODE");
        i_parser.PrintString("HWP Error description", "An invalid row/bit swizzle mode has been used in a fastarray description.");
        break;
    case 0x621adb:
        i_parser.PrintString("HwpReturnCode", "RC_FASTARRAY_SCAN_TIMEOUT");
        i_parser.PrintString("HWP Error description", "A long rotate operation did not complete within 100ms");
        break;
    case 0x68d14a:
        i_parser.PrintString("HwpReturnCode", "RC_FASTARRAY_HEADER_CHECK_FAILED");
        i_parser.PrintString("HWP Error description", "The header check failed after a scan operation");
        break;
    case 0x4a5847:
        i_parser.PrintString("HwpReturnCode", "RC_FASTARRAY_CLOCK_TIMEOUT");
        i_parser.PrintString("HWP Error description", "An attempt to clock ABIST cycles did not complete within 100ms");
        break;
    case 0xe1dd3d:
        i_parser.PrintString("HwpReturnCode", "RC_FASTARRAY_CLEANUP_NOT_DONE");
        i_parser.PrintString("HWP Error description", "ABIST_DONE did not assert within 64K cycles during fastarray cleanup");
        break;
    case 0x982af1:
        i_parser.PrintString("HwpReturnCode", "RC_FASTARRAY_UNKNOWN_CHIP_EC");
        i_parser.PrintString("HWP Error description", "There is no fastarray control data available for the requested chip type / EC");
        break;
    case 0x2afa89:
        i_parser.PrintString("HwpReturnCode", "RC_FASTARRAY_INVALID_FARR_FLAG");
        i_parser.PrintString("HWP Error description", "An unknown flag was requested.");
        break;
    case 0x9ef7d3:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FBC_EFF_CONFIG_AGGREGATE_INVALID_CONFIG_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_fbc_eff_config_aggregate Invalid aggregate link conifguration detected Each chip may have at most: One aggregate X link destination One aggregate A link destination");
        break;
    case 0x2ab5c6:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FBC_EFF_CONFIG_EPSILON_INVALID_TABLE_TYPE_ERR");
        i_parser.PrintString("HWP Error description", "Invalid epsilon table type or content detected.");
        break;
    case 0x682703:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FBC_EFF_CONFIG_EPSILON_INVALID_TABLE_ERR");
        i_parser.PrintString("HWP Error description", "Invalid epsilon table type or content detected.");
        break;
    case 0xeaa4ac:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FBC_EFF_CONFIG_CORE_FREQ_RANGE_ERR");
        i_parser.PrintString("HWP Error description", "Invalid relationship between ceiling/nominal/floor core frequency attributes.");
        break;
    case 0x5b6cad:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FBC_EFF_CONFIG_CORE_FLOOR_FREQ_RATIO_ERR");
        i_parser.PrintString("HWP Error description", "Unsupported core floor to PB frequency ratio.");
        break;
    case 0x251a35:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FBC_EFF_CONFIG_CORE_CEILING_FREQ_RATIO_ERR");
        i_parser.PrintString("HWP Error description", "Unsupported core ceiling to PB frequency ratio.");
        break;
    case 0x0d87eb:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FBC_EFF_CONFIG_LINKS_CHIP_ID_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_fbc_eff_config_links Two chips expected to lie in different FBC groups (X connected with CHIP_IS_GROUP, OR A connected) do not have the same FBC chip ID");
        break;
    case 0xbed815:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FBC_EFF_CONFIG_LINKS_GROUP_ID_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_fbc_eff_config_links Two chips expected to lie in the same FBC group (X connected with CHIP_IS_NODE) do not have the same FBC group ID");
        break;
    case 0x46f36a:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FBC_EFF_CONFIG_LINKS_LOOKUP_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_fbc_eff_config_links Unable to find matching X/A link for unit endpoint target");
        break;
    case 0x3872e8:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FBC_UTILS_FABRIC_GROUP_ID_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Invalid definition for fabric group ID attribute value.");
        break;
    case 0x78576e:
        i_parser.PrintString("HwpReturnCode", "RC_P9_FBC_UTILS_FABRIC_CHIP_ID_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Invalid definition for fabric chip ID attribute value.");
        break;
    case 0x6cda8f:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEM_VPD_MAPPING_TOO_SMALL");
        i_parser.PrintString("HWP Error description", "Mapping keyword smaller than minimum expected");
        break;
    case 0x0b7dab:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEM_VPD_UNSUPPORTED_VERSION");
        i_parser.PrintString("HWP Error description", "Version in vpd mapping keyword not supported");
        break;
    case 0x1dc3bf:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEM_VPD_UNSUPPORTED_TYPE");
        i_parser.PrintString("HWP Error description", "Type not supported. Supported types are MR, MT, DQ, and CK");
        break;
    case 0x43f9e5:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEM_VPD_UNSUPPORTED_FREQUENCY");
        i_parser.PrintString("HWP Error description", "Frequency not in ATTR_MEMVPD_FREQS_MHZ");
        break;
    case 0x58670d:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEM_VPD_UNSUPPORTED_RANK");
        i_parser.PrintString("HWP Error description", "Invalid Rank. Valid values are 0,1,2 and 4");
        break;
    case 0xda227e:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEM_VPD_UNSUPPORTED_CONFIG");
        i_parser.PrintString("HWP Error description", "No keyword specified for MCS, Ranks, and frequency");
        break;
    case 0x1867fb:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEM_VPD_ENTRY_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Entry outside of possible entries");
        break;
    case 0x88c0d8:
        i_parser.PrintString("HwpReturnCode", "RC_GET_MEM_VPD_POS_OUT_OF_RANGE");
        i_parser.PrintString("HWP Error description", "ATTR_MEMVPD_POS is out of range");
        break;
    case 0xc6f112:
        i_parser.PrintString("HwpReturnCode", "RC_CACHE_DPLL_LOCK_TIMEOUT");
        i_parser.PrintString("HWP Error description", "DPLL is not locking.");
        break;
    case 0x56bc59:
        i_parser.PrintString("HwpReturnCode", "RC_CACHE_DPLL_CLK_START_TIMEOUT");
        i_parser.PrintString("HWP Error description", "dpll clock start timed out.");
        break;
    case 0x222c41:
        i_parser.PrintString("HwpReturnCode", "RC_CACHE_DPLL_CLK_START_FAILED");
        i_parser.PrintString("HWP Error description", "dpll clock start failed.");
        break;
    case 0xf4daa4:
        i_parser.PrintString("HwpReturnCode", "RC_NDD1_CACHE_INITF_INCORRECT_EQ_SCAN64_VAL");
        i_parser.PrintString("HWP Error description", "Data mis-match on EQ_SCAN64, for Nimbus DD1 MPIPL workaround only");
        break;
    case 0xabad7f:
        i_parser.PrintString("HwpReturnCode", "RC_CACHE_SCOMINIT_NO_GOOD_CORE_IN_EX");
        i_parser.PrintString("HWP Error description", "no partial good core in partial good ex, check qcsr configuration");
        break;
    case 0x044a83:
        i_parser.PrintString("HwpReturnCode", "RC_CACHE_CPLT_ALIGN_TIMEOUT");
        i_parser.PrintString("HWP Error description", "cache chiplets alignment timed out.");
        break;
    case 0xb13094:
        i_parser.PrintString("HwpReturnCode", "RC_CACHE_CHECKSTOP_AFTER_CLK_START");
        i_parser.PrintString("HWP Error description", "cache chiplet detects a checkstop after cache chiplet clock starts.");
        break;
    case 0xad0353:
        i_parser.PrintString("HwpReturnCode", "RC_CACHE_CLK_SYNC_TIMEOUT");
        i_parser.PrintString("HWP Error description", "L2 EXs clock sync done timed out.");
        break;
    case 0x6d0b25:
        i_parser.PrintString("HwpReturnCode", "RC_CACHE_CLK_START_FAILED");
        i_parser.PrintString("HWP Error description", "cache clock start failed.");
        break;
    case 0x341c6c:
        i_parser.PrintString("HwpReturnCode", "RC_CACHE_CLK_START_TIMEOUT");
        i_parser.PrintString("HWP Error description", "cache clock start timed out.");
        break;
    case 0xd8326f:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CACHECLKSYNCDROP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "L2 EXs clock sync done drop timed out.");
        break;
    case 0xff4dec:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CACHECLKSTOP_FAILED");
        i_parser.PrintString("HWP Error description", "cache clock stop failed.");
        break;
    case 0xb6df58:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CACHECLKSTOP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "cache clock stop timed out.");
        break;
    case 0x97eb9b:
        i_parser.PrintString("HwpReturnCode", "RC_QPPM_QCCR_PB_PURGE_DONE_LVL_TIMEOUT");
        i_parser.PrintString("HWP Error description", "A timeout occured while waiting for Acknowledgement from Powerbus that the buffers are empty and can safely be fenced and clocked off");
        break;
    case 0xd0321a:
        i_parser.PrintString("HwpReturnCode", "RC_CACHE_STOPCLKS_PGPE_HALT_TIMEOUT");
        i_parser.PrintString("HWP Error description", "A timeout occured while waiting the PGPE to halt");
        break;
    case 0xd7f399:
        i_parser.PrintString("HwpReturnCode", "RC_CACHE_STOPCLKS_SGPE_HALT_TIMEOUT");
        i_parser.PrintString("HWP Error description", "A timeout occured while waiting the SGPE to halt");
        break;
    case 0xcc7ba8:
        i_parser.PrintString("HwpReturnCode", "RC_CACHE_STOPCLKS_ATOMIC_LOCK_FAIL");
        i_parser.PrintString("HWP Error description", "Failed attempt to clear the atomic lock to the cache chiplet");
        break;
    case 0xb30329:
        i_parser.PrintString("HwpReturnCode", "RC_CACHE_STOPCLKS_CME_HALT_TIMEOUT");
        i_parser.PrintString("HWP Error description", "A timeout occured while waiting a CME to halt");
        break;
    case 0x1a0dd9:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_CPLT_ALIGN_TIMEOUT");
        i_parser.PrintString("HWP Error description", "core chiplets alignment timed out.");
        break;
    case 0xf07eae:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_CPLT_ALIGN_FAILED");
        i_parser.PrintString("HWP Error description", "core chiplets alignment failed.");
        break;
    case 0xac9a04:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_CHECKSTOP_AFTER_CLK_START");
        i_parser.PrintString("HWP Error description", "core chiplet detects a checkstop after core chiplet clock starts.");
        break;
    case 0xd6ceb0:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_CLK_SYNC_TIMEOUT");
        i_parser.PrintString("HWP Error description", "core clock sync done timed out.");
        break;
    case 0x51dc93:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_CLK_START_FAILED");
        i_parser.PrintString("HWP Error description", "core clock start failed.");
        break;
    case 0x6be01a:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_CLK_START_TIMEOUT");
        i_parser.PrintString("HWP Error description", "core clock start timed out.");
        break;
    case 0x9d8e31:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_COREPCBMUX_TIMEOUT");
        i_parser.PrintString("HWP Error description", "polling for pcb mux grant timed out.");
        break;
    case 0x01eff1:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CORECLKSYNCDROP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "core clock sync done drop timed out.");
        break;
    case 0xf74289:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CORECLKSTOP_FAILED");
        i_parser.PrintString("HWP Error description", "core clock stop failed.");
        break;
    case 0x86331b:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_CORECLKSTOP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "core clock stop timed out.");
        break;
    case 0xecc46d:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_STOPCLKS_PGPE_HALT_TIMEOUT");
        i_parser.PrintString("HWP Error description", "A timeout occured while waiting the PGPE to halt");
        break;
    case 0x86abc2:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_STOPCLKS_SGPE_HALT_TIMEOUT");
        i_parser.PrintString("HWP Error description", "A timeout occured while waiting the SGPE to halt");
        break;
    case 0x50561c:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_STOPCLKS_ATOMIC_LOCK_FAIL");
        i_parser.PrintString("HWP Error description", "Failed attempt to clear the atomic lock to the cache chiplet");
        break;
    case 0x441e97:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_STOPCLKS_CME_HALT_TIMEOUT");
        i_parser.PrintString("HWP Error description", "A timeout occured while waiting a CME to halt");
        break;
    case 0x033b72:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_L2CLKSYNCDROP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "L2 clock sync done drop timed out.");
        break;
    case 0x364203:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_L2CLKSTOP_FAILED");
        i_parser.PrintString("HWP Error description", "L2 clock stop failed.");
        break;
    case 0xd6b0d5:
        i_parser.PrintString("HwpReturnCode", "RC_PMPROC_L2CLKSTOP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "L2 clock stop timed out.");
        break;
    case 0xb352cc:
        i_parser.PrintString("HwpReturnCode", "RC_HW_IMG_PTR_ERROR");
        i_parser.PrintString("HWP Error description", "HW Image pointer is either NULL or points to same location as HOMER base");
        break;
    case 0x630a6e:
        i_parser.PrintString("HwpReturnCode", "RC_HOMER_IMG_PTR_ERROR");
        i_parser.PrintString("HWP Error description", "HOMER Image pointer is NULL");
        break;
    case 0x0e6cc2:
        i_parser.PrintString("HwpReturnCode", "RC_HW_IMAGE_INVALID_SIZE");
        i_parser.PrintString("HWP Error description", "Hardware Image size is not in expected range");
        break;
    case 0x20f7f8:
        i_parser.PrintString("HwpReturnCode", "RC_HCODE_INVALID_PHASE");
        i_parser.PrintString("HWP Error description", "Invalid or unsupported build phase passed to the HOMER build procedure");
        break;
    case 0x78987a:
        i_parser.PrintString("HwpReturnCode", "RC_HCODE_INVALID_TEMP1_BUF");
        i_parser.PrintString("HWP Error description", "Temporary buffer1 is invalid");
        break;
    case 0x779683:
        i_parser.PrintString("HwpReturnCode", "RC_HCODE_INVALID_TEMP1_BUF_SIZE");
        i_parser.PrintString("HWP Error description", "Invalid size for temp buf1");
        break;
    case 0xf1f3a1:
        i_parser.PrintString("HwpReturnCode", "RC_HCODE_INVALID_TEMP2_BUF");
        i_parser.PrintString("HWP Error description", "Temporary buffer2 is invalid");
        break;
    case 0x7e4864:
        i_parser.PrintString("HwpReturnCode", "RC_HCODE_INVALID_TEMP2_BUF_SIZE");
        i_parser.PrintString("HWP Error description", "Invalid size for temp buf2");
        break;
    case 0xb343fb:
        i_parser.PrintString("HwpReturnCode", "RC_HCODE_INVALID_TEMP3_BUF");
        i_parser.PrintString("HWP Error description", "Temporary buffer3 is invalid.");
        break;
    case 0x868695:
        i_parser.PrintString("HwpReturnCode", "RC_HCODE_INVALID_TEMP3_BUF_SIZE");
        i_parser.PrintString("HWP Error description", "Invalid size for temp buf3");
        break;
    case 0x4fe0ae:
        i_parser.PrintString("HwpReturnCode", "RC_HCODE_INVALID_TEMP4_BUF");
        i_parser.PrintString("HWP Error description", "Temporary buffer4 is invalid.");
        break;
    case 0x0d05b3:
        i_parser.PrintString("HwpReturnCode", "RC_HCODE_INVALID_TEMP4_BUF_SIZE");
        i_parser.PrintString("HWP Error description", "Invalid size for temp buf4");
        break;
    case 0x507384:
        i_parser.PrintString("HwpReturnCode", "RC_HCODE_INVALID_IMG_TYPE");
        i_parser.PrintString("HWP Error description", "Invalid image type passed for hcode image build.");
        break;
    case 0xd08976:
        i_parser.PrintString("HwpReturnCode", "RC_SGPE_IMG_NOT_FOUND_IN_HW_IMG");
        i_parser.PrintString("HWP Error description", "SGPE Image not found in hardware image");
        break;
    case 0xcb102a:
        i_parser.PrintString("HwpReturnCode", "RC_QPMR_HDR_BUILD_FAILURE");
        i_parser.PrintString("HWP Error description", "Failed to update QPMR Header region of HOMER. Note: 0xFFFFFFFF in field MAX_ALLOWED_SIZE is an invalid size suggesting that image section is not found");
        break;
    case 0xecbd95:
        i_parser.PrintString("HwpReturnCode", "RC_SGPE_BOOT_COPIER_BUILD_FAILURE");
        i_parser.PrintString("HWP Error description", "Failed to update SGPE boot copier region of HOMER. Note: 0xFFFFFFFF in field MAX_ALLOWED_SIZE is an invalid size suggesting that image section is not found");
        break;
    case 0xc52f14:
        i_parser.PrintString("HwpReturnCode", "RC_SGPE_BOOT_LOADER_BUILD_FAILURE");
        i_parser.PrintString("HWP Error description", "Failed to update SGPE boot loader region of HOMER. Note: 0xFFFFFFFF in field MAX_ALLOWED_SIZE is an invalid size suggesting that image section is not found");
        break;
    case 0x0ec0ea:
        i_parser.PrintString("HwpReturnCode", "RC_SGPE_HCODE_BUILD_FAILURE");
        i_parser.PrintString("HWP Error description", "Failed to update SGPE Hcode region of HOMER. Note: 0xFFFFFFFF in field MAX_ALLOWED_SIZE is an invalid size suggesting that image section is not found");
        break;
    case 0x2a64b0:
        i_parser.PrintString("HwpReturnCode", "RC_SELF_REST_IMG_NOT_FOUND_IN_HW_IMG");
        i_parser.PrintString("HWP Error description", "Self Restore Image not found in hardware image");
        break;
    case 0x1a2c24:
        i_parser.PrintString("HwpReturnCode", "RC_SELF_REST_IMG_BUILD_FAIL");
        i_parser.PrintString("HWP Error description", "Failed to update Self Restore region of HOMER. Note: 0xFFFFFFFF in field MAX_ALLOWED_SIZE is an invalid size suggesting that image section is not found");
        break;
    case 0xe972be:
        i_parser.PrintString("HwpReturnCode", "RC_CPMR_HDR_BUILD_FAIL");
        i_parser.PrintString("HWP Error description", "Failed to update CPMR Header region HOMER. Note: 0xFFFFFFFF in field MAX_ALLOWED_SIZE is an invalid size suggesting that image section is not found");
        break;
    case 0xdc43c1:
        i_parser.PrintString("HwpReturnCode", "RC_CME_IMG_NOT_FOUND_IN_HW_IMG");
        i_parser.PrintString("HWP Error description", "CME Image not found in hardware image. Note: 0xFFFFFFFF in field MAX_ALLOWED_SIZE is an invalid size suggesting that image section is not found");
        break;
    case 0x46cdd7:
        i_parser.PrintString("HwpReturnCode", "RC_CME_HCODE_BUILD_FAIL");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to update CME Hcode region of HOMER. Note: 0xFFFFFFFF in field MAX_ALLOWED_SIZE is an invalid size suggesting that image section is not found");
        break;
    case 0xb1982f:
        i_parser.PrintString("HwpReturnCode", "RC_PGPE_IMG_NOT_FOUND_IN_HW_IMG");
        i_parser.PrintString("HWP Error description", "PGPE Image not found in hardware image");
        break;
    case 0xa690b6:
        i_parser.PrintString("HwpReturnCode", "RC_P9_XIP_SECTION_PGPE_PPMR");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to update PPMR region of HOMER. Note: 0xFFFFFFFF in field MAX_ALLOWED_SIZE is an invalid size suggesting that image section is not found");
        break;
    case 0x505c3e:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PGPE_BOOT_COPIER_BUILD_FAIL");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to update PGPE boot copier region of HOMER. Note: 0xFFFFFFFF in field MAX_ALLOWED_SIZE is an invalid size suggesting that image section is not found");
        break;
    case 0xaf59eb:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PGPE_BOOT_LOADER_BUILD_FAIL");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to update PGPE boot loader region of HOMER. Note: 0xFFFFFFFF in field MAX_ALLOWED_SIZE is an invalid size suggesting that image section is not found");
        break;
    case 0x1f121d:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PGPE_HCODE_BUILD_FAIL");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to update PGPE hcode region of HOMER. Note: 0xFFFFFFFF in field MAX_ALLOWED_SIZE is an invalid size suggesting that image section is not found");
        break;
    case 0x90fde2:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PGPE_AUX_TASK_BUILD_FAIL");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to update PGPE Aux Task region of HOMER. Note: 0xFFFFFFFF in field MAX_ALLOWED_SIZE is an invalid size suggesting that image section is not found");
        break;
    case 0x95a182:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_SCAN_RING_EXTRACTION_FAIL");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to extract core scan rings");
        break;
    case 0xea3cea:
        i_parser.PrintString("HwpReturnCode", "RC_QUAD_SCAN_RING_EXTRACTION_FAIL");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to extract cache scan rings");
        break;
    case 0xc5c993:
        i_parser.PrintString("HwpReturnCode", "RC_CME_IMG_EXCEED_SRAM_SIZE");
        i_parser.PrintString("HWP Error description", "Size of CME image exceeded the SRAM size. Note: 0xFFFFFFFF in field MAX_CME_IMG_SIZE_ALLOWED indicates an invalid size.");
        break;
    case 0xd1ff27:
        i_parser.PrintString("HwpReturnCode", "RC_SGPE_IMG_EXCEED_SRAM_SIZE");
        i_parser.PrintString("HWP Error description", "Size of SGPE image exceeded the size allowed in OCC SRAM");
        break;
    case 0x4d0241:
        i_parser.PrintString("HwpReturnCode", "RC_PGPE_IMG_EXCEED_SRAM_SIZE");
        i_parser.PrintString("HWP Error description", "Size of PGPE image exceeded the size allowed in OCC SRAM");
        break;
    case 0xff4c7f:
        i_parser.PrintString("HwpReturnCode", "RC_REFRESH_SCOM_UPDATE_FAIL");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to create restore entry for L3 refresh timer divider register");
        break;
    case 0x102563:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_SUP_STRUCT_SIZE_ERR");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed due to P-State parameter block super struct size error");
        break;
    case 0x523ce8:
        i_parser.PrintString("HwpReturnCode", "RC_OCC_PARAM_BLOCK_SIZE_ERR");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed due to OCC P-State parameter block struct size error");
        break;
    case 0x4171da:
        i_parser.PrintString("HwpReturnCode", "RC_PARAM_WOF_TABLE_SIZE_ERR");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed due to WOF Table exceeding permissible size limit");
        break;
    case 0xb78312:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_CMN_RING_LAYOUT_ERR");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to layout core common rings");
        break;
    case 0x166717:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_CMN_RING_OVRD_LAYOUT_ERR");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to layout core common override rings");
        break;
    case 0xf99ae9:
        i_parser.PrintString("HwpReturnCode", "RC_CORE_SPEC_RING_LAYOUT_ERR");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to layout core common override rings");
        break;
    case 0xa1ce29:
        i_parser.PrintString("HwpReturnCode", "RC_FAILED_TO_CALCULATE_CORE_REPAIR_RING");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to determine max size of repair ring pair");
        break;
    case 0xce2599:
        i_parser.PrintString("HwpReturnCode", "RC_QUAD_CMN_RING_LAYOUT_ERR");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to layout quad common rings");
        break;
    case 0x9b7925:
        i_parser.PrintString("HwpReturnCode", "RC_QUAD_CMN_RING_OVRD_LAYOUT_ERR");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to layout quad common override rings");
        break;
    case 0x13a940:
        i_parser.PrintString("HwpReturnCode", "RC_QUAD_SPEC_RING_LAYOUT_ERR");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to layout quad spec rings");
        break;
    case 0x20c79d:
        i_parser.PrintString("HwpReturnCode", "RC_NCU_RNG_SCOM_SAVE_FAIL");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to save SCOM restore entry for NCU RNG BAR register");
        break;
    case 0xfb33f2:
        i_parser.PrintString("HwpReturnCode", "RC_L2_RD_EPS_SCOM_SAVE_FAIL");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to save SCOM restore entry for EX_L2_RD_EPS_REG register");
        break;
    case 0x69ec10:
        i_parser.PrintString("HwpReturnCode", "RC_L2_WR_EPS_SCOM_SAVE_FAIL");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to save SCOM restore entry for EX_L2_WR_EPS_REG register");
        break;
    case 0x64f5df:
        i_parser.PrintString("HwpReturnCode", "RC_L3_RD_EPS_SCOM_SAVE_FAIL");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to save SCOM restore entry for EX_L3_RD_EPS_REG register");
        break;
    case 0x4bcc01:
        i_parser.PrintString("HwpReturnCode", "RC_L3_WR_EPS_SCOM_SAVE_FAIL");
        i_parser.PrintString("HWP Error description", "hcode image build procedure failed to save SCOM restore entry for L3_RD_EPS_REG");
        break;
    case 0x12c25f:
        i_parser.PrintString("HwpReturnCode", "RC_HTM_SETUP_PROC_BAR_SIZE");
        i_parser.PrintString("HWP Error description", "ATTR_PROC_HTM_BAR_SIZE contains an invalid size value. Firmware error.");
        break;
    case 0x948364:
        i_parser.PrintString("HwpReturnCode", "RC_P9_NHTM_CTRL_BAD_STATE");
        i_parser.PrintString("HWP Error description", "NHTM is not at the expected state for current operation.");
        break;
    case 0xf60675:
        i_parser.PrintString("HwpReturnCode", "RC_P9_CHTM_CTRL_BAD_STATE");
        i_parser.PrintString("HWP Error description", "CHTM is not at the expected state for current operation.");
        break;
    case 0xfa7070:
        i_parser.PrintString("HwpReturnCode", "RC_P9_NHTM_CTRL_TIMEOUT");
        i_parser.PrintString("HWP Error description", "NHTM state machine change did not complete in allotted time.");
        break;
    case 0xf0feef:
        i_parser.PrintString("HwpReturnCode", "RC_NHTM_TRACE_TYPE_NOT_SUPPORTED");
        i_parser.PrintString("HWP Error description", "The selected Nest HTM trace type is not yet supported.");
        break;
    case 0xb794cf:
        i_parser.PrintString("HwpReturnCode", "RC_CHTM_TRACE_TYPE_NOT_SUPPORTED");
        i_parser.PrintString("HWP Error description", "The selected Core HTM trace type is not yet supported.");
        break;
    case 0x8047d0:
        i_parser.PrintString("HwpReturnCode", "RC_IO_DMI_PROC_RX_DCCAL_TIMEOUT");
        i_parser.PrintString("HWP Error description", "I/O EDI+ DMI Proc Rx Dccal(Offset calibration) Timeout");
        break;
    case 0x67a15a:
        i_parser.PrintString("HwpReturnCode", "RC_IO_DMI_PROC_RX_CLEANUP_PLL_NOT_LOCKED");
        i_parser.PrintString("HWP Error description", "I/O EDI+ DMI Proc Rx Dccal Cleanup Pll Not Locked");
        break;
    case 0x8cc809:
        i_parser.PrintString("HwpReturnCode", "RC_IO_DMI_MFG_RX_EYE_WIDTH_FAILURE");
        i_parser.PrintString("HWP Error description", "I/O EDI+ DMI Rx Eye Width Failure");
        break;
    case 0x60b26a:
        i_parser.PrintString("HwpReturnCode", "RC_IO_DMI_LINKTRAIN_ERROR");
        i_parser.PrintString("HWP Error description", "I/O EDI+ DMI WDERF Training fail/timeout was reported.");
        break;
    case 0xd47293:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_DIMM_TYPE_CHECK_ERR");
        i_parser.PrintString("HWP Error description", "Error during DIMM type check.");
        break;
    case 0x68c8e7:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_ACCESSOR_HWP_INVALID_MEM_VPD_SIZE_ERR");
        i_parser.PrintString("HWP Error description", "Invalid MEM VPD size has been returned by platform.");
        break;
    case 0x1720be:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_ACCESSOR_HWP_MEMORY_ALLOC_FAIL_ERR");
        i_parser.PrintString("HWP Error description", "Failed to allocate run time memory from the heap.");
        break;
    case 0x208325:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_ACCESSOR_HWP_INVALID_FABRIC_VPD_SIZE_ERR");
        i_parser.PrintString("HWP Error description", "Invalid Fabric VPD size has been returned by platform.");
        break;
    case 0x85b92f:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_CHILD_MBA_TARGETS_ERR");
        i_parser.PrintString("HWP Error description", "Error during get child MBA targets.");
        break;
    case 0xbec649:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_NO_RX_TX_FAILED_LANES_ERR");
        i_parser.PrintString("HWP Error description", "ERROR: No Tx/Rx fail lanes were provided");
        break;
    case 0x365e5e:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_MBVPD_FULL_ERR");
        i_parser.PrintString("HWP Error description", "ERROR: eRepair data limit in the Memory Buffer FRU VPD has been reached.");
        break;
    case 0x069968:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_MVPD_FULL_ERR");
        i_parser.PrintString("HWP Error description", "ERROR: eRepair data limit in the Processor Module VPD has been reached.");
        break;
    case 0xe59a74:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_INVALID_LANE_VALUE_ERR");
        i_parser.PrintString("HWP Error description", "ERROR: Invalid erepair lane value");
        break;
    case 0x60dc4c:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_RESTORE_FIELD_VPD_NOT_CLEAR");
        i_parser.PrintString("HWP Error description", "ERROR: mnfgCheckFieldVPD: Field VPD need to be clear during Mnfg mode IPL Invalid input parameter: Valid target pairs are: XBus-XBus, OBus-OBus, MCS-MEMBUF");
        break;
    case 0x20776f:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_RESTORE_INVALID_TARGET");
        i_parser.PrintString("HWP Error description", "ERROR:geteRepairThreshold: Invalid target type");
        break;
    case 0x165066:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_THRESHOLD_EXCEED");
        i_parser.PrintString("HWP Error description", "ERROR:The threshold limit for eRepair has been crossed.");
        break;
    case 0x5ec49d:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_RESTORE_FABRIC_DISABLED");
        i_parser.PrintString("HWP Error description", "ERROR:erepairGetRestoreLanes: Fabric eRepair is disabled.");
        break;
    case 0x5f53b0:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_RESTORE_INVALID_TARGET_PAIR");
        i_parser.PrintString("HWP Error description", "ERROR:geteRepairThreshold: Invalid target pair");
        break;
    case 0x9668eb:
        i_parser.PrintString("HwpReturnCode", "RC_P9_EREPAIR_RESTORE_MEMORY_DISABLED");
        i_parser.PrintString("HWP Error description", "ERROR:erepairGetRestoreLanes: Memory eRepair is disabled.");
        break;
    case 0x2775f5:
        i_parser.PrintString("HwpReturnCode", "RC_IO_GCR_TARGET_TYPE_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "P9_IO_GCR Invoked with Incorrect Target Type");
        break;
    case 0x61ea6e:
        i_parser.PrintString("HwpReturnCode", "RC_IO_OBUS_RX_DCCAL_TIMEOUT");
        i_parser.PrintString("HWP Error description", "I/O Obus Rx Dccal(Offset calibration) Timeout");
        break;
    case 0x8c9e75:
        i_parser.PrintString("HwpReturnCode", "RC_P9_IO_PPE_OBUS_IMG_PTR_ERROR");
        i_parser.PrintString("HWP Error description", "Image pointer passed in is bad.");
        break;
    case 0xbb13e5:
        i_parser.PrintString("HwpReturnCode", "RC_P9_IO_FIRMASK_RESTORE_ERROR");
        i_parser.PrintString("HWP Error description", "Attempted to restore OBUS firmasks when values were never saved");
        break;
    case 0x8df734:
        i_parser.PrintString("HwpReturnCode", "RC_P9_XBUS_SCOMINIT_PARTIAL_GOOD_ERR");
        i_parser.PrintString("HWP Error description", "Partial good attribute state does not allow for action on chiplet target.");
        break;
    case 0x15dea7:
        i_parser.PrintString("HwpReturnCode", "RC_IO_XBUS_RX_DCCAL_TIMEOUT");
        i_parser.PrintString("HWP Error description", "I/O EDI+ Xbus Rx Dccal(Offset calibration) Timeout");
        break;
    case 0x128b35:
        i_parser.PrintString("HwpReturnCode", "RC_IO_XBUS_RX_CLEANUP_PLL_NOT_LOCKED");
        i_parser.PrintString("HWP Error description", "I/O EDI+ Xbus Rx Dccal Cleanup Pll Not Locked");
        break;
    case 0xb902e6:
        i_parser.PrintString("HwpReturnCode", "RC_IO_XBUS_MFG_RX_EYE_WIDTH_FAILURE");
        i_parser.PrintString("HWP Error description", "I/O EDI+ Xbus Rx Eye Width Failure");
        break;
    case 0x1a8065:
        i_parser.PrintString("HwpReturnCode", "RC_IO_XBUS_NOT_MASTER");
        i_parser.PrintString("HWP Error description", "I/O Xbus Target and Connected Target was not a Master");
        break;
    case 0x5864fd:
        i_parser.PrintString("HwpReturnCode", "RC_IO_XBUS_LINKTRAIN_ERROR");
        i_parser.PrintString("HWP Error description", "I/O Xbus WDERF Training fail/timeout was reported.");
        break;
    case 0x1e2333:
        i_parser.PrintString("HwpReturnCode", "RC_P9_L2ERR_EXTRACT_TA_WRONG_SIZE_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_l2err_extract Specified trace array length does not match expected length");
        break;
    case 0xa038e3:
        i_parser.PrintString("HwpReturnCode", "RC_P9_L2ERR_EXTRACT_DW_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Procedure: p9_l2err_extract Could not find DW");
        break;
    case 0x28558c:
        i_parser.PrintString("HwpReturnCode", "RC_P9_L2ERR_EXTRACT_UNKNOWN_SYNDROME_ECC");
        i_parser.PrintString("HWP Error description", "Procedure: p9_l2err_extract Syndrome ECC is unknown");
        break;
    case 0x1df841:
        i_parser.PrintString("HwpReturnCode", "RC_P9_L2ERR_EXTRACT_SYNDROME_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Procedure: p9_l2err_extract Could not find syndrome");
        break;
    case 0x34f030:
        i_parser.PrintString("HwpReturnCode", "RC_P9_L2_FLUSH_PURGE_REQ_OUTSTANDING");
        i_parser.PrintString("HWP Error description", "A previous L2 purge request has not finished");
        break;
    case 0xd68f61:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PURGE_CMD_REG_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_l2_flush EX_PRD_PURGE_CMD_REG_ERR bit is set in Purge Engine Command Register.");
        break;
    case 0x586c7d:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PURGE_COMPLETE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: p9_l2_flush Timed out waiting for purge busy indication to clear in L2 Purge Engine Command Register.");
        break;
    case 0x4aac2c:
        i_parser.PrintString("HwpReturnCode", "RC_P9_L3ERR_EXTRACT_SYNDROME_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Procedure: p9_l3err_extract Could not find syndrome");
        break;
    case 0xa404bf:
        i_parser.PrintString("HwpReturnCode", "RC_P9_L3ERR_EXTRACT_UNKNOWN_SYNDROME_ECC");
        i_parser.PrintString("HWP Error description", "Procedure: p9_l3err_extract Syndrome ECC is unknown");
        break;
    case 0xfd0a81:
        i_parser.PrintString("HwpReturnCode", "RC_P9_L3ERR_LINE_DELETE_REG_BUSY");
        i_parser.PrintString("HWP Error description", "Procedure: p9_l3err_linedelete Time out waiting for PRD L3 Purge engine busy bit.");
        break;
    case 0x8e2072:
        i_parser.PrintString("HwpReturnCode", "RC_P9_L3_FLUSH_INVALID_ARGS_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_l3_flush Invalid parameters passed in for a L3 flush operation.");
        break;
    case 0xf32041:
        i_parser.PrintString("HwpReturnCode", "RC_P9_L3_FLUSH_PREVIOUS_PURGE_ACTIVE_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_l3_flush A previous L3 purge request has not finished.");
        break;
    case 0xe2f090:
        i_parser.PrintString("HwpReturnCode", "RC_P9_L3_FLUSH_PURGE_REQ_TIMEOUT_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_l3_flush The L3 flush did not finish and has timed out");
        break;
    case 0x8d29c8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_NUM_PKG_RANKS");
        i_parser.PrintString("HWP Error description", "Recieved an invalid number of package ranks when setting the BC07 - Rank Presence Control Word. Could signify bad SPD data, invalid decoding of SPD data, or invalid user input.");
        break;
    case 0xba9af2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_DQ_DATA");
        i_parser.PrintString("HWP Error description", "Recieved an invalid data from DQ during MREP or DWL data buffer training.");
        break;
    case 0xd78688:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DP16_BANG_BANG_FAILED_TO_LOCK");
        i_parser.PrintString("HWP Error description", "p9_mss_ddr_phy_reset: DP16 phy clock and sysclk failed to align.");
        break;
    case 0x8f06e0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ADR_BANG_BANG_FAILED_TO_LOCK");
        i_parser.PrintString("HWP Error description", "p9_mss_ddr_phy_reset: ADR phy clock and sysclk failed to align.");
        break;
    case 0xba5258:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DLL_FAILED_TO_CALIBRATE");
        i_parser.PrintString("HWP Error description", "DLL failed to calibrate");
        break;
    case 0x574b5f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_PRIMARY_RANK_IN_RANK_PAIR");
        i_parser.PrintString("HWP Error description", "Failed to find a primary rank in the rank pair");
        break;
    case 0xa4e93c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ZCNTL_FAILED_TO_COMPLETE");
        i_parser.PrintString("HWP Error description", "ZCAL failed to complete");
        break;
    case 0x77603c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_VPD_MT_VREF_MC_RD");
        i_parser.PrintString("HWP Error description", "Invalid MC RD_VREF value in VPD");
        break;
    case 0xccd2a2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_VPD_VALUE_MC_DRV_IMP_DQ_DQS");
        i_parser.PrintString("HWP Error description", "Value in the VPD for MC_DRV_IMP_DQ_DQS is not valid.");
        break;
    case 0xcf26dd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_VPD_VALUE_MC_RCV_IMP_DQ_DQS");
        i_parser.PrintString("HWP Error description", "Value in the VPD for MC_RCV_IMP_DQ_DQS is not valid.");
        break;
    case 0x46b5ec:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_VPD_MT_MC_DRV_IMP_CLK");
        i_parser.PrintString("HWP Error description", "Value in the VPD for MC_DRV_IMP_CLK is not valid.");
        break;
    case 0xea5c25:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_VPD_MT_MC_DRV_IMP_CMD_ADDR");
        i_parser.PrintString("HWP Error description", "Value in the VPD for MC_DRV_IMP_CMD_ADDR is not valid.");
        break;
    case 0x50ae2d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_VPD_MT_MC_DRV_IMP_CNTL");
        i_parser.PrintString("HWP Error description", "Value in the VPD for MC_DRV_IMP_CNTL is not valid.");
        break;
    case 0x743224:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_VPD_MT_MC_DRV_IMP_CSCID");
        i_parser.PrintString("HWP Error description", "Value in the VPD for MC_DRV_IMP_CSCID is not valid.");
        break;
    case 0x5f65f8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DLL_UPDATE_BIT_STUCK");
        i_parser.PrintString("HWP Error description", "The DLL update bit failed to be cleared after a number of loops");
        break;
    case 0xd218f2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DUTY_CLOCK_DISTORTION_CAL_FAILED");
        i_parser.PrintString("HWP Error description", "The software duty clock distortion calibration algorithm failed");
        break;
    case 0xcdfc0e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_HARDWARE_DUTY_CLOCK_DISTORTION_CAL_TIMEOUT");
        i_parser.PrintString("HWP Error description", "The hardware duty clock distortion calibration algorithm did not complete in the given amount of time");
        break;
    case 0x8c0d84:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_HARDWARE_DUTY_CLOCK_DISTORTION_CAL_FAILED");
        i_parser.PrintString("HWP Error description", "The hardware duty clock distortion calibration algorithm failed");
        break;
    case 0x33e21a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DDR_PHY_RESET_PORT_FIR");
        i_parser.PrintString("HWP Error description", "The port noted has set an error bit during PHY reset");
        break;
    case 0xe529f5:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_ERROR_IN_PHY");
        i_parser.PrintString("HWP Error description", "Error in mss_ddr_phy_reset due error on DIMM attributes Should have been caught in plug rules");
        break;
    case 0x59a8ca:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DDR_PHY_RESET_PORT_FIRS_REPORTED");
        i_parser.PrintString("HWP Error description", "One or more ports noted a set error bit during PHY reset");
        break;
    case 0x8d24c0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_PORT_FIR");
        i_parser.PrintString("HWP Error description", "A PHY fir was lit up due to draminit training. There could be a problem with the training engine Checking fir bits 1-7");
        break;
    case 0x4ecd25:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_MULTIPLE_ERRORS");
        i_parser.PrintString("HWP Error description", "Multiple training steps failed for a given position within this calibration.");
        break;
    case 0x532bb7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR");
        i_parser.PrintString("HWP Error description", "Write Leveling has returned a fail for a given position within this calibration.");
        break;
    case 0x5587aa:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_INITIAL_PAT_WRITE_ERROR");
        i_parser.PrintString("HWP Error description", "Initial pattern write has returned a fail for a given position within this calibration.");
        break;
    case 0xeca5e2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR");
        i_parser.PrintString("HWP Error description", "DQS Alignment has returned a fail for a given position within this calibration.");
        break;
    case 0x5771cd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_WORKAROUND_FAILED");
        i_parser.PrintString("HWP Error description", "DQS Alignment has returned a fail for a given position within this calibration. Looping did not seem to fix the problem");
        break;
    case 0x50e5e4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR");
        i_parser.PrintString("HWP Error description", "Read CLK to SYS CLK Alignment has returned a fail for a given position within this calibration.");
        break;
    case 0x77c6e0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR");
        i_parser.PrintString("HWP Error description", "Read Centering has returned a fail for a given position within this calibration.");
        break;
    case 0x8cbb6c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR");
        i_parser.PrintString("HWP Error description", "Write centering has returned a fail for a given position within this calibration.");
        break;
    case 0xd91409:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_INITIAL_COARSE_WR_ERROR");
        i_parser.PrintString("HWP Error description", "Initial coarse write has returned a fail for a given position within this calibration.");
        break;
    case 0x8e9019:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_COARSE_RD_ERROR");
        i_parser.PrintString("HWP Error description", "Coarse read has returned a fail for a given position within this calibration.");
        break;
    case 0x73b48b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_ERROR");
        i_parser.PrintString("HWP Error description", "Custom Pattern Read has returned a fail for a given position within this calibration.");
        break;
    case 0xedf355:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_ERROR");
        i_parser.PrintString("HWP Error description", "Custom Pattern Write has returned a fail for a given position within this calibration.");
        break;
    case 0x86f0fc:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR");
        i_parser.PrintString("HWP Error description", "Digital Eye has returned a fail for a given position within this calibration.");
        break;
    case 0xedb7a0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DRAMINIT_TRAINING_VREF_ERROR");
        i_parser.PrintString("HWP Error description", "WR or RD VREF has returned a fail for a given position within this calibration.");
        break;
    case 0xeb924a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DISABLED_BITS");
        i_parser.PrintString("HWP Error description", "The PHY has disabled too many bits to continue (6 bits)");
        break;
    case 0xe5bf06:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FAILED_RDVREF_CAL");
        i_parser.PrintString("HWP Error description", "A DP16 has failed read vREF calibration. If this fails, RDCNTR cal will also catch the fail");
        break;
    case 0x0cfe8e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_DIMM_FOR_MAPPING");
        i_parser.PrintString("HWP Error description", "Tried to map rank pairs on a port without any DIMMS");
        break;
    case 0x93edd0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_RANK_VECTOR_PASSED_IN");
        i_parser.PrintString("HWP Error description", "Invalid vector of ranks passed in");
        break;
    case 0x1d85da:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_RANK");
        i_parser.PrintString("HWP Error description", "Invalid rank passed into function");
        break;
    case 0xa143e1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_RANK_PAIR");
        i_parser.PrintString("HWP Error description", "Invalid rank pair passed into function");
        break;
    case 0x501306:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_PRIMARY_RANK_FOUND_RP");
        i_parser.PrintString("HWP Error description", "No primary rank in rank pair");
        break;
    case 0x5a90f7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FAILED_WRVREF_CAL");
        i_parser.PrintString("HWP Error description", "A DP16 has failed write VREF calibration");
        break;
    case 0x2f3bff:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_RD_CTR_WORKAROUND_EMPTY_VECTOR");
        i_parser.PrintString("HWP Error description", "An empty vector was passed into the find_median_and_sort function");
        break;
    case 0x270bf0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_RDCLK_ALIGN_VECTOR_MISMATCH");
        i_parser.PrintString("HWP Error description", "Size of disable bit vector is not the same as rd clk vector size");
        break;
    case 0xb46e56:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_WR_VREF_WORKAROUND_BIG_STEPS_OUTOFBOUNDS");
        i_parser.PrintString("HWP Error description", "Makes sure that the values passed in were not out of range");
        break;
    case 0x56da8d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_WR_VREF_TRAIN_WORKAROUND_BIG_STEPS_OUTOFBOUNDS");
        i_parser.PrintString("HWP Error description", "Makes sure that the values passed in were not out of range");
        break;
    case 0x2950f6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_WR_VREF_WORKAROUND_SMALL_STEPS_OUTOFBOUNDS");
        i_parser.PrintString("HWP Error description", "Makes sure that the values passed in were not out of range");
        break;
    case 0xd5e5ce:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EXCEED_NUMBER_OF_DP");
        i_parser.PrintString("HWP Error description", "There is an error iterating over the bad bits and assigning them to DP16");
        break;
    case 0x23ee47:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_WR_VREF_DRAM_RECOVERY");
        i_parser.PrintString("HWP Error description", "An informational callout for the WR VREF bad DRAM recovery workaround");
        break;
    case 0x508aae:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNKNOWN_DIMM");
        i_parser.PrintString("HWP Error description", "This DIMM's type (RDIMM, LRDIMM, etc) or DRAM generation (DDR3, DDR4, etc) are not supported by the system");
        break;
    case 0xbcbcb1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_BAD_MR_PARAMETER");
        i_parser.PrintString("HWP Error description", "A bad parameter was passed to MR processing This is probably due to a bad value received from the SPD (e.g. unsupported cas latency) Could be a code error");
        break;
    case 0x2ce66b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_POWER_THERMAL_ATTR_FOUND");
        i_parser.PrintString("HWP Error description", "There was no match or value found in decoding the power thermal attributes");
        break;
    case 0x93f1aa:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_POWER_INTERCEPT_NOT_SET");
        i_parser.PrintString("HWP Error description", "The attribute ATTR_MSS_TOTAL_POWER_INTERCEPT was not set and equals 0");
        break;
    case 0xe4bbc7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_POWER_SLOPE_NOT_SET");
        i_parser.PrintString("HWP Error description", "The attribute ATTR_MSS_TOTAL_POWER_INTERCEPT was not set and equals 0");
        break;
    case 0x1e685d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_DATABUS_UTILIZATION");
        i_parser.PrintString("HWP Error description", "There are 2 DIMMS on the port but both have 0 databus utilization");
        break;
    case 0x0c98fd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CALC_POWER_CURVE_DIVIDE_BY_ZERO");
        i_parser.PrintString("HWP Error description", "Denominator equals 0");
        break;
    case 0x5bec3b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_PORT_POWER_LIMIT");
        i_parser.PrintString("HWP Error description", "Got 0 when calculating port power limit. Either no dimms or attribute MEM_WATT_TARGET wasn't set");
        break;
    case 0x710086:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_PORT_POWER");
        i_parser.PrintString("HWP Error description", "Got 0 when calculating port power limits using the DIMMs databus utilization");
        break;
    case 0x2b7ea7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_M_DRAM_CLOCKS_EQUALS_ZERO");
        i_parser.PrintString("HWP Error description", "ATTR_MSS_MRW_MEM_M_DRAM_CLOCKS was not set and equals zero");
        break;
    case 0x98f715:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CALC_PORT_POWER_EXCEEDS_MAX");
        i_parser.PrintString("HWP Error description", "The calculated port power from equalizing throttles exceeds the maximum allowed power");
        break;
    case 0xf899bd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SLOT_UTIL_EXCEEDS_PORT");
        i_parser.PrintString("HWP Error description", "The memory throttle per slot (DIMM) exceeds the allowed throttle for the port");
        break;
    case 0x93ff13:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SPLIT_UTIL_CALC_ERROR");
        i_parser.PrintString("HWP Error description", "Error when splitting up the memory port's utilization");
        break;
    case 0x63a41f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_OUTPUT_OVERFLOW_CALC_UTIL");
        i_parser.PrintString("HWP Error description", "Type of output variable is not large enough for the calculations");
        break;
    case 0x93c257:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DIMM_COUNT_EXCEEDS_VMEM_REGULATOR_LIMIT");
        i_parser.PrintString("HWP Error description", "The number of dimms counted on the vector of MCS passed into p9_mss_eff_config_thermal exceeds the limit defined in ATTR_MSS_MRW_MAX_NUMBER_DIMMS_POSSIBLE_PER_VMEM_REGULATOR");
        break;
    case 0x995d5b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_FINE_REFRESH_MODE");
        i_parser.PrintString("HWP Error description", "Invalid fine refresh mode received from the mrw");
        break;
    case 0x509972:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_FINE_REFRESH_MODE_WITH_TEMP_REFRESH_MODE_ENABLED");
        i_parser.PrintString("HWP Error description", "Invalid fine refresh mode received due to temperature refresh mode being enabled If ATTR_MSS_MRW_TEMP_REFRESH_MODE is enabled, only NORMAL mode is allowed for FINE_REFRESH_MODE");
        break;
    case 0x48aa9c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_KEY");
        i_parser.PrintString("HWP Error description", "Conditional that tests whether a certain key value is located in a map.");
        break;
    case 0x8c3faa:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_VPD_VREF_DRAM_WR_RANGE");
        i_parser.PrintString("HWP Error description", "Value in the VPD for VREF dram WR range is outside of the JEDEC spec's range.");
        break;
    case 0xcfe78b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_VPD_MT_PREAMBLE");
        i_parser.PrintString("HWP Error description", "Value in the VPD for PREAMBLE is not 0 or 1.");
        break;
    case 0xf51d9b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_CAST_CALC_NCK");
        i_parser.PrintString("HWP Error description", "Invalid cast or calculation for calc_nck");
        break;
    case 0x3a8bd8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_SPD_SLAVE_RANKS");
        i_parser.PrintString("HWP Error description", "Seems logical ranks are not master ranks* slave ranks. Error from SPD is most likely.");
        break;
    case 0xf62f14:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_BAD_SDRAM_DENSITY_DECODER");
        i_parser.PrintString("HWP Error description", "SPD decoder messed up and returned a 0. Should have been caught already");
        break;
    case 0x90e9ae:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_LRDIMM_DB");
        i_parser.PrintString("HWP Error description", "Error with the LRDIMM databuffer type");
        break;
    case 0x22e02a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNSUPPORTED_DIMM_KIND");
        i_parser.PrintString("HWP Error description", "DIMM plugged in is not supported");
        break;
    case 0x628401:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_RTT_WR");
        i_parser.PrintString("HWP Error description", "An invalid encoding recieved from VPD for RTT_WR/dynamic ODT value");
        break;
    case 0x3763c4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_FREQ");
        i_parser.PrintString("HWP Error description", "An invalid Freq value has been set");
        break;
    case 0x72e74a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_FREQ_BC");
        i_parser.PrintString("HWP Error description", "An invalid Freq value has been set in Buffer Control functions");
        break;
    case 0x9eae55:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_FREQ_RC");
        i_parser.PrintString("HWP Error description", "An invalid Freq value has been set in raw card functions");
        break;
    case 0x3c1074:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_FREQ_PASSED_IN");
        i_parser.PrintString("HWP Error description", "An invalid Freq value has been set");
        break;
    case 0x9e984f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ERROR_CREATING_EFF_CONFIG_DIMM_OBJECT");
        i_parser.PrintString("HWP Error description", "Failed to create a dimm object, probably due to bad data from SPD (ie code doesn't support)");
        break;
    case 0x2901a8:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_PRIM_STACK_TYPE");
        i_parser.PrintString("HWP Error description", "An invalid stack type found for MSS ATTR_EFF_PRIM_STACK_TYPE");
        break;
    case 0x73bd34:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_CALCULATED_NUM_SLAVE_RANKS");
        i_parser.PrintString("HWP Error description", "Slave ranks are calculated to be 0 or greater than 8");
        break;
    case 0x76d67e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_CALCULATED_DIMM_SIZE");
        i_parser.PrintString("HWP Error description", "Error calculating DIMM size. Size is not supported");
        break;
    case 0xa3aa9e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_TEMP_REFRESH");
        i_parser.PrintString("HWP Error description", "Incorrect Temperature Ref. Range received");
        break;
    case 0xcf4fb1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_REFRESH_RATE_REQUEST");
        i_parser.PrintString("HWP Error description", "Invalid refresh request rate received. Possibly due to bad MRW setting for ATTR_MSS_MRW_REFRESH_RATE_REQUEST.");
        break;
    case 0x01a146:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_FINE_REFRESH");
        i_parser.PrintString("HWP Error description", "Incorrect FINE Refresh Mode received");
        break;
    case 0x5cd8ca:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FAILED_TO_FIND_TRFC");
        i_parser.PrintString("HWP Error description", "Unable to find tRFC (ps) from map with SDRAM density key");
        break;
    case 0x098ebb:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_PAGE_SIZE");
        i_parser.PrintString("HWP Error description", "Invalid page size");
        break;
    case 0x84819b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_DRAM_WIDTH");
        i_parser.PrintString("HWP Error description", "Code only supports x4 and x8 drams at this time");
        break;
    case 0x344d69:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_RTT_NOM_CALCULATIONS");
        i_parser.PrintString("HWP Error description", "Calculated the rtt_nom_index into the VPD attribute incorrectly");
        break;
    case 0x6ca9fb:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_VPD_KEYWORD_MAX");
        i_parser.PrintString("HWP Error description", "VPD keyword is too big for space allocated for it.");
        break;
    case 0xca6dc4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_OFFSET_WR_VREF_OUT_OF_RANGE");
        i_parser.PrintString("HWP Error description", "The offset composite range is out of range");
        break;
    case 0x658fa7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_BAD_CL_CAST");
        i_parser.PrintString("HWP Error description", "Calculated Cas Latency exceeds the 8-bit limit. Error calculating");
        break;
    case 0xdbb13c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_TIMING_VALUE");
        i_parser.PrintString("HWP Error description", "Invalid value calculated for timing value based on MTB and FTB from SPD.");
        break;
    case 0xe6a579:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_CALCULATED_TCK");
        i_parser.PrintString("HWP Error description", "Invalid value clock period (less than equal 0). Should be code bug and error comparing MRW and VPD SUPPRTED_FREQS Caused by bad MRW values for MSS_MRW_SUPPORTED_FREQ");
        break;
    case 0xa494fd:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_COMMON_SUPPORTED_CL");
        i_parser.PrintString("HWP Error description", "Current Configuration has no common supported CL values. Caused by bad SPD on one of the plugged DIMMS or DIMM configuration is not supported");
        break;
    case 0x817d70:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FAILED_TO_FIND_SUPPORTED_CL");
        i_parser.PrintString("HWP Error description", "Desired CAS latency isn't supported in the common CAS latency bin retrieved from SPD.");
        break;
    case 0xd81ef7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CL_EXCEEDS_TAA_MAX");
        i_parser.PrintString("HWP Error description", "Calculated Cas Latency exceeds JEDEC value for TAA Max desired (and DIMM supported) cas_latency * proposed tck from mss freq attributes > jedec taa_max Probably due to MRW/ VPD freqs being too high");
        break;
    case 0xae4d0b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FREQ_NOT_EQUAL_NEST_FREQ");
        i_parser.PrintString("HWP Error description", "Case when mss_freq speeds are different and sync mode is required, and mss_freq is not equal to nest freq.");
        break;
    case 0xe7af7e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_BAD_FREQ_CALCULATED");
        i_parser.PrintString("HWP Error description", "No frequency found for mbist. Either bad mrw attribute or no DIMMS installed? Should be a code bug if we get here");
        break;
    case 0xad3c68:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FAILED_SYNC_MODE");
        i_parser.PrintString("HWP Error description", "DIMM speeds are different and sync mode is required");
        break;
    case 0xcc994c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EMPTY_MCBIST_VECTOR_PASSED");
        i_parser.PrintString("HWP Error description", "Empty MCBIST target vector found when constructing dimm speed mapping");
        break;
    case 0x521857:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ERROR_FINDING_DIMM_SPEED_MAP");
        i_parser.PrintString("HWP Error description", "Empty MCBIST target vector found when constructing dimm speed mapping");
        break;
    case 0x841faf:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ALL_MCBIST_HAVE_0_FREQ");
        i_parser.PrintString("HWP Error description", "All MCBIST have 0 MSS_FREQ, but there are dimms still configured?");
        break;
    case 0x101b05:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MRW_FREQ_SIZE_CHANGED");
        i_parser.PrintString("HWP Error description", "Size of MSS_MRW_FREQS value in VPD has changed and code hasn't been updated");
        break;
    case 0xf06c0e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_ERROR_CALCULATING_CAS_LATENCY_VECTOR");
        i_parser.PrintString("HWP Error description", "Code error setting the cas_latency. Number of cas_latencies per MCS does not equal functional ports found");
        break;
    case 0x48c219:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MAX_FREQ_ATTR_SIZE_CHANGED");
        i_parser.PrintString("HWP Error description", "Number of entries for MSS_MRW_MAX_FREQ attribute from VPD has changed without updating the code Asserted because direct accesses to array");
        break;
    case 0x89cffe:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET");
        i_parser.PrintString("HWP Error description", "When considering the frequencies in the MRW and the max supported frequencies based on DIMM config (MAX_ALLOWED_DIMM_FREQ), there are no applicable frequencies remaining If sync mode required, frequencies have to match a nest frequency");
        break;
    case 0x5f58ea:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_TOO_MANY_DIMMS_ON_PORT");
        i_parser.PrintString("HWP Error description", "There seem to be too many dimms on the port");
        break;
    case 0xbe7260:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_TOO_MANY_PRIMARY_RANKS_ON_DIMM");
        i_parser.PrintString("HWP Error description", "There seem to be too many primary ranks seen on the dimm");
        break;
    case 0x559861:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FREQ_INDEX_TOO_LARGE");
        i_parser.PrintString("HWP Error description", "Error calculating the index into max_freq array");
        break;
    case 0x311850:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SELECTED_FREQ_NOT_SUPPORTED");
        i_parser.PrintString("HWP Error description", "Selected freq based on calculations from the DIMM and VPD is not supported");
        break;
    case 0x375654:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FREQ_TO_NEST_FREQ_RATIO_TOO_LARGE");
        i_parser.PrintString("HWP Error description", "Case when mss_freq to nest freq is above the maximum allowed.");
        break;
    case 0x20ca3b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FREQ_OR_NEST_FREQ_IS_ZERO");
        i_parser.PrintString("HWP Error description", "Case when mss_freq or nest_freq is zero.");
        break;
    case 0x7b312a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EMPTY_VECTOR");
        i_parser.PrintString("HWP Error description", "Empty vector conditional failed.");
        break;
    case 0x7c57df:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_DIMM_TYPE");
        i_parser.PrintString("HWP Error description", "An invalid/unsupported DIMM type was received. This is possibly due to SPD decoding errors or incorrect setting of ATTR_EFF_DIMM_TYPE attribute.");
        break;
    case 0x0f7aa2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_RTT_WR_ENCODING");
        i_parser.PrintString("HWP Error description", "An invalid/unsupported RTT_WR encoding was received");
        break;
    case 0x7aea16:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_RANKS_IN_RANK_PAIR");
        i_parser.PrintString("HWP Error description", "A rank pair was received with no configured ranks");
        break;
    case 0x296448:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_UNEXPECTED_VALUE_SEEN");
        i_parser.PrintString("HWP Error description", "Invalid value seen versus the expected value wanted");
        break;
    case 0x7cd4ae:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_READ_MISCOMPARE");
        i_parser.PrintString("HWP Error description", "CCS reports a read miscompare.");
        break;
    case 0x00ffca:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_UE_SUE");
        i_parser.PrintString("HWP Error description", "CCS reports a UE or SUE in the CCS program array Chould be an indicator of corruption in the CCS program");
        break;
    case 0xdd6d71:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_CAL_TIMEOUT");
        i_parser.PrintString("HWP Error description", "CCS reports never getting a response back from the PHY on a calibration command");
        break;
    case 0x48678c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_HUNG");
        i_parser.PrintString("HWP Error description", "Software reported that the machine is not seeing the CCS finish in the alloted time");
        break;
    case 0x2aef62:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_CCS_HUNG_TRYING_TO_STOP");
        i_parser.PrintString("HWP Error description", "CCS failed to return from in-progress status while trying to stop a previous program Software reported that CCS did not finish in alloted time after manually triggering stop");
        break;
    case 0x37e1ed:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MCBIST_TIMEOUT");
        i_parser.PrintString("HWP Error description", "MCBIST program failed to return in the time allowed Software timer, MCBIST has not finished in the time allowed");
        break;
    case 0xa4bbba:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MCBIST_DATA_FAIL");
        i_parser.PrintString("HWP Error description", "MCBIST program appeared to have failed, but set conflicting bits in the status register");
        break;
    case 0x74bfee:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MCBIST_UNKNOWN_FAILURE");
        i_parser.PrintString("HWP Error description", "MCBIST program reported a failure but no error status was found");
        break;
    case 0xf46a8a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MCBIST_PROGRAM_TOO_BIG");
        i_parser.PrintString("HWP Error description", "MCBIST program larger than currently supported size");
        break;
    case 0x8db28c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_APB_INVALID_ADDRESS");
        i_parser.PrintString("HWP Error description", "PHY APB interface is reporting an invalid address was read or written");
        break;
    case 0x74c66b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_APB_WR_PAR_ERR");
        i_parser.PrintString("HWP Error description", "PHY APB interface is reporting a read/write parity error");
        break;
    case 0x74cb01:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FATAL_FSM_PHYTOP");
        i_parser.PrintString("HWP Error description", "Indicates a non-recoverable FSM state checker error in PHYTOP logic");
        break;
    case 0xc06be1:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FATAL_PARITY_PHYTOP");
        i_parser.PrintString("HWP Error description", "Indicates a non-recoverable parity error in PHYTOP logic");
        break;
    case 0x6470c0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FSM_PHYTOP");
        i_parser.PrintString("HWP Error description", "Indicates a recoverable FSM state checker error in PHYTOP logic");
        break;
    case 0x71f3fb:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PARITY_PHYTOP");
        i_parser.PrintString("HWP Error description", "Indicates a recoverable register parity error in PHYTOP logic");
        break;
    case 0x8e67fc:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FATAL_ADR52_MASTER");
        i_parser.PrintString("HWP Error description", "Indicates a non-recoverable register parity error in ADR52 master side logic");
        break;
    case 0xa4cf9f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FATAL_ADR52_SLAVE");
        i_parser.PrintString("HWP Error description", "Indicates a non-recoverable register parity error in ADR52 slave side logic");
        break;
    case 0x11f809:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FSM_DP16");
        i_parser.PrintString("HWP Error description", "Indicates a recoverable FSM state checker error in a DP16");
        break;
    case 0x84db77:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_XLATE_FOR_DIMM");
        i_parser.PrintString("HWP Error description", "Indicates there wasn't an address translation defined for the DIMM");
        break;
    case 0xb1e7ec:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_BAD_DIMM_INDEX_FOR_GIVEN_RANK");
        i_parser.PrintString("HWP Error description", "Indicates a fail when attempting to get a DIMM index for a given rank");
        break;
    case 0x2d185b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_DIMM_FOR_GIVEN_DIMM_INDEX");
        i_parser.PrintString("HWP Error description", "Indicates a fail when attempting to get a DIMM target for a given DIMM index");
        break;
    case 0xe9162a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_C4_PIN_OUT_OF_RANGE");
        i_parser.PrintString("HWP Error description", "Indicates a fail when attempting to get a PHY mapping for an out-of-bounds module C4 pin index");
        break;
    case 0xdeef76:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_C4_PIN_MAPPING");
        i_parser.PrintString("HWP Error description", "Indicates a fail when attempting to get a module C4 pin mapping for a given PHY instance and lane");
        break;
    case 0xb4ce3f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MC_PIN_OUT_OF_RANGE");
        i_parser.PrintString("HWP Error description", "Indicates a fail when attempting to get a PHY mapping for an out-of-bounds module MC pin index");
        break;
    case 0x2cad41:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_NO_MC_PIN_MAPPING");
        i_parser.PrintString("HWP Error description", "Indicates a fail when attempting to get a module MC pin mapping for a given PHY instance and lane");
        break;
    case 0xd53d8c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EMPTY_PDA_VECTOR");
        i_parser.PrintString("HWP Error description", "Indicates a that a vector was empty when a procedure was called");
        break;
    case 0xc13196:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PDA_DRAM_OUT_OF_RANGE");
        i_parser.PrintString("HWP Error description", "Indicates a DRAM passed to the PDA code is out of range");
        break;
    case 0xe24450:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_ERROR_IN_LAST_PATTERN");
        i_parser.PrintString("HWP Error description", "An error was caused by the last MCBIST pattern");
        break;
    case 0x971444:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_COMPARE_ERROR_IN_LAST_PATTERN");
        i_parser.PrintString("HWP Error description", "A miscompare error was caused by the last MCBIST pattern");
        break;
    case 0x91d395:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_INVALID_PATTERN_INDEX");
        i_parser.PrintString("HWP Error description", "An invalid pattern index was passed to the pattern loader");
        break;
    case 0x751b63:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_ERROR_CHANGING_RANDOM_SEED");
        i_parser.PrintString("HWP Error description", "Attempting to change to a 24b random data seed which does not exist");
        break;
    case 0x8d37db:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_GALOIS_TO_SYMBOL");
        i_parser.PrintString("HWP Error description", "An invalid galois code was found");
        break;
    case 0x2c1c20:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_SYMBOL_FOR_GALOIS");
        i_parser.PrintString("HWP Error description", "An invalid symbol was passed to symbol_to_galois");
        break;
    case 0x414146:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_DQ_TO_SYMBOL");
        i_parser.PrintString("HWP Error description", "An invalid DQ bit index received to map to Galois symbol");
        break;
    case 0x415be7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_SYMBOL_TO_DQ");
        i_parser.PrintString("HWP Error description", "An invalid symbol received to map to DQ bit index");
        break;
    case 0xb13afe:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_RANK_PASSED");
        i_parser.PrintString("HWP Error description", "An invalid rank was passed to ecc::read function");
        break;
    case 0x3dd6f6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_INDEX_PASSED");
        i_parser.PrintString("HWP Error description", "An invalid index was passed to MODAL_SYMBOL_COUNT function");
        break;
    case 0x2a08f2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_INVALID_PATTERN_SIZE");
        i_parser.PrintString("HWP Error description", "An invalid pattern (incorrect size) was passed to the pattern loader");
        break;
    case 0x553561:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_MCBIST_FAILED_TO_START");
        i_parser.PrintString("HWP Error description", "The MCBIST engine failed to start its program");
        break;
    case 0x109504:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_MCBIST_FAILED_TO_STOP");
        i_parser.PrintString("HWP Error description", "The MCBIST engine failed to stop its program");
        break;
    case 0xb56574:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_PORT_NOT_FUNCTIONAL");
        i_parser.PrintString("HWP Error description", "The port used in an MCBIST program is not functional");
        break;
    case 0xdb928c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_SUPERFAST_READ_FAILED_TO_INIT");
        i_parser.PrintString("HWP Error description", "A superfast read operation failed initialization");
        break;
    case 0xba00db:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_SUPERFAST_INIT_FAILED_TO_INIT");
        i_parser.PrintString("HWP Error description", "A superfast init operation failed initialization");
        break;
    case 0x1368da:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_CONTINUOUS_SCRUB_FAILED_TO_INIT");
        i_parser.PrintString("HWP Error description", "A continuous scrub operation failed initialization");
        break;
    case 0x24db0d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_TARGETED_SCRUB_FAILED_TO_INIT");
        i_parser.PrintString("HWP Error description", "A continuous scrub operation failed initialization");
        break;
    case 0xd4ee4e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_ALREADY_AT_BOUNDARY");
        i_parser.PrintString("HWP Error description", "A continue request asked to stop at a boundary, but we are there already");
        break;
    case 0x66554d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_NO_MCBIST_SUBTESTS");
        i_parser.PrintString("HWP Error description", "Attempt to run an MCBIST program with no subtests");
        break;
    case 0x59d2a0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_REPAIRS_EXCEEDED");
        i_parser.PrintString("HWP Error description", "A mark repair operation failed to repair enough bad bits");
        break;
    case 0x176e6f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_CHIPMARK_AND_SYMBOLMARK");
        i_parser.PrintString("HWP Error description", "A mark repair operation set both a chipmark and symbol mark on one rank");
        break;
    case 0x1bf56f:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_START_ADDR_BIGGER_THAN_END_ADDR");
        i_parser.PrintString("HWP Error description", "Invalid address input. Starting address is larger than end address");
        break;
    case 0xd44d09:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_MEMDIAGS_BCMODE_INVALID_ADDRESS");
        i_parser.PrintString("HWP Error description", "An limited address scope was passed into memdiags that is not on the first port in broadcast mode");
        break;
    case 0x33b8b2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_INVALID_DRAM_GEN");
        i_parser.PrintString("HWP Error description", "The DIMM called out has an inappropriate DRAM generation (e.g., not DDR4)");
        break;
    case 0x2ced47:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_INVALID_DRAM_WIDTH_MIX");
        i_parser.PrintString("HWP Error description", "Two different widths of DIMMs are installed on port");
        break;
    case 0x0b5dd2:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_INVALID_STACK_TYPE_MIX");
        i_parser.PrintString("HWP Error description", "Two DIMMs with incompatable stack types are installed on port");
        break;
    case 0xb521b9:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_INVALID_HYBRID_MIX");
        i_parser.PrintString("HWP Error description", "Two DIMMs with incompatable hybrid types are plugged");
        break;
    case 0x12742d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_INVALID_HYBRID_MEMORY_TYPE_MIX");
        i_parser.PrintString("HWP Error description", "Two DIMMs with incompatable hybrid memory types");
        break;
    case 0xdf3b2b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_NVDIMM_PLUG_ERROR");
        i_parser.PrintString("HWP Error description", "An NVDIMM was plugged in a slot where NVDIMM's are not supported");
        break;
    case 0x12c65d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_LRDIMM_UNSUPPORTED");
        i_parser.PrintString("HWP Error description", "The DIMM is an LRDIMM and that is currently not supported");
        break;
    case 0x4346c4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_DEAD_LOAD_ON_PORT");
        i_parser.PrintString("HWP Error description", "A DIMM is deconfigured on a dual-drop port that has two DIMMS installed Need to deconfigure the other DIMM for load reasons");
        break;
    case 0xca4c24:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_INVALID_DIMM_TYPE_MIX");
        i_parser.PrintString("HWP Error description", "Two different types of DIMMs are installed on port");
        break;
    case 0x421666:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_INVALID_RANK_CONFIG");
        i_parser.PrintString("HWP Error description", "The MCA has two DIMMs plugged in with too many master ranks between them");
        break;
    case 0x6918cb:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_OVERRIDDEN_RANK_CONFIG");
        i_parser.PrintString("HWP Error description", "The DIMMS called out represent an unsupported rank configuration because it was expressly disallowed in the MRW");
        break;
    case 0xb6f60e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_SINGLE_DIMM_IN_WRONG_SLOT");
        i_parser.PrintString("HWP Error description", "The lone DIMM plugged in to the called out port is in the wrong slot");
        break;
    case 0x6dfcad:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_INVALID_RANKS_DIMM1");
        i_parser.PrintString("HWP Error description", "The DIMM called out is in 'slot 1' but contains more ranks than the other DIMM on this port. DIMM which contain the greatest number of master ranks must be in the slot furthest from the controller.");
        break;
    case 0xecde5e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_INVALID_PRIMARY_RANK_COUNT");
        i_parser.PrintString("HWP Error description", "The port called out has DIMM installed who's master ranks, when totaled, exceeded the number primary ranks allowed on a port");
        break;
    case 0x285c9a:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_PLUG_RULES_DIFFERENT_XLATE");
        i_parser.PrintString("HWP Error description", "Two DIMM with different translation (xlate) configurations are installed on port");
        break;
    case 0x5be503:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_BAD_SPD");
        i_parser.PrintString("HWP Error description", "Bad SPD data received. Settings are incorrect within SPD. This could be code problem (decoding) or bad SPD");
        break;
    case 0xd3785c:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_DIMM_REV_COMBO");
        i_parser.PrintString("HWP Error description", "Received a dimm type (e.g. RDIMM, LRDIMM) and SPD revision (e.g. 1.0, 1.1) combination unsupported by the spd_decoder object factory");
        break;
    case 0xc80f30:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_INVALID_RAW_CARD");
        i_parser.PrintString("HWP Error description", "Received a raw card that isn't currently supported in code");
        break;
    case 0x3c6a8e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE");
        i_parser.PrintString("HWP Error description", "One or more DIMMs do not support required voltage for DDR type.");
        break;
    case 0xf72a4a:
        i_parser.PrintString("HwpReturnCode", "RC_P9_MEM_PLL_INITF_UNSUPPORTED_FREQ");
        i_parser.PrintString("HWP Error description", "Unsupported MSS_FREQ attribute value");
        break;
    case 0xeceb23:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_FREQ_VALUE_NOT_VALID");
        i_parser.PrintString("HWP Error description", "Case when mss_freq is different from the predefined values.");
        break;
    case 0x34f6d2:
        i_parser.PrintString("HwpReturnCode", "RC_P9_MSS_ATTR_UPDATE_MVPD_VERSION_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_mss_attr_update Unsupported MVPD CRP0 Lx Keyword version");
        break;
    case 0x76834e:
        i_parser.PrintString("HwpReturnCode", "RC_P9_MSS_ATTR_UPDATE_MVPD_READ_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_mss_attr_update Unexpected MVPD CRP0 Lx Keyword size");
        break;
    case 0x08c7c0:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_CONFIG_MIRROR_DISABLED");
        i_parser.PrintString("HWP Error description", "Mirroring is disabled but Mirror placement policy is flipped. Firmware error. - ATTR_MRW_HW_MIRRORING_ENABLE is true - ATTR_MEM_MIRROR_PLACEMENT_POLICY is FLIPPED");
        break;
    case 0x87ff9b:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_NO_GROUP_ALLOWED");
        i_parser.PrintString("HWP Error description", "ATTR_MSS_INTERLEAVE_ENABLE doesn't have any grouping type allowed. Firmware error.");
        break;
    case 0x34fe81:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_MC");
        i_parser.PrintString("HWP Error description", "p9_mss_eff_grouping is unable to group this MCA/DMI port. This is a memory plugging error. Refer to memory plugging rules.");
        break;
    case 0xb9bd29:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR");
        i_parser.PrintString("HWP Error description", "There is not enough memory available for the requested HTM and OCC Sandbox bar sizes.");
        break;
    case 0x8e2872:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE");
        i_parser.PrintString("HWP Error description", "HTM and OCC Sandbox bars are not possible.");
        break;
    case 0xb5cdc6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR");
        i_parser.PrintString("HWP Error description", "p9_mss_eff_grouping did not find an available region 	to map non-mirrored group");
        break;
    case 0x6e44f7:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_EFF_GROUPING_M_REGION_MAP_ERROR");
        i_parser.PrintString("HWP Error description", "p9_mss_eff_grouping did not find an available region 	to map mirrored group");
        break;
    case 0x1116c6:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_INVALID_MC_CHIPLETS_DETECTED");
        i_parser.PrintString("HWP Error description", "Processor contains both MCS and MI chiplets.");
        break;
    case 0xd7db78:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR");
        i_parser.PrintString("HWP Error description", "An MC port is grouped multiples times.");
        break;
    case 0xa6522d:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_MC_MEMSIZE_DISCREPENCY");
        i_parser.PrintString("HWP Error description", "The amount of memory behind an MC (MCS/MI) calculated from Group Data doesn't agree with the amount of memory currently reported behind the same MC.");
        break;
    case 0x1258b5:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_INVALID_PORTS_CONFIG");
        i_parser.PrintString("HWP Error description", "Invalid number in group for ports 0/1 of the MC (MCS/MI). The combination can not be found in the Channel Per Group table.");
        break;
    case 0x89d56e:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SETUP_BARS_INVALID_GROUP_SIZE");
        i_parser.PrintString("HWP Error description", "Can't locate given Group size in the GROUP_SIZE_TABLE in order to determine MCFGP/MCFGPM Group size value (bits 13:23).");
        break;
    case 0xd84723:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_RING_FUNC_ENDLESS_BUFFER");
        i_parser.PrintString("HWP Error description", "Corrupted MVPD data buffer");
        break;
    case 0xd701a9:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_RING_FUNC_INVALID_RS4_HEADER");
        i_parser.PrintString("HWP Error description", "One or more fields in the RS4 header or ring block buffer is wrong");
        break;
    case 0xd2ebb1:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_RING_FUNC_NULL_POINTER");
        i_parser.PrintString("HWP Error description", "NULL pointer passed to mvpdRingFunc(SET) is not allowed");
        break;
    case 0xca4972:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_RING_FUNC_INVALID_RECORD_KEYWORD_PAIR");
        i_parser.PrintString("HWP Error description", "The Mvpd record and keyword don't pair up properly");
        break;
    case 0xfc87ff:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_RING_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Specified MVPD ring was not found (Not a bug. Info to caller.)");
        break;
    case 0x4aa918:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_RING_BUFFER_TOO_SMALL");
        i_parser.PrintString("HWP Error description", "Data does not fit into supplied buffer (Not a bug. Info to caller.)");
        break;
    case 0x1a6337:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_INSUFFICIENT_RECORD_SPACE");
        i_parser.PrintString("HWP Error description", "Ring content does not fit into Mvpd record buffer");
        break;
    case 0xac7ed4:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_INSUFFICIENT_RING_BUFFER_SPACE");
        i_parser.PrintString("HWP Error description", "Data does not fit into output ring buffer");
        break;
    case 0x64fd09:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_RINGID_DATA_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Data for given ringId missing in p9_ringId");
        break;
    case 0x482975:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_RING_REDUNDANT_DATA");
        i_parser.PrintString("HWP Error description", "MVPD ring has redundant data (Not a bug. Info to caller.)");
        break;
    case 0xfd971d:
        i_parser.PrintString("HwpReturnCode", "RC_MVPD_CODE_BUG");
        i_parser.PrintString("HWP Error description", "Code bug: Fix code!");
        break;
    case 0xf88219:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PBA_COHERENT_UTILS_INVALID_ARGS");
        i_parser.PrintString("HWP Error description", "Procedure: p9_pba_coherent_utils PBA access or setup not attempted, PBA access or setup is stopped. There is an invalid argument (mislaigned address or address out of the fabric address range) being passed ot the pba access or setup procedure.");
        break;
    case 0x110e11:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PBA_COHERENT_UTILS_RESET_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_pba_coherent_utils PBA reset did not finish (PBA_SLVRST_SLVCTL3 still in progress).");
        break;
    case 0x4a4770:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PBA_FBC_NOT_INITIALIZED_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_pba_coherent_utils The fabric was not initialized or not running.");
        break;
    case 0x34a086:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH");
        i_parser.PrintString("HWP Error description", "Procedure: p9_pba_coherent_utils Mismatch in expected state for OCB Status register.");
        break;
    case 0x4803dd:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PBA_COHERENT_UTILS_PBA_FIR_ERR_ADDR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_pba_coherent_utils PBA FIR bit active after transaction, with indication of a combined reponse address error.");
        break;
    case 0x7e6f52:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PBA_COHERENT_UTILS_PBA_FIR_ERR_NO_ADDR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_pba_coherent_utils PBA FIR bit active after transaction, with no indication of a combined response address error.");
        break;
    case 0xb6d4cb:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PBA_COHERENT_UTILS_EXTRA_INPUT_DATA");
        i_parser.PrintString("HWP Error description", "Procedure: p9_pba_coherent_utils Error code used to collect HWP input arguments.");
        break;
    case 0x40d356:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PCIE_SCOMINIT_PECID_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_pcie_scominit Invalid pec id encountered.");
        break;
    case 0xb4f8fe:
        i_parser.PrintString("HwpReturnCode", "RC_P9_IOP_HSS_PORT_NOT_READY");
        i_parser.PrintString("HWP Error description", "Procedure: p9_pcie_scominit IOP HSS Port PLLA and PLLB are not in ready state. Cannot SCOM to PMA register space.");
        break;
    case 0x8cf95a:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PHB_PERST_ACTION_INVALID_ARGS_ERR");
        i_parser.PrintString("HWP Error description", "Invalid PERST action input.");
        break;
    case 0xd40743:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PHB_PERST_PBCQ_CQ_NOT_IDLE");
        i_parser.PrintString("HWP Error description", "PBCQ CQ did not go to idle after getting reset.");
        break;
    case 0x73be4a:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PHB_PERST_NFIR_NOT_CLEARED");
        i_parser.PrintString("HWP Error description", "Attempt to clear PCI Nest FIR Register is unsuccessful.");
        break;
    case 0x7e8585:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SCAN0_DONE_POLL_THRESHOLD_ERR");
        i_parser.PrintString("HWP Error description", "Timeout waiting for scan0 to complete , loop count expired that polls for OPCG_DONE");
        break;
    case 0x442bdf:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_ARRAYINIT_POLL_THRESHOLD_ERR");
        i_parser.PrintString("HWP Error description", "Polling for OPCG_DONE for arrayInit reached threshold , count expired.");
        break;
    case 0xdf6b25:
        i_parser.PrintString("HwpReturnCode", "RC_SRAM_ABIST_DONE_BIT_ERR");
        i_parser.PrintString("HWP Error description", "SRAM abist done bit is not set");
        break;
    case 0x4ad33c:
        i_parser.PrintString("HwpReturnCode", "RC_EDRAM_ABIST_DONE_BIT_ERR");
        i_parser.PrintString("HWP Error description", "EDRAM abist done bit is not set");
        break;
    case 0x035280:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PHB_HV_UTILS_ETU_RESET_ACTIVE");
        i_parser.PrintString("HWP Error description", "ETU is in reset.");
        break;
    case 0xca8470:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PHB_HV_UTILS_INVALID_ARGS");
        i_parser.PrintString("HWP Error description", "Invalid Arguments specified!");
        break;
    case 0x6f95d5:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_HOMER_PTR");
        i_parser.PrintString("HWP Error description", "Pointer to HOMER base is bad");
        break;
    case 0x21adc6:
        i_parser.PrintString("HwpReturnCode", "RC_PM_CME_FIRINIT_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p9_pm_cme_firinit.");
        break;
    case 0x82975d:
        i_parser.PrintString("HwpReturnCode", "RC_PM_COREQUAD_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p9_pm_corequad_init.");
        break;
    case 0xf2315b:
        i_parser.PrintString("HwpReturnCode", "RC_PM_COREQUAD_CME_HALT_ERROR");
        i_parser.PrintString("HWP Error description", "Failed to halt CME");
        break;
    case 0xf6323f:
        i_parser.PrintString("HwpReturnCode", "RC_PM_COREQUAD_RESCLK_CACCR_DATA_NOT_MATCHED");
        i_parser.PrintString("HWP Error description", "Failed to match core CACCR with resclk vector table");
        break;
    case 0x8c3897:
        i_parser.PrintString("HwpReturnCode", "RC_PM_COREQUAD_RESCLK_QACCR_DATA_NOT_MATCHED");
        i_parser.PrintString("HWP Error description", "Failed to match quad QACCR with resclk vector table");
        break;
    case 0x256a93:
        i_parser.PrintString("HwpReturnCode", "RC_PM_COREQUAD_RESCLK_CACCR_DATA_IS_INVALID");
        i_parser.PrintString("HWP Error description", "Core CACCR is not same as QUACCR when resclk is disabled");
        break;
    case 0x938428:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_VPD_READ");
        i_parser.PrintString("HWP Error description", "Attempted to read #V data and got less data than we expected");
        break;
    case 0x539cf5:
        i_parser.PrintString("HwpReturnCode", "RC_INVALID_POUNDV_VERSION");
        i_parser.PrintString("HWP Error description", "Read unknown version type from #V keyword in a LRP record");
        break;
    case 0x7602be:
        i_parser.PrintString("HwpReturnCode", "RC_INVALID_MATCHING_FREQ_NUMBER");
        i_parser.PrintString("HWP Error description", "Found either zero or multiple buckets for the desired powerbus frequency");
        break;
    case 0xfb0faf:
        i_parser.PrintString("HwpReturnCode", "RC_INVALID_EQ_CHIP_POS");
        i_parser.PrintString("HWP Error description", "Encountered an invalid value for EQ chip position");
        break;
    case 0x63de72:
        i_parser.PrintString("HwpReturnCode", "RC_INVALID_BUCKET_ID");
        i_parser.PrintString("HWP Error description", "Encountered an invalid Bucket Id. Valid values are 1-6 inclusive.");
        break;
    case 0x19e639:
        i_parser.PrintString("HwpReturnCode", "RC_BAD_POUNDW_VPD_READ");
        i_parser.PrintString("HWP Error description", "Attempted to read #W data and got less data than we expected");
        break;
    case 0xe1a2c3:
        i_parser.PrintString("HwpReturnCode", "RC_INVALID_POUNDW_VERSION");
        i_parser.PrintString("HWP Error description", "Read unknown version type from #W keyword in a CRP0 record");
        break;
    case 0x5ecc85:
        i_parser.PrintString("HwpReturnCode", "RC_INCORRECT_POUNDW_BUCKET_ID");
        i_parser.PrintString("HWP Error description", "Bucket Id in #W data was not the expected Bucket Id.");
        break;
    case 0xd75c52:
        i_parser.PrintString("HwpReturnCode", "RC_PM_INIT_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p9_pm_init.");
        break;
    case 0x137973:
        i_parser.PrintString("HwpReturnCode", "RC_PM_RESET_PSAFE_EXT_VDD_VOLT_FAIL");
        i_parser.PrintString("HWP Error description", "present external VDD value is less than safe mode voltage");
        break;
    case 0xc97995:
        i_parser.PrintString("HwpReturnCode", "RC_PM_RESET_PSAFE_DPLL_FREQ_FAIL");
        i_parser.PrintString("HWP Error description", "present dpll frequency value is less than safe mode frequency");
        break;
    case 0xe44695:
        i_parser.PrintString("HwpReturnCode", "RC_PM_RESET_PSAFE_BOTH_VOLT_FREQ_FAIL");
        i_parser.PrintString("HWP Error description", "present external VDD value is less than safe mode voltage and DPLL frequency is less the safe mode frequency.");
        break;
    case 0x5d6e09:
        i_parser.PrintString("HwpReturnCode", "RC_PM_RESET_SPWKUP_DONE_ERROR");
        i_parser.PrintString("HWP Error description", "Core expected to be in special wake-up is not prior to setting auto special wake-up mode");
        break;
    case 0x8f12a3:
        i_parser.PrintString("HwpReturnCode", "RC_PM_RESET_FFDC_ERROR");
        i_parser.PrintString("HWP Error description", "Error collecting PM FFDC in one of the PM Reset Phase");
        break;
    case 0x1db306:
        i_parser.PrintString("HwpReturnCode", "RC_PM_OCB_PUT_NO_DATA_ERROR");
        i_parser.PrintString("HWP Error description", "Valid data not provided to be written via the OCB channel.");
        break;
    case 0x04331f:
        i_parser.PrintString("HwpReturnCode", "RC_PM_OCB_PUT_DATA_POLL_NOT_FULL_ERROR");
        i_parser.PrintString("HWP Error description", "Indicates that a timeout occured waiting for a push queue to be non-full before writing data. Is likely due to OCC firmware not pulling entries off of the queue in a timely manner.");
        break;
    case 0x03a458:
        i_parser.PrintString("HwpReturnCode", "RC_PM_OCBINIT_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p9_pm_ocb_init.");
        break;
    case 0x11c8b6:
        i_parser.PrintString("HwpReturnCode", "RC_PM_OCBINIT_BAD_Q_LENGTH_PARM");
        i_parser.PrintString("HWP Error description", "Bad push/pull Queue Length provided while setting up of the OCB channel.");
        break;
    case 0x7ad22a:
        i_parser.PrintString("HwpReturnCode", "RC_OCC_CONTROL_NONSTART_DUE_TO_RISCWATCH");
        i_parser.PrintString("HWP Error description", "The OCC PPC405 cannot be started due to a conflicting RISCWatch operation that keeps it in the halt state.");
        break;
    case 0x85b027:
        i_parser.PrintString("HwpReturnCode", "RC_OCC_CONTROL_MEM_BOOT_LENGTH_MISMATCH");
        i_parser.PrintString("HWP Error description", "The OCC PPC405 memory boot launcher length written did not match the expected value.");
        break;
    case 0xa981de:
        i_parser.PrintString("HwpReturnCode", "RC_PM_OCC_FIRINIT_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p9_pm_occ_firinit.");
        break;
    case 0x05b83b:
        i_parser.PrintString("HwpReturnCode", "RC_PM_OCC_GPE_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p9_pm_occ_gpe_init.");
        break;
    case 0x441b48:
        i_parser.PrintString("HwpReturnCode", "RC_PM_OCC_GPE0_RESET_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Failed to halt OCC GPE0 during RESET operation.");
        break;
    case 0x5c14e3:
        i_parser.PrintString("HwpReturnCode", "RC_PM_OCC_GPE1_RESET_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Failed to halt OCC GPE1 during RESET operation.");
        break;
    case 0x6cbfe2:
        i_parser.PrintString("HwpReturnCode", "RC_PM_OCCSRAM_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p9_pm_occ_sram_init.");
        break;
    case 0x930eae:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PBA_ADDR_OUT_OF_RANGE");
        i_parser.PrintString("HWP Error description", "PBA Address beyond permissible range");
        break;
    case 0xa43980:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PBA_ADDR_ALIGNMENT_ERROR");
        i_parser.PrintString("HWP Error description", "pba BAR must be on a 1MB boundary");
        break;
    case 0xfdbe4b:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PBA_BAR_SIZE_INVALID");
        i_parser.PrintString("HWP Error description", "Non-zero PBA BAR defined with region size of 0. Size must be 1MB or greater");
        break;
    case 0x42bd20:
        i_parser.PrintString("HwpReturnCode", "RC_PM_PBA_FIRINIT_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p9_pm_pba_firinit.");
        break;
    case 0x4805cf:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PMPROC_PBA_INIT_INCORRECT_MODE");
        i_parser.PrintString("HWP Error description", "Incorrect mode passed to pba init procedure.");
        break;
    case 0xfa1a9a:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PMPROC_PBA_SLAVE_RESET_TIMEOUT");
        i_parser.PrintString("HWP Error description", "pba_init timed out waiting for the PBA slave to reset.");
        break;
    case 0x2fbf75:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PMPROC_PBA_SLAVE_BUSY_AFTER_RESET");
        i_parser.PrintString("HWP Error description", "pba_init detected a busy PBA slave after the slave was reset.");
        break;
    case 0xaa951b:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PROCPM_PBA_BCDE_STOP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "pba_init timed out waiting to stop the Block Copy Download Engine.");
        break;
    case 0x593c19:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PROCPM_PBA_BCUE_STOP_TIMEOUT");
        i_parser.PrintString("HWP Error description", "pba_init timed out waiting to stop the Block Copy Upload Engine.");
        break;
    case 0xa64806:
        i_parser.PrintString("HwpReturnCode", "RC_PFET_CTRL_INVALID_CHIPLET_ERROR");
        i_parser.PrintString("HWP Error description", "Invalid chiplet selected.");
        break;
    case 0x6d63c6:
        i_parser.PrintString("HwpReturnCode", "RC_PFET_INIT_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p9_pm_pfet_init.");
        break;
    case 0x73dffe:
        i_parser.PrintString("HwpReturnCode", "RC_PM_PPM_FIRINIT_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p9_pm_ppm_firinit.");
        break;
    case 0x43f1a1:
        i_parser.PrintString("HwpReturnCode", "RC_PM_PSS_ADC_ERROR");
        i_parser.PrintString("HWP Error description", "SPIADC error bit asserted waiting for operation to complete.");
        break;
    case 0xa506ac:
        i_parser.PrintString("HwpReturnCode", "RC_PM_PSS_ADC_WRITE_WHILE_BUSY");
        i_parser.PrintString("HWP Error description", "SPI ADC was written while the bridge was busy. Cleared with coming reset.");
        break;
    case 0x127db5:
        i_parser.PrintString("HwpReturnCode", "RC_PM_PSS_ADC_TIMEOUT");
        i_parser.PrintString("HWP Error description", "SPIADC timed waiting to be quiesced. The SPIADC will be reset anyway so as to attempt to recover the interface.");
        break;
    case 0xb93e5c:
        i_parser.PrintString("HwpReturnCode", "RC_PM_PSS_P2S_ERROR");
        i_parser.PrintString("HWP Error description", "SPIP2S error bit asserted waiting for operation to complete.");
        break;
    case 0xe3da55:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_GPE_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p9_pm_pstate_gpe_init.");
        break;
    case 0xf3cebf:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_GPE_INIT_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Pstate GPE init timed out while waiting for PGPE Active in OCC SCRATCH2.");
        break;
    case 0x1d708b:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_GPE_INIT_PSTATE_AUTOSTART_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Pstate GPE Protocol Auto Start timeout. This is only used in lab test modes.");
        break;
    case 0x412226:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_GPE_INIT_DEBUG_HALT");
        i_parser.PrintString("HWP Error description", "Pstate GPE init detected a Debug Halt condition. This should only assert in a development debug environment.");
        break;
    case 0x73b88d:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_GPE_RESET_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Pstate GPE init timed out while waiting for HALT status in XSR register.");
        break;
    case 0x23aef2:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_GPE_PBA_INIT_FAILED");
        i_parser.PrintString("HWP Error description", "p9_pm_pba_init failed in PM_INIT mode.");
        break;
    case 0xd62882:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PM_SET_HOMER_BAR_NOT_4MB_ALIGNED");
        i_parser.PrintString("HWP Error description", "HOMER BAR is not aligned to 4MB.");
        break;
    case 0x12b5b5:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PM_SET_HOMER_BAR_SIZE_INVALID");
        i_parser.PrintString("HWP Error description", "HOMER Size is 0 but BAR is non-zero.");
        break;
    case 0x6c48d5:
        i_parser.PrintString("HwpReturnCode", "RC_STOP_GPE_BAD_MODE");
        i_parser.PrintString("HWP Error description", "Unknown mode passed to p9_pm_stop_gpe_init.");
        break;
    case 0x77b87b:
        i_parser.PrintString("HwpReturnCode", "RC_STOP_GPE_VREF_CALIBRATION_FAILED");
        i_parser.PrintString("HWP Error description", "VDMs/IVRM enabled but necessary VREF calibration failed.");
        break;
    case 0xaa8432:
        i_parser.PrintString("HwpReturnCode", "RC_STOP_GPE_INIT_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Stop GPE init timed out while waiting for SGPE Active in OCCFLG register.");
        break;
    case 0xc297c1:
        i_parser.PrintString("HwpReturnCode", "RC_STOP_GPE_RESET_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Stop GPE init timedout while waiting for HALT status in XSR register.");
        break;
    case 0x55c140:
        i_parser.PrintString("HwpReturnCode", "RC_STOP_GPE_PFETS_FAILED");
        i_parser.PrintString("HWP Error description", "Stop GPE called to p9_pm_pfet_init failed.");
        break;
    case 0xbe449c:
        i_parser.PrintString("HwpReturnCode", "RC_STOP_GPE_PBA_INIT_FAILED");
        i_parser.PrintString("HWP Error description", "Stop GPE called to p9_pm_pba_init failed.");
        break;
    case 0xe7eff9:
        i_parser.PrintString("HwpReturnCode", "RC_STOP_GPE_INVALID_CORE_EX_CONFIG");
        i_parser.PrintString("HWP Error description", "Invalid configuration of good core and bad EX detected");
        break;
    case 0x47f6de:
        i_parser.PrintString("HwpReturnCode", "RC_STOP_GPE_INVALID_CORE_EQ_CONFIG");
        i_parser.PrintString("HWP Error description", "Invalid configuration of good core and bad EQ detected");
        break;
    case 0x9c23f4:
        i_parser.PrintString("HwpReturnCode", "RC_STOP_GPE_INVALID_EX_CORE_CONFIG");
        i_parser.PrintString("HWP Error description", "Invalid configuration of good EX and no functional cores detected");
        break;
    case 0x1149d0:
        i_parser.PrintString("HwpReturnCode", "RC_PPE_STATE_HALT_TIMEOUT_ERR");
        i_parser.PrintString("HWP Error description", "A HALT operation to a PPE timed out. This is indicative of hardware error.");
        break;
    case 0xd6c6d2:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL");
        i_parser.PrintString("HWP Error description", "#V data is not same across EQ chiplets");
        break;
    case 0xbf8714:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR");
        i_parser.PrintString("HWP Error description", "During #V Biased data validity checking, the data did not have at or increasing slopes (eg Power Save LE Nominal LE Turbo LE UltraTurbo). Pstates are being disabled.");
        break;
    case 0x328df4:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_POUNDV_SLOPE_ERROR");
        i_parser.PrintString("HWP Error description", "During #V validity checking, the data did not have at or increasing slopes (eg Power Save LE Nominal LE Turbo LE UltraTurbo). Pstates are being disabled.");
        break;
    case 0xec6072:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_POUNDV_ZERO_ERROR");
        i_parser.PrintString("HWP Error description", "During #V validity checking, one or more required fields were found to contain zero contents. Pstates are being disabled.");
        break;
    case 0x832f23:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR");
        i_parser.PrintString("HWP Error description", "During #V Biased data validity checking, one or more required fields were found to contain zero contents. Pstates are being disabled.");
        break;
    case 0x8db9a2:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_POUNDV_WOF_UT_ERROR");
        i_parser.PrintString("HWP Error description", "WOF was intending to be enabled but could not due to #V validity checking issue of the UltraTurbo content. The machine continues as functional but with WOF disabled.");
        break;
    case 0x2b2181:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR");
        i_parser.PrintString("HWP Error description", "WOF was intending to be enabled but could not due to #V validity checking issue of the biased UltraTurbo content. The machine continues as functional but with WOF disabled.");
        break;
    case 0x96d61c:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_WOF_HEADER_DATA_INVALID");
        i_parser.PrintString("HWP Error description", "WOF Header data is invalid. The machine continues as functional but with WOF disabled.");
        break;
    case 0xcd2cf9:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_VFRT_HEADER_DATA_INVALID");
        i_parser.PrintString("HWP Error description", "VFRT Header data is invalid. The machine continues as functional but with WOF disabled.");
        break;
    case 0x85bd78:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_IQ_VPD_ERROR");
        i_parser.PrintString("HWP Error description", "#IQ data payload header is invalid");
        break;
    case 0xa6fc0f:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_IQ_ACCESS_ERROR");
        i_parser.PrintString("HWP Error description", "pstate parameter accesses within proc_get_mvpd_iddq failed");
        break;
    case 0x0f1f86:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_POUND_W_TDP_IAC_INVALID");
        i_parser.PrintString("HWP Error description", "#W one or more Idd TDP AC values are zero");
        break;
    case 0x5341a0:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_POUND_W_TDP_IDC_INVALID");
        i_parser.PrintString("HWP Error description", "#W one or more Idd TDP DC values are zero");
        break;
    case 0x4b0a30:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_POUND_W_INVALID_VID_VALUE");
        i_parser.PrintString("HWP Error description", "#W vid compare ivid value is zero");
        break;
    case 0x3fbf1c:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_POUND_W_INVALID_VID_ORDER");
        i_parser.PrintString("HWP Error description", "#W vid compare ivid value is not in increasing order");
        break;
    case 0x117405:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE");
        i_parser.PrintString("HWP Error description", "#W threshold values are invalid");
        break;
    case 0xcd9bb1:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE");
        i_parser.PrintString("HWP Error description", "#W freq drop values are invalid");
        break;
    case 0x8b89c3:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_POUND_W_VERY_INVALID_VDM_DATA");
        i_parser.PrintString("HWP Error description", "For VDM enablement, the Turbo Large Turbo threshold in #W is found to less than -32mV which is an indicator of bad (or old) VPD. VDMs are being disabled but otherwise pressing on.");
        break;
    case 0xf0d7bc:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_POUND_W_ACCESS_FAIL");
        i_parser.PrintString("HWP Error description", "pstate parameter accesses within proc_get_mvpd_poundw failed");
        break;
    case 0xf8e2a4:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_RESCLK_INDEX_ERROR");
        i_parser.PrintString("HWP Error description", "The resonant clock index vector size is not expected.");
        break;
    case 0x2d5d3d:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_RESCLK_TABLE_ERROR");
        i_parser.PrintString("HWP Error description", "The resonant clock table vector size is not expected.");
        break;
    case 0x0cd578:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_RESCLK_L3_TABLE_ERROR");
        i_parser.PrintString("HWP Error description", "The resonant clock L3 table vector size is not expected.");
        break;
    case 0x55345f:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_CORE_FLOOR_FREQ_GT_UT_FREQ");
        i_parser.PrintString("HWP Error description", "The core floor frequency is greater than ultra turbo freq.");
        break;
    case 0x9082c1:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_FREQ2PS_LT_PSTATE_MIN_ERROR");
        i_parser.PrintString("HWP Error description", "The calculated Pstate is less than the allowed minimum..");
        break;
    case 0xcc48cc:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_SAFE_FREQ_GT_UT_FREQ");
        i_parser.PrintString("HWP Error description", "The calculated Save Mode frequency, after uplifting to account for VDM droop events, is above the UltraTurbo frequency of the part.");
        break;
    case 0x99956a:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_NEST_FREQ_EQ_ZERO");
        i_parser.PrintString("HWP Error description", "The system attribute ATTR_FREQ_PB_MHZ has a zero value. This is fatal to Pstate functionality.");
        break;
    case 0xfe885b:
        i_parser.PrintString("HwpReturnCode", "RC_PSTATE_PB_VFRT_BIAS_ERROR");
        i_parser.PrintString("HWP Error description", "The frequency biasing attributes do not match when WOF is enabled. This is a requirement for doing VFRT biasing that is consistent with #V frequency biasing.");
        break;
    case 0x1d62cb:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PUTMEMPROC_INVALID_FLAGS");
        i_parser.PrintString("HWP Error description", "Procedure: p9_putmemproc Invalid flag specified for ADU access");
        break;
    case 0x48e0eb:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PUTMEMPROC_UNSUPPORTED_FLAGS");
        i_parser.PrintString("HWP Error description", "Procedure: p9_putmemproc Unsupported flag specified for ADU access");
        break;
    case 0x07611b:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PUTMEMPROC_INVALID_SIZE_CI");
        i_parser.PrintString("HWP Error description", "Procedure: p9_putmemproc Invalid byte count specified for cache inhibited ADU access");
        break;
    case 0x5b4c76:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PUTMEMPROC_INVALID_SIZE_DMA");
        i_parser.PrintString("HWP Error description", "Procedure: p9_putmemproc Invalid byte count specified for DMA partial write ADU access");
        break;
    case 0x648431:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PM_QUAD_POWEROFF_INCORRECT_EQ_SCAN64_VAL");
        i_parser.PrintString("HWP Error description", "Data mis-match on EQ_SCAN64");
        break;
    case 0x7a963d:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PM_QUAD_POWEROFF_CLKCNTL_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Clock Controller timeout with OPCG Done. Nimbus DD1 only");
        break;
    case 0x05a0d0:
        i_parser.PrintString("HwpReturnCode", "RC_P9_QUERY_STOP_STATE_INCONSISTENT");
        i_parser.PrintString("HWP Error description", "The Core and Stop States are inconsistent");
        break;
    case 0xff3836:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SPR_NAME_MAP_INIT_ERR");
        i_parser.PrintString("HWP Error description", "SPR name map is not empty while try to initialize");
        break;
    case 0xa9141b:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SPR_NAME_MAP_ACCESS_ERR");
        i_parser.PrintString("HWP Error description", "Illegal SPR name or read/write mode access");
        break;
    case 0x53e4a0:
        i_parser.PrintString("HwpReturnCode", "RC_P9_RAM_NOT_SETUP_ERR");
        i_parser.PrintString("HWP Error description", "RAM is not setup as active before doing ram or cleanup");
        break;
    case 0xb5909b:
        i_parser.PrintString("HwpReturnCode", "RC_P9_RAM_THREAD_NOT_STOP_ERR");
        i_parser.PrintString("HWP Error description", "The thread to perform ramming is not stopped");
        break;
    case 0x6c4586:
        i_parser.PrintString("HwpReturnCode", "RC_P9_RAM_THREAD_INACTIVE_ERR");
        i_parser.PrintString("HWP Error description", "The thread to perform ramming is not active");
        break;
    case 0x0aa665:
        i_parser.PrintString("HwpReturnCode", "RC_P9_RAM_STATUS_IN_RECOVERY_ERR");
        i_parser.PrintString("HWP Error description", "Attempt to perform ramming during recovery");
        break;
    case 0xa8e6b6:
        i_parser.PrintString("HwpReturnCode", "RC_P9_RAM_STATUS_EXCEPTION_ERR");
        i_parser.PrintString("HWP Error description", "Exception or interrupt happened during ramming");
        break;
    case 0xadc3b0:
        i_parser.PrintString("HwpReturnCode", "RC_P9_RAM_STATUS_POLL_THRESHOLD_ERR");
        i_parser.PrintString("HWP Error description", "Polling for ram done reached threshold");
        break;
    case 0xac017e:
        i_parser.PrintString("HwpReturnCode", "RC_P9_RAM_INVALID_REG_TYPE_ACCESS_ERR");
        i_parser.PrintString("HWP Error description", "Illegal reg type access");
        break;
    case 0x2cda4a:
        i_parser.PrintString("HwpReturnCode", "RC_P9_RNG_INIT_CONDITIONER_STARTUP_TEST_FAILED_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_rng_init_phase1 NX RNG Read Conditioner startup test failed after POR, NX RNG is unusable");
        break;
    case 0x5aa85e:
        i_parser.PrintString("HwpReturnCode", "RC_P9_RNG_INIT_SELF_TEST_FAILED_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_rng_init_phase2 NX RNG Self Test Hard Fail status is non-zero after programmed initialization, NX RNG is unusable");
        break;
    case 0x786291:
        i_parser.PrintString("HwpReturnCode", "RC_CHECK_MASTER_STOP15_PENDING");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_master_stop15 Indicates the targeted core is either running (hasn't started to enter a STOP state) or is in transition. This return code would be used by the caller (SBE control loop) to determine whether to continue polling for a completed transition. Note: STOP 11 and STOP 15 are equivalent for POWER9.");
        break;
    case 0x500535:
        i_parser.PrintString("HwpReturnCode", "RC_CHECK_MASTER_STOP15_INVALID_STATE");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_master_stop15 Indicates the targeted core is no longer pending entering a STOP state but the achieved level is not appropriate.");
        break;
    case 0xfd3ed8:
        i_parser.PrintString("HwpReturnCode", "RC_CHECK_MASTER_STOP15_DEADMAN_TIMEOUT");
        i_parser.PrintString("HWP Error description", "SBE deadman timer fired with reason set in DEADMAN_TIMEOUT_REASON");
        break;
    case 0x5c9ead:
        i_parser.PrintString("HwpReturnCode", "RC_P9_CAPP_QUIESCE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce CAPP quiesce done bit is not set");
        break;
    case 0x6a2daf:
        i_parser.PrintString("HwpReturnCode", "RC_P9_NTL_NOT_IN_RESET");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce The NTLs are not all in the reset state for the NPU");
        break;
    case 0x8ccc64:
        i_parser.PrintString("HwpReturnCode", "RC_P9_VAS_QUIESCE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce The VAS quiesce was not achieved");
        break;
    case 0x57a6e5:
        i_parser.PrintString("HwpReturnCode", "RC_P9_NX_PBI_WRITE_IDLE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce The PBI Write Idle never happened");
        break;
    case 0x88311e:
        i_parser.PrintString("HwpReturnCode", "RC_P9_NX_CRB_KILL_DONE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce CRB kills were not complete");
        break;
    case 0x2d868f:
        i_parser.PrintString("HwpReturnCode", "RC_P9_NX_STOP_UMAC_FETCHING_NEW_CRBS_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce UMAC was not stopped from fetching new CRBs");
        break;
    case 0x30641f:
        i_parser.PrintString("HwpReturnCode", "RC_P9_NX_UMAC_DISPATCH_SLOTS_TO_DRAIN_CRBS_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce UMAC was not done dispatching slots to drain of CRBs");
        break;
    case 0x67f82b:
        i_parser.PrintString("HwpReturnCode", "RC_P9_WAIT_FOR_DMA_CHANNELS_TO_DRAIN_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce DMA channels were not drained");
        break;
    case 0x08c8aa:
        i_parser.PrintString("HwpReturnCode", "RC_P9_WAIT_FOR_ERAT_IDLE");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce ERAT was not idle");
        break;
    case 0x1433fc:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PBI_MASTER_MACHINES_IDLE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce PBI Master machines are not idle");
        break;
    case 0xd9801d:
        i_parser.PrintString("HwpReturnCode", "RC_P9_UMAC_QUIESCE_FAILED");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce UMAC status control quiesce failed");
        break;
    case 0x212c97:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PSIHBCR_INBOUND_QUEUE_NOT_EMPTY");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce PSIHBCR inbound queue not empty");
        break;
    case 0x814eee:
        i_parser.PrintString("HwpReturnCode", "RC_P9_INTP_QUIESCE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce INTP master or slave is not idle");
        break;
    case 0xf8ec08:
        i_parser.PrintString("HwpReturnCode", "RC_P9_INT_WORKAROUND_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_check_quiesce If we hit an error in the INT unit workaround for DD1 part");
        break;
    case 0x263640:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SBE_CHIPLET_PLL_INITF_INVALID_CHIPLET");
        i_parser.PrintString("HWP Error description", "Unsupported/unexpected pervasive chiplet instance");
        break;
    case 0x392416:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SBE_CHIPLET_PLL_INITF_UNSUPPORTED_OBUS_BUCKET");
        i_parser.PrintString("HWP Error description", "Unsupported OBUS PLL bucket select");
        break;
    case 0x8fd06c:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SBE_CHIPLET_PLL_INITF_UNSUPPORTED_MC_BUCKET");
        i_parser.PrintString("HWP Error description", "Unsupported MC PLL bucket select");
        break;
    case 0x7f8fa1:
        i_parser.PrintString("HwpReturnCode", "RC_THOLD_ERR");
        i_parser.PrintString("HWP Error description", "thold status not matching the expected value in clock start stop sequence");
        break;
    case 0x3f7f63:
        i_parser.PrintString("HwpReturnCode", "RC_INVALID_SBE_FFDC_PACKET");
        i_parser.PrintString("HWP Error description", "Invalid data detected in the SBE FFDC buffer");
        break;
    case 0x93af94:
        i_parser.PrintString("HwpReturnCode", "RC_CPLT_NOT_ALIGNED_ERR");
        i_parser.PrintString("HWP Error description", "Chiplet not aligned");
        break;
    case 0xede569:
        i_parser.PrintString("HwpReturnCode", "RC_CPLT_OPCG_DONE_NOT_SET_ERR");
        i_parser.PrintString("HWP Error description", "Chiplet OPCG_DONE not set after clock start/stop command");
        break;
    case 0xea5192:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SBE_FABRICINIT_FBC_STOPPED_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_fabricinit Fabric init sequence not attempted, fabric arbitration is stopped.");
        break;
    case 0xb32fa1:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SBE_FABRICINIT_FAILED_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_fabricinit Fabric init failed, or mismatch in expected ADU status.");
        break;
    case 0x9401de:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SBE_FABRICINIT_NO_INIT_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_fabricinit ADU operation completed successfully, but fabric was not initialized.");
        break;
    case 0x6518ba:
        i_parser.PrintString("HwpReturnCode", "RC_BUS_STATUS_BUSY_0");
        i_parser.PrintString("HWP Error description", "I2C stop sequence did not complete within timeout after switching SBE to PLL speed");
        break;
    case 0xecd8b3:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SBE_LOAD_BOOTLOADER_INVALID_TARGET_ADDRESS");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_load_bootloader Target base address is not cacheline aligned.");
        break;
    case 0x6c69c7:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SBE_LOAD_BOOTLOADER_INVALID_PAYLOAD_SIZE");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_load_bootloader Payload size is invalid.");
        break;
    case 0x85d3e9:
        i_parser.PrintString("HwpReturnCode", "RC_P9_MASTER_CORE_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_load_bootloader The master core is not found from the EX master target");
        break;
    case 0x69a93b:
        i_parser.PrintString("HwpReturnCode", "RC_LPC_ACCESS_TIMEOUT");
        i_parser.PrintString("HWP Error description", "An attempt to read/write data in the LPC address space via the Alter/Display unit timed out.");
        break;
    case 0x14534e:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SBE_MCS_SETUP_NO_MC_FOUND_ERR");
        i_parser.PrintString("HWP Error description", "There is no functional MCS/MI unit target configured on the master chip");
        break;
    case 0x44c647:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SBE_NPLL_INITF_UNSUPPORTED_NPLL_BUCKET");
        i_parser.PrintString("HWP Error description", "Unsupported Nest PLL bucket value");
        break;
    case 0x3416f2:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SBE_NPLL_INITF_UNSUPPORTED_FPLL_BUCKET");
        i_parser.PrintString("HWP Error description", "Unsupported Filter PLL bucket value");
        break;
    case 0xbd1fdf:
        i_parser.PrintString("HwpReturnCode", "RC_SS_PLL_LOCK_ERR");
        i_parser.PrintString("HWP Error description", "Spread Spectrum pll not locked");
        break;
    case 0x9b6946:
        i_parser.PrintString("HwpReturnCode", "RC_CP_FILTER_PLL_LOCK_ERR");
        i_parser.PrintString("HWP Error description", "CP Filter PLL not locked");
        break;
    case 0xb5d1fc:
        i_parser.PrintString("HwpReturnCode", "RC_NEST_PLL_ERR");
        i_parser.PrintString("HWP Error description", "Nest PLL not locked");
        break;
    case 0xfcd190:
        i_parser.PrintString("HwpReturnCode", "RC_IO_FILTER_PLL_LOCK_ERR");
        i_parser.PrintString("HWP Error description", "IO Filter PLL not locked");
        break;
    case 0xade375:
        i_parser.PrintString("HwpReturnCode", "RC_SPREAD_SPECTRUM_ENABLE_ERR");
        i_parser.PrintString("HWP Error description", "Failed to enable Spread Spectrum");
        break;
    case 0x983ab6:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SCOM_FAILURE");
        i_parser.PrintString("HWP Error description", "SBE encountered a SCOM failure");
        break;
    case 0xacefa9:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PIB_XSCOM_ERROR");
        i_parser.PrintString("HWP Error description", "SBE SCOM failure - PIB XSCOM failure");
        break;
    case 0x477ae0:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PIB_OFFLINE_ERROR");
        i_parser.PrintString("HWP Error description", "SBE SCOM failure - Chiplet offline");
        break;
    case 0x81831e:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PIB_PARTIAL_ERROR");
        i_parser.PrintString("HWP Error description", "SBE SCOM failure - Partial SCOM failure");
        break;
    case 0xddb281:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PIB_ADDRESS_ERROR");
        i_parser.PrintString("HWP Error description", "SBE SCOM failure - SCOM address failure");
        break;
    case 0x9e41b0:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PIB_CLOCK_ERROR");
        i_parser.PrintString("HWP Error description", "SBE SCOM failure - Clock error");
        break;
    case 0xb51845:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PIB_PARITY_ERROR");
        i_parser.PrintString("HWP Error description", "SBE SCOM failure - Parity error");
        break;
    case 0x38c80d:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PIB_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "SBE SCOM failure - Timeout error");
        break;
    case 0xb4fc32:
        i_parser.PrintString("HwpReturnCode", "RC_PLL_LOCK_ERR");
        i_parser.PrintString("HWP Error description", "PLL Lock Not set");
        break;
    case 0xe50a03:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_PPE_UTILS_HALT_TIMEOUT_ERR");
        i_parser.PrintString("HWP Error description", "A HALT operation to a PPE timed out. This is indicative of hardware error.");
        break;
    case 0x52f8dd:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PUTRING_CHECKWORD_DATA_MISMATCH");
        i_parser.PrintString("HWP Error description", "putring failed due to checkword mismatch");
        break;
    case 0x4064e4:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PUTRING_OPCG_DONE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "putring failed due to opcg done timeout");
        break;
    case 0x0fb963:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SBE_SCOMINIT_XSCOM_BAR_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_scominit Invalid XSCOM BAR attribute configuration, BAR is not aligned to HW implementation");
        break;
    case 0x14d2b8:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SBE_SCOMINIT_LPC_BAR_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_sbe_scominit Invalid LPC BAR attribute configuration, BAR is not aligned to HW implementation");
        break;
    case 0xfbdd85:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SELECT_EX_CORE_EQ_CONFIG_ERROR");
        i_parser.PrintString("HWP Error description", "Did not find the matching EQ for the first core.");
        break;
    case 0x76f800:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SELECT_EX_NO_CORE_AVAIL_ERROR");
        i_parser.PrintString("HWP Error description", "No cores are configurable with current partial good and gard settings");
        break;
    case 0xefade8:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SELECT_EX_FUSED_NOT_EVEN_ERROR");
        i_parser.PrintString("HWP Error description", "The first core found in fused mode was not an even core.");
        break;
    case 0xedcef2:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SELECT_EX_FUSED_ODD_ERROR");
        i_parser.PrintString("HWP Error description", "The first core found in fused mode was even but the companion odd core was not functional.");
        break;
    case 0x3e55c7:
        i_parser.PrintString("HwpReturnCode", "RC_SBE_SELECT_EX_FORCE_FUSED_CORES_DISABLED");
        i_parser.PrintString("HWP Error description", "Forcing fused core mode has been disabled via eFuses");
        break;
    case 0x8127ca:
        i_parser.PrintString("HwpReturnCode", "RC_MF_OSC_ERR");
        i_parser.PrintString("HWP Error description", "MF Oscillator error active");
        break;
    case 0xcaa107:
        i_parser.PrintString("HwpReturnCode", "RC_MF_OSC_NOT_TOGGLE");
        i_parser.PrintString("HWP Error description", "MF Oscillator not toggling");
        break;
    case 0x250546:
        i_parser.PrintString("HwpReturnCode", "RC_I2C_BUS_STATUS_BUSY");
        i_parser.PrintString("HWP Error description", "I2C seeprom port is not responding");
        break;
    case 0xf83d13:
        i_parser.PrintString("HwpReturnCode", "RC_MAGIC_NUMBER_NOT_VALID");
        i_parser.PrintString("HWP Error description", "Magic number not matching from Seeprom read with Fused number in OTPROM");
        break;
    case 0x4fa153:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_GETTRACEARRAY_INVALID_BUS");
        i_parser.PrintString("HWP Error description", "The specified trace bus ID is invalid.");
        break;
    case 0x541cb5:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_GETTRACEARRAY_INVALID_TARGET");
        i_parser.PrintString("HWP Error description", "An invalid target type was supplied for the requested trace array.");
        break;
    case 0x6a8ab3:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_GETTRACEARRAY_CORE_NOT_DUMPABLE");
        i_parser.PrintString("HWP Error description", "An attempt was made to dump a core trace array, but this chip's core cannot be dumped via SCOM.");
        break;
    case 0x52d218:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_GETTRACEARRAY_TRACE_RUNNING");
        i_parser.PrintString("HWP Error description", "An attempt was made to dump a trace array while it was still running.");
        break;
    case 0x75ed57:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_GETTRACEARRAY_TRACE_MUX_INCORRECT");
        i_parser.PrintString("HWP Error description", "The requested trace array's primary trace mux is not set up to capture the requested trace bus.");
        break;
    case 0xd57aa9:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SETUP_BARS_FSP_BAR_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_setup_bars FSP BAR attributes are not aligned to HW implementation");
        break;
    case 0xaf6a38:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SETUP_BARS_PSI_BAR_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_setup_bars PSI BAR attributes are not aligned to HW implementation");
        break;
    case 0xd6f227:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SETUP_BARS_NPU_PHY0_BAR_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_setup_bars NPU PHY0 BAR attributes are not aligned to HW implementation");
        break;
    case 0x9fce16:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SETUP_BARS_NPU_PHY1_BAR_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_setup_bars NPU PHY1 BAR attributes are not aligned to HW implementation");
        break;
    case 0x244bb1:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SETUP_BARS_NPU_MMIO_BAR_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_setup_bars NPU MMIO BAR attributes are not aligned to HW implementation");
        break;
    case 0x0b6183:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SETUP_BARS_INVALID_MCD_NM_RANGE_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_setup_bars Invalid configuration for MCD non-mirrored range");
        break;
    case 0x828ac8:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SETUP_BARS_INVALID_MCD_M_RANGE_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_setup_bars Invalid configuration for MCD mirrored range");
        break;
    case 0xf505e7:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SETUP_BARS_INVALID_MCD_GROUP_SIZE_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_setup_bars Unsupported MCD group size");
        break;
    case 0x5ea677:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SETUP_BARS_INT_PC_BAR_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_setup_bars INT PC BAR attributes are not aligned to HW implementation");
        break;
    case 0x07a06b:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SETUP_BARS_INT_VC_BAR_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_setup_bars INT VC BAR attributes are not aligned to HW implementation");
        break;
    case 0x8fee45:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SETUP_BARS_INT_TM1_BAR_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_setup_bars INT TM1 BAR attributes are not aligned to HW implementation");
        break;
    case 0x8f700d:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SETUP_BARS_INT_IC_BAR_ATTR_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_setup_bars INT IC BAR attributes are not aligned to HW implementation");
        break;
    case 0x4e8e1a:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SETUP_BARS_RANGE_OVERLAP_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_setup_bars Overlapping memory/MMIO address ranges detected");
        break;
    case 0xe9de7d:
        i_parser.PrintString("HwpReturnCode", "RC_PM_EVID_BOOT_FREQ_GT_UT");
        i_parser.PrintString("HWP Error description", "The Boot Frequency is higher than the part's UltraTurbo value.");
        break;
    case 0x9cc0ad:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SMP_LINK_LAYER_RX_CONTROL_STABILITY_ERR");
        i_parser.PrintString("HWP Error description", "DL RX Control register per-lane lock value did not stabilize prior to code enforced polling timeout");
        break;
    case 0x6a0b00:
        i_parser.PrintString("HwpReturnCode", "RC_P9_SMP_LINK_LAYER_RX_CONTROL_NOT_LOCKED_ERR");
        i_parser.PrintString("HWP Error description", "DL RX Control register reported at least one lane did not lock");
        break;
    case 0x0a97f5:
        i_parser.PrintString("HwpReturnCode", "RC_CBS_NOT_IN_IDLE_STATE");
        i_parser.PrintString("HWP Error description", "CBS did not complete (did not arrive in IDLE state) within timeout");
        break;
    case 0x57cc3a:
        i_parser.PrintString("HwpReturnCode", "RC_VDN_PGOOD_NOT_SET");
        i_parser.PrintString("HWP Error description", "Nest power (VDN) Power Good indication not set");
        break;
    case 0x49e56c:
        i_parser.PrintString("HwpReturnCode", "RC_VDD_NEST_OBSERVE_NOT_SET");
        i_parser.PrintString("HWP Error description", "Nest power (VDN) observe bit not set");
        break;
    case 0xddcc1a:
        i_parser.PrintString("HwpReturnCode", "RC_COLLECT_CC_STATUS_REGISTERS");
        i_parser.PrintString("HWP Error description", "Collect clock status registers on cbs fail");
        break;
    case 0xccfab7:
        i_parser.PrintString("HwpReturnCode", "RC_OPCG_REGISTERS");
        i_parser.PrintString("HWP Error description", "Collect opcg registers on cbs fail");
        break;
    case 0x22faa9:
        i_parser.PrintString("HwpReturnCode", "RC_MUX_SEQ_HW_ERROR");
        i_parser.PrintString("HWP Error description", "Collect hw access errors during p9_pib2pcb_mux_seq");
        break;
    case 0x7b15b7:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PBCQ_CQ_NOT_IDLE");
        i_parser.PrintString("HWP Error description", "PBCQ CQ did not go to idle after getting reset.");
        break;
    case 0x0d4233:
        i_parser.PrintString("HwpReturnCode", "RC_P9_PHB_NFIR_NOT_CLEARED");
        i_parser.PrintString("HWP Error description", "Attempt to clear PCI Nest FIR Register is unsuccessful.");
        break;
    case 0x13d568:
        i_parser.PrintString("HwpReturnCode", "RC_SUSPEND_FFDC");
        i_parser.PrintString("HWP Error description", "OCC Complex Suspend binary ffdc data");
        break;
    case 0x2564db:
        i_parser.PrintString("HwpReturnCode", "RC_P9_THREAD_CONTROL_START_PRE_NOMAINT");
        i_parser.PrintString("HWP Error description", "Start command precondition not met: RAS STAT Maintenance bit is not set.");
        break;
    case 0xe83112:
        i_parser.PrintString("HwpReturnCode", "RC_P9_THREAD_CONTROL_STOP_FAIL");
        i_parser.PrintString("HWP Error description", "Stop command issued to core PC, but RAS STAT maintenance bit is not set.");
        break;
    case 0x0d068e:
        i_parser.PrintString("HwpReturnCode", "RC_P9_THREAD_CONTROL_STEP_PRE_NOTSTOPPING");
        i_parser.PrintString("HWP Error description", "Step command precondition not met: Not all threads are stopped.");
        break;
    case 0x6a71b6:
        i_parser.PrintString("HwpReturnCode", "RC_P9_THREAD_CONTROL_STEP_FAIL");
        i_parser.PrintString("HWP Error description", "Step command issued to core PC, but RAS STAT run bit is still set.");
        break;
    case 0x63df70:
        i_parser.PrintString("HwpReturnCode", "RC_P9_THREAD_CONTROL_INVALID_COMMAND");
        i_parser.PrintString("HWP Error description", "p9_thread_control is called with an invalid command");
        break;
    case 0x253948:
        i_parser.PrintString("HwpReturnCode", "RC_P9_TOD_SETUP_NULL_NODE");
        i_parser.PrintString("HWP Error description", "Procedure: p9_tod_setup A null node has been passed into the procedure");
        break;
    case 0x3b3a57:
        i_parser.PrintString("HwpReturnCode", "RC_P9_TOD_SETUP_INVALID_NODE_DELAY");
        i_parser.PrintString("HWP Error description", "Procedure: p9_tod_setup Delay is out of range. Node delay must be between 0 and 255 inclusive.");
        break;
    case 0x4703e6:
        i_parser.PrintString("HwpReturnCode", "RC_P9_TOD_SETUP_INVALID_TOPOLOGY");
        i_parser.PrintString("HWP Error description", "Procedure: p9_tod_setup Invalid TOD oscillator configuration");
        break;
    case 0x91817e:
        i_parser.PrintString("HwpReturnCode", "RC_P9_TOD_SETUP_INVALID_TOPOLOGY_RX");
        i_parser.PrintString("HWP Error description", "Procedure: p9_tod_setup RX configuration specifies a deconfigured fabric link");
        break;
    case 0x7f3309:
        i_parser.PrintString("HwpReturnCode", "RC_P9_TOD_SETUP_INVALID_TOPOLOGY_TX");
        i_parser.PrintString("HWP Error description", "Procedure: p9_tod_setup TX configuration specifies a deconfigured fabric link");
        break;
    case 0x86afe5:
        i_parser.PrintString("HwpReturnCode", "RC_P9_TOD_INIT_NOT_RUNNING");
        i_parser.PrintString("HWP Error description", "Procedure: p9_tod_init TOD FSM did not reach running state prior to timeout");
        break;
    case 0x1aae06:
        i_parser.PrintString("HwpReturnCode", "RC_P9_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_tod_init TOD error register indicates master path 0 step check error");
        break;
    case 0x0b51ae:
        i_parser.PrintString("HwpReturnCode", "RC_P9_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_tod_init TOD error register indicates master path 1 step check error");
        break;
    case 0xfc3598:
        i_parser.PrintString("HwpReturnCode", "RC_P9_TOD_INIT_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_tod_init Unexpected error bit(s) set in TOD error register");
        break;
    case 0xe67036:
        i_parser.PrintString("HwpReturnCode", "RC_P9_TOD_MOVE_TOD_TO_TB_INIT_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: p9_tod_move_tod_to_tb Timeout reaching expected TFMR state");
        break;
    case 0xf96baf:
        i_parser.PrintString("HwpReturnCode", "RC_P9_TOD_MOVE_TOD_TO_TB_INIT_ERROR");
        i_parser.PrintString("HWP Error description", "Procedure: p9_tod_move_tod_to_tb Step error detected or issue with the external TOD oscillator");
        break;
    case 0xd104a8:
        i_parser.PrintString("HwpReturnCode", "RC_P9_TOD_MOVE_TOD_TO_TB_INVALID_THREAD_NUM");
        i_parser.PrintString("HWP Error description", "Procedure: p9_tod_imove_tod_to_tb There is an invalid thread number");
        break;
    case 0xa8913a:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_BAD_PG_XLATE");
        i_parser.PrintString("HWP Error description", "Code bug: Invalid translation from PERV target chip unit position to image PG index");
        break;
    case 0x9be139:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_INVALID_INPUT_BUFFER_PARM");
        i_parser.PrintString("HWP Error description", "Caller bug: Caller supplied one or more invalid input buffer pointers");
        break;
    case 0x648aaa:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM");
        i_parser.PrintString("HWP Error description", "Caller bug: Caller supplied one or more invalid input buffer sizes");
        break;
    case 0xdbbd5f:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_INVALID_SYSPHASE_PARM");
        i_parser.PrintString("HWP Error description", "Caller bug: Caller supplied unsupported sysPhase");
        break;
    case 0x877be2:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_ATTR_MAX_SBE_SEEPROM_SIZE_TOO_SMALL");
        i_parser.PrintString("HWP Error description", "SBE Seeprom size reported in attribute is smaller than MAX_SBE_SEEPROM_SIZE");
        break;
    case 0xc5da31:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_INVALID_VPD_KEYWORD");
        i_parser.PrintString("HWP Error description", "Code bug: Unsupported value of vpdKeyword");
        break;
    case 0x9ba1d1:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_MVPD_CHIPLET_ID_MESS");
        i_parser.PrintString("HWP Error description", "VPD ring's chipletId doesn't match requested chipletId");
        break;
    case 0xd5238d:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_MVPD_RING_SIZE_MESS");
        i_parser.PrintString("HWP Error description", "VPD ring's size exceeds max ring buffer size");
        break;
    case 0x2737ee:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_MVPD_RING_SIZE_TOO_BIG");
        i_parser.PrintString("HWP Error description", "VPD ring's size exceed allowed ring buffer space");
        break;
    case 0x715afb:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_MVPD_INVALID_RECORD_DATA");
        i_parser.PrintString("HWP Error description", "VPD ring's record data is invalid");
        break;
    case 0xf6f03d:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_MVPD_FIELD_SIZE_MESS");
        i_parser.PrintString("HWP Error description", "MVPD field size mess");
        break;
    case 0x5866d2:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_MVPD_AW_FIELD_VALUE_ERR");
        i_parser.PrintString("HWP Error description", "Out of range value observed in MVPD AW keyword");
        break;
    case 0x3c6b32:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_RS4_REDUNDANT_ERROR");
        i_parser.PrintString("HWP Error description", "rs4_redundant() failed");
        break;
    case 0x17c6c8:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_TOR_APPEND_RING_FAILED");
        i_parser.PrintString("HWP Error description", "tor_append_ring() failed");
        break;
    case 0xa2dc1e:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_SECTION_REMOVAL_ERROR");
        i_parser.PrintString("HWP Error description", "p9_xip_delete_section() failed to remove an XIP section");
        break;
    case 0xf9f6d7:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_XIP_GET_SECTION_ERROR");
        i_parser.PrintString("HWP Error description", "p9_xip_get_section() failed getting an XIP section or a sub-section within an XIP section");
        break;
    case 0xfb8d9d:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_XIP_API_MISC_ERROR");
        i_parser.PrintString("HWP Error description", "An XIP API call failed with a non-categorized error");
        break;
    case 0x798261:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_EMPTY_RING_SECTION");
        i_parser.PrintString("HWP Error description", "The ring section size is zero. No TOR. Can't append rings");
        break;
    case 0x82e266:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_IMAGE_WOULD_OVERFLOW");
        i_parser.PrintString("HWP Error description", "Ran out of image buffer space trying to append a ring to the .rings section");
        break;
    case 0x4085a0:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_IMAGE_WOULD_OVERFLOW_ADDL_INFO");
        i_parser.PrintString("HWP Error description", "Additional FFDC info for RC_XIPC_IMAGE_WOULD_OVERFLOW error");
        break;
    case 0xefaefd:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_IMAGE_WOULD_OVERFLOW_BEFORE_REACHING_MIN_ECS");
        i_parser.PrintString("HWP Error description", "Image buffer would overflow before reaching minimum number of boot cores");
        break;
    case 0xad934d:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_SECTION_SIZING");
        i_parser.PrintString("HWP Error description", "Code bug: Ring section size would exceed max ring section size");
        break;
    case 0xd7a58e:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_IMAGE_SIZING");
        i_parser.PrintString("HWP Error description", "Code bug: Image size would exceed max image size");
        break;
    case 0x0a6694:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_IMAGE_TOO_LARGE");
        i_parser.PrintString("HWP Error description", "Image size exceeds max allowed image size");
        break;
    case 0x8358a6:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_TOR_GET_BLOCK_OF_RINGS_FAILED");
        i_parser.PrintString("HWP Error description", "tor_get_block_of_rings() failed");
        break;
    case 0x62b8e3:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_FAPI_ATTR_SVC_FAIL");
        i_parser.PrintString("HWP Error description", "FAPI attribute service failed");
        break;
    case 0x4a39b4:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_GPTR_GET_SINGLE_RING_ERROR");
        i_parser.PrintString("HWP Error description", "tor_get_single_ring() for gptr failed");
        break;
    case 0x7d20ba:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_RS4_DECOMPRESS_ERROR");
        i_parser.PrintString("HWP Error description", "rs4_decompress() for gptr failed");
        break;
    case 0x2991aa:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_MVPD_OVLY_RAW_RING_SIZE_MISMATCH_ERROR");
        i_parser.PrintString("HWP Error description", "Mvpd and Ovly raw ring size mismatch");
        break;
    case 0x022166:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH_ERROR");
        i_parser.PrintString("HWP Error description", "Mvpd and Ovly ring header mismatch");
        break;
    case 0x6bcb91:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_RS4_COMPRESS_ERROR");
        i_parser.PrintString("HWP Error description", "rs4_compress() for gptr failed");
        break;
    case 0x558d4d:
        i_parser.PrintString("HwpReturnCode", "RC_XIPC_OVLY_RING_BUFFER_MISMATCH_ERROR");
        i_parser.PrintString("HWP Error description", "Code bug: process_gptr_rings() failed with ring buffer pointer mismatch");
        break;
    case 0x3e739b:
        i_parser.PrintString("HwpReturnCode", "RC_XIP_SECTION_APPEND_INVALID_PARAMETERS");
        i_parser.PrintString("HWP Error description", "Error calling p9_xip_section_append when checking input parameters");
        break;
    case 0xe8eab2:
        i_parser.PrintString("HwpReturnCode", "RC_XIP_SECTION_APPEND_APPEND_RC");
        i_parser.PrintString("HWP Error description", "Error calling p9_xip_section_append when running p9_xip_append");
        break;
    case 0x7b8738:
        i_parser.PrintString("HwpReturnCode", "RC_XIP_SECTION_APPEND_SIZE_RC");
        i_parser.PrintString("HWP Error description", "Error calling p9_xip_section_append when running p9_xip_image_size");
        break;
    case 0x9e264f:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_ERROR_A");
        i_parser.PrintString("HWP Error description", "HWP Error A generated by Unit Test");
        break;
    case 0x5979f4:
        i_parser.PrintString("HwpReturnCode", "RC_PROC_EXAMPLE_ERROR");
        i_parser.PrintString("HWP Error description", "test example");
        break;
    case 0x2c9566:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_PROC_ERROR");
        i_parser.PrintString("HWP Error description", "Example error that calls a procedure with a parameter. parm1 = uint32_t");
        break;
    case 0x12767f:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_ERROR_GARD_DECONFIG");
        i_parser.PrintString("HWP Error description", "Deconfigure and gard test error");
        break;
    case 0xa339e6:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_ERROR_PROCEDURE_CALLOUT");
        i_parser.PrintString("HWP Error description", "Procedure callout test error");
        break;
    case 0x9ff656:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_ERROR_DECONFIG");
        i_parser.PrintString("HWP Error description", "Deconfigure test error");
        break;
    case 0xbb65e5:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_ERROR_DECONFIG_NO_CALLOUT");
        i_parser.PrintString("HWP Error description", "Deconfigure test error without a callout");
        break;
    case 0x9f01d9:
        i_parser.PrintString("HwpReturnCode", "RC_TEST_ERROR_HW_CALLOUT");
        i_parser.PrintString("HWP Error description", "Hardware callout test error");
        break;
    case 0x955ab8:
        i_parser.PrintString("HwpReturnCode", "RC_FAPI2_BUFFER");
        i_parser.PrintString("HWP Error description", "fapi2 error from a buffer operation");
        break;
    case 0xb6ffb1:
        i_parser.PrintString("HwpReturnCode", "RC_FAPI2_SAMPLE");
        i_parser.PrintString("HWP Error description", "sample error to be thrown for testing purposes");
        break;
    case 0x116ff3:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_CHIPLET_INIT_HEADER_MISMATCH");
        i_parser.PrintString("HWP Error description", "Procedure: cen_chiplet_init Error rotating tcn_refr_time ring -- header mismatch");
        break;
    case 0x71b696:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_COMMON_ARRAYINIT_POLL_OPCG_DONE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Routine: cen_arrayinit_module ARRAYINIT OPCG DONE timeout!");
        break;
    case 0xe451a3:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_COMMON_SCAN0_POLL_OPCG_DONE_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Routine: cen_scan0_module SCAN0 OPCG DONE timeout!");
        break;
    case 0x52d7ea:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_COMMON_REPAIR_LOADER_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Routine: cen_repair_loader Repair loader timeout!");
        break;
    case 0x51cf92:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_COMMON_ECC_TRAP_REG_ERROR");
        i_parser.PrintString("HWP Error description", "Routine: cen_repair_loader ECC trap register error!");
        break;
    case 0x5911e9:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_COMMON_MISMATCH_IN_EXPECTED_REPAIR_LOADER_STATUS");
        i_parser.PrintString("HWP Error description", "Routine: cen_repair_loader Mismatch in expected repair loader status!");
        break;
    case 0x60df9a:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_COMMON_REPAIR_LOADER_BUSY");
        i_parser.PrintString("HWP Error description", "Routine: cen_repair_loader Repair loader busy!");
        break;
    case 0x3cbeb2:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_COMMON_STARTCLOCKS_CLK_THOLDS_CHECK_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: cen_comomn_startclocks Expected THOLD state check failed");
        break;
    case 0xbae259:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_INITF_HEADER_MISMATCH");
        i_parser.PrintString("HWP Error description", "Procedure: cen_chiplet_init Error rotating tcn_mbs_func ring -- header mismatch");
        break;
    case 0xdcb430:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_PLL_INITF_UNSUPPORTED_FREQUENCY");
        i_parser.PrintString("HWP Error description", "Procedure: cen_pll_initf Unsupported NEST/MEM frequency combination");
        break;
    case 0xf35ae5:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_PLL_SETUP_POLL_NEST_PLL_LOCK_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: cen_pll_setup NEST PLL LOCK TIMEOUT!");
        break;
    case 0x7f375e:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_PLL_SETUP_POLL_MEM_PLL_LOCK_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Procedure: cen_pll_setup MEM PLL LOCK TIMEOUT!");
        break;
    case 0xcb6b3e:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_TP_CHIPLET_INIT1_VDD_SENSE_ERR");
        i_parser.PrintString("HWP Error description", "Procedure: cen_tp_chiplet_init1 FSI2PIB Status Register check for VDD sense failed");
        break;
    case 0x559988:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_TP_CHIPLET_INIT2_ERR_CLK_CNTL");
        i_parser.PrintString("HWP Error description", "Procedure: cen_tp_chiplet_init2 Clock Control Register does not match the expected value!");
        break;
    case 0x28ab26:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_TP_CHIPLET_INIT3_ERR_CLK_STATUS");
        i_parser.PrintString("HWP Error description", "Procedure: cen_tp_chiplet_init3 Clock status register error!");
        break;
    case 0xd0a15b:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_TP_CHIPLET_INIT3_NOT_ALL_CLK_RUNNING");
        i_parser.PrintString("HWP Error description", "Procedure: cen_tp_chiplet_init3 Not all clocks are running!");
        break;
    case 0xde68ef:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_REPAIR_RING_INVALID_RINGBUF_PTR");
        i_parser.PrintString("HWP Error description", "Invalid input parameter: pointer to ringbuffer was NULL");
        break;
    case 0x092cf0:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_REPAIR_RING_ALLOC_FAIL");
        i_parser.PrintString("HWP Error description", "Failed to allocate buffer space for repair ring data");
        break;
    case 0x2faafb:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_REPAIR_RING_INVALID_SIZE");
        i_parser.PrintString("HWP Error description", "Invalid input parameter: buffer too small to copy repair ring data");
        break;
    case 0xd3c0b2:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_REPAIR_RING_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "The repair ring specified was not found. Most likely reason is bad VPD");
        break;
    case 0xb19105:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MVPD_RING_FUNC_INVALID_PARAMETER");
        i_parser.PrintString("HWP Error description", "An invalid parameter was passed to a mvpd ring function.");
        break;
    case 0x04bd53:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MVPD_RING_FUNC_INSUFFICIENT_RECORD_SPACE");
        i_parser.PrintString("HWP Error description", "Insufficient room in the record to set the requested ring.");
        break;
    case 0x1e6b47:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MVPD_EX_L2_SINGLE_MEMBER_ENABLE_BAD_FIELD_SIZE");
        i_parser.PrintString("HWP Error description", "VPD Field size too small to contain the EX_L2_SINGLE_MEMBER_ENABLE data");
        break;
    case 0x6c17e4:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_INVALID_ATTRIBUTE_ID");
        i_parser.PrintString("HWP Error description", "Invalid attribute ID");
        break;
    case 0x953e15:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE");
        i_parser.PrintString("HWP Error description", "Output variable size must match size of expected output type.");
        break;
    case 0x213d94:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_INSUFFICIENT_VPD_RETURNED");
        i_parser.PrintString("HWP Error description", "VPD keyword record returned is smaller than expected. Probably a firmware bug, but could be bad VPD");
        break;
    case 0xfb3d8c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_INVALID_VM_DATA_RETURNED");
        i_parser.PrintString("HWP Error description", "VM keyword data returned is out of range of supported version values. Probably a firmware bug, but could be bad VPD");
        break;
    case 0xc399fa:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_INVALID_VM_VERSION_RETURNED");
        i_parser.PrintString("HWP Error description", "VM version returned is out of range of supported version values. Probably a firmware bug, but could be bad VPD");
        break;
    case 0xad3251:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_UNEXPECTED_KEYWORD");
        i_parser.PrintString("HWP Error description", "Unexpected VPD keyword defined for the attribute in attribute look up table , which doesn't have any layout properties.");
        break;
    case 0xd46e2a:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_SUPPLIER_ID_NOT_IN_MV_VPD");
        i_parser.PrintString("HWP Error description", "The Module ID in the #I keyword is not in the list of supplier provided entries in the MV keyword. Bad C-DIMM VPD.");
        break;
    case 0x63c984:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_RING_FUNC_INVALID_PARAMETER");
        i_parser.PrintString("HWP Error description", "An invalid parameter was passed to a mbvpd ring function.");
        break;
    case 0x259e7f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_TERM_DATA_UNSUPPORTED_VPD_ENCODE");
        i_parser.PrintString("HWP Error description", "The requested vpd value does not have a translation value.");
        break;
    case 0xafc9f6:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_DRAM_2N_MODE_NOT_EQUAL");
        i_parser.PrintString("HWP Error description", "The 2 ports of DRAM 2N MODE should be equal in VPD. Bad C-DIMM VPD.");
        break;
    case 0x2edce1:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_INVALID_MODE_PARAMETER");
        i_parser.PrintString("HWP Error description", "Mode must be Get or Set.");
        break;
    case 0xcda0c9:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_UNEXPECTED_MEM_TYPE");
        i_parser.PrintString("HWP Error description", "Memory type in VSPD keyword #I not DDR3 or DDR4 Unsupported C-DIMM VPD.");
        break;
    case 0xfc445a:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_INVALID_MT_DATA");
        i_parser.PrintString("HWP Error description", "To get the proper MT data, we need a valid dimm rank combination.");
        break;
    case 0xbc6578:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_INVALID_DQ_DATA");
        i_parser.PrintString("HWP Error description", "To get the proper DQ data, we have to be given a valid copy to collect.");
        break;
    case 0xea5e20:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_DIMMS_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "To get the proper MT data, we need to find the dimm's to get a valid dimm rank combination");
        break;
    case 0xaf4003:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_INVALID_DIMM_FOUND");
        i_parser.PrintString("HWP Error description", "Something went very wrong in the dimm's and the combination received is not valid");
        break;
    case 0x7308f8:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_INVALID_M0_DATA");
        i_parser.PrintString("HWP Error description", "To get the proper MR data, we need to have the correct M0 data.");
        break;
    case 0x2a5645:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_INVALID_DQS_DATA");
        i_parser.PrintString("HWP Error description", "To get the proper DQS data, we have to be given a valid copy to collect.");
        break;
    case 0xc43992:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_UNEXPECTED_ISDIMM_KEYWORD");
        i_parser.PrintString("HWP Error description", "ISDIMM Attribute definition has unexpected keyword value.");
        break;
    case 0x193750:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_DEFAULT_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("HWP Error description", "Default attribute definition has unexpected output type.");
        break;
    case 0x393a53:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_UINT64_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("HWP Error description", "Uint64_t attribute definition has unexpected output type.");
        break;
    case 0x6b6b79:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_UNEXPECTED_OUTPUT_TYPE");
        i_parser.PrintString("HWP Error description", "Attribute definition has unexpected output type.");
        break;
    case 0x9eba2f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MBVPD_ATTRIBUTE_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Attribute not found in attribute look up table");
        break;
    case 0x29165b:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_UNEXPECTED_MEM_CLOCK_STATUS");
        i_parser.PrintString("HWP Error description", "cen_stopclocks got unexpected clock status in MEM_CLK_STATUS This error could happen for a number of reasons and probably not on the IPL path, so callout the memory buffer chip, but do not deconfigure/GARD.");
        break;
    case 0x78abb4:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_UNEXPECTED_NEST_CLOCK_STATUS");
        i_parser.PrintString("HWP Error description", "cen_stopclocks got unexpected clock status in NEST_CLK_STATUS This error could happen for a number of reasons and probably not on the IPL path, so callout the memory buffer chip, but do not deconfigure/GARD.");
        break;
    case 0xbe4f3d:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_UNEXPECTED_TP_CLOCK_STATUS");
        i_parser.PrintString("HWP Error description", "cen_stopclocks got unexpected clock status in TP_CLK_STATUS This error could happen for a number of reasons and probably not on the IPL path, so callout the memory buffer chip, but do not deconfigure/GARD.");
        break;
    case 0x6799ad:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_PLACE_HOLDER_ERROR");
        i_parser.PrintString("HWP Error description", "Not for production code. This return code is used for cases where the error code has not been approved yet. Eventually, no code should use this error code.");
        break;
    case 0x5e5a94:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_RANK_GROUP_RC_CEN_ERROR_001A");
        i_parser.PrintString("HWP Error description", "Plug rule violation in EFF_CONFIG_RANK_GROUP.");
        break;
    case 0xd5128f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_UNEXPECTED_MEM_CLK_STATUS");
        i_parser.PrintString("HWP Error description", "A read of the memory clock status register returned an unexpected value.");
        break;
    case 0xb04494:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_ARRAY_REPAIR_BUSY");
        i_parser.PrintString("HWP Error description", "Array repair loader is busy now. 0x00050003 bit(0)=1");
        break;
    case 0xe55eff:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_ARRAY_REPAIR_NOT_DONE");
        i_parser.PrintString("HWP Error description", "Array repair loader did NOT report repair done.");
        break;
    case 0x6b795c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_ECC_TRAP_ERROR");
        i_parser.PrintString("HWP Error description", "ECC trap register reported error. 0x00050004 bit(0-7) != 0x00");
        break;
    case 0x45698c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_GENERAL_PUTSCOM_ERROR");
        i_parser.PrintString("HWP Error description", "PutScom failed! See previous error message for details.");
        break;
    case 0xc76a7b:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_GENERAL_GETSCOM_ERROR");
        i_parser.PrintString("HWP Error description", "GetScom failed! See previous error message for details.");
        break;
    case 0xb10d76:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_UNEXPECTED_FIR_STATUS");
        i_parser.PrintString("HWP Error description", "Unexpected FIR status! See previous error message for details.");
        break;
    case 0xa11b0c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_INIT_CAL_FAILED");
        i_parser.PrintString("HWP Error description", "Inital Calibration failed. Check init cal error register at address: 0x8001C0180301143F");
        break;
    case 0x47e976:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_GENERAL_SIMSTKFAC_ERROR");
        i_parser.PrintString("HWP Error description", "simSTKFAC failed! See previous error message for details");
        break;
    case 0x756db9:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_GET_FAPI_ATTRIBUTE_ERROR");
        i_parser.PrintString("HWP Error description", "Failed to get FAPI attribute! See previous error message for details.");
        break;
    case 0x3928c2:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_GET_SIM_HIERARCHY_ERROR");
        i_parser.PrintString("HWP Error description", "Failed to get simulation hierarchy from eCmd target.");
        break;
    case 0xa2306f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_INVALID_FN_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "An input to FN call is out of range.");
        break;
    case 0xabfdeb:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MCBIST_ERROR");
        i_parser.PrintString("HWP Error description", "MCBIST operation failed");
        break;
    case 0x338e6f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_PORT_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "TBD");
        break;
    case 0x608f25:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRIVER_IMP_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "TBD");
        break;
    case 0xa44d3a:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_SLEW_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "TBD");
        break;
    case 0x515a84:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_WR_DRAM_VREF_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "TBD");
        break;
    case 0x66e616:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_READ_CEN_VREF_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "TBD");
        break;
    case 0xc5c7f1:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_RECEIVER_IMP_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "TBD");
        break;
    case 0x51654a:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "Invalid input");
        break;
    case 0x594135:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_UNABLE_TO_GROUP_MCS");
        i_parser.PrintString("HWP Error description", "MCS COULD NOT BE GROUPED. EITHER SWITCH DIMMS SO GROUPING IS POSSIBLE OR CHANGE SYSTEM POLICY.");
        break;
    case 0xcbe7d4:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_ERROR_MSS_GROUPING_ATTRS");
        i_parser.PrintString("HWP Error description", "MEM grouping Attributes collection and printing function");
        break;
    case 0x96b5b4:
        i_parser.PrintString("HwpReturnCode", "RC_MSS_SECURE_BOOT_BAD_VALUE");
        i_parser.PrintString("HWP Error description", "Secure mode boot value is at an incorrect state");
        break;
    case 0xe8b139:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER");
        i_parser.PrintString("HWP Error description", "Unable to find throttle setting that has DIMM power underneath the limit.");
        break;
    case 0xc219c3:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DP18_0_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("HWP Error description", "mss_ddr_phy_reset: DP18 0x0C000 PLL failed to lock! Value in DPHY01_DDRPHY_PC_DP18_PLL_LOCK_STATUS_P0_0x8000C0000301143F not as expected");
        break;
    case 0x02cde3:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DP18_1_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("HWP Error description", "mss_ddr_phy_reset: DP18 0x1C000 PLL failed to lock! Value in DPHY01_DDRPHY_PC_DP18_PLL_LOCK_STATUS_P1_0x8001C0000301143F not as expected");
        break;
    case 0x79dca4:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_AD32S_0_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("HWP Error description", "mss_ddr_phy_reset: AD32S 0x0C001 PLL failed to lock! Value in DPHY01_DDRPHY_PC_AD32S_PLL_LOCK_STATUS_P0_0x8000C0010301143F not as expected");
        break;
    case 0x16491b:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_AD32S_1_PLL_FAILED_TO_LOCK");
        i_parser.PrintString("HWP Error description", "mss_ddr_phy_reset: AD32S 0x1C001 PLL failed to lock! Value in DPHY01_DDRPHY_PC_AD32S_PLL_LOCK_STATUS_P1_0x8001C0010301143F not as expected");
        break;
    case 0xceb19f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_BAD_DQ_DIMM_BAD_PARAM");
        i_parser.PrintString("HWP Error description", "A HWP called a utility function to access the bad DQ data but specified an invalid PORT/DIMM/RANK");
        break;
    case 0xf343cc:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_BAD_DQ_DIMM_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "A HWP called a utility function to accessing the bad DQ data. The utility function could not find a functional DIMM associated with the specified MBA/PORT/DIMM");
        break;
    case 0x5821ef:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_GET");
        i_parser.PrintString("HWP Error description", "A HWP noted additional bad bits in the bad dq bitmap of the specified DIMM while in the manufacturing DISABLE_DRAM_REPAIRS mode during a read operation. CLEAN_BAD_DQ_BITMAP represents a bad dq bitmap with the appropriate spare and ECC DQs (if any) set to 1 and all other DQs set to 0. CURRENT_BAD_DQ_BITMAP represents the current bad dq bitmap. Any discrepancies with CLEAN_BAD_DQ_BITMAP are the result of a manufacturing mode process.");
        break;
    case 0x6382c2:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_BAD_DQ_MFG_MODE_BITS_FOUND_DURING_SET");
        i_parser.PrintString("HWP Error description", "A HWP noted an attempt to set additional bad bits in the bad dq bitmap of the specified DIMM while in the manufacturing DISABLE_DRAM_REPAIRS mode during a write operation. CLEAN_BAD_DQ_BITMAP represents a bad dq bitmap with the appropriate spare and ECC DQs (if any) set to 1 and all other DQs set to 0. UPDATE_BAD_DQ_BITMAP represents the proposed updates to set. Any discrepancies with CLEAN_BAD_DQ_BITMAP are the result of a manufacturing mode process and should not be made.");
        break;
    case 0xfb9bec:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_MC_DISPLAY_INVALID_ADDR");
        i_parser.PrintString("HWP Error description", "Display invalid address.");
        break;
    case 0x144ce2:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_MC_DISPLAY_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Display timeout.");
        break;
    case 0xa574f7:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_MC_INSUF_RCD_PROTECT_TIME");
        i_parser.PrintString("HWP Error description", "Injected RCD parity error detected too late for RCD retry to be effective.");
        break;
    case 0x77dca4:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_DRV_IMPED_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("HWP Error description", "The drv_imped_shmoo utility function got bad margin data from the find_best_margin function");
        break;
    case 0x0f227e:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_SLEW_RATE_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("HWP Error description", "The slew_rate_shmoo utility function got bad margin data from the find_best_margin function");
        break;
    case 0xcefc27:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_WR_VREF_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("HWP Error description", "The wr_vref_shmoo utility function got bad margin data from the find_best_margin function");
        break;
    case 0x39297c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_RD_VREF_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("HWP Error description", "The rd_vref_shmoo utility function got bad margin data from the find_best_margin function");
        break;
    case 0x25a4d5:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_RCV_IMP_SHMOO_INVALID_MARGIN_DATA");
        i_parser.PrintString("HWP Error description", "The rcv_imp_shmoo utility function got bad margin data from the find_best_margin function");
        break;
    case 0x307360:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_SETBBM");
        i_parser.PrintString("HWP Error description", "Unknown Value for DRAM_WIDTH being used.");
        break;
    case 0xea35fd:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_TRAINING_DRAM_WIDTH_INPUT_ERROR_GETBBM");
        i_parser.PrintString("HWP Error description", "Unknown Value for DRAM_WIDTH being used.");
        break;
    case 0x3efede:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_TRAINING_DIMM_SPARE_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown Value for DIMM_SPARE being used.");
        break;
    case 0xa1921b:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_TRAINING_C4_PHY_TRANSLATION_ERROR");
        i_parser.PrintString("HWP Error description", "Incorrect translation of bad bit mask between C4 and PHY");
        break;
    case 0x66a002:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_TRAINING_WR_LVL_ERROR");
        i_parser.PrintString("HWP Error description", "Write Leveling has returned a fail for a given position within this calibration.");
        break;
    case 0x0189ca:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_TRAINING_DQS_ALIGNMENT_ERROR");
        i_parser.PrintString("HWP Error description", "DQS Alignment has returned a fail for a given position within this calibration.");
        break;
    case 0x89e8b7:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_TRAINING_RD_CLK_SYS_CLK_ALIGNMENT_ERROR");
        i_parser.PrintString("HWP Error description", "Read CLK to SYS CLK Alignment has returned a fail for a given position within this calibration.");
        break;
    case 0xd2284a:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_TRAINING_RD_CENTERING_ERROR");
        i_parser.PrintString("HWP Error description", "Read Centering has returned a fail for a given position within this calibration.");
        break;
    case 0x1773ed:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_TRAINING_WR_CENTERING_ERROR");
        i_parser.PrintString("HWP Error description", "Write centering has returned a fail for a given position within this calibration.");
        break;
    case 0xb81306:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_TRAINING_COURSE_RD_CENTERING_ERROR");
        i_parser.PrintString("HWP Error description", "Course Read Centering has returned a fail for a given position within this calibration.");
        break;
    case 0x0f62d4:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_RD_CENTERING_ERROR");
        i_parser.PrintString("HWP Error description", "Custom Pattern Read Centering has returned a fail for a given position within this calibration.");
        break;
    case 0xcd8678:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_TRAINING_CUSTOM_PATTERN_WR_CENTERING_ERROR");
        i_parser.PrintString("HWP Error description", "Custom Pattern Write Centering has returned a fail for a given position within this calibration.");
        break;
    case 0xd1d73c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_TRAINING_DIGITAL_EYE_ERROR");
        i_parser.PrintString("HWP Error description", "Digital Eye has returned a fail for a given position within this calibration.");
        break;
    case 0x2f6f81:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INVALID_DDR4_SPD_TB");
        i_parser.PrintString("HWP Error description", "Invalid DDR4 MTB/FTB Timebase received from SPD attribute");
        break;
    case 0x994892:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INCOMPATABLE_SPD_DRAM_GEN");
        i_parser.PrintString("HWP Error description", "Incompatable SPD DRAM generation");
        break;
    case 0x160efd:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INVALID_RDIMM_FREQ");
        i_parser.PrintString("HWP Error description", "Invalid RDIMM ATTR_MSS_FREQ, freq is higher than 1600Mbps");
        break;
    case 0x8a28fb:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INVALID_RDIMM_VOLT");
        i_parser.PrintString("HWP Error description", "Invalid RDIMM ATTR_MSS_VOLT, Volt is less than 1.2V");
        break;
    case 0x91546d:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_IBT");
        i_parser.PrintString("HWP Error description", "Invalid RDIMM_RCD_IBT");
        break;
    case 0x4ea8d7:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INVALID_RDIMM_RCD_OUTPUT_TIMING");
        i_parser.PrintString("HWP Error description", "Invalid RDIMM_RCD_OUTPUT_TIMING");
        break;
    case 0xa95a99:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_LRDIMM_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of mss_lrdimm_eff_config function in mss_eff_config");
        break;
    case 0xd71e5c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INVALID_TERM_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of mss_eff_config_termination function in mss_eff_config");
        break;
    case 0x750342:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_DDR4_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of mss_eff_config_ddr4 function in mss_eff_config");
        break;
    case 0x5cf1b3:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_MISMATCH_EMPTY");
        i_parser.PrintString("HWP Error description", "Plug rule violation, one position is empty but other are present");
        break;
    case 0xe299f7:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_MISMATCH_SIDE");
        i_parser.PrintString("HWP Error description", "Plug rule violation, sides do not match");
        break;
    case 0xfb1ec5:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_MISMATCH_TOP");
        i_parser.PrintString("HWP Error description", "Plug rule violation, top and bottom do not match");
        break;
    case 0x85a03a:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_GEN");
        i_parser.PrintString("HWP Error description", "Incompatable DRAM generation");
        break;
    case 0x861af1:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_TYPE");
        i_parser.PrintString("HWP Error description", "Incompatable DIMM type");
        break;
    case 0x2fb670:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_RANKS");
        i_parser.PrintString("HWP Error description", "Incompatable DIMM ranks");
        break;
    case 0x1ca1e5:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_BANKS");
        i_parser.PrintString("HWP Error description", "Incompatable DIMM banks");
        break;
    case 0x670d9e:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_ROWS");
        i_parser.PrintString("HWP Error description", "Incompatable DIMM rows");
        break;
    case 0xc40374:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INCOMPATABLE_DIMM_COLUMNS");
        i_parser.PrintString("HWP Error description", "Incompatable DIMM columns");
        break;
    case 0x3ccc94:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_BUS_WIDTH");
        i_parser.PrintString("HWP Error description", "Incompatable DRAM primary bus width");
        break;
    case 0x357921:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_UNSUPPORTED_MODULE_MEMORY_BUS_WIDTH");
        i_parser.PrintString("HWP Error description", "Unsupported DRAM bus width, only 64bit with ECC extension is allowed");
        break;
    case 0x840084:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INCOMPATABLE_DRAM_WIDTH");
        i_parser.PrintString("HWP Error description", "Incompatable DRAM width");
        break;
    case 0x91cb7e:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_DRAM_DEVICE_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown DRAM type");
        break;
    case 0x5049ba:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_MOD_TYPE_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown DIMM type");
        break;
    case 0xe7fd59:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_SDRAM_BANK_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown DRAM bank");
        break;
    case 0xab88d2:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_SDRAM_ROWS_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown DRAM rows");
        break;
    case 0xb45ead:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_SDRAM_COLS_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown DRAM cols");
        break;
    case 0xf98dc9:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_DRAM_WIDTH_16_ERROR");
        i_parser.PrintString("HWP Error description", "Unsupported DRAM width x16");
        break;
    case 0xf234c8:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_DRAM_WIDTH_32_ERROR");
        i_parser.PrintString("HWP Error description", "Unsupported DRAM width x32");
        break;
    case 0x7bd286:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_DRAM_WIDTH_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown DRAM width");
        break;
    case 0xdba8d0:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_DRAM_DENSITY_ERR");
        i_parser.PrintString("HWP Error description", "Unsupported DRAM density");
        break;
    case 0x91eb8f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_CWL_CALC_ERR");
        i_parser.PrintString("HWP Error description", "Error calculating CWL");
        break;
    case 0xe5b1fe:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_RDIMM_UNSUPPORTED_TYPE");
        i_parser.PrintString("HWP Error description", "Currently unsupported IBM_TYPE");
        break;
    case 0xfbc877:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_UDIMM_UNSUPPORTED_TYPE");
        i_parser.PrintString("HWP Error description", "Currently unsupported IBM_TYPE");
        break;
    case 0x52379b:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_DIMM_UNSUPPORTED_TYPE");
        i_parser.PrintString("HWP Error description", "Currently unsupported IBM_TYPE");
        break;
    case 0x2585ee:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_DIMM_INVALID_3DS_CL");
        i_parser.PrintString("HWP Error description", "Invalid CAS Latency for 3DS DIMM Type");
        break;
    case 0xbfb78c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_MSS_FREQ");
        i_parser.PrintString("HWP Error description", "Invalid ATTR_MSS_FREQ");
        break;
    case 0x9e0ffb:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_INVALID_SPD_SIZE");
        i_parser.PrintString("HWP Error description", "Invalid SPD size found in p9c_mss_attr_cleanup");
        break;
    case 0x03da47:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_RANK_GROUP_NON_MATCH_RANKS");
        i_parser.PrintString("HWP Error description", "Plug rule violation in mss_eff_config_rank_group 		due to num_ranks_per_dimm not matching.");
        break;
    case 0x54443a:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_RANK_GROUP_NUM_RANKS_NEQ1");
        i_parser.PrintString("HWP Error description", "Plug rule violation in mss_eff_config_rank_group 		due to num_ranks_per_dimm not being set correctly.");
        break;
    case 0x6c93db:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_RANK_GROUP_NO_MATCH");
        i_parser.PrintString("HWP Error description", "Plug rule violation in mss_eff_config_rank_group 		due to no matching case.");
        break;
    case 0x017a12:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_LRDIMM_REWRITE_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of LRDIMM function in mss_eff_config_termination");
        break;
    case 0xc80073:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_LRDIMM_TERM_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of LRDIMM function in mss_eff_config_termination");
        break;
    case 0x2a6c9a:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_LRDIMM_DDR4_TERM_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of DDR4 LRDIMM function in mss_eff_config_termination");
        break;
    case 0x0f428a:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_DDR4_TERM_ATTS_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of DDR4 term attrs function in mss_eff_config_termination");
        break;
    case 0xd95530:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_CREATE_DB_DDR4_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of DDR4 DB function in mss_eff_config_termination");
        break;
    case 0xe61416:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_CREATE_RCD_DDR4_INVALID_EXEC");
        i_parser.PrintString("HWP Error description", "Invalid exec of DDR4 RCD function in mss_eff_config_termination");
        break;
    case 0x4a2ddd:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_FREQ");
        i_parser.PrintString("HWP Error description", "Invalid ATTR_MSS_FREQ value");
        break;
    case 0x592c08:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_DIMM_USE_ERROR");
        i_parser.PrintString("HWP Error description", "Invalid Dimm SIM this should not have happened");
        break;
    case 0xc63512:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1333Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG3 FREQ MBA0 where freq is less than equal 1333Mbps");
        break;
    case 0x433abf:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1600Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG3 FREQ MBA0 where freq is less than equal 1600Mbps");
        break;
    case 0xaee514:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1333Mbps_MBA1");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG3 FREQ MBA1 where freq is less than equal 1333Mbps");
        break;
    case 0x4dcede:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_KG3_FREQ_1600Mbps_MBA1");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG3 FREQ MBA1 where freq is less than equal 1600Mbps");
        break;
    case 0x8bcb7f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_B4_1600Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type B4 CDIMM 1600 MBA0/1 where freq is less than equal 1600Mbps");
        break;
    case 0xd4c2c0:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_1600Mbps_MBA0");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type UDIMM FREQ MBA1 where freq is less than equal 1600Mbps");
        break;
    case 0x2d4097:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_MBA0");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type UDIMM FREQ MBA0 where freq is greater than 1600Mbps");
        break;
    case 0xd8a268:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_1600Mbps_MBA1");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type UDIMM FREQ MBA1 where freq is less than equal 1600Mbps");
        break;
    case 0x8af474:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_UDIMM_MBA1");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type UDIMM FREQ MBA1 where freq is greater than 1600Mbps");
        break;
    case 0x0f977c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA0_1333Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type RDIMM FREQ MBA0 where freq is less than equal 1333Mbps");
        break;
    case 0xe13522:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA0_1600Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type RDIMM FREQ MBA0 where freq is less than equal 1600Mbps");
        break;
    case 0x24e862:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1066Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type RDIMM FREQ MBA1 where freq is less than equal 1066Mbps");
        break;
    case 0xcd8a85:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1333Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type RDIMM FREQ MBA1 where freq is less than equal 1333Mbps");
        break;
    case 0xfff351:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_MBA1_1600Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type RDIMM FREQ MBA1 where freq is less than equal 1600Mbps");
        break;
    case 0xe418ea:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_LRDIMM_MBA1_1333Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type LRDIMM FREQ MBA1 where freq is less than equal 1333Mbps");
        break;
    case 0x858cbb:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_LRDIMM_MBA1_1600Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type LRDIMM FREQ MBA1 where freq is less than equal 1600Mbps");
        break;
    case 0xc58b15:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_ERROR_RETRIEVING_DIMMS");
        i_parser.PrintString("HWP Error description", "Could Not get termination information for dimm");
        break;
    case 0xda5ebd:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_SETTING_LRDIMM_TERM_ATTRS");
        i_parser.PrintString("HWP Error description", "Termination ATTR Setup LRDIMM");
        break;
    case 0x63f9db:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_LRDIMM_ODT_RD");
        i_parser.PrintString("HWP Error description", "FAILED ODT Setup LRDIMM");
        break;
    case 0x01e78f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_DDR4_RCD");
        i_parser.PrintString("HWP Error description", "DDR4 RCD Setup Failed");
        break;
    case 0x02ab2c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_TYPE");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type");
        break;
    case 0x22a89a:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_FREQ");
        i_parser.PrintString("HWP Error description", "Invalid RDIMM ATTR_MSS_FREQ, freq is 1866Mbps");
        break;
    case 0xa70335:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_RDIMM_VOLT");
        i_parser.PrintString("HWP Error description", "Invalid RDIMM ATTR_MSS_VOLT, Volt is less than 1.2V");
        break;
    case 0xcc1de3:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_RCD_IBT");
        i_parser.PrintString("HWP Error description", "Invalid DIMM_RCD_IBT");
        break;
    case 0x77f1fa:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_DIMM_RCD_MIRROR_MODE");
        i_parser.PrintString("HWP Error description", "Invalid DIMM_RCD_MIRROR_MODE");
        break;
    case 0xc5b451:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_CARD_TYPE_RLO");
        i_parser.PrintString("HWP Error description", "Invalid Card Type RLO Settings");
        break;
    case 0x7612f6:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1333Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG4 FREQ MBA0 where freq is less than equal 1333Mbps");
        break;
    case 0xdf4f08:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1600Mbps");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG4 FREQ MBA0 where freq is less than equal 1600Mbps");
        break;
    case 0x7750d9:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1333Mbps_MBA1");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG4 FREQ MBA1 where freq is less than equal 1333Mbps");
        break;
    case 0x4221bc:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_TERMINATION_INVALID_KG4_FREQ_1600Mbps_MBA1");
        i_parser.PrintString("HWP Error description", "Invalid Dimm Type KG4 FREQ MBA1 where freq is less than equal 1600Mbps");
        break;
    case 0x1d7468:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DIMM_POWER_CURVE_DATA_INVALID");
        i_parser.PrintString("HWP Error description", "DIMM power curve data is invalid");
        break;
    case 0xec344e:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE");
        i_parser.PrintString("HWP Error description", "Unable to find matching entry in DIMM power table");
        break;
    case 0x6d2056:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_MIRROR_DISABLED");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that mirroring is disabled but mirror placement policy is selective or flipped. Firmware error - ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING is true - ATTR_MEM_MIRROR_PLACEMENT_POLICY is SELECTIVE or FLIPPED");
        break;
    case 0x3e7d19:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_INTERLEAVE_MODE_INVALID_MCS_PER_GROUP");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that ATTR_ALL_MCS_IN_INTERLEAVING_GROUP indicates interleaving mode. but ATTR_MSS_INTERLEAVE_ENABLE does not contain a valid (>1) MCS per group number");
        break;
    case 0xdaa89d:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_CONFIG_CHECKERBOARD_MODE_INVALID_MCS_PER_GROUP");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that ATTR_ALL_MCS_IN_INTERLEAVING_GROUP indicates checkerboard mode. but ATTR_MSS_INTERLEAVE_ENABLE does not contain a valid (>=1) MCS per group number");
        break;
    case 0xd68f6f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_GROUPING_SELCTIVE_MODE_HTM_OCC_BAR");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that there is an HTM or OCC Sandbox bar in selective mode. This is not allowed - ATTR_MEM_MIRROR_PLACEMENT_POLICY is SELECTIVE");
        break;
    case 0xbd6d4c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_GROUPING_UNABLE_TO_GROUP_MCS");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found an MCS that could not be grouped. This is a memory plugging error. Refer to memory plugging rules. The attached Memory Buffer Chip is deconfigured as a result");
        break;
    case 0x7aec28:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_GROUPING_UNABLE_TO_GROUP");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that one or more MCS could not be grouped. Other errors have been logged for each MCS to deconfigure their associated membuf chip and callout the MEMORY_PLUGGING_ERROR procedure.");
        break;
    case 0x191a04:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_GROUPING_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that the base address overlaps with the mirror base address");
        break;
    case 0x7ef807:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_GROUPING_NO_SPACE_FOR_HTM_OCC_BAR");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that there is not enough space available for the HTM and OCC Sandbox bars");
        break;
    case 0x6b9ea1:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_GROUPING_HTM_OCC_BAR_NOT_POSSIBLE");
        i_parser.PrintString("HWP Error description", "mss_eff_grouping found that the HTM and OCC Sandbox bars are not possible");
        break;
    case 0x33505d:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EFF_MB_INTERLEAVE_PLUG_DECONFIG_DIMM");
        i_parser.PrintString("HWP Error description", "This DIMM violated a plugging rules for MBA interleaving.");
        break;
    case 0xf7e520:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_ERROR_SUPPORT_NUM_MBA_ERROR");
        i_parser.PrintString("HWP Error description", "mss_error support did not see 2 present membuf child MBAs returned");
        break;
    case 0xf76a47:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_UNSUPPORTED_SPD_DATA_DDR4");
        i_parser.PrintString("HWP Error description", "Invalid SPD data returned.");
        break;
    case 0x92349b:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_UNSUPPORTED_SPD_DATA_DDR3");
        i_parser.PrintString("HWP Error description", "Invalid SPD data returned.");
        break;
    case 0x54c62f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_UNSUPPORTED_SPD_DATA_COMMON");
        i_parser.PrintString("HWP Error description", "Invalid SPD data returned.");
        break;
    case 0xbdd78e:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MODULE_TYPE_MIX");
        i_parser.PrintString("HWP Error description", "Differing DIMM types in the same configuration.");
        break;
    case 0xc85de8:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_NO_COMMON_SUPPORTED_CL");
        i_parser.PrintString("HWP Error description", "Current Configuration has no common supported CL Values.");
        break;
    case 0x6d892f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_EXCEED_TAA_MAX_NO_CL");
        i_parser.PrintString("HWP Error description", "Exceeded TAA MAX with Lowest frequency. No compatable CL.");
        break;
    case 0x1b9f28:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_UNSUPPORTED_FREQ_CALCULATED");
        i_parser.PrintString("HWP Error description", "The frequency calculated with spd data is not supported by the jedec standards.");
        break;
    case 0x59b4b0:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_GENERIC_SHMOO_MCBIST_FAILED");
        i_parser.PrintString("HWP Error description", "The mss_generic_shmoo file found an MCBIST Failure");
        break;
    case 0x875175:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP");
        i_parser.PrintString("HWP Error description", "MBMSRQ[0] = 1, unsuccessful forced maint cmd stop.");
        break;
    case 0xb38ade:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_START_NOT_RESET");
        i_parser.PrintString("HWP Error description", "MBMCCQ[0]: maint_cmd_start not reset by hw.");
        break;
    case 0x60f480:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_STOP_NOT_RESET");
        i_parser.PrintString("HWP Error description", "MBMCCQ[1]: maint_cmd_stop not reset by hw.");
        break;
    case 0xa294c3:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_CMD_IN_PROGRESS");
        i_parser.PrintString("HWP Error description", "MBMSRQ[0]: Can't start new cmd if previous cmd still in progress.");
        break;
    case 0x6d44e0:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_NO_MEM_CNFG");
        i_parser.PrintString("HWP Error description", "MBAXCRn[0:3] = 0, meaning no memory configured behind this MBA.");
        break;
    case 0x06f88c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_CCS_MUX_NOT_MAINLINE");
        i_parser.PrintString("HWP Error description", "CCS_MODEQ[29] = 1, meaning mux set for CCS instead of mainline.");
        break;
    case 0xf7ccd2:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_ECC_DISABLED");
        i_parser.PrintString("HWP Error description", "MBSECC[0] non zero, meaning ECC check/correct disabled.");
        break;
    case 0x51da0f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_INVALID_CMD");
        i_parser.PrintString("HWP Error description", "MBAFIRQ[0], invalid_maint_cmd.");
        break;
    case 0x9c51ef:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_INVALID_ADDR");
        i_parser.PrintString("HWP Error description", "MBAFIRQ[1], cmd started with invalid_maint_address.");
        break;
    case 0xf6ebd5:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_CMD_TIMEOUT");
        i_parser.PrintString("HWP Error description", "Maint cmd timeout.");
        break;
    case 0xf0097c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_ZERO_DDR_FREQ");
        i_parser.PrintString("HWP Error description", "ATTR_MSS_FREQ set to zero so can't calculate scrub rate.");
        break;
    case 0xf6b183:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH");
        i_parser.PrintString("HWP Error description", "Invalid dramSize or dramWidth in MBAXCRn.");
        break;
    case 0x071709:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_INVALID_DIMM_CNFG");
        i_parser.PrintString("HWP Error description", "MBAXCRn configured with invalid combination of configType, configSubType, slotConfig.");
        break;
    case 0x1b1a4b:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT");
        i_parser.PrintString("HWP Error description", "i_rank input to mss_get_address_range out of range");
        break;
    case 0xe17611:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_GET_MARK_STORE_BAD_INPUT");
        i_parser.PrintString("HWP Error description", "i_rank input to mss_get_mark_store out of range");
        break;
    case 0x9e3551:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_X4_SYMBOL_ON_READ");
        i_parser.PrintString("HWP Error description", "Symbol mark not allowed in x4 mode.");
        break;
    case 0x782265:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_INVALID_MARKSTORE");
        i_parser.PrintString("HWP Error description", "Invalid galois field in markstore.");
        break;
    case 0x8ba6ba:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT");
        i_parser.PrintString("HWP Error description", "i_rank input to mss_put_mark_store out of range");
        break;
    case 0x10f3af:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_X4_SYMBOL_ON_WRITE");
        i_parser.PrintString("HWP Error description", "Symbol mark not allowed in x4 mode.");
        break;
    case 0x814935:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_INVALID_SYMBOL_INDEX");
        i_parser.PrintString("HWP Error description", "Symbol index out of range.");
        break;
    case 0x11776b:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_INVALID_CHIP_INDEX");
        i_parser.PrintString("HWP Error description", "Not first symbol index of a chip.");
        break;
    case 0xedf421:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_MARKSTORE_WRITE_BLOCKED");
        i_parser.PrintString("HWP Error description", "Markstore write may have been blocked due to MPE FIR set.");
        break;
    case 0x5b4532:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_GET_STEER_MUX_BAD_INPUT");
        i_parser.PrintString("HWP Error description", "i_rank or i_muxType input to mss_get_steer_mux out of range");
        break;
    case 0x36a52c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_INVALID_STEER_MUX");
        i_parser.PrintString("HWP Error description", "Steer mux index out of range");
        break;
    case 0x31d386:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT");
        i_parser.PrintString("HWP Error description", "i_rank or i_muxType or i_steerType or i_symbol input to mss_put_steer_mux out of range");
        break;
    case 0xc7cdb5:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_INVALID_SYMBOL_TO_STEER");
        i_parser.PrintString("HWP Error description", "Trying to steer invalid symbol.");
        break;
    case 0x0b8fac:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_NO_X8_ECC_SPARE");
        i_parser.PrintString("HWP Error description", "Invalid to use ECC spare in x8 mode.");
        break;
    case 0x2d3cab:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE");
        i_parser.PrintString("HWP Error description", "i_rank or i_symbol input to mss_do_steer out of range");
        break;
    case 0xe3fd1e:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MAINT_NO_UE_TRAP");
        i_parser.PrintString("HWP Error description", "IPL UE trapping didn't work.");
        break;
    case 0x0ca58e:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MCBIST_TIMEOUT_ERROR");
        i_parser.PrintString("HWP Error description", "Timeout on MCBIST configuration register polling.");
        break;
    case 0xb97329:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_CFG_MCB_TEST_MEM_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The cfg_mcb_test_mem function received a bad test type parameter");
        break;
    case 0x766d49:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_CFG_MCB_DGEN_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The cfg_mcb_dgen function received a bad data mode parameter");
        break;
    case 0xdf0d0a:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MEMDIAGS_RESTORE_REPAIRS_EXCEEDED");
        i_parser.PrintString("HWP Error description", "FATAL: Memdiags exiting with error before running patterns, due to DRAM repairs exceeded.");
        break;
    case 0x7cdc60:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MEMDIAGS_UE_OR_SUE_IN_LAST_PATTERN");
        i_parser.PrintString("HWP Error description", "FATAL: Memdiags exiting with error due to UE, or SUE(in last pattern).");
        break;
    case 0x7547d5:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MEMDIAGS_UE_OR_RCE_DURING_IPL_STEER");
        i_parser.PrintString("HWP Error description", "FATAL: Memdiags exiting after finding UE or RCE during 1st phase of steer.");
        break;
    case 0x8b61f2:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MEMDIAGS_ECC_SPARE_BAD");
        i_parser.PrintString("HWP Error description", "Found MBECCFIR[38]: MCE, during 2nd phase of steer, which means dram spare is bad.");
        break;
    case 0x5246de:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MEMDIAGS_UE_DURING_VCM");
        i_parser.PrintString("HWP Error description", "Found MBECCFIR[41]:UE or MBECCFIR[39]:RCE during 1st phase of VCM.");
        break;
    case 0x88aac9:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_MEMDIAGS_CANT_STEER");
        i_parser.PrintString("HWP Error description", "Found MBECCFIR[41]:UE or MBECCFIR[39]:RCE during 1st phase of VCM.");
        break;
    case 0xa4d555:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_POWER_CLEANUP_MBA0_UNEXPECTED_BAD_RC");
        i_parser.PrintString("HWP Error description", "Procedure got an unexpected fail in a cfam or scom access for mba0");
        break;
    case 0xc1e46c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_POWER_CLEANUP_MBA1_UNEXPECTED_BAD_RC");
        i_parser.PrintString("HWP Error description", "Procedure got an unexpected fail in a cfam or scom access for mba1");
        break;
    case 0x3e4b0f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_POWER_CLEANUP_FENCING_UNEXPECTED_BAD_RC");
        i_parser.PrintString("HWP Error description", "Procedure got an unexpected fail in a cfam or scom access during fencing");
        break;
    case 0x9e5a2c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_POWER_CLEANUP_CENTAUR_UNEXPECTED_BAD_RC");
        i_parser.PrintString("HWP Error description", "Procedure got an unexpected fail in a cfam or scom access during centaur cleanup");
        break;
    case 0xb08b67:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_SCOMINIT_NUM_MBA_ERROR");
        i_parser.PrintString("HWP Error description", "mss_scominit did not see 2 present membuf child MBAs returned");
        break;
    case 0x3b3ca8:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_SCOMINIT_NUM_L4_ERROR");
        i_parser.PrintString("HWP Error description", "mss_scominit did not see 1 present membuf child L4 returned");
        break;
    case 0x7ff33c:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_CONFIG_DRV_IMP_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The config_drv_imp utility function received a bad parameter");
        break;
    case 0x5d5269:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_CONFIG_RCV_IMP_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The config_rcv_imp utility function received a bad parameter");
        break;
    case 0x3276e6:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_CONFIG_SLEW_RATE_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The config_slew_rate utility function received a bad parameter");
        break;
    case 0x4b28f1:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_CONFIG_WR_DRAM_VREF_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The config_wr_dram_vref utility function received a bad parameter");
        break;
    case 0x046eb6:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_CONFIG_RD_CEN_VREF_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The config_rd_cen_vref utility function received a bad parameter");
        break;
    case 0x423fea:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_SLEW_CAL_INVALID_DRAM_GEN");
        i_parser.PrintString("HWP Error description", "mss_slew_cal found an invalid DRAM type in ATTR_EFF_DRAM_GEN (not DDR3/4)");
        break;
    case 0x738823:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_SLEW_CAL_INVALID_FREQ");
        i_parser.PrintString("HWP Error description", "mss_slew_cal found a zero frequency in ATTR_MSS_FREQ");
        break;
    case 0x589d43:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_SLEW_CAL_TIMEOUT_PORT0");
        i_parser.PrintString("HWP Error description", "mss_slew_cal found slew calibration timeout on MBA port 0");
        break;
    case 0x2d93c4:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_SLEW_CAL_TIMEOUT_PORT1");
        i_parser.PrintString("HWP Error description", "mss_slew_cal found slew calibration timeout on MBA port 1");
        break;
    case 0xc0263f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_SLEW_CAL_ERROR_PORT0");
        i_parser.PrintString("HWP Error description", "mss_slew_cal found slew calibration error on MBA port 0");
        break;
    case 0x285090:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_SLEW_CAL_ERROR_PORT1");
        i_parser.PrintString("HWP Error description", "mss_slew_cal found slew calibration error on MBA port 1");
        break;
    case 0x0384b8:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_IMP_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "Impedance is invalid for driver/receiver type.");
        break;
    case 0x0ec995:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_CDIMM_INVALID_NUMBER_SENSORS");
        i_parser.PrintString("HWP Error description", "Invalid number of dimm temperature sensors specified in the CDIMM VPD MW keyword. Number of sensors greater than 8.");
        break;
    case 0x2c32f5:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE");
        i_parser.PrintString("HWP Error description", "Unsupported DIMM type found. All dimms must be DDR3 or DDR4");
        break;
    case 0xacffb3:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED");
        i_parser.PrintString("HWP Error description", "Mixing of DDR3 and DDR4 not supported.");
        break;
    case 0x735cd5:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE");
        i_parser.PrintString("HWP Error description", "One or more DIMMs do not support required voltage for DDR type.");
        break;
    case 0x725ecd:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_VOLT_DDR_TYPE_COMPLIANT_VOLTAGE");
        i_parser.PrintString("HWP Error description", "One or more DIMMs do not support compliant voltage for DDR type.");
        break;
    case 0x360ff4:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION");
        i_parser.PrintString("HWP Error description", "One or more DIMMs classified non-functional has a tolerated voltage below selected voltage.");
        break;
    case 0x02fddd:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_VOLT_OVERIDE_MIXING");
        i_parser.PrintString("HWP Error description", "An override is trying to be applied to only a part of the voltage domain. It needs to be applied to the entire domain.");
        break;
    case 0xfeaafe:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_VOLT_OVERRIDE_UNKNOWN");
        i_parser.PrintString("HWP Error description", "An uknown override is trying to be applied to the voltage domain. It needs to be none, 1.2 or 1.35V.");
        break;
    case 0xb3feca:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_VDDR_FUNCTIONAL_DIMM_VPD_READ_ERROR");
        i_parser.PrintString("HWP Error description", "Unable to read the VPD from a non-functional dimm.");
        break;
    case 0x77d9fd:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_VOLT_VDDR_OFFSET_DRAM_GEN_MISCOMPARE");
        i_parser.PrintString("HWP Error description", "One or more DIMMs has a different generation of DRAM technology level.");
        break;
    case 0xf5bd93:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_VOLT_VDDR_FUNCTIONAL_CENTAUR_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Code did not find a functional centaur.");
        break;
    case 0x37e97f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_VOLT_VDDR_DRAM_GEN_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "Code did not find a DIMM with a readable attribute for DRAM_GEN.");
        break;
    case 0x193c79:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_VOLT_VDDR_OFFSET_VALUE_ERROR");
        i_parser.PrintString("HWP Error description", "One or more dynamic VDDR attributes is 0.");
        break;
    case 0x05c4b2:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_VOLT_VDDR_OFFSET_VPD_VALUE_ERROR");
        i_parser.PrintString("HWP Error description", "one or more VPD voltage attributes is 0.");
        break;
    case 0x71cb53:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_ACCESS_DELAY_REG_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The mss_access_delay_reg utility function received a bad parameter");
        break;
    case 0xe16450:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_ACCESS_DELAY_REG_BAD_MBA_POS");
        i_parser.PrintString("HWP Error description", "The mss_access_delay_reg utility function received a bad MBA position from the ATTR_CHIP_UNIT_POS attribute");
        break;
    case 0x9abf94:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_ACCESS_DELAY_REG_BAD_DRAM_WIDTH");
        i_parser.PrintString("HWP Error description", "The mss_access_delay_reg utility function received a bad DRAM width from the ATTR_EFF_DRAM_WIDTH attribute");
        break;
    case 0xdade26:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_CROSS_COUPLED_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The cross_coupled utility function received a bad input type parameter");
        break;
    case 0xa047b4:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_CROSS_COUPLED_INVALID_DQS");
        i_parser.PrintString("HWP Error description", "The cross_coupled utility function received a invalid DQS");
        break;
    case 0xff0e6d:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_ROSETTA_MAP_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The rosetta_map utility function received a bad parameter");
        break;
    case 0x7b3721:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_ROSETTA_MAP_BAD_SWIZZLE_VALUE");
        i_parser.PrintString("HWP Error description", "The rosetta_map utility function received a bad swizzle value from the ATTR_MSS_DQS_SWIZZLE_TYPE attribute");
        break;
    case 0xfe695d:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_ROSETTA_MAP_BAD_MBA_POS");
        i_parser.PrintString("HWP Error description", "The rosetta_map utility function received a bad MBA position from the ATTR_CHIP_UNIT_POS attribute");
        break;
    case 0xb8db90:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_C4_PHY_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The mss_c4_phy utility function received a bad input type parameter");
        break;
    case 0xe8e7e4:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_ACCESS_DELAY_REG_SCHMOO_INVALID_INPUT");
        i_parser.PrintString("HWP Error description", "The mss_access_delay_reg_schmoo utility function received a bad parameter");
        break;
    case 0xa98afb:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_MBA_POS");
        i_parser.PrintString("HWP Error description", "The mss_access_delay_reg utility function received a bad MBA position from the ATTR_CHIP_UNIT_POS attribute");
        break;
    case 0xfe8fae:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_ACCESS_DELAY_REG_SCHMOO_BAD_DRAM_WIDTH");
        i_parser.PrintString("HWP Error description", "The mss_access_delay_reg utility function received a bad DRAM width from the ATTR_EFF_DRAM_WIDTH attribute");
        break;
    case 0xc16c50:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_PDA_NONMRS_ATTR_NAME");
        i_parser.PrintString("HWP Error description", "An attribute that is not associated with an MRS was inputted into the PDA function");
        break;
    case 0x1aa5e0:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_PDA_MRS_NOT_FOUND");
        i_parser.PrintString("HWP Error description", "An MRS id from 0 to 6 (valid MRS) was not selected.");
        break;
    case 0xec7911:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_PDA_DRAM_DNE");
        i_parser.PrintString("HWP Error description", "An invalid DRAM was selected for this given configuration for PDA. The DRAM does not exist (DNE).");
        break;
    case 0xb17da0:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_RTT_NOM_IMP_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown Value for RTT_NOM within the VPD");
        break;
    case 0xa21900:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_DRAMINIT_RTT_WR_IMP_INPUT_ERROR");
        i_parser.PrintString("HWP Error description", "Unknown Value for RTT_WR within the VPD");
        break;
    case 0xfa19f9:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_DRAM_GEN_NOT_RECOGNIZED");
        i_parser.PrintString("HWP Error description", "Unknown Value for DRAM GEN attribute");
        break;
    case 0x9749ce:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_DRAM_INVALID_FREQ");
        i_parser.PrintString("HWP Error description", "Invalid Value for DRAM FREQ attribute");
        break;
    case 0x444221:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_DRAM_INVALID_VOLT");
        i_parser.PrintString("HWP Error description", "Invalid Value for DRAM FREQ attribute");
        break;
    case 0xbdc7a4:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_CCS_READ_MISCOMPARE");
        i_parser.PrintString("HWP Error description", "The ccs errors at runtime and registers a read miscompare.");
        break;
    case 0x255fea:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_CCS_UE_SUE");
        i_parser.PrintString("HWP Error description", "The ccs errors at runtime and registers a UE or SUE");
        break;
    case 0x518db8:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_CCS_CAL_TIMEOUT");
        i_parser.PrintString("HWP Error description", "The ccs errors at runtime and registers a calibration operation timeout");
        break;
    case 0xca980f:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_CCS_HUNG");
        i_parser.PrintString("HWP Error description", "The ccs failed to return from in_progress status and failed to describe an error further.");
        break;
    case 0xbeb129:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_RCD_PARITY_ERROR_LIMIT");
        i_parser.PrintString("HWP Error description", "The number of rcd parity errors have exceeded the maximum allowable number");
        break;
    case 0x949828:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_RCD_PARITY_ERROR_PORT0");
        i_parser.PrintString("HWP Error description", "An rcd parity error has been registered on port_0");
        break;
    case 0xdd5d39:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_RCD_PARITY_ERROR_PORT1");
        i_parser.PrintString("HWP Error description", "An rcd parity error has been registered on port_1");
        break;
    case 0xa2d0c9:
        i_parser.PrintString("HwpReturnCode", "RC_CEN_MSS_CCS_INDEX_OUT_OF_BOUNDS");
        i_parser.PrintString("HWP Error description", "An invalid CCS array index was passsed to the function.");
        break;
    case 0x60c96a:
        i_parser.PrintString("HwpReturnCode", "RC_IO_DMI_CEN_RX_DCCAL_TIMEOUT");
        i_parser.PrintString("HWP Error description", "I/O EDI DMI Cen Rx Dccal(Offset calibration) Timeout");
        break;
    case 0xe9975d:
        i_parser.PrintString("HwpReturnCode", "RC_IO_DMI_CEN_RX_DCCAL_FAILED");
        i_parser.PrintString("HWP Error description", "I/O EDI DMI Cen Rx Dccal(Offset calibration) Failed");
        break;
    default:
        i_parser.PrintNumber("Unrecognized Error ID", "0x%x", l_rc);
        if (i_buflen) {i_parser.PrintHexDump(i_pBuffer, i_buflen);}
    }
}

}

#endif
#endif
