// fapiAttributeIds.H
// This file is generated by perl script fapiParseAttributeInfo.pl

#ifndef FAPIATTRIBUTEIDS_H_
#define FAPIATTRIBUTEIDS_H_

#include <fapiTarget.H>

namespace fapi
{

/**
 * @brief Enumeration of attribute IDs
 */
enum AttributeId
{
    ATTR_MSS_VOLT = 0xca0aeab,
    ATTR_MSS_VOLT_VPP = 0x82f8467,
    ATTR_MSS_FREQ_OVERRIDE = 0xccb2200,
    ATTR_MSS_FREQ = 0x5409a94,
    ATTR_MSS_FREQ_BIAS_PERCENTAGE = 0x9bcc1fe,
    ATTR_MSS_VREF_CAL_CNTL = 0xd95104b,
    ATTR_MSS_DIMM_MFG_ID_CODE = 0xa9d4450,
    ATTR_EFF_DIMM_RANKS_CONFIGED = 0x92db64b,
    ATTR_EFF_NUM_RANKS_PER_DIMM = 0x3d83337,
    ATTR_EFF_DIMM_TYPE = 0xd9a7095,
    ATTR_EFF_CUSTOM_DIMM = 0x0e7aead,
    ATTR_EFF_DRAM_WIDTH = 0xe0d4e79,
    ATTR_EFF_DRAM_GEN = 0x7a9dc85,
    ATTR_EFF_PRIMARY_RANK_GROUP0 = 0x89a0ee8,
    ATTR_EFF_PRIMARY_RANK_GROUP1 = 0x8548560,
    ATTR_EFF_PRIMARY_RANK_GROUP2 = 0xa256fc3,
    ATTR_EFF_PRIMARY_RANK_GROUP3 = 0xda4a70c,
    ATTR_EFF_SECONDARY_RANK_GROUP0 = 0x7b6886f,
    ATTR_EFF_SECONDARY_RANK_GROUP1 = 0xe9225e8,
    ATTR_EFF_SECONDARY_RANK_GROUP2 = 0x4c40d75,
    ATTR_EFF_SECONDARY_RANK_GROUP3 = 0x68337ad,
    ATTR_EFF_TERTIARY_RANK_GROUP0 = 0x29290fb,
    ATTR_EFF_TERTIARY_RANK_GROUP1 = 0x4534ff7,
    ATTR_EFF_TERTIARY_RANK_GROUP2 = 0x00741a6,
    ATTR_EFF_TERTIARY_RANK_GROUP3 = 0x3d67c81,
    ATTR_EFF_QUATERNARY_RANK_GROUP0 = 0xb2f4d0e,
    ATTR_EFF_QUATERNARY_RANK_GROUP1 = 0xa8d19de,
    ATTR_EFF_QUATERNARY_RANK_GROUP2 = 0x72f1de7,
    ATTR_EFF_QUATERNARY_RANK_GROUP3 = 0xdf5311f,
    ATTR_EFF_DIMM_SPARE = 0x5471c19,
    ATTR_EFF_DRAM_WR_VREF = 0xe55b07b,
    ATTR_EFF_DRAM_WR_VREF_SCHMOO = 0xccd93c0,
    ATTR_EFF_DRAM_WRDDR4_VREF_SCHMOO = 0x6452c9e,
    ATTR_EFF_CEN_DRV_IMP_DQ_DQS = 0x7277132,
    ATTR_EFF_CEN_DRV_IMP_DQ_DQS_SCHMOO = 0x4a0727d,
    ATTR_EFF_CEN_DRV_IMP_CLK_SCHMOO = 0x024ed24,
    ATTR_EFF_CEN_DRV_IMP_SPCKE_SCHMOO = 0x7315179,
    ATTR_EFF_CEN_DRV_IMP_CNTL_SCHMOO = 0xd6610af,
    ATTR_EFF_CEN_RCV_IMP_DQ_DQS = 0x5bd7acb,
    ATTR_EFF_CEN_RCV_IMP_DQ_DQS_SCHMOO = 0x31c47b1,
    ATTR_EFF_CEN_SLEW_RATE_DQ_DQS = 0x870766e,
    ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SCHMOO = 0x07d2234,
    ATTR_EFF_CEN_SLEW_RATE_CLK_SCHMOO = 0x1b8096c,
    ATTR_EFF_CEN_SLEW_RATE_SPCKE_SCHMOO = 0xbc96dcb,
    ATTR_EFF_CEN_SLEW_RATE_ADDR_SCHMOO = 0xddeb83f,
    ATTR_EFF_CEN_SLEW_RATE_CNTL_SCHMOO = 0x197c27f,
    ATTR_EFF_CEN_RD_VREF = 0x4a4c635,
    ATTR_EFF_CEN_RD_VREF_SCHMOO = 0xce62e73,
    ATTR_EFF_DIMM_SIZE = 0x29d7669,
    ATTR_EFF_DRAM_BANKS = 0x1a8aed4,
    ATTR_EFF_DRAM_ROWS = 0xc1652e4,
    ATTR_EFF_DRAM_COLS = 0xf08e379,
    ATTR_EFF_DRAM_DENSITY = 0x2fa4637,
    ATTR_EFF_DRAM_TRCD = 0xce88510,
    ATTR_EFF_DRAM_TRRD = 0x8817f94,
    ATTR_EFF_DRAM_TRP = 0xfcd1269,
    ATTR_EFF_DRAM_TRAS = 0x3e1f395,
    ATTR_EFF_DRAM_TRC = 0x95eca66,
    ATTR_EFF_DRAM_TRFI = 0x9a04d90,
    ATTR_EFF_DRAM_TRFC = 0xce92930,
    ATTR_EFF_DRAM_TWTR = 0x53ad0e8,
    ATTR_EFF_DRAM_TRTP = 0xa59764c,
    ATTR_EFF_DRAM_TFAW = 0xd3f7bba,
    ATTR_EFF_DRAM_BL = 0xbc9fd3b,
    ATTR_EFF_DRAM_CL = 0x67723cd,
    ATTR_EFF_DRAM_AL = 0xc6c7925,
    ATTR_EFF_DRAM_CWL = 0x4711851,
    ATTR_EFF_DRAM_RBT = 0x3d9e0ec,
    ATTR_EFF_DRAM_TM = 0x93c13a6,
    ATTR_EFF_DRAM_DLL_RESET = 0x5e9f75e,
    ATTR_EFF_DRAM_WR = 0x24becd1,
    ATTR_EFF_DRAM_DLL_PPD = 0x808fa81,
    ATTR_EFF_DRAM_DLL_ENABLE = 0x23d2b47,
    ATTR_EFF_DRAM_TDQS = 0x0d25691,
    ATTR_EFF_DRAM_WR_LVL_ENABLE = 0x77322df,
    ATTR_EFF_DRAM_OUTPUT_BUFFER = 0x8992cb0,
    ATTR_EFF_DRAM_PASR = 0x6fdecdf,
    ATTR_EFF_DRAM_ASR = 0xee66445,
    ATTR_EFF_DRAM_SRT = 0xd1918af,
    ATTR_EFF_MPR_LOC = 0x1247eb7,
    ATTR_EFF_MPR_MODE = 0xd541f48,
    ATTR_EFF_DIMM_RCD_CNTL_WORD_0_15 = 0xb86780f,
    ATTR_EFF_DIMM_RCD_CNTL_WORD_X = 0xc96b7a6,
    ATTR_EFF_DIMM_DDR4_RC00 = 0x0426577,
    ATTR_EFF_DIMM_DDR4_RC01 = 0x7ad2734,
    ATTR_EFF_DIMM_DDR4_RC02 = 0x6d9003b,
    ATTR_EFF_DIMM_DDR4_RC03 = 0x46933df,
    ATTR_EFF_DIMM_DDR4_RC04 = 0x39bb9ff,
    ATTR_EFF_DIMM_DDR4_RC05 = 0x69bf91d,
    ATTR_EFF_DIMM_DDR4_RC06_07 = 0x2f0fbd4,
    ATTR_EFF_DIMM_DDR4_RC08 = 0xc2ab560,
    ATTR_EFF_DIMM_DDR4_RC09 = 0xd883c41,
    ATTR_EFF_DIMM_DDR4_RC10 = 0x23d0f2c,
    ATTR_EFF_DIMM_DDR4_RC11 = 0x0494cda,
    ATTR_EFF_DIMM_DDR4_RC12 = 0xf3d14cf,
    ATTR_EFF_DIMM_DDR4_RC13 = 0xbbca7c1,
    ATTR_EFF_DIMM_DDR4_RC14 = 0x429ee1f,
    ATTR_EFF_DIMM_DDR4_RC15 = 0x60ebaef,
    ATTR_EFF_DIMM_DDR4_RC_1x = 0xe54ebbf,
    ATTR_EFF_DIMM_DDR4_RC_2x = 0x6409304,
    ATTR_EFF_DIMM_DDR4_RC_3x = 0x5250949,
    ATTR_EFF_DIMM_DDR4_RC_4x = 0x57316b4,
    ATTR_EFF_DIMM_DDR4_RC_5x = 0xab87656,
    ATTR_EFF_DIMM_DDR4_RC_6x = 0xeda2fed,
    ATTR_EFF_DIMM_DDR4_RC_7x = 0xd437a3d,
    ATTR_EFF_DIMM_DDR4_RC_8x = 0x7e52703,
    ATTR_EFF_DIMM_DDR4_RC_9x = 0x246db38,
    ATTR_EFF_DIMM_DDR4_RC_Ax = 0x1bc4976,
    ATTR_EFF_DIMM_DDR4_RC_Bx = 0x0246dcc,
    ATTR_EFF_DIMM_RCD_IBT = 0x6f1259f,
    ATTR_EFF_DIMM_RCD_MIRROR_MODE = 0xd612805,
    ATTR_EFF_SCHMOO_MODE = 0x91d7136,
    ATTR_EFF_SCHMOO_ADDR_MODE = 0xfbda0fe,
    ATTR_EFF_SCHMOO_TEST_VALID = 0x116cac3,
    ATTR_EFF_SCHMOO_PARAM_VALID = 0x384985b,
    ATTR_EFF_SCHMOO_WR_EYE_MIN_MARGIN = 0x1002327,
    ATTR_EFF_SCHMOO_RD_EYE_MIN_MARGIN = 0x3a69cd0,
    ATTR_EFF_SCHMOO_DQS_CLK_MIN_MARGIN = 0xa76dd9d,
    ATTR_EFF_SCHMOO_RD_GATE_MIN_MARGIN = 0x7953864,
    ATTR_EFF_SCHMOO_ADDR_CMD_MIN_MARGIN = 0xe1d2a90,
    ATTR_EFF_MEMCAL_INTERVAL = 0x9a89c30,
    ATTR_EFF_ZQCAL_INTERVAL = 0x6cb09a8,
    ATTR_EFF_IBM_TYPE = 0x9618454,
    ATTR_EFF_NUM_DROPS_PER_PORT = 0x8d89d40,
    ATTR_EFF_STACK_TYPE = 0x28196da,
    ATTR_EFF_NUM_MASTER_RANKS_PER_DIMM = 0xa0ffe42,
    ATTR_EFF_NUM_PACKAGES_PER_RANK = 0x8305498,
    ATTR_EFF_NUM_DIES_PER_PACKAGE = 0xf19b41c,
    ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_MBA = 0x0b4c742,
    ATTR_MSS_MEM_THROTTLE_DENOMINATOR = 0xb20b5d7,
    ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_CHIP = 0xb189654,
    ATTR_MSS_MEM_WATT_TARGET = 0x2ea7b8a,
    ATTR_MSS_POWER_SLOPE = 0x99ce405,
    ATTR_MSS_POWER_SLOPE2 = 0xdaac238,
    ATTR_MSS_POWER_INT = 0xb0a1086,
    ATTR_MSS_POWER_INT2 = 0x6ef7290,
    ATTR_MSS_TOTAL_POWER_SLOPE = 0x9d80798,
    ATTR_MSS_TOTAL_POWER_SLOPE2 = 0xd2e1f42,
    ATTR_MSS_TOTAL_POWER_INT = 0xd9dc907,
    ATTR_MSS_TOTAL_POWER_INT2 = 0x840a27a,
    ATTR_MSS_DIMM_MAXBANDWIDTH_GBS = 0x060e6f7,
    ATTR_MSS_DIMM_MAXBANDWIDTH_MRS = 0xc38809c,
    ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_GBS = 0x89a7ae0,
    ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_MRS = 0x0c824dc,
    ATTR_MSS_DIMM_MAXPOWER = 0x59be4e0,
    ATTR_MSS_CHANNEL_PAIR_MAXPOWER = 0xdc2d9bd,
    ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_MBA = 0xf28a6ec,
    ATTR_MSS_RUNTIME_MEM_THROTTLE_DENOMINATOR = 0x970c911,
    ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_CHIP = 0x7c68e7c,
    ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_MBA = 0x0185106,
    ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_CHIP = 0x3c6655d,
    ATTR_MRW_THERMAL_MEMORY_POWER_LIMIT = 0x1e9fec7,
    ATTR_MSS_INTERLEAVE_ENABLE = 0xf6b86e3,
    ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT = 0x8a49e20,
    ATTR_MSS_DERIVED_MBA_ADDR_INTERLEAVE_BIT = 0xc5a9d28,
    ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE = 0x9cc041f,
    ATTR_MSS_DERIVED_MBA_CACHELINE_INTERLEAVE_MODE = 0x7696f71,
    ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL = 0xc406062,
    ATTR_MSS_CACHE_ENABLE = 0x0d02bbb,
    ATTR_MSS_PREFETCH_ENABLE = 0x799cb05,
    ATTR_MSS_CLEANER_ENABLE = 0x6097329,
    ATTR_MSS_MEM_MC_IN_GROUP = 0x95abe21,
    ATTR_MSS_MCS_GROUP_32 = 0x80d2291,
    ATTR_MSS_EFF_DIMM_FUNCTIONAL_VECTOR = 0x55ca724,
    ATTR_EFF_DRAM_LPASR = 0x1c53acd,
    ATTR_EFF_MPR_PAGE = 0xc9114ed,
    ATTR_EFF_GEARDOWN_MODE = 0x08212fe,
    ATTR_EFF_PER_DRAM_ACCESS = 0x8564fa8,
    ATTR_EFF_TEMP_READOUT = 0x8fa5111,
    ATTR_EFF_FINE_REFRESH_MODE = 0x2b936b1,
    ATTR_EFF_CRC_WR_LATENCY = 0xaede177,
    ATTR_EFF_MPR_RD_FORMAT = 0xdfbb6bc,
    ATTR_EFF_MAX_POWERDOWN_MODE = 0xe4d075d,
    ATTR_EFF_TEMP_REF_RANGE = 0x9b26500,
    ATTR_EFF_TEMP_REF_MODE = 0xe026042,
    ATTR_EFF_INT_VREF_MON = 0xf51cdb9,
    ATTR_EFF_CS_CMD_LATENCY = 0x336e081,
    ATTR_EFF_SELF_REF_ABORT = 0x1f60d7f,
    ATTR_EFF_RD_PREAMBLE_TRAIN = 0x9437808,
    ATTR_EFF_RD_PREAMBLE = 0x7380b3a,
    ATTR_EFF_WR_PREAMBLE = 0x14b80a1,
    ATTR_EFF_CA_PARITY_LATENCY = 0x5fda47c,
    ATTR_EFF_CRC_ERROR_CLEAR = 0x11b8b55,
    ATTR_EFF_CA_PARITY_ERROR_STATUS = 0x6c58297,
    ATTR_EFF_ODT_INPUT_BUFF = 0x7f1499b,
    ATTR_EFF_RTT_PARK = 0x81e407c,
    ATTR_EFF_CA_PARITY = 0x276668f,
    ATTR_EFF_DATA_MASK = 0x8ee11e8,
    ATTR_EFF_WRITE_DBI = 0x4ddea38,
    ATTR_EFF_READ_DBI = 0x2603112,
    ATTR_VREF_DQ_TRAIN_VALUE = 0x47ae8cf,
    ATTR_VREF_DQ_TRAIN_RANGE = 0x43961d5,
    ATTR_VREF_DQ_TRAIN_ENABLE = 0xa3ee234,
    ATTR_EFF_DRAM_TCCD_L = 0x82e0f01,
    ATTR_TCCD_L = 0x7b0ae8c,
    ATTR_EFF_WRITE_CRC = 0x8082409,
    ATTR_MSS_CAL_STEP_ENABLE = 0xf2e501b,
    ATTR_MSS_DRAMINIT_RESET_DISABLE = 0xb6862fe,
    ATTR_MSS_MEM_IPL_COMPLETE = 0xbf464ef,
    ATTR_MSS_SLEW_RATE_DATA = 0xe6e1ed0,
    ATTR_MSS_SLEW_RATE_ADR = 0x459ac09,
    ATTR_ECID = 0xd52cc6a,
    ATTR_MSS_ALLOW_SINGLE_PORT = 0x68d34ab,
    ATTR_MSS_DQS_SWIZZLE_TYPE = 0x4e01270,
    ATTR_MSS_PSRO = 0x9aab087,
    ATTR_MSS_NWELL_MISPLACEMENT = 0xa354b98,
    ATTR_MSS_BLUEWATERFALL_BROKEN = 0x130ae0e,
    ATTR_MCBIST_PATTERN = 0x99c8bd7,
    ATTR_MCBIST_TEST_TYPE = 0xe5d6eed,
    ATTR_MCBIST_PRINTING_DISABLE = 0x46ced5d,
    ATTR_MCBIST_DATA_ENABLE = 0x2cfbdb7,
    ATTR_MCBIST_USER_RANK = 0x8903f08,
    ATTR_MCBIST_USER_BANK = 0x6773585,
    ATTR_SCHMOO_MULTIPLE_SETUP_CALL = 0x0397e7d,
    ATTR_EFF_BUFFER_LATENCY = 0x54f357a,
    ATTR_EFF_LRDIMM_WORD_X = 0x4463dc0,
    ATTR_LRDIMM_MR12_REG = 0xa89cc6c,
    ATTR_EFF_LRDIMM_ADDITIONAL_CNTL_WORDS = 0x36ec2c6,
    ATTR_LRDIMM_ADDITIONAL_CNTL_WORDS = 0xaee7485,
    ATTR_LRDIMM_RANK_MULT_MODE = 0xb42c68a,
    ATTR_MSS_THROTTLE_CONTROL_RAS_WEIGHT = 0xf8c1994,
    ATTR_MSS_THROTTLE_CONTROL_CAS_WEIGHT = 0xce9eb42,
    ATTR_MCBIST_RANDOM_SEED_VALUE = 0x1fad2d0,
    ATTR_MCBIST_RANDOM_SEED_TYPE = 0x2f58cdf,
    ATTR_MCBIST_DDR4_PDA_ENABLE = 0xfd972bc,
    ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT = 0x74de6fe,
    ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_IDLE = 0x1f96350,
    ATTR_MRW_MEM_THROTTLE_DENOMINATOR = 0xf1db5be,
    ATTR_MSS_INIT_STATE = 0x7b0ee1b,
    ATTR_MRW_MAX_DRAM_DATABUS_UTIL = 0x8b18512,
    ATTR_MSS_EFF_VPD_VERSION = 0x05dbe38,
    ATTR_MSS_NEST_CAPABLE_FREQUENCIES = 0xae3dcbd,
    ATTR_MRW_STRICT_MBA_PLUG_RULE_CHECKING = 0x96d07ec,
    ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING = 0xbd2ad29,
    ATTR_MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE = 0x091c61f,
    ATTR_MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE = 0x146f883,
    ATTR_MSS_AVDD_OFFSET_DISABLE = 0x3aa2e0b,
    ATTR_MSS_VDD_OFFSET_DISABLE = 0xc79c9b7,
    ATTR_MSS_VCS_OFFSET_DISABLE = 0x774500c,
    ATTR_MSS_VPP_OFFSET_DISABLE = 0x10bd6fb,
    ATTR_MSS_VDDR_OFFSET_DISABLE = 0xd6eaa96,
    ATTR_MSS_AVDD_SLOPE_ACTIVE = 0xca5bef7,
    ATTR_MSS_AVDD_SLOPE_INACTIVE = 0xa9b123c,
    ATTR_MSS_AVDD_SLOPE_INTERCEPT = 0x8ba1f56,
    ATTR_MSS_VDD_SLOPE_ACTIVE = 0xed54551,
    ATTR_MSS_VDD_SLOPE_INACTIVE = 0x3558863,
    ATTR_MSS_VDD_SLOPE_INTERCEPT = 0xf0a736a,
    ATTR_MSS_VCS_SLOPE_ACTIVE = 0xa38db82,
    ATTR_MSS_VCS_SLOPE_INACTIVE = 0x973e604,
    ATTR_MSS_VCS_SLOPE_INTERCEPT = 0x058b89e,
    ATTR_MSS_VPP_SLOPE = 0x5d94ec1,
    ATTR_MSS_VPP_SLOPE_INTERCEPT = 0x4ff0fde,
    ATTR_MSS_DDR3_VDDR_SLOPE = 0xc824cb8,
    ATTR_MSS_DDR3_VDDR_INTERCEPT = 0x18c3d89,
    ATTR_MSS_DDR4_VDDR_SLOPE = 0x83a41e0,
    ATTR_MSS_DDR4_VDDR_INTERCEPT = 0x3639a52,
    ATTR_MSS_VOLT_OVERRIDE = 0x6c80b74,
    ATTR_MSS_VOLT_COMPLIANT_DIMMS = 0x46b2878,
    ATTR_MRW_MCS_PREFETCH_RETRY_THRESHOLD = 0x2d14d55,
    ATTR_MRW_POWER_CONTROL_REQUESTED = 0x1ec075d,
    ATTR_MSS_AVDD_OFFSET = 0x33871a3,
    ATTR_MSS_VDD_OFFSET = 0x7afbf7f,
    ATTR_MSS_VCS_OFFSET = 0xbebd823,
    ATTR_MSS_VPP_OFFSET = 0x6b9647d,
    ATTR_MSS_VDDR_OFFSET = 0x36dd0ed,
    ATTR_MSS_VDDR_OVERIDE_SPD = 0x1f013ef,
    ATTR_VPD_ISDIMMTOC4DQ = 0x92cc467,
    ATTR_VPD_ISDIMMTOC4DQS = 0x4e23e52,
    ATTR_ISDIMM_POWER_CURVE_ALGORITHM_VERSION = 0x5560289,
    ATTR_MRW_DDR3_VDDR_MAX_LIMIT = 0x4c9b6a0,
    ATTR_MRW_DDR4_VDDR_MAX_LIMIT = 0xe815a80,
    ATTR_MRW_MEM_SENSOR_CACHE_ADDR_MAP = 0xf27fb39,
    ATTR_MSS_VMEM_REGULATOR_MAX_DIMM_COUNT = 0x7563123,
    ATTR_MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE = 0x1c79f2a,
    ATTR_MRW_MAX_NUMBER_DIMMS_POSSIBLE_PER_VMEM_REGULATOR = 0x1068aeb,
    ATTR_MRW_VMEM_REGULATOR_MEMORY_POWER_LIMIT_PER_DIMM = 0x7f51d49,
    ATTR_L2_R_T0_EPS = 0x04fbe20,
    ATTR_L2_R_T1_EPS = 0x5e93be1,
    ATTR_L2_R_T2_EPS = 0x4b97680,
    ATTR_L2_FORCE_R_T2_EPS = 0xa14bbb4,
    ATTR_L2_W_EPS = 0x250d7d8,
    ATTR_L3_R_T0_EPS = 0x1867bfc,
    ATTR_L3_R_T1_EPS = 0x397b2f6,
    ATTR_L3_R_T2_EPS = 0x421f4dc,
    ATTR_L3_FORCE_R_T2_EPS = 0x518c8ed,
    ATTR_L3_W_EPS = 0xaa22424,
    ATTR_SCRATCH_UINT8_1 = 0xd16a035,
    ATTR_SCRATCH_UINT8_2 = 0xd53bc45,
    ATTR_SCRATCH_UINT32_1 = 0x6e35711,
    ATTR_SCRATCH_UINT32_2 = 0xb6b04cf,
    ATTR_SCRATCH_UINT64_1 = 0x97c0c12,
    ATTR_SCRATCH_UINT64_2 = 0xa09fac0,
    ATTR_SCRATCH_UINT8_ARRAY_1 = 0x4b2b986,
    ATTR_SCRATCH_UINT8_ARRAY_2 = 0x466dcc2,
    ATTR_SCRATCH_UINT32_ARRAY_1 = 0x330cac1,
    ATTR_SCRATCH_UINT32_ARRAY_2 = 0x9c880f8,
    ATTR_SCRATCH_UINT64_ARRAY_1 = 0x14d36df,
    ATTR_SCRATCH_UINT64_ARRAY_2 = 0x065e855,
    ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8 = 0x2588335,
    ATTR_EXECUTION_PLATFORM = 0x8aa85d5,
    ATTR_IS_SIMULATION = 0x5e8e617,
    ATTR_MNFG_FLAGS = 0x22cdd45,
    ATTR_IS_MPIPL = 0x32ab761,
    ATTR_PROC_EPS_TABLE_TYPE = 0x132602b,
    ATTR_PROC_FABRIC_PUMP_MODE = 0x138ee84,
    ATTR_PROC_X_BUS_WIDTH = 0x7a48d6f,
    ATTR_ALL_MCS_IN_INTERLEAVING_GROUP = 0x1f8d4c1,
    ATTR_NEST_FREQ_MHZ = 0x403f570,
    ATTR_BOOT_FREQ_MHZ = 0x7c49cfc,
    ATTR_EX_GARD_BITS = 0x7fe3369,
    ATTR_DISABLE_I2C_ACCESS = 0x1ba20f5,
    ATTR_PIB_I2C_REFCLOCK = 0xbc375a8,
    ATTR_PIB_I2C_NEST_PLL = 0x2ea0b98,
    ATTR_SBE_IMAGE_OFFSET = 0xc6122e2,
    ATTR_BOOT_VOLTAGE = 0xf651d57,
    ATTR_RISK_LEVEL = 0x6c6a7b8,
    ATTR_PROC_REFCLOCK_RCVR_TERM = 0x4252e3d,
    ATTR_PCI_REFCLOCK_RCVR_TERM = 0xd6b0bb7,
    ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM = 0x4cf88f9,
    ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM = 0xaf4f6a6,
    ATTR_MEM_FILTER_PLL_SOURCE = 0x292e834,
    ATTR_MULTI_SCOM_BUFFER_MAX_SIZE = 0x3a1cbd8,
    ATTR_RECONFIGURE_LOOP = 0xb04d39a,
    ATTR_PM_HWP_ATTR_VERSION = 0x2c5d134,
    ATTR_REDUNDANT_CLOCKS = 0x36784e2,
    ATTR_MFG_TRACE_ENABLE = 0xbad56c6,
    ATTR_WOF_ENABLED = 0xe59852e,
    ATTR_FORCE_USE_SBE_SLAVE_SCAN_SERVICE = 0xe4acb83,
    ATTR_TRUSTED_SLAVE_SCAN_PATH_ACTIVE = 0x945659b,
    ATTR_FORCE_SKIP_SBE_MASTER_INTR_SERVICE = 0xcf87615,
    ATTR_SBE_MASTER_INTR_SERVICE_DELAY_CYCLES = 0x6e93d6f,
    ATTR_SBE_MASTER_INTR_SERVICE_DELAY_US = 0xf9fdd3d,
    ATTR_CHIP_ID = 0xca771ad,
    ATTR_NAME = 0xb91b1b8,
    ATTR_EC = 0x76cb47d,
    ATTR_FSI_GP_REG_SCOM_ACCESS = 0x2171f23,
    ATTR_FABRIC_NODE_ID = 0xe75987b,
    ATTR_FABRIC_CHIP_ID = 0xa631e7e,
    ATTR_CHIP_HAS_SBE = 0x520b948,
    ATTR_PROC_DCM_INSTALLED = 0xce9d606,
    ATTR_CHIP_REGIONS_TO_ENABLE = 0x94a3736,
    ATTR_EX_L2_SINGLE_MEMBER_ENABLE = 0xd9c3cf7,
    ATTR_PROC_BOOT_VOLTAGE_VID = 0xe34b343,
    ATTR_PCI_OSCSWITCH_CONFIG = 0xa85e131,
    ATTR_OSCSWITCH_CTL0 = 0x2647699,
    ATTR_OSCSWITCH_CTL1 = 0xa3aa8c5,
    ATTR_OSCSWITCH_CTL2 = 0x1c5b238,
    ATTR_I2C_SLAVE_ADDRESS = 0x4e9285d,
    ATTR_TARGET_SCOMABLE = 0x2b33d5a,
    ATTR_TDP_RDP_CURRENT_FACTOR = 0x2d45b65,
    ATTR_SPD_DRAM_DEVICE_TYPE = 0xdbe36bd,
    ATTR_SPD_MODULE_TYPE = 0xd4e4240,
    ATTR_SPD_CUSTOM = 0x3fc59f1,
    ATTR_SPD_SDRAM_DENSITY = 0x37a6e4c,
    ATTR_SPD_SDRAM_BANKS = 0x7ffe67a,
    ATTR_SPD_SDRAM_ROWS = 0x12caefe,
    ATTR_SPD_SDRAM_COLUMNS = 0x74faa45,
    ATTR_SPD_MODULE_NOMINAL_VOLTAGE = 0x73f1064,
    ATTR_SPD_NUM_RANKS = 0x7dbc67a,
    ATTR_SPD_DRAM_WIDTH = 0x18080bc,
    ATTR_SPD_MODULE_MEMORY_BUS_WIDTH = 0x0e50e1e,
    ATTR_SPD_TCKMIN = 0x896919f,
    ATTR_SPD_CAS_LATENCIES_SUPPORTED = 0x88189b9,
    ATTR_SPD_TAAMIN = 0x0e03b4b,
    ATTR_SPD_TRCDMIN = 0x34144b7,
    ATTR_SPD_TRPMIN = 0x1884230,
    ATTR_SPD_TRASMIN = 0x2ce2f7c,
    ATTR_SPD_TRCMIN = 0x830e82e,
    ATTR_SPD_TFAWMIN = 0x5e01ec7,
    ATTR_SPD_SDRAM_OPTIONAL_FEATURES = 0x431c54b,
    ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS = 0x4f8a5c4,
    ATTR_SPD_MODULE_THERMAL_SENSOR = 0x1b699f8,
    ATTR_SPD_SDRAM_DEVICE_TYPE = 0xb60bcfe,
    ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING = 0x335c15a,
    ATTR_SPD_SDRAM_DIE_COUNT = 0x1fbf83f,
    ATTR_SPD_FINE_OFFSET_TCKMIN = 0xc53b45a,
    ATTR_SPD_FINE_OFFSET_TAAMIN = 0xdfcb8b0,
    ATTR_SPD_FINE_OFFSET_TRCDMIN = 0xf5ac3d6,
    ATTR_SPD_FINE_OFFSET_TRPMIN = 0x8c09870,
    ATTR_SPD_FINE_OFFSET_TRCMIN = 0xd06543f,
    ATTR_SPD_NUM_OF_REGISTERS_USED_ON_RDIMM = 0x39fa001,
    ATTR_SPD_MODULE_SPECIFIC_SECTION = 0x5eb47a9,
    ATTR_SPD_MODULE_ID_MODULE_MANUFACTURERS_JEDEC_ID_CODE = 0x3398112,
    ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_LOCATION = 0xa5f3615,
    ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_DATE = 0x343bbe2,
    ATTR_SPD_MODULE_ID_MODULE_SERIAL_NUMBER = 0x82f1f13,
    ATTR_SPD_CYCLICAL_REDUNDANCY_CODE = 0x467287b,
    ATTR_SPD_MODULE_PART_NUMBER = 0x552cdb1,
    ATTR_SPD_MODULE_REVISION_CODE = 0x1d93652,
    ATTR_SPD_DRAM_MANUFACTURER_JEDEC_ID_CODE = 0x44a6f7c,
    ATTR_SPD_BAD_DQ_DATA = 0x64cb9e3,
    ATTR_SPD_DIMM_RCD_CNTL_WORD_0_15 = 0x8851f6d,
    ATTR_VPD_DIMM_RCD_CNTL_WORD_0_15 = 0xb2a8aa3,
    ATTR_VPD_DIMM_RCD_OUTPUT_TIMING = 0x7af23a4,
    ATTR_SPD_FTB_DIVIDEND = 0xa130eef,
    ATTR_SPD_FTB_DIVISOR = 0x9fb7509,
    ATTR_SPD_MTB_DIVIDEND = 0xc20ff51,
    ATTR_SPD_MTB_DIVISOR = 0x9e26625,
    ATTR_SPD_TWRMIN = 0x56daf14,
    ATTR_SPD_TRRDMIN = 0xd0aa657,
    ATTR_SPD_TRFCMIN = 0x4114c71,
    ATTR_SPD_TWTRMIN = 0x67f96e5,
    ATTR_SPD_TRTPMIN = 0xde22d98,
    ATTR_SPD_LR_ADDR_MIRRORING = 0x8316350,
    ATTR_SPD_LR_F0RC3_F0RC2 = 0x917d241,
    ATTR_SPD_LR_F0RC5_F0RC4 = 0x98b444f,
    ATTR_SPD_LR_F1RC11_F1RC8 = 0xd1cc41c,
    ATTR_SPD_LR_F1RC13_F1RC12 = 0xd7c70c5,
    ATTR_SPD_LR_F1RC15_F1RC14 = 0xd35d125,
    ATTR_SPD_LR_F3RC9_F3RC8_FOR_800_1066 = 0x24eae82,
    ATTR_SPD_LR_F34RC11_F34RC10_FOR_800_1066 = 0x5afa219,
    ATTR_SPD_LR_F56RC11_F56RC10_FOR_800_1066 = 0x4824106,
    ATTR_SPD_LR_F78RC11_F78RC10_FOR_800_1066 = 0x52f6585,
    ATTR_SPD_LR_F910RC11_F910RC10_FOR_800_1066 = 0x699fa87,
    ATTR_SPD_LR_MR12_FOR_800_1066 = 0xbd9453f,
    ATTR_SPD_LR_F3RC9_F3RC8_FOR_1333_1600 = 0xa8c3b32,
    ATTR_SPD_LR_F34RC11_F34RC10_FOR_1333_1600 = 0x2434662,
    ATTR_SPD_LR_F56RC11_F56RC10_FOR_1333_1600 = 0xfaa12a8,
    ATTR_SPD_LR_F78RC11_F78RC10_FOR_1333_1600 = 0x8637d49,
    ATTR_SPD_LR_F910RC11_F910RC10_FOR_1333_1600 = 0x40738a4,
    ATTR_SPD_LR_MR12_FOR_1333_1600 = 0x5673fc6,
    ATTR_SPD_LR_F3RC9_F3RC8_FOR_1866_2133 = 0x86d92fa,
    ATTR_SPD_LR_F34RC11_F34RC10_FOR_1866_2133 = 0x1f243ee,
    ATTR_SPD_LR_F56RC11_F56RC10_FOR_1866_2133 = 0xfabb0d8,
    ATTR_SPD_LR_F78RC11_F78RC10_FOR_1866_2133 = 0x26eacbc,
    ATTR_SPD_LR_F910RC11_F910RC10_FOR_1866_2133 = 0x88ff0ea,
    ATTR_SPD_LR_MR12_FOR_1866_2133 = 0xb3d940f,
    ATTR_SPD_SDRAM_BANKGROUPS_DDR4 = 0x0901bef,
    ATTR_SPD_TIMEBASE_MTB_DDR4 = 0x6e09a77,
    ATTR_SPD_TIMEBASE_FTB_DDR4 = 0xe65d5a9,
    ATTR_SPD_TCKMAX_DDR4 = 0x33621fc,
    ATTR_SPD_TRFC1MIN_DDR4 = 0xf08ca1d,
    ATTR_SPD_TRFC2MIN_DDR4 = 0x7236022,
    ATTR_SPD_TRFC4MIN_DDR4 = 0xfb7dd2b,
    ATTR_SPD_TRRDSMIN_DDR4 = 0xdc2f623,
    ATTR_SPD_TRRDLMIN_DDR4 = 0x6e1bcbb,
    ATTR_SPD_TCCDLMIN_DDR4 = 0x1581f0d,
    ATTR_SPD_FINE_OFFSET_TCCDLMIN_DDR4 = 0x8d1fbcd,
    ATTR_SPD_FINE_OFFSET_TRRDLMIN_DDR4 = 0x2a11048,
    ATTR_SPD_FINE_OFFSET_TRRDSMIN_DDR4 = 0x212779e,
    ATTR_SPD_FINE_OFFSET_TCKMAX_DDR4 = 0xfb07c31,
    ATTR_SPD_CRC_BASE_CONFIG_DDR4 = 0x865951b,
    ATTR_SPD_DRAM_STEPPING_DDR4 = 0xe590676,
    ATTR_SPD_CRC_MNFG_SEC_DDR4 = 0xda9cb9c,
    ATTR_VPD_VERSION = 0x97bf461,
    ATTR_SPD_DIMM_MODULE_LR_ATTRIBUTES = 0x8405b09,
    ATTR_SPD_LR_REGISTER_MANF_ID = 0x236f99c,
    ATTR_SPD_LR_ADDR_MAP_REG_TO_DRAM = 0x8b8b8cc,
    ATTR_SPD_LR_REG_OUTPUT_DRV_STRENGTH_CK = 0xc63cd0e,
    ATTR_SPD_LR_DRAM_VREF_DQ_RANK0 = 0xb7fbeb9,
    ATTR_SPD_LR_DRAM_VREF_DQ_RANK1 = 0x561854a,
    ATTR_SPD_LR_DRAM_VREF_DQ_RANK2 = 0x35f9764,
    ATTR_SPD_LR_DRAM_VREF_DQ_RANK3 = 0x4db7f5d,
    ATTR_SPD_LR_BUF_VREF_DQ_FOR_DRAM = 0x3bcbda8,
    ATTR_SPD_LR_BUF_MDQ_DRV_LESS_THAN_1866 = 0x9c2c051,
    ATTR_SPD_LR_BUF_MDQ_DRV_1866_2400 = 0x8f3ae97,
    ATTR_SPD_LR_BUF_MDQ_DRV_2400_3200 = 0x9768180,
    ATTR_SPD_LR_DRAM_DRV_STRENGTH = 0x1766c11,
    ATTR_SPD_LR_DRAM_ODT_RTT_WR_LESS_THAN_1866 = 0xdfb65c6,
    ATTR_SPD_LR_DRAM_ODT_RTT_NOM_LESS_THAN_1866 = 0x32711d9,
    ATTR_SPD_LR_DRAM_ODT_RTT_WR_1866_2400 = 0x424c1ed,
    ATTR_SPD_LR_DRAM_ODT_RTT_NOM_1866_2400 = 0x5a040bf,
    ATTR_SPD_LR_DRAM_ODT_RTT_WR_2400_3200 = 0xcd3212b,
    ATTR_SPD_LR_DRAM_ODT_RTT_NOM_2400_3200 = 0xd66631e,
    ATTR_SPD_LR_DRAM_ODT_RTT_PARK_LESS_THAN_1866 = 0xbcec073,
    ATTR_SPD_LR_DRAM_ODT_RTT_PARK_1866_2400 = 0xd6b4a45,
    ATTR_SPD_LR_DRAM_ODT_RTT_PARK_2400_3200 = 0x168b7d2,
    ATTR_SPD_SDRAM_BANKS_DDR3 = 0x1df6a25,
    ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR3 = 0x741659a,
    ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3 = 0xc8ac0b9,
    ATTR_SPD_MODULE_REVISION_CODE_DDR3 = 0x17e28db,
    ATTR_SPD_SDRAM_BANKS_DDR4 = 0xe7b42c1,
    ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4 = 0xa5c1f65,
    ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4 = 0xc5c6a54,
    ATTR_SPD_MODULE_REVISION_CODE_DDR4 = 0x8fd86ca,
    ATTR_VPD_DRAM_ADDRESS_MIRRORING = 0x1e12d3c,
    ATTR_VPD_ODT_RD = 0x2794706,
    ATTR_VPD_ODT_WR = 0x5f960e8,
    ATTR_VPD_DRAM_RON = 0x61e9543,
    ATTR_VPD_DRAM_RTT_NOM = 0xc0f8c6b,
    ATTR_VPD_DRAM_RTT_WR = 0x486274f,
    ATTR_VPD_DRAM_RTT_PARK = 0x0a5e309,
    ATTR_VPD_DRAM_WR_VREF = 0xcd3736b,
    ATTR_VPD_DRAM_WRDDR4_VREF = 0xb7b7342,
    ATTR_VPD_CEN_DRV_IMP_DQ_DQS = 0xf15067e,
    ATTR_VPD_CEN_DRV_IMP_ADDR = 0xb4e2583,
    ATTR_VPD_CEN_DRV_IMP_CNTL = 0xbc24a3e,
    ATTR_VPD_CEN_DRV_IMP_CLK = 0xa417f56,
    ATTR_VPD_CEN_DRV_IMP_SPCKE = 0x70b0209,
    ATTR_VPD_CEN_RCV_IMP_DQ_DQS = 0x31e6a5e,
    ATTR_VPD_CEN_SLEW_RATE_DQ_DQS = 0x134d418,
    ATTR_VPD_CEN_SLEW_RATE_ADDR = 0xb87d944,
    ATTR_VPD_CEN_SLEW_RATE_CLK = 0xa609134,
    ATTR_VPD_CEN_SLEW_RATE_SPCKE = 0x85f0673,
    ATTR_VPD_CEN_SLEW_RATE_CNTL = 0x7c8c7a3,
    ATTR_VPD_CEN_RD_VREF = 0xa50073c,
    ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P0 = 0xfff28c5,
    ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P1 = 0xba1d85b,
    ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P0 = 0xd12b8f5,
    ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P1 = 0xa3a3e69,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A0 = 0x79bb2f3,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A1 = 0x676adb3,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A2 = 0x24c98c9,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A3 = 0x762c8ea,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A4 = 0x72dda21,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A5 = 0xf600fd9,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A6 = 0x74ee1c6,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A7 = 0x7be097f,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A8 = 0xf7863e5,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A9 = 0x7379cac,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A10 = 0x722f829,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A11 = 0x2e3f0c0,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A12 = 0x5bee7a7,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A13 = 0xd6619f2,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A14 = 0xbf0a0a2,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_A15 = 0xd1ff97b,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA0 = 0xaf92d9f,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA1 = 0x35696fe,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA2 = 0x96f8caf,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_CASN = 0xb59e3b9,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_RASN = 0x9ed5400,
    ATTR_VPD_CEN_PHASE_ROT_M_CMD_WEN = 0xd484124,
    ATTR_VPD_CEN_PHASE_ROT_M_PAR = 0x17c483d,
    ATTR_VPD_CEN_PHASE_ROT_M_ACTN = 0x2be6384,
    ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE0 = 0x21f2459,
    ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE1 = 0xd80a132,
    ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE2 = 0x2a98438,
    ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE3 = 0xf8e4024,
    ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN0 = 0x9801dbb,
    ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN1 = 0x63dfc1a,
    ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN2 = 0x97af9b3,
    ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN3 = 0xd9df1cc,
    ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT0 = 0xea6ddd4,
    ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT1 = 0x842f688,
    ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE0 = 0x483bb6b,
    ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE1 = 0x6054b24,
    ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE2 = 0xa5e90b4,
    ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE3 = 0x7575df4,
    ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN0 = 0x9f07725,
    ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN1 = 0xace580e,
    ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN2 = 0x305be81,
    ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN3 = 0x532eef7,
    ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT0 = 0xfb3b2ab,
    ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT1 = 0xedc6d29,
    ATTR_VPD_PERIODIC_MEMCAL_MODE_OPTIONS = 0x2fc41d0,
    ATTR_VPD_CKE_PRI_MAP = 0xa068494,
    ATTR_VPD_CKE_PWR_MAP = 0x6bf1222,
    ATTR_VPD_GPO = 0xc7e5d5f,
    ATTR_VPD_RLO = 0x9e81b79,
    ATTR_VPD_WLO = 0x986be33,
    ATTR_VPD_TSYS_ADR = 0x19591aa,
    ATTR_VPD_TSYS_DP18 = 0xdac65dc,
    ATTR_VPD_CDIMM_SENSOR_MAP_PRIMARY = 0xffc273f,
    ATTR_VPD_CDIMM_SENSOR_MAP_SECONDARY = 0x8b07ee9,
    ATTR_VPD_DRAM_2N_MODE_ENABLED = 0xa7ee517,
    ATTR_CDIMM_VPD_MASTER_POWER_SLOPE = 0x2aec555,
    ATTR_CDIMM_VPD_MASTER_POWER_INTERCEPT = 0xf09cb2a,
    ATTR_CDIMM_VPD_SUPPLIER_POWER_SLOPE = 0x3dc3a5d,
    ATTR_CDIMM_VPD_SUPPLIER_POWER_INTERCEPT = 0x40e3f4d,
    ATTR_L4_BANK_DELETE_VPD = 0xf34b9c5,
    ATTR_VPD_MT_VERSION_BYTE = 0x3615228,
    ATTR_VPD_MR_VERSION_BYTE = 0x59abd03,
    ATTR_VPD_MR_DATA_CONTROL_BYTE = 0x33e82d6,
    ATTR_VPD_MT_DATA_CONTROL_BYTE = 0x1b48d11,
    ATTR_VPD_VM_KEYWORD = 0x3f86965,
    ATTR_VPD_VD_KEYWORD = 0xb5665b3,
    ATTR_VPD_DW_KEYWORD = 0x7b960d8,
    ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_REV = 0x5b9cbf8,
    ATTR_SPD_MODSPEC_COM_REF_RAW_CARD = 0xf2d2c90,
    ATTR_VPD_POWER_CONTROL_CAPABLE = 0x0514729,
    ATTR_VPD_DIMM_RCD_IBT = 0xd498676,
    ATTR_VPD_RD_CTR_WINDAGE_OFFSET = 0xd94fb8e,
    ATTR_ISDIMM_MBVPD_INDEX = 0xb242e90,
    ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_SLOPE = 0x29bc8e6,
    ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_INTERCEPT = 0xe2a2a2d,
    ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_SLOPE = 0x469b058,
    ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_INTERCEPT = 0x5f490e4,
    ATTR_CEN_DQ_TO_DIMM_CONN_DQ = 0x7814503,
    ATTR_MBA_PORT = 0xe91fb12,
    ATTR_MBA_DIMM = 0x4f5f0b0,
    ATTR_BAD_DQ_BITMAP = 0x6bd2a93,
    ATTR_VPD_DIMM_SPARE = 0x266e3eb,
    ATTR_CHIP_UNIT_POS = 0x07f067a,
    ATTR_FREQ_PROC_REFCLOCK = 0x9d1850e,
    ATTR_FREQ_PROC_REFCLOCK_KHZ = 0x137afe3,
    ATTR_FREQ_MEM_REFCLOCK = 0x24d5979,
    ATTR_FREQ_CORE_FLOOR = 0x932ad70,
    ATTR_FREQ_CORE_NOMINAL = 0xd042df2,
    ATTR_FREQ_PB = 0x76c06c3,
    ATTR_FREQ_A = 0x244778d,
    ATTR_FREQ_X = 0x3908b77,
    ATTR_FREQ_PCIE = 0x1d63d98,
    ATTR_EI_BUS_TX_MSBSWAP = 0x926b407,
    ATTR_EI_BUS_TX_LANE_INVERT = 0x1ac193e,
    ATTR_DMI_REFCLOCK_SWIZZLE = 0xf52d45e,
    ATTR_DMI_DFE_OVERRIDE = 0x1790e9f,
    ATTR_BRAZOS_RX_FIFO_OVERRIDE = 0xce3dcbe,
    ATTR_CHIP_EC_FEATURE_TEST1 = 0x17874c2,
    ATTR_CHIP_EC_FEATURE_TEST2 = 0x45c55e0,
    ATTR_CENTAUR_EC_ENABLE_TRACE_ARRAY_CLKSTOP_ON_XSTOP_FW624741 = 0x2b7b05d,
    ATTR_CENTAUR_EC_ENABLE_SAFE_MODE_THROTTLE = 0x3e97aaf,
    ATTR_CENTAUR_EC_ENABLE_RCE_WITH_OTHER_ERRORS_HW246685 = 0x126cd5b,
    ATTR_CENTAUR_EC_ENABLE_PAGE_MODE_FOR_RRQ = 0x1a02c07,
    ATTR_CENTAUR_EC_ENABLE_TRACE_LCL_CLK_GATE_CTRL = 0x588819f,
    ATTR_CENTAUR_EC_ENABLE_NM_CHANGE_AFTER_SYNC = 0x6955c94,
    ATTR_CENTAUR_EC_ENABLE_ROW_HAMMER_FEATURE = 0xa2ab603,
    ATTR_CENTAUR_EC_WRITE_FIR_MASK_FEATURE = 0x7ef345b,
    ATTR_CENTAUR_BLUEWATERFALL_NWELL_BROKEN_CHECK_FLAG = 0xafe6981,
    ATTR_CENTAUR_EC_MSS_CONTINUE_ON_DP18_PLL_LOCK_FAIL = 0xb46400c,
    ATTR_CENTAUR_EC_MSS_READ_PHASE_SELECT_RESET = 0xd184539,
    ATTR_CENTAUR_EC_CHECK_L4_CACHE_ENABLE_UNKNOWN = 0x99e4b59,
    ATTR_MSS_DISABLE1_REG_FIXED = 0x2c7cff4,
    ATTR_MSS_DISABLE1_RDCLK_REG_FIXED = 0x0e35941,
    ATTR_CENTAUR_EC_ECID_CONTAINS_PORT_LOGIC_BAD_INDICATION = 0x3e86f6e,
    ATTR_CENTAUR_EC_MCBIST_RANDOM_DATA_GEN = 0x548e8dc,
    ATTR_CENTAUR_EC_MCBIST_TRAP_RESET = 0xa1a6cc9,
    ATTR_CENTAUR_EC_MCBIST_RANDOM_ADDRESS = 0xc45344b,
    ATTR_CENTAUR_EC_SCOM_PARITY_ERROR_HW244827_FIXED = 0x382f724,
    ATTR_CENTAUR_EC_HW217608_MBSPA_0_CMD_COMPLETE_ATTN_FIXED = 0x6907ca9,
    ATTR_CENTAUR_EC_USE_FIRST_SUPPLIER_FOR_INVALID_MODULE_ID = 0xfc02ad8,
    ATTR_CENTAUR_EC_ENABLE_SAFEMODE_THROTTLE = 0xb6b9e15,
    ATTR_CENTAUR_EC_DD2_FIR_BIT_DEFN_CHANGES = 0xf5499dd,
    ATTR_CENTAUR_EC_RDCLK_PR_UPDATE_HW236658_FIXED = 0x36d9be3,
    ATTR_CENTAUR_EC_DD2_ENABLE_EXIT_POINT_1 = 0x2fc3789,
    ATTR_CENTAUR_EC_DISABLE_VDDR_DYNAMIC_VID = 0xa14167f,
    ATTR_FUNCTIONAL = 0xcaa52ad,
    ATTR_POS = 0x0962a16,
    ATTR_SYNC_BETWEEN_STEPS = 0x6e0ab98,
    ATTR_MEM_MIRROR_PLACEMENT_POLICY = 0xb543ea7,
    ATTR_OPT_MEMMAP_GROUP_POLICY = 0xc7641e0,
    ATTR_MIRROR_BASE_ADDRESS = 0x61788d6,
    ATTR_PROC_MEM_BASE = 0x2855dd7,
    ATTR_PROC_MEM_BASES = 0x610bccf,
    ATTR_PROC_MEM_BASES_ACK = 0xd703199,
    ATTR_PROC_MEM_SIZES = 0x928afa6,
    ATTR_PROC_MEM_SIZES_ACK = 0x91475c7,
    ATTR_PROC_MIRROR_BASE = 0x317938b,
    ATTR_PROC_MIRROR_BASES = 0xdedd8c2,
    ATTR_PROC_MIRROR_BASES_ACK = 0x286213a,
    ATTR_PROC_MIRROR_SIZES = 0xb3f43f2,
    ATTR_PROC_MIRROR_SIZES_ACK = 0x3e968cc,
    ATTR_PROC_FOREIGN_NEAR_BASE = 0xbb3e484,
    ATTR_PROC_FOREIGN_NEAR_SIZE = 0x8026c5b,
    ATTR_PROC_FOREIGN_FAR_BASE = 0xd385149,
    ATTR_PROC_FOREIGN_FAR_SIZE = 0x76c0a28,
    ATTR_PROC_HA_BASE = 0x3e5876b,
    ATTR_PROC_HA_SIZE = 0xc9a7ddb,
    ATTR_PROC_HTM_BAR_SIZE = 0x4b6309e,
    ATTR_PROC_HTM_BAR_BASE_ADDR = 0x349ab37,
    ATTR_PROC_OCC_SANDBOX_SIZE = 0x4ef368d,
    ATTR_PROC_OCC_SANDBOX_BASE_ADDR = 0x0c66212,
    ATTR_PROC_L3_BAR1_REG = 0x6aa8527,
    ATTR_PROC_L3_BAR2_REG = 0x5afe609,
    ATTR_PROC_L3_BAR_GROUP_MASK_REG = 0xcb93257,
    ATTR_PROC_PSI_BRIDGE_BAR_ENABLE = 0x36f669b,
    ATTR_PROC_PSI_BRIDGE_BAR_BASE_ADDR = 0xd636a2c,
    ATTR_PROC_FSP_BAR_ENABLE = 0x5eb7cea,
    ATTR_PROC_FSP_BAR_BASE_ADDR = 0xd0dc091,
    ATTR_PROC_FSP_BAR_SIZE = 0x7e86af0,
    ATTR_PROC_FSP_MMIO_MASK_SIZE = 0x136e087,
    ATTR_PROC_INTP_BAR_ENABLE = 0x59a51d1,
    ATTR_PROC_INTP_BAR_BASE_ADDR = 0x4bd196e,
    ATTR_PROC_AS_MMIO_BAR_ENABLE = 0x4cad8a0,
    ATTR_PROC_AS_MMIO_BAR_BASE_ADDR = 0x597f3a2,
    ATTR_PROC_AS_MMIO_BAR_SIZE = 0xadb27a6,
    ATTR_PROC_NX_MMIO_BAR_ENABLE = 0xae63781,
    ATTR_PROC_NX_MMIO_BAR_BASE_ADDR = 0x5befa2b,
    ATTR_PROC_NX_MMIO_BAR_SIZE = 0xca6ff4b,
    ATTR_PROC_NPU_MMIO_BAR_ENABLE = 0xf8bad7c,
    ATTR_PROC_NPU_MMIO_BAR_BASE_ADDR = 0xdeddca3,
    ATTR_PROC_NPU_MMIO_BAR_SIZE = 0x5ee1299,
    ATTR_PROC_PCIE_BAR_ENABLE = 0xdeb75ec,
    ATTR_PROC_PCIE_BAR_BASE_ADDR = 0x63218eb,
    ATTR_PROC_PCIE_BAR_SIZE = 0x6f31ceb,
    ATTR_FREQ_CORE = 0xcd23d9e,
    ATTR_PROC_EPS_GB_PERCENTAGE = 0x0a991b8,
    ATTR_PROC_EPS_GB_DIRECTION = 0xf22fe2c,
    ATTR_PROC_FABRIC_ASYNC_SAFE_MODE = 0x8ec3a1c,
    ATTR_PROC_PCIE_NOT_F_LINK = 0x5bfae6d,
    ATTR_PM_EXTERNAL_VRM_STEPSIZE = 0x912a82e,
    ATTR_PM_EXTERNAL_VRM_STEPDELAY = 0x842449e,
    ATTR_PM_UNDERVOLTING_FRQ_MINIMUM = 0x2fc2857,
    ATTR_PM_UNDERVOLTING_FREQ_MAXIMUM = 0xafafda9,
    ATTR_PM_SPIVID_FREQUENCY = 0xd987528,
    ATTR_PM_SPIVID_PORT_ENABLE = 0xec163bf,
    ATTR_PM_SAFE_FREQUENCY = 0x87bf0e4,
    ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY = 0x328d622,
    ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY = 0xcd2a836,
    ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY = 0xd933142,
    ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY = 0xd4c48bf,
    ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY = 0xf850a54,
    ATTR_PM_SPIPSS_FREQUENCY = 0xe82d64a,
    ATTR_PM_APSS_CHIP_SELECT = 0x13fd1b6,
    ATTR_PM_PBAX_NODEID = 0xcef178c,
    ATTR_PM_PBAX_CHIPID = 0x83d6f07,
    ATTR_PM_PBAX_BRDCST_ID_VECTOR = 0x1de28ed,
    ATTR_PROC_R_LOADLINE_VDD = 0x4cc6c8a,
    ATTR_PROC_R_DISTLOSS_VDD = 0x2e4aa10,
    ATTR_PROC_VRM_VOFFSET_VDD = 0x000593f,
    ATTR_PROC_R_LOADLINE_VCS = 0x9b6d3fd,
    ATTR_PROC_R_DISTLOSS_VCS = 0x6aca66f,
    ATTR_PROC_VRM_VOFFSET_VCS = 0xaffbf23,
    ATTR_FREQ_CORE_MAX = 0xf3a2378,
    ATTR_CPM_TURBO_BOOST_PERCENT = 0xf509a3a,
    ATTR_FREQ_EXT_BIAS_UP = 0xafb3458,
    ATTR_FREQ_EXT_BIAS_DOWN = 0xbfa070e,
    ATTR_VOLTAGE_EXT_VDD_BIAS_UP = 0x246ac62,
    ATTR_VOLTAGE_EXT_VDD_BIAS_DOWN = 0x4236a1c,
    ATTR_VOLTAGE_EXT_VCS_BIAS_UP = 0xab31151,
    ATTR_VOLTAGE_EXT_VCS_BIAS_DOWN = 0x1761a09,
    ATTR_VOLTAGE_INT_VDD_BIAS_UP = 0x71c8418,
    ATTR_VOLTAGE_INT_VDD_BIAS_DOWN = 0x0aa0d33,
    ATTR_VOLTAGE_INT_VCS_BIAS_UP = 0x77ef4d6,
    ATTR_VOLTAGE_INT_VCS_BIAS_DOWN = 0xbd9357e,
    ATTR_PM_SLEEP_ENABLE = 0x8d30758,
    ATTR_PM_SLEEP_ENTRY = 0xddda241,
    ATTR_PM_SLEEP_EXIT = 0x8afeedb,
    ATTR_PM_SLEEP_TYPE = 0x893f5f8,
    ATTR_PM_WINKLE_ENTRY = 0x20d8f35,
    ATTR_PM_WINKLE_EXIT = 0x8d9fdb8,
    ATTR_PM_WINKLE_TYPE = 0xb5692a7,
    ATTR_PM_SYSTEM_IVRMS_ENABLED = 0xc33316b,
    ATTR_PM_SYSTEM_IVRM_VPD_MIN_LEVEL = 0x47fbc66,
    ATTR_PROC_DPLL_DIVIDER = 0xe568250,
    ATTR_PM_POWER_PROXY_TRACE_TIMER = 0x4afbe91,
    ATTR_PM_PPT_TIMER_MATCH_VALUE = 0xe6115ed,
    ATTR_PM_PPT_TIMER_TICK = 0x1abf241,
    ATTR_PM_AISS_TIMEOUT = 0xfb08279,
    ATTR_PM_PSTATE_STEPSIZE = 0x067383f,
    ATTR_PM_EXTERNAL_VRM_STEPDELAY_RANGE = 0x62d0b43,
    ATTR_PM_EXTERNAL_VRM_STEPDELAY_VALUE = 0x9f45c20,
    ATTR_PM_PMC_HANGPULSE_DIVIDER = 0xe990f9e,
    ATTR_PM_PVSAFE_PSTATE = 0x88bb957,
    ATTR_PM_SPIVID_FRAME_SIZE = 0x9664cfa,
    ATTR_PM_SPIVID_IN_DELAY_FRAME1 = 0xbf66b13,
    ATTR_PM_SPIVID_IN_DELAY_FRAME2 = 0xe33f64d,
    ATTR_PM_SPIVID_CLOCK_POLARITY = 0x8c1049e,
    ATTR_PM_SPIVID_CLOCK_PHASE = 0x4d446f0,
    ATTR_PM_SPIVID_CLOCK_DIVIDER = 0xd98ec14,
    ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS = 0xec24d74,
    ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE = 0xe2d10c2,
    ATTR_PM_SPIVID_INTER_RETRY_DELAY_VALUE = 0xd26494a,
    ATTR_PM_SPIVID_INTER_RETRY_DELAY = 0x205484c,
    ATTR_PM_SPIVID_CRC_GEN_ENABLE = 0x03a0b7c,
    ATTR_PM_SPIVID_CRC_CHECK_ENABLE = 0x5aeedf6,
    ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE = 0xcd05499,
    ATTR_PM_SPIVID_MAX_RETRIES = 0xc66fa35,
    ATTR_PM_SPIVID_CRC_POLYNOMIAL_ENABLES = 0xacd7bfc,
    ATTR_PM_OCC_HEARTBEAT_TIME = 0x8798284,
    ATTR_PM_SLEEP_WINKLE_REQUEST_TIMEOUT = 0x4a4a339,
    ATTR_PM_PFET_POWERUP_CORE_DELAY0 = 0x76b51f4,
    ATTR_PM_PFET_POWERUP_CORE_DELAY1 = 0x6e20290,
    ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE = 0x47ecf0d,
    ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE = 0x8f922bf,
    ATTR_PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT = 0x372ba4c,
    ATTR_PM_PFET_POWERDOWN_CORE_DELAY0 = 0x37f1308,
    ATTR_PM_PFET_POWERDOWN_CORE_DELAY1 = 0xb2fd6b6,
    ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE = 0xe58b1a8,
    ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE = 0x0a5e1e6,
    ATTR_PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT = 0xd29c3a0,
    ATTR_PM_PFET_POWERUP_ECO_DELAY0 = 0x2d642da,
    ATTR_PM_PFET_POWERUP_ECO_DELAY1 = 0x659f781,
    ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE = 0x150659a,
    ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE = 0xa4cd70d,
    ATTR_PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT = 0x86f288f,
    ATTR_PM_PFET_POWERDOWN_ECO_DELAY0 = 0xf9b7b7f,
    ATTR_PM_PFET_POWERDOWN_ECO_DELAY1 = 0xbabe6fb,
    ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE = 0xd441e4d,
    ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE = 0xe9c0d5e,
    ATTR_PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT = 0x2bfb3d4,
    ATTR_PM_PSTATE0_FREQUENCY = 0xec1474c,
    ATTR_PM_IVRMS_ENABLED = 0xf78935d,
    ATTR_PM_SAFE_PSTATE = 0xb9d303a,
    ATTR_PM_RESONANT_CLOCK_ENABLE = 0x95f176b,
    ATTR_PM_RESONANT_CLOCK_FULL_CSB_PSTATE = 0x08ab787,
    ATTR_PM_RESONANT_CLOCK_LFRLOW_PSTATE = 0x060a42d,
    ATTR_PM_RESONANT_CLOCK_LFRUPPER_PSTATE = 0xf9bf608,
    ATTR_PM_RESONANT_CLOCK_HFRLOW_PSTATE = 0xe4e4353,
    ATTR_PM_RESONANT_CLOCK_HFRHIGH_PSTATE = 0xd25870a,
    ATTR_PM_SPIPSS_FRAME_SIZE = 0x097f45d,
    ATTR_PM_SPIPSS_OUT_COUNT = 0x77c1636,
    ATTR_PM_SPIPSS_IN_DELAY = 0x7da6bbe,
    ATTR_PM_SPIPSS_IN_COUNT = 0x895b645,
    ATTR_PM_SPIPSS_CLOCK_POLARITY = 0x3f0a8e0,
    ATTR_PM_SPIPSS_CLOCK_PHASE = 0x5e21a9f,
    ATTR_PM_SPIPSS_CLOCK_DIVIDER = 0xd2fed1a,
    ATTR_PM_SPIPSS_INTER_FRAME_DELAY_SETTING = 0xf684924,
    ATTR_PM_SPIPSS_INTER_FRAME_DELAY = 0x8dfc09e,
    ATTR_PM_PBAX_RCV_RESERV_TIMEOUT = 0x603d1f5,
    ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE = 0x6348b8d,
    ATTR_PM_PBAX_SND_RETRY_THRESHOLD = 0x534ec4c,
    ATTR_PM_PBAX_SND_RESERV_TIMEOUT = 0x6908d32,
    ATTR_PM_SPWUP_FSP = 0x8ece29b,
    ATTR_PM_SPWUP_OCC = 0xba10908,
    ATTR_PM_SPWUP_PHYP = 0xdf86041,
    ATTR_PM_SPWUP_OHA_FLAG = 0x9738d8f,
    ATTR_PM_SPWUP_IGNORE_XSTOP_FLAG = 0x4686755,
    ATTR_CPM_INFLECTION_POINTS = 0xa4ddd48,
    ATTR_PM_SLW_CONTROL_VECTOR_OFFSET = 0xc211b1e,
    ATTR_PM_SLW_DEEP_WINKLE_EXIT_GOOD_HALT_ADDR = 0xa7f0d3f,
    ATTR_PM_SLW_DEEP_SLEEP_EXIT_GOOD_HALT_ADDR = 0xa9c9091,
    ATTR_PM_PCBS_FSM_TRACE_EN = 0x16033a1,
    ATTR_PM_GLOBAL_FIR_TRACE_EN = 0x98fd917,
    ATTR_PM_PFET_WORKAROUND_RUN_FLAG = 0xb3c555d,
    ATTR_PM_OCC_LFIR_MASK = 0xc78f47f,
    ATTR_PM_PBA_FIR_MASK = 0x946b77a,
    ATTR_PM_PMC_LFIR_MASK = 0xabe4bae,
    ATTR_PM_FIRINIT_DONE_ONCE_FLAG = 0xe0b140f,
    ATTR_PROC_PCIE_NUM_PHB = 0x7137f89,
    ATTR_PROC_PCIE_NUM_IOP = 0x1f0e94c,
    ATTR_PROC_PCIE_NUM_LANES = 0x4da44eb,
    ATTR_PROC_PCIE_IOP_CONFIG = 0x1179bee,
    ATTR_PROC_PCIE_IOP_SWAP = 0x5692bf0,
    ATTR_PROC_PCIE_PHB_ACTIVE = 0xf8da522,
    ATTR_PROC_PCIE_REFCLOCK_ENABLE = 0x603d529,
    ATTR_PROC_PCIE_IOP_G3_PLL_CONTROL0 = 0xac4f4c4,
    ATTR_PROC_PCIE_IOP_G2_PLL_CONTROL0 = 0xfee2c5d,
    ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL0 = 0x6a97de2,
    ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL1 = 0x37fbcab,
    ATTR_PROC_PCIE_IOP_PCS_CONTROL0 = 0xe1c2cd0,
    ATTR_PROC_PCIE_IOP_PCS_CONTROL1 = 0xe3f9203,
    ATTR_PROC_PCIE_IOP_TX_FIFO_OFFSET = 0x0c3b0a9,
    ATTR_PROC_PCIE_IOP_TX_RCVRDETCNTL = 0xbe95011,
    ATTR_PROC_PCIE_IOP_TX_BWLOSS1 = 0xad76da6,
    ATTR_PROC_PCIE_IOP_RX_VGA_CONTROL2 = 0x2171144,
    ATTR_PROC_PCIE_IOP_RX_PEAK = 0x37789d9,
    ATTR_PROC_PCIE_IOP_RX_SDL = 0x9b18f7f,
    ATTR_PROC_PCIE_IOP_TX_FFE_GEN1 = 0x542d66a,
    ATTR_PROC_PCIE_IOP_TX_FFE_GEN2 = 0x86e0f92,
    ATTR_PROC_PCIE_IOP_ZCAL_CONTROL = 0xf4fa143,
    ATTR_MCS_INBAND_BASE_ADDRESS = 0x2420c51,
    ATTR_PROC_PERV_BNDY_PLL_DATA = 0xd24694b,
    ATTR_PROC_PB_BNDY_DMIPLL_DATA = 0x6f7369b,
    ATTR_PROC_AB_BNDY_PLL_DATA = 0xa632bff,
    ATTR_PROC_PCI_BNDY_PLL_DATA = 0xde50967,
    ATTR_PROC_PERV_BNDY_PLL_LENGTH = 0xfe61a20,
    ATTR_PROC_PB_BNDY_DMIPLL_LENGTH = 0x36bc48b,
    ATTR_PROC_AB_BNDY_PLL_LENGTH = 0xcffd528,
    ATTR_PROC_PCI_BNDY_PLL_LENGTH = 0x59dfbff,
    ATTR_PROC_PERV_BNDY_PLL_FLUSH = 0x7956533,
    ATTR_PROC_PB_BNDY_DMIPLL_FLUSH = 0x5bde086,
    ATTR_PROC_AB_BNDY_PLL_FLUSH = 0xceac964,
    ATTR_PROC_PCI_BNDY_PLL_FLUSH = 0xeec581e,
    ATTR_PROC_PERV_BNDY_PLL_CHIPLET_ID = 0x2b358c9,
    ATTR_PROC_PB_BNDY_DMIPLL_CHIPLET_ID = 0xfb9c77b,
    ATTR_PROC_AB_BNDY_PLL_CHIPLET_ID = 0x99be4e4,
    ATTR_PROC_PCI_BNDY_PLL_CHIPLET_ID = 0x830da01,
    ATTR_PROC_PERV_BNDY_PLL_SCAN_SELECT = 0xf39f50c,
    ATTR_PROC_PB_BNDY_DMIPLL_SCAN_SELECT = 0xdb34f5b,
    ATTR_PROC_AB_BNDY_PLL_SCAN_SELECT = 0x5ccc488,
    ATTR_PROC_PCI_BNDY_PLL_SCAN_SELECT = 0xfc34561,
    ATTR_PROC_ABUS_CUPLL_PFD360_OFFSET = 0x75708b3,
    ATTR_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET = 0xa9b950c,
    ATTR_PROC_DMI_CUPLL_PFD360_OFFSET = 0x68c73d0,
    ATTR_PROC_DMI_CUPLL_REFCLKSEL_OFFSET = 0x81c373a,
    ATTR_PROC_NX_ENABLE = 0x7d03d8c,
    ATTR_PROC_PCIE_ENABLE = 0xe671b84,
    ATTR_PROC_L3_ENABLE = 0xe5574e5,
    ATTR_PROC_A_ENABLE = 0x4f12515,
    ATTR_PROC_X_ENABLE = 0xbe299c0,
    ATTR_PROC_PBA_UNTRUSTED_BAR_BASE_ADDR = 0x1b2f722,
    ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE = 0xe21c89c,
    ATTR_PROC_ADU_UNTRUSTED_BAR_BASE_ADDR = 0x3ec0777,
    ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE = 0x622f4b1,
    ATTR_PROC_PSI_UNTRUSTED_BAR0_BASE_ADDR = 0x52c5728,
    ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE = 0x0780333,
    ATTR_PROC_PSI_UNTRUSTED_BAR1_BASE_ADDR = 0xb1cf068,
    ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE = 0x49a04de,
    ATTR_PROC_SECURITY_SETUP_VECTOR = 0x6ccaf9a,
    ATTR_SBE_IMAGE_MINIMUM_VALID_EXS = 0x8f9b648,
    ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES = 0x3c6066b,
    ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS = 0x3042fd3,
    ATTR_SBE_SEEPROM_I2C_PORT = 0x4bf2261,
    ATTR_PNOR_I2C_ADDRESS_BYTES = 0x6029076,
    ATTR_MCBIST_ADDR_MODES = 0x31b6605,
    ATTR_MCBIST_RANK = 0x90daf25,
    ATTR_MCBIST_START_ADDR = 0x2ec6437,
    ATTR_MCBIST_END_ADDR = 0xbbcc82a,
    ATTR_MCBIST_ERROR_CAPTURE = 0x233b6a3,
    ATTR_MCBIST_MAX_TIMEOUT = 0x6e0ef67,
    ATTR_MCBIST_PRINT_PORT = 0xb368c3e,
    ATTR_MCBIST_STOP_ON_ERROR = 0xd7f7b0c,
    ATTR_MCBIST_DATA_SEED = 0x56bd70c,
    ATTR_MCBIST_ADDR_INTER = 0x4b2946b,
    ATTR_MCBIST_ADDR_NUM_ROWS = 0x4080908,
    ATTR_MCBIST_ADDR_NUM_COLS = 0x139841b,
    ATTR_MCBIST_ADDR_RANK = 0x685360c,
    ATTR_MCBIST_ADDR_BANK = 0x1fa2bfa,
    ATTR_MCBIST_ADDR_SLAVE_RANK_ON = 0x33821d8,
    ATTR_MCBIST_ADDR_STR_MAP = 0x99cb354,
    ATTR_MCBIST_ADDR_RAND = 0x59e95ec,
    ATTR_PROC_EX_FUNC_L3_DELTA_DATA = 0xee745b1,
    ATTR_PROC_EX_FUNC_L3_LENGTH = 0x559bc81,
    ATTR_PROC_PBIEX_ASYNC_SEL = 0x0116509,
    ATTR_X_EREPAIR_THRESHOLD_FIELD = 0x19eb5a7,
    ATTR_X_EREPAIR_THRESHOLD_MNFG = 0xdc853d2,
    ATTR_A_EREPAIR_THRESHOLD_FIELD = 0xadbe8c6,
    ATTR_A_EREPAIR_THRESHOLD_MNFG = 0x7e45e1e,
    ATTR_DMI_EREPAIR_THRESHOLD_FIELD = 0xd60ce9a,
    ATTR_DMI_EREPAIR_THRESHOLD_MNFG = 0xe4cf80f,
    ATTR_MEMB_TP_BNDY_PLL_DATA = 0x4e18af0,
    ATTR_MEMB_TP_BNDY_PLL_LENGTH = 0x236ee88,
    ATTR_MEMB_TP_BNDY_PLL_FLUSH = 0x2efdcfc,
    ATTR_MEMB_TP_BNDY_PLL_SCAN_SELECT = 0xf79436a,
    ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_DATA = 0xcb28efd,
    ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_LENGTH = 0x37498c4,
    ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_DATA = 0x5608876,
    ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_LENGTH = 0x59fc982,
    ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_DATA = 0x14cd64e,
    ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_LENGTH = 0x9d38ff0,
    ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_DATA = 0x31359a0,
    ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_LENGTH = 0xbbe3bcd,
    ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_DATA = 0xde405e2,
    ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_LENGTH = 0x99b182a,
    ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_DATA = 0x56c14b6,
    ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_LENGTH = 0x07b7b8f,
    ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_DATA = 0x25de3fd,
    ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_LENGTH = 0x598270f,
    ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_DATA = 0xd17f879,
    ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_LENGTH = 0x4bd8788,
    ATTR_MEMB_DMI_CUPLL_PFD360_OFFSET = 0x0c910ea,
    ATTR_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET = 0xdb4870d,
    ATTR_MEMB_MEM_PLL_CFG_UPDATE_OFFSET = 0x698851c,
    ATTR_CHIP_EC_FEATURE_SET_ABUS_PRBS_TAP_ID = 0x178ca87,
    ATTR_CHIP_EC_FEATURE_TA_PB_T1_PRESENT = 0x834aa3d,
    ATTR_CHIP_EC_FEATURE_TA_A_T1_PRESENT = 0x8354673,
    ATTR_CHIP_EC_FEATURE_SINGLE_XBUS_PRESENT = 0x3cd67a7,
    ATTR_CHIP_EC_FEATURE_NV_PRESENT = 0x6874897,
    ATTR_CHIP_EC_FEATURE_PCI_NEST_FIR_ACTION2_PRESENT = 0xfa92c05,
    ATTR_CHIP_EC_FEATURE_DUAL_CAPP_PRESENT = 0x90c54af,
    ATTR_CHIP_EC_FEATURE_SET_LEGACY_NODE_ID_VALID_MBOX_BIT = 0xcd2cff5,
    ATTR_CHIP_EC_FEATURE_USE_POLLING_PROT = 0x0b6d169,
    ATTR_CHIP_EC_FEATURE_HW_BUG_PIBSLVRESET = 0x4187a39,
    ATTR_CHIP_EC_FEATURE_BOOT_FREQ_LESS_PSAVE = 0x1e3b28a,
    ATTR_CHIP_EC_FEATURE_HW_BUG_PLLINIT = 0x3c46b63,
    ATTR_CHIP_EC_FEATURE_SECURE_IOVALID_PRESENT = 0xcfeb598,
    ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_CFAM_START = 0x791c3c5,
    ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_AUTO_START = 0x72ac551,
    ATTR_CHIP_EC_FEATURE_CAPP_HANG_CONTROL_ON_SCOM = 0x2296f72,
    ATTR_CHIP_EC_FEATURE_CAPP_PROD = 0x9023dd2,
    ATTR_CHIP_EC_FEATURE_NX_HANG_CONTROL_ON_SCOM = 0xafc61b7,
    ATTR_CHIP_EC_FEATURE_HCA_SPLIT_HANG_CONTROL = 0x28f3f1a,
    ATTR_CHIP_EC_FEATURE_RECAL_DFE_ENABLE = 0x210b737,
    ATTR_CHIP_EC_FEATURE_RECAL_DDC_ENABLE = 0xfa2018d,
    ATTR_CHIP_EC_FEATURE_RECAL_CTLE_ENABLE = 0x59af544,
    ATTR_CHIP_EC_FEATURE_LCTANK_PLL_VCO_BUG = 0xe520884,
    ATTR_CHIP_EC_FEATURE_XBUS_DLL_SLOW_MURANO = 0x0ccf93a,
    ATTR_CHIP_EC_FEATURE_ADU_PBINIT_LAUNCH_BUG = 0x01580be,
    ATTR_CHIP_EC_FEATURE_MCS_ECC_BYPASS_DISABLE = 0x7f7201f,
    ATTR_CHIP_EC_FEATURE_MCS_MURDD1_FIR_CONTROL = 0xf07bf0c,
    ATTR_CHIP_EC_FEATURE_MCS_VENDD1_FIR_CONTROL = 0xabb7347,
    ATTR_CHIP_EC_FEATURE_MCS_P8_DD2_FIR_CONTROL = 0x58393d2,
    ATTR_CHIP_EC_FEATURE_TRACE_CONTROL_ON_SCOM = 0x138c59c,
    ATTR_CHIP_EC_FEATURE_MPIPL_AISS_WINKLE_ENTRY = 0x3136bcb,
    ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_WE5_VER2 = 0x0e39485,
    ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER3 = 0x1d243ef,
    ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER2 = 0x007b199,
    ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_RR = 0x37acf31,
    ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_LFSR_ON_STARVATION_ELSE_RR = 0x7113edb,
    ATTR_CHIP_EC_FEATURE_FBC_UX_LOCAL_ARB_RR = 0xa36f008,
    ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C10_VER2 = 0x28aa220,
    ATTR_CHIP_EC_FEATURE_MCD_HANG_RECOVERY_BUG = 0x4fc54fa,
    ATTR_CHIP_EC_FEATURE_PCBS_ERR_RESET = 0xf4b51ec,
    ATTR_IO_TRAINING_SLS_WORKAROUND = 0xb36896a,
    ATTR_IO_TRAINING_DLL_WORKAROUND = 0x831feab,
    ATTR_DCCAL_PLL_WORKAROUND = 0x644b68b,
    ATTR_CHIP_EC_FEATURE_XBUS_RESONANT_CLK_VALID = 0x6d6ad8f,
    ATTR_CHIP_EC_FEATURE_RESONANT_CLK_VALID = 0x2851aa5,
    ATTR_CHIP_EC_FEATURE_AISS_SPECIAL_WAKEUP = 0xa43b7af,
    ATTR_CHIP_EC_FEATURE_OCC_CE_FIR_DISABLE = 0x6a24f74,
    ATTR_CHIP_EC_FEATURE_ENABLE_IVE_PERFORMANCE_ORDERING = 0x280f292,
    ATTR_CHIP_EC_FEATURE_ENABLE_PCI_DMAR_OOO = 0xd3f353e,
    ATTR_CHIP_EC_FEATURE_ZCAL_OVERRIDE = 0x17f27af,
    ATTR_CHIP_EC_FEATURE_IVRM_WINKLE_BUG = 0xedb6964,
    ATTR_PROC_EC_MSS_RECONFIG_POSSIBLE = 0xe6a8fbc,
    ATTR_CEN_EC_THROTTLE_SYNC_POSSIBLE = 0xf528d13,
    ATTR_PROC_EC_CORE_HANG_PULSE_BUG = 0x9f2f682,
    ATTR_PROC_EC_PBA_PREFETCH_ENABLE = 0xd836f46,
    ATTR_PROC_EC_OHA_L3_PURGE_ABORT_ENABLE = 0x9a1d182,
    ATTR_CHIP_EC_PFET_POWEROFF_BUG = 0x88523de,
    ATTR_CHIP_EC_FEATURE_OCC_DISABLE = 0x2d82afe,
    ATTR_CHIP_EC_FEATURE_HW_BUG_PBASLVRESET = 0xc525231,
    ATTR_CHIP_EC_FEATURE_HCA_BAR_SCOM_BUG = 0x7f49515,
    ATTR_CHIP_EC_FEATURE_HW_BUG_TOD_ERROR_MASK_NOT_WRITABLE = 0xa76f828,
    ATTR_MNFG_DMI_MIN_EYE_WIDTH = 0x3a4e80e,
    ATTR_MNFG_DMI_MIN_EYE_HEIGHT = 0x9fb7790,
    ATTR_MNFG_ABUS_MIN_EYE_WIDTH = 0xf560265,
    ATTR_MNFG_ABUS_MIN_EYE_HEIGHT = 0x1de4aa4,
    ATTR_MNFG_XBUS_MIN_EYE_WIDTH = 0x19c7850,
    ATTR_MSS_DATABUS_UTIL_PER_MBA = 0x4c1579b,
    ATTR_MSS_UTIL_N_PER_MBA = 0x883346a,
    ATTR_OVERRIDE_MVPD_NOM_FREQ_MHZ = 0x7df251d,
    ATTR_OVERRIDE_MVPD_V_NEST_NOM_VOLTAGE = 0xfb1769f,
    ATTR_OVERRIDE_MVPD_I_NEST_NOM_CURRENT = 0x2ef5495,
    ATTR_OVERRIDE_MVPD_V_CS_NOM_VOLTAGE = 0x63cc0de,
    ATTR_OVERRIDE_MVPD_I_CS_NOM_CURRENT = 0xa5b9edc,
    ATTR_OVERRIDE_MVPD_PS_FREQ_MHZ = 0xfae1a2e,
    ATTR_OVERRIDE_MVPD_V_NEST_PS_VOLTAGE = 0x3b46ba9,
    ATTR_OVERRIDE_MVPD_I_NEST_PS_CURRENT = 0x4c51922,
    ATTR_OVERRIDE_MVPD_V_CS_PS_VOLTAGE = 0xbcdf40c,
    ATTR_OVERRIDE_MVPD_I_CS_PS_CURRENT = 0x573682d,
    ATTR_OVERRIDE_MVPD_TURBO_FREQ_MHZ = 0x1f5a0a2,
    ATTR_OVERRIDE_MVPD_V_NEST_TURBO_VOLTAGE = 0x146f985,
    ATTR_OVERRIDE_MVPD_I_NEST_TURBO_CURRENT = 0x7497d40,
    ATTR_OVERRIDE_MVPD_V_CS_TURBO_VOLTAGE = 0x29151e2,
    ATTR_OVERRIDE_MVPD_I_CS_TURBO_CURRENT = 0xbbd2a6f,
    ATTR_OVERRIDE_MVPD_FVMIN_FREQ_MHZ = 0xee63140,
    ATTR_OVERRIDE_MVPD_V_NEST_FVMIN_VOLTAGE = 0x5860b85,
    ATTR_OVERRIDE_MVPD_I_NEST_FVMIN_CURRENT = 0xfe7411b,
    ATTR_OVERRIDE_MVPD_V_CS_FVMIN_VOLTAGE = 0xfe1b974,
    ATTR_OVERRIDE_MVPD_I_CS_FVMIN_CURRENT = 0x479b93f,
    ATTR_OVERRIDE_MVPD_LAB_FREQ_MHZ = 0x8a53ba8,
    ATTR_OVERRIDE_MVPD_V_NEST_LAB_VOLTAGE = 0x1811804,
    ATTR_OVERRIDE_MVPD_I_NEST_LAB_CURRENT = 0xa8cb474,
    ATTR_OVERRIDE_MVPD_V_CS_LAB_VOLTAGE = 0x1ec1aca,
    ATTR_OVERRIDE_MVPD_I_CS_LAB_CURRENT = 0x213c598,
    ATTR_PROC_PERV_VITL_LENGTH = 0x6f9410c,
    ATTR_PROC_TP_VITL_SPY_LENGTH = 0x071520d,
    ATTR_PROC_TP_VITL_SPY_OFFSETS = 0x9a4e381,
};

/**
 * @brief Attribute Information
 */
/* ATTR_MSS_VOLT */
typedef uint32_t ATTR_MSS_VOLT_Type;
const bool ATTR_MSS_VOLT_Privileged = false;
const TargetTypes_t ATTR_MSS_VOLT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VOLT_PlatInit = false;

/* ATTR_MSS_VOLT_VPP */
typedef uint32_t ATTR_MSS_VOLT_VPP_Type;
const bool ATTR_MSS_VOLT_VPP_Privileged = false;
const TargetTypes_t ATTR_MSS_VOLT_VPP_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VOLT_VPP_PlatInit = false;

/* ATTR_MSS_FREQ_OVERRIDE */
typedef uint32_t ATTR_MSS_FREQ_OVERRIDE_Type;
const bool ATTR_MSS_FREQ_OVERRIDE_Privileged = false;
const TargetTypes_t ATTR_MSS_FREQ_OVERRIDE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_FREQ_OVERRIDE_PlatInit = true;
enum ATTR_MSS_FREQ_OVERRIDE_Enum
{
    ENUM_ATTR_MSS_FREQ_OVERRIDE_AUTO = 0,
};

/* ATTR_MSS_FREQ */
typedef uint32_t ATTR_MSS_FREQ_Type;
const bool ATTR_MSS_FREQ_Privileged = false;
const TargetTypes_t ATTR_MSS_FREQ_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_FREQ_PlatInit = false;

/* ATTR_MSS_FREQ_BIAS_PERCENTAGE */
typedef uint32_t ATTR_MSS_FREQ_BIAS_PERCENTAGE_Type;
const bool ATTR_MSS_FREQ_BIAS_PERCENTAGE_Privileged = false;
const TargetTypes_t ATTR_MSS_FREQ_BIAS_PERCENTAGE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_FREQ_BIAS_PERCENTAGE_PlatInit = true;

/* ATTR_MSS_VREF_CAL_CNTL */
typedef uint8_t ATTR_MSS_VREF_CAL_CNTL_Type;
const bool ATTR_MSS_VREF_CAL_CNTL_Privileged = false;
const TargetTypes_t ATTR_MSS_VREF_CAL_CNTL_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VREF_CAL_CNTL_PlatInit = true;

/* ATTR_MSS_DIMM_MFG_ID_CODE */
typedef uint32_t ATTR_MSS_DIMM_MFG_ID_CODE_Type[2][2];
const bool ATTR_MSS_DIMM_MFG_ID_CODE_Privileged = false;
const TargetTypes_t ATTR_MSS_DIMM_MFG_ID_CODE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_DIMM_MFG_ID_CODE_PlatInit = false;

/* ATTR_EFF_DIMM_RANKS_CONFIGED */
typedef uint8_t ATTR_EFF_DIMM_RANKS_CONFIGED_Type[2][2];
const bool ATTR_EFF_DIMM_RANKS_CONFIGED_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_RANKS_CONFIGED_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_RANKS_CONFIGED_PlatInit = false;

/* ATTR_EFF_NUM_RANKS_PER_DIMM */
typedef uint8_t ATTR_EFF_NUM_RANKS_PER_DIMM_Type[2][2];
const bool ATTR_EFF_NUM_RANKS_PER_DIMM_Privileged = false;
const TargetTypes_t ATTR_EFF_NUM_RANKS_PER_DIMM_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_NUM_RANKS_PER_DIMM_PlatInit = false;

/* ATTR_EFF_DIMM_TYPE */
typedef uint8_t ATTR_EFF_DIMM_TYPE_Type;
const bool ATTR_EFF_DIMM_TYPE_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_TYPE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_TYPE_PlatInit = false;
enum ATTR_EFF_DIMM_TYPE_Enum
{
    ENUM_ATTR_EFF_DIMM_TYPE_CDIMM = 0,
    ENUM_ATTR_EFF_DIMM_TYPE_RDIMM = 1,
    ENUM_ATTR_EFF_DIMM_TYPE_UDIMM = 2,
    ENUM_ATTR_EFF_DIMM_TYPE_LRDIMM = 3,
};

/* ATTR_EFF_CUSTOM_DIMM */
typedef uint8_t ATTR_EFF_CUSTOM_DIMM_Type;
const bool ATTR_EFF_CUSTOM_DIMM_Privileged = false;
const TargetTypes_t ATTR_EFF_CUSTOM_DIMM_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CUSTOM_DIMM_PlatInit = false;
enum ATTR_EFF_CUSTOM_DIMM_Enum
{
    ENUM_ATTR_EFF_CUSTOM_DIMM_NO = 0,
    ENUM_ATTR_EFF_CUSTOM_DIMM_YES = 1,
};

/* ATTR_EFF_DRAM_WIDTH */
typedef uint8_t ATTR_EFF_DRAM_WIDTH_Type;
const bool ATTR_EFF_DRAM_WIDTH_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_WIDTH_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_WIDTH_PlatInit = false;
enum ATTR_EFF_DRAM_WIDTH_Enum
{
    ENUM_ATTR_EFF_DRAM_WIDTH_X4 = 4,
    ENUM_ATTR_EFF_DRAM_WIDTH_X8 = 8,
    ENUM_ATTR_EFF_DRAM_WIDTH_X16 = 16,
    ENUM_ATTR_EFF_DRAM_WIDTH_X32 = 32,
};

/* ATTR_EFF_DRAM_GEN */
typedef uint8_t ATTR_EFF_DRAM_GEN_Type;
const bool ATTR_EFF_DRAM_GEN_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_GEN_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_GEN_PlatInit = false;
enum ATTR_EFF_DRAM_GEN_Enum
{
    ENUM_ATTR_EFF_DRAM_GEN_EMPTY = 0,
    ENUM_ATTR_EFF_DRAM_GEN_DDR3 = 1,
    ENUM_ATTR_EFF_DRAM_GEN_DDR4 = 2,
};

/* ATTR_EFF_PRIMARY_RANK_GROUP0 */
typedef uint8_t ATTR_EFF_PRIMARY_RANK_GROUP0_Type[2];
const bool ATTR_EFF_PRIMARY_RANK_GROUP0_Privileged = false;
const TargetTypes_t ATTR_EFF_PRIMARY_RANK_GROUP0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_PRIMARY_RANK_GROUP0_PlatInit = false;
enum ATTR_EFF_PRIMARY_RANK_GROUP0_Enum
{
    ENUM_ATTR_EFF_PRIMARY_RANK_GROUP0_INVALID = 255,
};

/* ATTR_EFF_PRIMARY_RANK_GROUP1 */
typedef uint8_t ATTR_EFF_PRIMARY_RANK_GROUP1_Type[2];
const bool ATTR_EFF_PRIMARY_RANK_GROUP1_Privileged = false;
const TargetTypes_t ATTR_EFF_PRIMARY_RANK_GROUP1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_PRIMARY_RANK_GROUP1_PlatInit = false;
enum ATTR_EFF_PRIMARY_RANK_GROUP1_Enum
{
    ENUM_ATTR_EFF_PRIMARY_RANK_GROUP1_INVALID = 255,
};

/* ATTR_EFF_PRIMARY_RANK_GROUP2 */
typedef uint8_t ATTR_EFF_PRIMARY_RANK_GROUP2_Type[2];
const bool ATTR_EFF_PRIMARY_RANK_GROUP2_Privileged = false;
const TargetTypes_t ATTR_EFF_PRIMARY_RANK_GROUP2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_PRIMARY_RANK_GROUP2_PlatInit = false;
enum ATTR_EFF_PRIMARY_RANK_GROUP2_Enum
{
    ENUM_ATTR_EFF_PRIMARY_RANK_GROUP2_INVALID = 255,
};

/* ATTR_EFF_PRIMARY_RANK_GROUP3 */
typedef uint8_t ATTR_EFF_PRIMARY_RANK_GROUP3_Type[2];
const bool ATTR_EFF_PRIMARY_RANK_GROUP3_Privileged = false;
const TargetTypes_t ATTR_EFF_PRIMARY_RANK_GROUP3_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_PRIMARY_RANK_GROUP3_PlatInit = false;
enum ATTR_EFF_PRIMARY_RANK_GROUP3_Enum
{
    ENUM_ATTR_EFF_PRIMARY_RANK_GROUP3_INVALID = 255,
};

/* ATTR_EFF_SECONDARY_RANK_GROUP0 */
typedef uint8_t ATTR_EFF_SECONDARY_RANK_GROUP0_Type[2];
const bool ATTR_EFF_SECONDARY_RANK_GROUP0_Privileged = false;
const TargetTypes_t ATTR_EFF_SECONDARY_RANK_GROUP0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SECONDARY_RANK_GROUP0_PlatInit = false;
enum ATTR_EFF_SECONDARY_RANK_GROUP0_Enum
{
    ENUM_ATTR_EFF_SECONDARY_RANK_GROUP0_INVALID = 255,
};

/* ATTR_EFF_SECONDARY_RANK_GROUP1 */
typedef uint8_t ATTR_EFF_SECONDARY_RANK_GROUP1_Type[2];
const bool ATTR_EFF_SECONDARY_RANK_GROUP1_Privileged = false;
const TargetTypes_t ATTR_EFF_SECONDARY_RANK_GROUP1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SECONDARY_RANK_GROUP1_PlatInit = false;
enum ATTR_EFF_SECONDARY_RANK_GROUP1_Enum
{
    ENUM_ATTR_EFF_SECONDARY_RANK_GROUP1_INVALID = 255,
};

/* ATTR_EFF_SECONDARY_RANK_GROUP2 */
typedef uint8_t ATTR_EFF_SECONDARY_RANK_GROUP2_Type[2];
const bool ATTR_EFF_SECONDARY_RANK_GROUP2_Privileged = false;
const TargetTypes_t ATTR_EFF_SECONDARY_RANK_GROUP2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SECONDARY_RANK_GROUP2_PlatInit = false;
enum ATTR_EFF_SECONDARY_RANK_GROUP2_Enum
{
    ENUM_ATTR_EFF_SECONDARY_RANK_GROUP2_INVALID = 255,
};

/* ATTR_EFF_SECONDARY_RANK_GROUP3 */
typedef uint8_t ATTR_EFF_SECONDARY_RANK_GROUP3_Type[2];
const bool ATTR_EFF_SECONDARY_RANK_GROUP3_Privileged = false;
const TargetTypes_t ATTR_EFF_SECONDARY_RANK_GROUP3_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SECONDARY_RANK_GROUP3_PlatInit = false;
enum ATTR_EFF_SECONDARY_RANK_GROUP3_Enum
{
    ENUM_ATTR_EFF_SECONDARY_RANK_GROUP3_INVALID = 255,
};

/* ATTR_EFF_TERTIARY_RANK_GROUP0 */
typedef uint8_t ATTR_EFF_TERTIARY_RANK_GROUP0_Type[2];
const bool ATTR_EFF_TERTIARY_RANK_GROUP0_Privileged = false;
const TargetTypes_t ATTR_EFF_TERTIARY_RANK_GROUP0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_TERTIARY_RANK_GROUP0_PlatInit = false;
enum ATTR_EFF_TERTIARY_RANK_GROUP0_Enum
{
    ENUM_ATTR_EFF_TERTIARY_RANK_GROUP0_INVALID = 255,
};

/* ATTR_EFF_TERTIARY_RANK_GROUP1 */
typedef uint8_t ATTR_EFF_TERTIARY_RANK_GROUP1_Type[2];
const bool ATTR_EFF_TERTIARY_RANK_GROUP1_Privileged = false;
const TargetTypes_t ATTR_EFF_TERTIARY_RANK_GROUP1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_TERTIARY_RANK_GROUP1_PlatInit = false;
enum ATTR_EFF_TERTIARY_RANK_GROUP1_Enum
{
    ENUM_ATTR_EFF_TERTIARY_RANK_GROUP1_INVALID = 255,
};

/* ATTR_EFF_TERTIARY_RANK_GROUP2 */
typedef uint8_t ATTR_EFF_TERTIARY_RANK_GROUP2_Type[2];
const bool ATTR_EFF_TERTIARY_RANK_GROUP2_Privileged = false;
const TargetTypes_t ATTR_EFF_TERTIARY_RANK_GROUP2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_TERTIARY_RANK_GROUP2_PlatInit = false;
enum ATTR_EFF_TERTIARY_RANK_GROUP2_Enum
{
    ENUM_ATTR_EFF_TERTIARY_RANK_GROUP2_INVALID = 255,
};

/* ATTR_EFF_TERTIARY_RANK_GROUP3 */
typedef uint8_t ATTR_EFF_TERTIARY_RANK_GROUP3_Type[2];
const bool ATTR_EFF_TERTIARY_RANK_GROUP3_Privileged = false;
const TargetTypes_t ATTR_EFF_TERTIARY_RANK_GROUP3_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_TERTIARY_RANK_GROUP3_PlatInit = false;
enum ATTR_EFF_TERTIARY_RANK_GROUP3_Enum
{
    ENUM_ATTR_EFF_TERTIARY_RANK_GROUP3_INVALID = 255,
};

/* ATTR_EFF_QUATERNARY_RANK_GROUP0 */
typedef uint8_t ATTR_EFF_QUATERNARY_RANK_GROUP0_Type[2];
const bool ATTR_EFF_QUATERNARY_RANK_GROUP0_Privileged = false;
const TargetTypes_t ATTR_EFF_QUATERNARY_RANK_GROUP0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_QUATERNARY_RANK_GROUP0_PlatInit = false;
enum ATTR_EFF_QUATERNARY_RANK_GROUP0_Enum
{
    ENUM_ATTR_EFF_QUATERNARY_RANK_GROUP0_INVALID = 255,
};

/* ATTR_EFF_QUATERNARY_RANK_GROUP1 */
typedef uint8_t ATTR_EFF_QUATERNARY_RANK_GROUP1_Type[2];
const bool ATTR_EFF_QUATERNARY_RANK_GROUP1_Privileged = false;
const TargetTypes_t ATTR_EFF_QUATERNARY_RANK_GROUP1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_QUATERNARY_RANK_GROUP1_PlatInit = false;
enum ATTR_EFF_QUATERNARY_RANK_GROUP1_Enum
{
    ENUM_ATTR_EFF_QUATERNARY_RANK_GROUP1_INVALID = 255,
};

/* ATTR_EFF_QUATERNARY_RANK_GROUP2 */
typedef uint8_t ATTR_EFF_QUATERNARY_RANK_GROUP2_Type[2];
const bool ATTR_EFF_QUATERNARY_RANK_GROUP2_Privileged = false;
const TargetTypes_t ATTR_EFF_QUATERNARY_RANK_GROUP2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_QUATERNARY_RANK_GROUP2_PlatInit = false;
enum ATTR_EFF_QUATERNARY_RANK_GROUP2_Enum
{
    ENUM_ATTR_EFF_QUATERNARY_RANK_GROUP2_INVALID = 255,
};

/* ATTR_EFF_QUATERNARY_RANK_GROUP3 */
typedef uint8_t ATTR_EFF_QUATERNARY_RANK_GROUP3_Type[2];
const bool ATTR_EFF_QUATERNARY_RANK_GROUP3_Privileged = false;
const TargetTypes_t ATTR_EFF_QUATERNARY_RANK_GROUP3_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_QUATERNARY_RANK_GROUP3_PlatInit = false;
enum ATTR_EFF_QUATERNARY_RANK_GROUP3_Enum
{
    ENUM_ATTR_EFF_QUATERNARY_RANK_GROUP3_INVALID = 255,
};

/* ATTR_EFF_DIMM_SPARE */
typedef uint8_t ATTR_EFF_DIMM_SPARE_Type[2][2][4];
const bool ATTR_EFF_DIMM_SPARE_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_SPARE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_SPARE_PlatInit = false;
enum ATTR_EFF_DIMM_SPARE_Enum
{
    ENUM_ATTR_EFF_DIMM_SPARE_NO_SPARE = 0,
    ENUM_ATTR_EFF_DIMM_SPARE_LOW_NIBBLE = 1,
    ENUM_ATTR_EFF_DIMM_SPARE_HIGH_NIBBLE = 2,
    ENUM_ATTR_EFF_DIMM_SPARE_FULL_BYTE = 3,
};

/* ATTR_EFF_DRAM_WR_VREF */
typedef uint32_t ATTR_EFF_DRAM_WR_VREF_Type[2];
const bool ATTR_EFF_DRAM_WR_VREF_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_WR_VREF_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_WR_VREF_PlatInit = true;
enum ATTR_EFF_DRAM_WR_VREF_Enum
{
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD420 = 420,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD425 = 425,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD430 = 430,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD435 = 435,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD440 = 440,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD445 = 445,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD450 = 450,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD455 = 455,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD460 = 460,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD465 = 465,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD470 = 470,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD475 = 475,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD480 = 480,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD485 = 485,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD490 = 490,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD495 = 495,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD500 = 500,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD505 = 505,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD510 = 510,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD515 = 515,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD520 = 520,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD525 = 525,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD530 = 530,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD535 = 535,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD540 = 540,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD545 = 545,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD550 = 550,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD555 = 555,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD560 = 560,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD565 = 565,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD570 = 570,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD575 = 575,
};

/* ATTR_EFF_DRAM_WR_VREF_SCHMOO */
typedef uint32_t ATTR_EFF_DRAM_WR_VREF_SCHMOO_Type[2];
const bool ATTR_EFF_DRAM_WR_VREF_SCHMOO_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_WR_VREF_SCHMOO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_WR_VREF_SCHMOO_PlatInit = false;

/* ATTR_EFF_DRAM_WRDDR4_VREF_SCHMOO */
typedef uint32_t ATTR_EFF_DRAM_WRDDR4_VREF_SCHMOO_Type[2];
const bool ATTR_EFF_DRAM_WRDDR4_VREF_SCHMOO_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_WRDDR4_VREF_SCHMOO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_WRDDR4_VREF_SCHMOO_PlatInit = false;

/* ATTR_EFF_CEN_DRV_IMP_DQ_DQS */
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_DQ_DQS_Type[2];
const bool ATTR_EFF_CEN_DRV_IMP_DQ_DQS_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_DRV_IMP_DQ_DQS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_DRV_IMP_DQ_DQS_PlatInit = true;
enum ATTR_EFF_CEN_DRV_IMP_DQ_DQS_Enum
{
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM24_FFE0 = 0x0A,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM30_FFE0 = 0x08,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM30_FFE480 = 0x48,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM30_FFE240 = 0x38,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM30_FFE160 = 0x28,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM30_FFE120 = 0x18,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM34_FFE0 = 0x07,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM34_FFE480 = 0x47,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM34_FFE240 = 0x37,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM34_FFE160 = 0x27,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM34_FFE120 = 0x17,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM40_FFE0 = 0x06,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM40_FFE480 = 0x46,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM40_FFE240 = 0x36,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM40_FFE160 = 0x26,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM40_FFE120 = 0x16,
};

/* ATTR_EFF_CEN_DRV_IMP_DQ_DQS_SCHMOO */
typedef uint32_t ATTR_EFF_CEN_DRV_IMP_DQ_DQS_SCHMOO_Type[2];
const bool ATTR_EFF_CEN_DRV_IMP_DQ_DQS_SCHMOO_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_DRV_IMP_DQ_DQS_SCHMOO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_DRV_IMP_DQ_DQS_SCHMOO_PlatInit = false;

/* ATTR_EFF_CEN_DRV_IMP_CLK_SCHMOO */
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_CLK_SCHMOO_Type[2];
const bool ATTR_EFF_CEN_DRV_IMP_CLK_SCHMOO_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_DRV_IMP_CLK_SCHMOO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_DRV_IMP_CLK_SCHMOO_PlatInit = false;

/* ATTR_EFF_CEN_DRV_IMP_SPCKE_SCHMOO */
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_SPCKE_SCHMOO_Type[2];
const bool ATTR_EFF_CEN_DRV_IMP_SPCKE_SCHMOO_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_DRV_IMP_SPCKE_SCHMOO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_DRV_IMP_SPCKE_SCHMOO_PlatInit = false;

/* ATTR_EFF_CEN_DRV_IMP_CNTL_SCHMOO */
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_CNTL_SCHMOO_Type[2];
const bool ATTR_EFF_CEN_DRV_IMP_CNTL_SCHMOO_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_DRV_IMP_CNTL_SCHMOO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_DRV_IMP_CNTL_SCHMOO_PlatInit = false;

/* ATTR_EFF_CEN_RCV_IMP_DQ_DQS */
typedef uint8_t ATTR_EFF_CEN_RCV_IMP_DQ_DQS_Type[2];
const bool ATTR_EFF_CEN_RCV_IMP_DQ_DQS_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_RCV_IMP_DQ_DQS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_RCV_IMP_DQ_DQS_PlatInit = true;
enum ATTR_EFF_CEN_RCV_IMP_DQ_DQS_Enum
{
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM15 = 15,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM20 = 20,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM30 = 30,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM40 = 40,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM48 = 48,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM60 = 60,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM80 = 80,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM120 = 120,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM160 = 160,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM240 = 240,
};

/* ATTR_EFF_CEN_RCV_IMP_DQ_DQS_SCHMOO */
typedef uint32_t ATTR_EFF_CEN_RCV_IMP_DQ_DQS_SCHMOO_Type[2];
const bool ATTR_EFF_CEN_RCV_IMP_DQ_DQS_SCHMOO_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_RCV_IMP_DQ_DQS_SCHMOO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_RCV_IMP_DQ_DQS_SCHMOO_PlatInit = false;

/* ATTR_EFF_CEN_SLEW_RATE_DQ_DQS */
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_Type[2];
const bool ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_PlatInit = true;
enum ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_Enum
{
    ENUM_ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SLEW_3V_NS = 3,
    ENUM_ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SLEW_4V_NS = 4,
    ENUM_ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SLEW_5V_NS = 5,
    ENUM_ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SLEW_6V_NS = 6,
    ENUM_ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SLEW_MAXV_NS = 7,
};

/* ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SCHMOO */
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SCHMOO_Type[2];
const bool ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SCHMOO_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SCHMOO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_SCHMOO_PlatInit = false;

/* ATTR_EFF_CEN_SLEW_RATE_CLK_SCHMOO */
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_CLK_SCHMOO_Type[2];
const bool ATTR_EFF_CEN_SLEW_RATE_CLK_SCHMOO_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_SLEW_RATE_CLK_SCHMOO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_SLEW_RATE_CLK_SCHMOO_PlatInit = false;

/* ATTR_EFF_CEN_SLEW_RATE_SPCKE_SCHMOO */
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_SPCKE_SCHMOO_Type[2];
const bool ATTR_EFF_CEN_SLEW_RATE_SPCKE_SCHMOO_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_SLEW_RATE_SPCKE_SCHMOO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_SLEW_RATE_SPCKE_SCHMOO_PlatInit = false;

/* ATTR_EFF_CEN_SLEW_RATE_ADDR_SCHMOO */
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_ADDR_SCHMOO_Type[2];
const bool ATTR_EFF_CEN_SLEW_RATE_ADDR_SCHMOO_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_SLEW_RATE_ADDR_SCHMOO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_SLEW_RATE_ADDR_SCHMOO_PlatInit = false;

/* ATTR_EFF_CEN_SLEW_RATE_CNTL_SCHMOO */
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_CNTL_SCHMOO_Type[2];
const bool ATTR_EFF_CEN_SLEW_RATE_CNTL_SCHMOO_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_SLEW_RATE_CNTL_SCHMOO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_SLEW_RATE_CNTL_SCHMOO_PlatInit = false;

/* ATTR_EFF_CEN_RD_VREF */
typedef uint32_t ATTR_EFF_CEN_RD_VREF_Type[2];
const bool ATTR_EFF_CEN_RD_VREF_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_RD_VREF_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_RD_VREF_PlatInit = true;
enum ATTR_EFF_CEN_RD_VREF_Enum
{
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD40375 = 40375,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD41750 = 41750,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD43125 = 43125,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD44500 = 44500,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD45875 = 45875,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD47250 = 47250,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD48625 = 48625,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD50000 = 50000,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD51375 = 51375,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD52750 = 52750,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD54125 = 54125,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD55500 = 55500,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD56875 = 56875,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD58250 = 58250,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD59625 = 59625,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD61000 = 61000,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD60375 = 60375,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD61750 = 61750,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD63125 = 63125,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD64500 = 64500,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD65875 = 65875,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD67250 = 67250,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD68625 = 68625,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD70000 = 70000,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD71375 = 71375,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD72750 = 72750,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD74125 = 74125,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD75500 = 75500,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD76875 = 76875,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD78250 = 78250,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD79625 = 79625,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD81000 = 81000,
};

/* ATTR_EFF_CEN_RD_VREF_SCHMOO */
typedef uint32_t ATTR_EFF_CEN_RD_VREF_SCHMOO_Type[2];
const bool ATTR_EFF_CEN_RD_VREF_SCHMOO_Privileged = false;
const TargetTypes_t ATTR_EFF_CEN_RD_VREF_SCHMOO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CEN_RD_VREF_SCHMOO_PlatInit = false;

/* ATTR_EFF_DIMM_SIZE */
typedef uint8_t ATTR_EFF_DIMM_SIZE_Type[2][2];
const bool ATTR_EFF_DIMM_SIZE_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_SIZE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_SIZE_PlatInit = false;

/* ATTR_EFF_DRAM_BANKS */
typedef uint8_t ATTR_EFF_DRAM_BANKS_Type;
const bool ATTR_EFF_DRAM_BANKS_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_BANKS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_BANKS_PlatInit = false;

/* ATTR_EFF_DRAM_ROWS */
typedef uint8_t ATTR_EFF_DRAM_ROWS_Type;
const bool ATTR_EFF_DRAM_ROWS_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_ROWS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_ROWS_PlatInit = false;

/* ATTR_EFF_DRAM_COLS */
typedef uint8_t ATTR_EFF_DRAM_COLS_Type;
const bool ATTR_EFF_DRAM_COLS_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_COLS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_COLS_PlatInit = false;

/* ATTR_EFF_DRAM_DENSITY */
typedef uint8_t ATTR_EFF_DRAM_DENSITY_Type;
const bool ATTR_EFF_DRAM_DENSITY_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_DENSITY_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_DENSITY_PlatInit = false;

/* ATTR_EFF_DRAM_TRCD */
typedef uint8_t ATTR_EFF_DRAM_TRCD_Type;
const bool ATTR_EFF_DRAM_TRCD_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_TRCD_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_TRCD_PlatInit = false;

/* ATTR_EFF_DRAM_TRRD */
typedef uint8_t ATTR_EFF_DRAM_TRRD_Type;
const bool ATTR_EFF_DRAM_TRRD_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_TRRD_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_TRRD_PlatInit = false;

/* ATTR_EFF_DRAM_TRP */
typedef uint8_t ATTR_EFF_DRAM_TRP_Type;
const bool ATTR_EFF_DRAM_TRP_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_TRP_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_TRP_PlatInit = false;

/* ATTR_EFF_DRAM_TRAS */
typedef uint8_t ATTR_EFF_DRAM_TRAS_Type;
const bool ATTR_EFF_DRAM_TRAS_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_TRAS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_TRAS_PlatInit = false;

/* ATTR_EFF_DRAM_TRC */
typedef uint8_t ATTR_EFF_DRAM_TRC_Type;
const bool ATTR_EFF_DRAM_TRC_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_TRC_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_TRC_PlatInit = false;

/* ATTR_EFF_DRAM_TRFI */
typedef uint32_t ATTR_EFF_DRAM_TRFI_Type;
const bool ATTR_EFF_DRAM_TRFI_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_TRFI_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_TRFI_PlatInit = false;

/* ATTR_EFF_DRAM_TRFC */
typedef uint32_t ATTR_EFF_DRAM_TRFC_Type;
const bool ATTR_EFF_DRAM_TRFC_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_TRFC_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_TRFC_PlatInit = false;

/* ATTR_EFF_DRAM_TWTR */
typedef uint8_t ATTR_EFF_DRAM_TWTR_Type;
const bool ATTR_EFF_DRAM_TWTR_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_TWTR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_TWTR_PlatInit = false;

/* ATTR_EFF_DRAM_TRTP */
typedef uint8_t ATTR_EFF_DRAM_TRTP_Type;
const bool ATTR_EFF_DRAM_TRTP_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_TRTP_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_TRTP_PlatInit = false;

/* ATTR_EFF_DRAM_TFAW */
typedef uint8_t ATTR_EFF_DRAM_TFAW_Type;
const bool ATTR_EFF_DRAM_TFAW_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_TFAW_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_TFAW_PlatInit = false;

/* ATTR_EFF_DRAM_BL */
typedef uint8_t ATTR_EFF_DRAM_BL_Type;
const bool ATTR_EFF_DRAM_BL_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_BL_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_BL_PlatInit = false;
enum ATTR_EFF_DRAM_BL_Enum
{
    ENUM_ATTR_EFF_DRAM_BL_BL8 = 0,
    ENUM_ATTR_EFF_DRAM_BL_OTF = 1,
    ENUM_ATTR_EFF_DRAM_BL_BC4 = 2,
};

/* ATTR_EFF_DRAM_CL */
typedef uint8_t ATTR_EFF_DRAM_CL_Type;
const bool ATTR_EFF_DRAM_CL_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_CL_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_CL_PlatInit = false;

/* ATTR_EFF_DRAM_AL */
typedef uint8_t ATTR_EFF_DRAM_AL_Type;
const bool ATTR_EFF_DRAM_AL_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_AL_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_AL_PlatInit = false;
enum ATTR_EFF_DRAM_AL_Enum
{
    ENUM_ATTR_EFF_DRAM_AL_DISABLE = 0,
    ENUM_ATTR_EFF_DRAM_AL_CL_MINUS_1 = 1,
    ENUM_ATTR_EFF_DRAM_AL_CL_MINUS_2 = 2,
};

/* ATTR_EFF_DRAM_CWL */
typedef uint8_t ATTR_EFF_DRAM_CWL_Type;
const bool ATTR_EFF_DRAM_CWL_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_CWL_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_CWL_PlatInit = false;

/* ATTR_EFF_DRAM_RBT */
typedef uint8_t ATTR_EFF_DRAM_RBT_Type;
const bool ATTR_EFF_DRAM_RBT_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_RBT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_RBT_PlatInit = false;
enum ATTR_EFF_DRAM_RBT_Enum
{
    ENUM_ATTR_EFF_DRAM_RBT_SEQUENTIAL = 0,
    ENUM_ATTR_EFF_DRAM_RBT_INTERLEAVE = 1,
};

/* ATTR_EFF_DRAM_TM */
typedef uint8_t ATTR_EFF_DRAM_TM_Type;
const bool ATTR_EFF_DRAM_TM_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_TM_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_TM_PlatInit = false;
enum ATTR_EFF_DRAM_TM_Enum
{
    ENUM_ATTR_EFF_DRAM_TM_NORMAL= 0,
    ENUM_ATTR_EFF_DRAM_TM_TEST = 1,
};

/* ATTR_EFF_DRAM_DLL_RESET */
typedef uint8_t ATTR_EFF_DRAM_DLL_RESET_Type;
const bool ATTR_EFF_DRAM_DLL_RESET_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_DLL_RESET_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_DLL_RESET_PlatInit = false;
enum ATTR_EFF_DRAM_DLL_RESET_Enum
{
    ENUM_ATTR_EFF_DRAM_DLL_RESET_NO = 0,
    ENUM_ATTR_EFF_DRAM_DLL_RESET_YES = 1,
};

/* ATTR_EFF_DRAM_WR */
typedef uint8_t ATTR_EFF_DRAM_WR_Type;
const bool ATTR_EFF_DRAM_WR_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_WR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_WR_PlatInit = false;

/* ATTR_EFF_DRAM_DLL_PPD */
typedef uint8_t ATTR_EFF_DRAM_DLL_PPD_Type;
const bool ATTR_EFF_DRAM_DLL_PPD_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_DLL_PPD_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_DLL_PPD_PlatInit = false;
enum ATTR_EFF_DRAM_DLL_PPD_Enum
{
    ENUM_ATTR_EFF_DRAM_DLL_PPD_SLOWEXIT = 0,
    ENUM_ATTR_EFF_DRAM_DLL_PPD_FASTEXIT = 1,
};

/* ATTR_EFF_DRAM_DLL_ENABLE */
typedef uint8_t ATTR_EFF_DRAM_DLL_ENABLE_Type;
const bool ATTR_EFF_DRAM_DLL_ENABLE_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_DLL_ENABLE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_DLL_ENABLE_PlatInit = false;
enum ATTR_EFF_DRAM_DLL_ENABLE_Enum
{
    ENUM_ATTR_EFF_DRAM_DLL_ENABLE_ENABLE = 0,
    ENUM_ATTR_EFF_DRAM_DLL_ENABLE_DISABLE = 1,
};

/* ATTR_EFF_DRAM_TDQS */
typedef uint8_t ATTR_EFF_DRAM_TDQS_Type;
const bool ATTR_EFF_DRAM_TDQS_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_TDQS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_TDQS_PlatInit = false;
enum ATTR_EFF_DRAM_TDQS_Enum
{
    ENUM_ATTR_EFF_DRAM_TDQS_DISABLE = 0,
    ENUM_ATTR_EFF_DRAM_TDQS_ENABLE = 1,
};

/* ATTR_EFF_DRAM_WR_LVL_ENABLE */
typedef uint8_t ATTR_EFF_DRAM_WR_LVL_ENABLE_Type;
const bool ATTR_EFF_DRAM_WR_LVL_ENABLE_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_WR_LVL_ENABLE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_WR_LVL_ENABLE_PlatInit = false;
enum ATTR_EFF_DRAM_WR_LVL_ENABLE_Enum
{
    ENUM_ATTR_EFF_DRAM_WR_LVL_ENABLE_DISABLE = 0,
    ENUM_ATTR_EFF_DRAM_WR_LVL_ENABLE_ENABLE = 1,
};

/* ATTR_EFF_DRAM_OUTPUT_BUFFER */
typedef uint8_t ATTR_EFF_DRAM_OUTPUT_BUFFER_Type;
const bool ATTR_EFF_DRAM_OUTPUT_BUFFER_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_OUTPUT_BUFFER_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_OUTPUT_BUFFER_PlatInit = false;
enum ATTR_EFF_DRAM_OUTPUT_BUFFER_Enum
{
    ENUM_ATTR_EFF_DRAM_OUTPUT_BUFFER_ENABLE = 0,
    ENUM_ATTR_EFF_DRAM_OUTPUT_BUFFER_DISABLE = 1,
};

/* ATTR_EFF_DRAM_PASR */
typedef uint8_t ATTR_EFF_DRAM_PASR_Type;
const bool ATTR_EFF_DRAM_PASR_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_PASR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_PASR_PlatInit = false;
enum ATTR_EFF_DRAM_PASR_Enum
{
    ENUM_ATTR_EFF_DRAM_PASR_FULL = 0,
    ENUM_ATTR_EFF_DRAM_PASR_FIRST_HALF = 1,
    ENUM_ATTR_EFF_DRAM_PASR_FIRST_QUARTER = 2,
    ENUM_ATTR_EFF_DRAM_PASR_FIRST_EIGHTH = 3,
    ENUM_ATTR_EFF_DRAM_PASR_LAST_THREE_FOURTH = 4,
    ENUM_ATTR_EFF_DRAM_PASR_LAST_HALF = 5,
    ENUM_ATTR_EFF_DRAM_PASR_LAST_QUARTER = 6,
    ENUM_ATTR_EFF_DRAM_PASR_LAST_EIGHTH = 7,
};

/* ATTR_EFF_DRAM_ASR */
typedef uint8_t ATTR_EFF_DRAM_ASR_Type;
const bool ATTR_EFF_DRAM_ASR_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_ASR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_ASR_PlatInit = false;
enum ATTR_EFF_DRAM_ASR_Enum
{
    ENUM_ATTR_EFF_DRAM_ASR_SRT = 0,
    ENUM_ATTR_EFF_DRAM_ASR_ASR = 1,
};

/* ATTR_EFF_DRAM_SRT */
typedef uint8_t ATTR_EFF_DRAM_SRT_Type;
const bool ATTR_EFF_DRAM_SRT_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_SRT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_SRT_PlatInit = false;
enum ATTR_EFF_DRAM_SRT_Enum
{
    ENUM_ATTR_EFF_DRAM_SRT_NORMAL = 0,
    ENUM_ATTR_EFF_DRAM_SRT_EXTEND = 1,
};

/* ATTR_EFF_MPR_LOC */
typedef uint8_t ATTR_EFF_MPR_LOC_Type;
const bool ATTR_EFF_MPR_LOC_Privileged = false;
const TargetTypes_t ATTR_EFF_MPR_LOC_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_MPR_LOC_PlatInit = false;

/* ATTR_EFF_MPR_MODE */
typedef uint8_t ATTR_EFF_MPR_MODE_Type;
const bool ATTR_EFF_MPR_MODE_Privileged = false;
const TargetTypes_t ATTR_EFF_MPR_MODE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_MPR_MODE_PlatInit = false;
enum ATTR_EFF_MPR_MODE_Enum
{
    ENUM_ATTR_EFF_MPR_MODE_DISABLE = 0,
    ENUM_ATTR_EFF_MPR_MODE_ENABLE = 1,
};

/* ATTR_EFF_DIMM_RCD_CNTL_WORD_0_15 */
typedef uint64_t ATTR_EFF_DIMM_RCD_CNTL_WORD_0_15_Type[2][2];
const bool ATTR_EFF_DIMM_RCD_CNTL_WORD_0_15_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_RCD_CNTL_WORD_0_15_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_RCD_CNTL_WORD_0_15_PlatInit = false;

/* ATTR_EFF_DIMM_RCD_CNTL_WORD_X */
typedef uint64_t ATTR_EFF_DIMM_RCD_CNTL_WORD_X_Type[2][2];
const bool ATTR_EFF_DIMM_RCD_CNTL_WORD_X_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_RCD_CNTL_WORD_X_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_RCD_CNTL_WORD_X_PlatInit = false;

/* ATTR_EFF_DIMM_DDR4_RC00 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC00_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC00_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC00_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC00_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC01 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC01_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC01_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC01_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC01_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC02 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC02_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC02_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC02_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC02_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC03 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC03_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC03_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC03_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC03_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC04 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC04_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC04_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC04_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC04_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC05 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC05_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC05_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC05_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC05_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC06_07 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC06_07_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC06_07_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC06_07_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC06_07_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC08 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC08_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC08_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC08_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC08_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC09 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC09_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC09_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC09_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC09_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC10 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC10_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC10_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC10_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC10_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC11 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC11_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC11_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC11_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC11_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC12 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC12_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC12_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC12_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC12_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC13 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC13_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC13_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC13_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC13_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC14 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC14_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC14_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC14_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC14_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC15 */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC15_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC15_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC15_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC15_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC_1x */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_1x_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC_1x_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC_1x_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC_1x_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC_2x */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_2x_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC_2x_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC_2x_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC_2x_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC_3x */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_3x_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC_3x_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC_3x_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC_3x_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC_4x */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_4x_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC_4x_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC_4x_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC_4x_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC_5x */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_5x_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC_5x_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC_5x_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC_5x_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC_6x */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_6x_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC_6x_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC_6x_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC_6x_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC_7x */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_7x_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC_7x_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC_7x_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC_7x_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC_8x */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_8x_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC_8x_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC_8x_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC_8x_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC_9x */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_9x_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC_9x_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC_9x_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC_9x_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC_Ax */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_Ax_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC_Ax_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC_Ax_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC_Ax_PlatInit = true;

/* ATTR_EFF_DIMM_DDR4_RC_Bx */
typedef uint8_t ATTR_EFF_DIMM_DDR4_RC_Bx_Type[2][2];
const bool ATTR_EFF_DIMM_DDR4_RC_Bx_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_DDR4_RC_Bx_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_DDR4_RC_Bx_PlatInit = true;

/* ATTR_EFF_DIMM_RCD_IBT */
typedef uint32_t ATTR_EFF_DIMM_RCD_IBT_Type[2][2];
const bool ATTR_EFF_DIMM_RCD_IBT_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_RCD_IBT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_RCD_IBT_PlatInit = false;
enum ATTR_EFF_DIMM_RCD_IBT_Enum
{
    ENUM_ATTR_EFF_DIMM_RCD_IBT_IBT_OFF = 0,
    ENUM_ATTR_EFF_DIMM_RCD_IBT_IBT_100 = 100,
    ENUM_ATTR_EFF_DIMM_RCD_IBT_IBT_150 = 150,
    ENUM_ATTR_EFF_DIMM_RCD_IBT_IBT_200 = 200,
    ENUM_ATTR_EFF_DIMM_RCD_IBT_IBT_300 = 300,
};

/* ATTR_EFF_DIMM_RCD_MIRROR_MODE */
typedef uint8_t ATTR_EFF_DIMM_RCD_MIRROR_MODE_Type[2][2];
const bool ATTR_EFF_DIMM_RCD_MIRROR_MODE_Privileged = false;
const TargetTypes_t ATTR_EFF_DIMM_RCD_MIRROR_MODE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DIMM_RCD_MIRROR_MODE_PlatInit = false;
enum ATTR_EFF_DIMM_RCD_MIRROR_MODE_Enum
{
    ENUM_ATTR_EFF_DIMM_RCD_MIRROR_MODE_IBT_BACK_OFF = 0,
    ENUM_ATTR_EFF_DIMM_RCD_MIRROR_MODE_IBT_BACK_ON = 1,
};

/* ATTR_EFF_SCHMOO_MODE */
typedef uint8_t ATTR_EFF_SCHMOO_MODE_Type;
const bool ATTR_EFF_SCHMOO_MODE_Privileged = false;
const TargetTypes_t ATTR_EFF_SCHMOO_MODE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SCHMOO_MODE_PlatInit = false;
enum ATTR_EFF_SCHMOO_MODE_Enum
{
    ENUM_ATTR_EFF_SCHMOO_MODE_FAST = 0,
    ENUM_ATTR_EFF_SCHMOO_MODE_ONE_SLOW = 1,
    ENUM_ATTR_EFF_SCHMOO_MODE_QUARTER_SLOW = 2,
    ENUM_ATTR_EFF_SCHMOO_MODE_HALF_SLOW = 3,
    ENUM_ATTR_EFF_SCHMOO_MODE_FULL_SLOW = 4,
    ENUM_ATTR_EFF_SCHMOO_MODE_ONE_CHAR = 5,
    ENUM_ATTR_EFF_SCHMOO_MODE_QUARTER_CHAR = 6,
    ENUM_ATTR_EFF_SCHMOO_MODE_HALF_CHAR = 7,
    ENUM_ATTR_EFF_SCHMOO_MODE_FULL_CHAR = 8,
};

/* ATTR_EFF_SCHMOO_ADDR_MODE */
typedef uint8_t ATTR_EFF_SCHMOO_ADDR_MODE_Type;
const bool ATTR_EFF_SCHMOO_ADDR_MODE_Privileged = false;
const TargetTypes_t ATTR_EFF_SCHMOO_ADDR_MODE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SCHMOO_ADDR_MODE_PlatInit = false;
enum ATTR_EFF_SCHMOO_ADDR_MODE_Enum
{
    ENUM_ATTR_EFF_SCHMOO_ADDR_MODE_FEW_ADDR= 0,
    ENUM_ATTR_EFF_SCHMOO_ADDR_MODE_QUARTER_ADDR = 1,
    ENUM_ATTR_EFF_SCHMOO_ADDR_MODE_HALF_ADDR = 2,
    ENUM_ATTR_EFF_SCHMOO_ADDR_MODE_FULL_ADDR = 3,
};

/* ATTR_EFF_SCHMOO_TEST_VALID */
typedef uint8_t ATTR_EFF_SCHMOO_TEST_VALID_Type;
const bool ATTR_EFF_SCHMOO_TEST_VALID_Privileged = false;
const TargetTypes_t ATTR_EFF_SCHMOO_TEST_VALID_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SCHMOO_TEST_VALID_PlatInit = false;
enum ATTR_EFF_SCHMOO_TEST_VALID_Enum
{
    ENUM_ATTR_EFF_SCHMOO_TEST_VALID_NONE = 0x00,
    ENUM_ATTR_EFF_SCHMOO_TEST_VALID_MCBIST = 0x01,
    ENUM_ATTR_EFF_SCHMOO_TEST_VALID_WR_EYE = 0x02,
    ENUM_ATTR_EFF_SCHMOO_TEST_VALID_RD_EYE = 0x04,
    ENUM_ATTR_EFF_SCHMOO_TEST_VALID_WR_DQS = 0x08,
    ENUM_ATTR_EFF_SCHMOO_TEST_VALID_RD_DQS = 0x10,
};

/* ATTR_EFF_SCHMOO_PARAM_VALID */
typedef uint8_t ATTR_EFF_SCHMOO_PARAM_VALID_Type;
const bool ATTR_EFF_SCHMOO_PARAM_VALID_Privileged = false;
const TargetTypes_t ATTR_EFF_SCHMOO_PARAM_VALID_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SCHMOO_PARAM_VALID_PlatInit = false;
enum ATTR_EFF_SCHMOO_PARAM_VALID_Enum
{
    ENUM_ATTR_EFF_SCHMOO_PARAM_VALID_PARAM_NONE = 0x00,
    ENUM_ATTR_EFF_SCHMOO_PARAM_VALID_DELAY_REG = 0x01,
    ENUM_ATTR_EFF_SCHMOO_PARAM_VALID_DRV_IMP = 0x02,
    ENUM_ATTR_EFF_SCHMOO_PARAM_VALID_SLEW_RATE = 0x04,
    ENUM_ATTR_EFF_SCHMOO_PARAM_VALID_WR_VREF = 0x08,
    ENUM_ATTR_EFF_SCHMOO_PARAM_VALID_RD_VREF = 0x10,
    ENUM_ATTR_EFF_SCHMOO_PARAM_VALID_RCV_IMP = 0x20,
};

/* ATTR_EFF_SCHMOO_WR_EYE_MIN_MARGIN */
typedef uint8_t ATTR_EFF_SCHMOO_WR_EYE_MIN_MARGIN_Type;
const bool ATTR_EFF_SCHMOO_WR_EYE_MIN_MARGIN_Privileged = false;
const TargetTypes_t ATTR_EFF_SCHMOO_WR_EYE_MIN_MARGIN_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SCHMOO_WR_EYE_MIN_MARGIN_PlatInit = false;

/* ATTR_EFF_SCHMOO_RD_EYE_MIN_MARGIN */
typedef uint8_t ATTR_EFF_SCHMOO_RD_EYE_MIN_MARGIN_Type;
const bool ATTR_EFF_SCHMOO_RD_EYE_MIN_MARGIN_Privileged = false;
const TargetTypes_t ATTR_EFF_SCHMOO_RD_EYE_MIN_MARGIN_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SCHMOO_RD_EYE_MIN_MARGIN_PlatInit = false;

/* ATTR_EFF_SCHMOO_DQS_CLK_MIN_MARGIN */
typedef uint8_t ATTR_EFF_SCHMOO_DQS_CLK_MIN_MARGIN_Type;
const bool ATTR_EFF_SCHMOO_DQS_CLK_MIN_MARGIN_Privileged = false;
const TargetTypes_t ATTR_EFF_SCHMOO_DQS_CLK_MIN_MARGIN_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SCHMOO_DQS_CLK_MIN_MARGIN_PlatInit = false;

/* ATTR_EFF_SCHMOO_RD_GATE_MIN_MARGIN */
typedef uint8_t ATTR_EFF_SCHMOO_RD_GATE_MIN_MARGIN_Type;
const bool ATTR_EFF_SCHMOO_RD_GATE_MIN_MARGIN_Privileged = false;
const TargetTypes_t ATTR_EFF_SCHMOO_RD_GATE_MIN_MARGIN_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SCHMOO_RD_GATE_MIN_MARGIN_PlatInit = false;

/* ATTR_EFF_SCHMOO_ADDR_CMD_MIN_MARGIN */
typedef uint8_t ATTR_EFF_SCHMOO_ADDR_CMD_MIN_MARGIN_Type;
const bool ATTR_EFF_SCHMOO_ADDR_CMD_MIN_MARGIN_Privileged = false;
const TargetTypes_t ATTR_EFF_SCHMOO_ADDR_CMD_MIN_MARGIN_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SCHMOO_ADDR_CMD_MIN_MARGIN_PlatInit = false;

/* ATTR_EFF_MEMCAL_INTERVAL */
typedef uint32_t ATTR_EFF_MEMCAL_INTERVAL_Type;
const bool ATTR_EFF_MEMCAL_INTERVAL_Privileged = false;
const TargetTypes_t ATTR_EFF_MEMCAL_INTERVAL_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_MEMCAL_INTERVAL_PlatInit = false;
enum ATTR_EFF_MEMCAL_INTERVAL_Enum
{
    ENUM_ATTR_EFF_MEMCAL_INTERVAL_DISABLE = 0,
};

/* ATTR_EFF_ZQCAL_INTERVAL */
typedef uint32_t ATTR_EFF_ZQCAL_INTERVAL_Type;
const bool ATTR_EFF_ZQCAL_INTERVAL_Privileged = false;
const TargetTypes_t ATTR_EFF_ZQCAL_INTERVAL_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_ZQCAL_INTERVAL_PlatInit = false;
enum ATTR_EFF_ZQCAL_INTERVAL_Enum
{
    ENUM_ATTR_EFF_ZQCAL_INTERVAL_DISABLE = 0,
};

/* ATTR_EFF_IBM_TYPE */
typedef uint8_t ATTR_EFF_IBM_TYPE_Type[2][2];
const bool ATTR_EFF_IBM_TYPE_Privileged = false;
const TargetTypes_t ATTR_EFF_IBM_TYPE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_IBM_TYPE_PlatInit = false;
enum ATTR_EFF_IBM_TYPE_Enum
{
    ENUM_ATTR_EFF_IBM_TYPE_UNDEFINED = 0,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_1A = 1,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_1B = 2,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_1C = 3,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_1D = 4,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_2A = 5,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_2B = 6,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_2C = 7,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_3A = 8,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_3B = 9,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_3C = 10,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_4A = 11,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_4B = 12,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_4C = 13,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_5A = 14,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_5B = 15,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_5C = 16,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_5D = 17,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_6A = 18,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_6B = 19,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_6C = 20,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_7A = 21,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_7B = 22,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_7C = 23,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_8A = 24,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_8B = 25,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_8C = 26,
};

/* ATTR_EFF_NUM_DROPS_PER_PORT */
typedef uint8_t ATTR_EFF_NUM_DROPS_PER_PORT_Type;
const bool ATTR_EFF_NUM_DROPS_PER_PORT_Privileged = false;
const TargetTypes_t ATTR_EFF_NUM_DROPS_PER_PORT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_NUM_DROPS_PER_PORT_PlatInit = false;
enum ATTR_EFF_NUM_DROPS_PER_PORT_Enum
{
    ENUM_ATTR_EFF_NUM_DROPS_PER_PORT_EMPTY = 0,
    ENUM_ATTR_EFF_NUM_DROPS_PER_PORT_SINGLE = 1,
    ENUM_ATTR_EFF_NUM_DROPS_PER_PORT_DUAL = 2,
};

/* ATTR_EFF_STACK_TYPE */
typedef uint8_t ATTR_EFF_STACK_TYPE_Type[2][2];
const bool ATTR_EFF_STACK_TYPE_Privileged = false;
const TargetTypes_t ATTR_EFF_STACK_TYPE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_STACK_TYPE_PlatInit = false;
enum ATTR_EFF_STACK_TYPE_Enum
{
    ENUM_ATTR_EFF_STACK_TYPE_NONE = 0,
    ENUM_ATTR_EFF_STACK_TYPE_DDP_QDP = 1,
    ENUM_ATTR_EFF_STACK_TYPE_STACK_3DS = 2,
};

/* ATTR_EFF_NUM_MASTER_RANKS_PER_DIMM */
typedef uint8_t ATTR_EFF_NUM_MASTER_RANKS_PER_DIMM_Type[2][2];
const bool ATTR_EFF_NUM_MASTER_RANKS_PER_DIMM_Privileged = false;
const TargetTypes_t ATTR_EFF_NUM_MASTER_RANKS_PER_DIMM_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_NUM_MASTER_RANKS_PER_DIMM_PlatInit = false;

/* ATTR_EFF_NUM_PACKAGES_PER_RANK */
typedef uint8_t ATTR_EFF_NUM_PACKAGES_PER_RANK_Type[2][2];
const bool ATTR_EFF_NUM_PACKAGES_PER_RANK_Privileged = false;
const TargetTypes_t ATTR_EFF_NUM_PACKAGES_PER_RANK_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_NUM_PACKAGES_PER_RANK_PlatInit = false;

/* ATTR_EFF_NUM_DIES_PER_PACKAGE */
typedef uint8_t ATTR_EFF_NUM_DIES_PER_PACKAGE_Type[2][2];
const bool ATTR_EFF_NUM_DIES_PER_PACKAGE_Privileged = false;
const TargetTypes_t ATTR_EFF_NUM_DIES_PER_PACKAGE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_NUM_DIES_PER_PACKAGE_PlatInit = false;

/* ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_MBA */
typedef uint32_t ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_MBA_Type;
const bool ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_MBA_Privileged = false;
const TargetTypes_t ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_MBA_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_MBA_PlatInit = false;

/* ATTR_MSS_MEM_THROTTLE_DENOMINATOR */
typedef uint32_t ATTR_MSS_MEM_THROTTLE_DENOMINATOR_Type;
const bool ATTR_MSS_MEM_THROTTLE_DENOMINATOR_Privileged = false;
const TargetTypes_t ATTR_MSS_MEM_THROTTLE_DENOMINATOR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_MEM_THROTTLE_DENOMINATOR_PlatInit = false;

/* ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_CHIP */
typedef uint32_t ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_CHIP_Type;
const bool ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_CHIP_Privileged = false;
const TargetTypes_t ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_CHIP_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_MEM_THROTTLE_NUMERATOR_PER_CHIP_PlatInit = false;

/* ATTR_MSS_MEM_WATT_TARGET */
typedef uint32_t ATTR_MSS_MEM_WATT_TARGET_Type;
const bool ATTR_MSS_MEM_WATT_TARGET_Privileged = false;
const TargetTypes_t ATTR_MSS_MEM_WATT_TARGET_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_MEM_WATT_TARGET_PlatInit = false;

/* ATTR_MSS_POWER_SLOPE */
typedef uint32_t ATTR_MSS_POWER_SLOPE_Type[2][2];
const bool ATTR_MSS_POWER_SLOPE_Privileged = false;
const TargetTypes_t ATTR_MSS_POWER_SLOPE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_POWER_SLOPE_PlatInit = false;

/* ATTR_MSS_POWER_SLOPE2 */
typedef uint32_t ATTR_MSS_POWER_SLOPE2_Type[2][2];
const bool ATTR_MSS_POWER_SLOPE2_Privileged = false;
const TargetTypes_t ATTR_MSS_POWER_SLOPE2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_POWER_SLOPE2_PlatInit = false;

/* ATTR_MSS_POWER_INT */
typedef uint32_t ATTR_MSS_POWER_INT_Type[2][2];
const bool ATTR_MSS_POWER_INT_Privileged = false;
const TargetTypes_t ATTR_MSS_POWER_INT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_POWER_INT_PlatInit = false;

/* ATTR_MSS_POWER_INT2 */
typedef uint32_t ATTR_MSS_POWER_INT2_Type[2][2];
const bool ATTR_MSS_POWER_INT2_Privileged = false;
const TargetTypes_t ATTR_MSS_POWER_INT2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_POWER_INT2_PlatInit = false;

/* ATTR_MSS_TOTAL_POWER_SLOPE */
typedef uint32_t ATTR_MSS_TOTAL_POWER_SLOPE_Type[2][2];
const bool ATTR_MSS_TOTAL_POWER_SLOPE_Privileged = false;
const TargetTypes_t ATTR_MSS_TOTAL_POWER_SLOPE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_TOTAL_POWER_SLOPE_PlatInit = false;

/* ATTR_MSS_TOTAL_POWER_SLOPE2 */
typedef uint32_t ATTR_MSS_TOTAL_POWER_SLOPE2_Type[2][2];
const bool ATTR_MSS_TOTAL_POWER_SLOPE2_Privileged = false;
const TargetTypes_t ATTR_MSS_TOTAL_POWER_SLOPE2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_TOTAL_POWER_SLOPE2_PlatInit = false;

/* ATTR_MSS_TOTAL_POWER_INT */
typedef uint32_t ATTR_MSS_TOTAL_POWER_INT_Type[2][2];
const bool ATTR_MSS_TOTAL_POWER_INT_Privileged = false;
const TargetTypes_t ATTR_MSS_TOTAL_POWER_INT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_TOTAL_POWER_INT_PlatInit = false;

/* ATTR_MSS_TOTAL_POWER_INT2 */
typedef uint32_t ATTR_MSS_TOTAL_POWER_INT2_Type[2][2];
const bool ATTR_MSS_TOTAL_POWER_INT2_Privileged = false;
const TargetTypes_t ATTR_MSS_TOTAL_POWER_INT2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_TOTAL_POWER_INT2_PlatInit = false;

/* ATTR_MSS_DIMM_MAXBANDWIDTH_GBS */
typedef uint32_t ATTR_MSS_DIMM_MAXBANDWIDTH_GBS_Type[2][2];
const bool ATTR_MSS_DIMM_MAXBANDWIDTH_GBS_Privileged = false;
const TargetTypes_t ATTR_MSS_DIMM_MAXBANDWIDTH_GBS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_DIMM_MAXBANDWIDTH_GBS_PlatInit = false;

/* ATTR_MSS_DIMM_MAXBANDWIDTH_MRS */
typedef uint32_t ATTR_MSS_DIMM_MAXBANDWIDTH_MRS_Type[2][2];
const bool ATTR_MSS_DIMM_MAXBANDWIDTH_MRS_Privileged = false;
const TargetTypes_t ATTR_MSS_DIMM_MAXBANDWIDTH_MRS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_DIMM_MAXBANDWIDTH_MRS_PlatInit = false;

/* ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_GBS */
typedef uint32_t ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_GBS_Type;
const bool ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_GBS_Privileged = false;
const TargetTypes_t ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_GBS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_GBS_PlatInit = false;

/* ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_MRS */
typedef uint32_t ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_MRS_Type;
const bool ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_MRS_Privileged = false;
const TargetTypes_t ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_MRS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_CHANNEL_PAIR_MAXBANDWIDTH_MRS_PlatInit = false;

/* ATTR_MSS_DIMM_MAXPOWER */
typedef uint32_t ATTR_MSS_DIMM_MAXPOWER_Type[2][2];
const bool ATTR_MSS_DIMM_MAXPOWER_Privileged = false;
const TargetTypes_t ATTR_MSS_DIMM_MAXPOWER_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_DIMM_MAXPOWER_PlatInit = false;

/* ATTR_MSS_CHANNEL_PAIR_MAXPOWER */
typedef uint32_t ATTR_MSS_CHANNEL_PAIR_MAXPOWER_Type;
const bool ATTR_MSS_CHANNEL_PAIR_MAXPOWER_Privileged = false;
const TargetTypes_t ATTR_MSS_CHANNEL_PAIR_MAXPOWER_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_CHANNEL_PAIR_MAXPOWER_PlatInit = false;

/* ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_MBA */
typedef uint32_t ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_MBA_Type;
const bool ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_MBA_Privileged = false;
const TargetTypes_t ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_MBA_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_MBA_PlatInit = false;

/* ATTR_MSS_RUNTIME_MEM_THROTTLE_DENOMINATOR */
typedef uint32_t ATTR_MSS_RUNTIME_MEM_THROTTLE_DENOMINATOR_Type;
const bool ATTR_MSS_RUNTIME_MEM_THROTTLE_DENOMINATOR_Privileged = false;
const TargetTypes_t ATTR_MSS_RUNTIME_MEM_THROTTLE_DENOMINATOR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_RUNTIME_MEM_THROTTLE_DENOMINATOR_PlatInit = false;

/* ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_CHIP */
typedef uint32_t ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_CHIP_Type;
const bool ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_CHIP_Privileged = false;
const TargetTypes_t ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_CHIP_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_RUNTIME_MEM_THROTTLE_NUMERATOR_PER_CHIP_PlatInit = false;

/* ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_MBA */
typedef uint32_t ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_MBA_Type;
const bool ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_MBA_Privileged = false;
const TargetTypes_t ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_MBA_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_MBA_PlatInit = true;
#define ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_MBA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_CHIP */
typedef uint32_t ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_CHIP_Type;
const bool ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_CHIP_Privileged = false;
const TargetTypes_t ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_CHIP_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_CHIP_PlatInit = true;
#define ATTR_MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_CHIP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MRW_THERMAL_MEMORY_POWER_LIMIT */
typedef uint32_t ATTR_MRW_THERMAL_MEMORY_POWER_LIMIT_Type;
const bool ATTR_MRW_THERMAL_MEMORY_POWER_LIMIT_Privileged = false;
const TargetTypes_t ATTR_MRW_THERMAL_MEMORY_POWER_LIMIT_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_THERMAL_MEMORY_POWER_LIMIT_PlatInit = true;
#define ATTR_MRW_THERMAL_MEMORY_POWER_LIMIT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_INTERLEAVE_ENABLE */
typedef uint8_t ATTR_MSS_INTERLEAVE_ENABLE_Type;
const bool ATTR_MSS_INTERLEAVE_ENABLE_Privileged = false;
const TargetTypes_t ATTR_MSS_INTERLEAVE_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_MSS_INTERLEAVE_ENABLE_PlatInit = true;
#define ATTR_MSS_INTERLEAVE_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT */
typedef uint8_t ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT_Type;
const bool ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT_Privileged = false;
const TargetTypes_t ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT_PlatInit = true;
#define ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_DERIVED_MBA_ADDR_INTERLEAVE_BIT */
typedef uint8_t ATTR_MSS_DERIVED_MBA_ADDR_INTERLEAVE_BIT_Type;
const bool ATTR_MSS_DERIVED_MBA_ADDR_INTERLEAVE_BIT_Privileged = false;
const TargetTypes_t ATTR_MSS_DERIVED_MBA_ADDR_INTERLEAVE_BIT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_DERIVED_MBA_ADDR_INTERLEAVE_BIT_PlatInit = false;

/* ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE */
typedef uint8_t ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_Type;
const bool ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_Privileged = false;
const TargetTypes_t ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_PlatInit = true;
enum ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_Enum
{
    ENUM_ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_OFF = 0,
    ENUM_ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_ON = 1,
};
#define ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_DERIVED_MBA_CACHELINE_INTERLEAVE_MODE */
typedef uint8_t ATTR_MSS_DERIVED_MBA_CACHELINE_INTERLEAVE_MODE_Type;
const bool ATTR_MSS_DERIVED_MBA_CACHELINE_INTERLEAVE_MODE_Privileged = false;
const TargetTypes_t ATTR_MSS_DERIVED_MBA_CACHELINE_INTERLEAVE_MODE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_DERIVED_MBA_CACHELINE_INTERLEAVE_MODE_PlatInit = false;
enum ATTR_MSS_DERIVED_MBA_CACHELINE_INTERLEAVE_MODE_Enum
{
    ENUM_ATTR_MSS_DERIVED_MBA_CACHELINE_INTERLEAVE_MODE_OFF = 0,
    ENUM_ATTR_MSS_DERIVED_MBA_CACHELINE_INTERLEAVE_MODE_ON = 1,
};

/* ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL */
typedef uint8_t ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL_Type;
const bool ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL_Privileged = false;
const TargetTypes_t ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL_PlatInit = true;
enum ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL_Enum
{
    ENUM_ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL_NEVER = 0,
    ENUM_ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL_REQUIRED = 1,
    ENUM_ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL_REQUESTED = 2,
};
#define ATTR_MRW_MBA_CACHELINE_INTERLEAVE_MODE_CONTROL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_CACHE_ENABLE */
typedef uint8_t ATTR_MSS_CACHE_ENABLE_Type;
const bool ATTR_MSS_CACHE_ENABLE_Privileged = false;
const TargetTypes_t ATTR_MSS_CACHE_ENABLE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_CACHE_ENABLE_PlatInit = true;
enum ATTR_MSS_CACHE_ENABLE_Enum
{
    ENUM_ATTR_MSS_CACHE_ENABLE_OFF = 0,
    ENUM_ATTR_MSS_CACHE_ENABLE_ON = 1,
    ENUM_ATTR_MSS_CACHE_ENABLE_HALF_A = 3,
    ENUM_ATTR_MSS_CACHE_ENABLE_HALF_B = 5,
    ENUM_ATTR_MSS_CACHE_ENABLE_UNK_OFF = 8,
    ENUM_ATTR_MSS_CACHE_ENABLE_UNK_ON = 9,
    ENUM_ATTR_MSS_CACHE_ENABLE_UNK_HALF_A = 0xB,
    ENUM_ATTR_MSS_CACHE_ENABLE_UNK_HALF_B = 0xD,
};
#define ATTR_MSS_CACHE_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_PREFETCH_ENABLE */
typedef uint8_t ATTR_MSS_PREFETCH_ENABLE_Type;
const bool ATTR_MSS_PREFETCH_ENABLE_Privileged = false;
const TargetTypes_t ATTR_MSS_PREFETCH_ENABLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_PREFETCH_ENABLE_PlatInit = true;
enum ATTR_MSS_PREFETCH_ENABLE_Enum
{
    ENUM_ATTR_MSS_PREFETCH_ENABLE_OFF = 0,
    ENUM_ATTR_MSS_PREFETCH_ENABLE_ON = 1,
};
#define ATTR_MSS_PREFETCH_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_CLEANER_ENABLE */
typedef uint8_t ATTR_MSS_CLEANER_ENABLE_Type;
const bool ATTR_MSS_CLEANER_ENABLE_Privileged = false;
const TargetTypes_t ATTR_MSS_CLEANER_ENABLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_CLEANER_ENABLE_PlatInit = true;
enum ATTR_MSS_CLEANER_ENABLE_Enum
{
    ENUM_ATTR_MSS_CLEANER_ENABLE_OFF = 0,
    ENUM_ATTR_MSS_CLEANER_ENABLE_ON = 1,
};
#define ATTR_MSS_CLEANER_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_MEM_MC_IN_GROUP */
typedef uint8_t ATTR_MSS_MEM_MC_IN_GROUP_Type[8];
const bool ATTR_MSS_MEM_MC_IN_GROUP_Privileged = false;
const TargetTypes_t ATTR_MSS_MEM_MC_IN_GROUP_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_MSS_MEM_MC_IN_GROUP_PlatInit = false;

/* ATTR_MSS_MCS_GROUP_32 */
typedef uint32_t ATTR_MSS_MCS_GROUP_32_Type[16][16];
const bool ATTR_MSS_MCS_GROUP_32_Privileged = false;
const TargetTypes_t ATTR_MSS_MCS_GROUP_32_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_MSS_MCS_GROUP_32_PlatInit = false;

/* ATTR_MSS_EFF_DIMM_FUNCTIONAL_VECTOR */
typedef uint8_t ATTR_MSS_EFF_DIMM_FUNCTIONAL_VECTOR_Type;
const bool ATTR_MSS_EFF_DIMM_FUNCTIONAL_VECTOR_Privileged = false;
const TargetTypes_t ATTR_MSS_EFF_DIMM_FUNCTIONAL_VECTOR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_EFF_DIMM_FUNCTIONAL_VECTOR_PlatInit = false;

/* ATTR_EFF_DRAM_LPASR */
typedef uint8_t ATTR_EFF_DRAM_LPASR_Type;
const bool ATTR_EFF_DRAM_LPASR_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_LPASR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_LPASR_PlatInit = false;
enum ATTR_EFF_DRAM_LPASR_Enum
{
    ENUM_ATTR_EFF_DRAM_LPASR_MANUAL_NORMAL =0,
    ENUM_ATTR_EFF_DRAM_LPASR_MANUAL_REDUCED = 1,
    ENUM_ATTR_EFF_DRAM_LPASR_MANUAL_EXTENDED = 2,
    ENUM_ATTR_EFF_DRAM_LPASR_ASR = 3,
};

/* ATTR_EFF_MPR_PAGE */
typedef uint8_t ATTR_EFF_MPR_PAGE_Type;
const bool ATTR_EFF_MPR_PAGE_Privileged = false;
const TargetTypes_t ATTR_EFF_MPR_PAGE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_MPR_PAGE_PlatInit = false;
enum ATTR_EFF_MPR_PAGE_Enum
{
    ENUM_ATTR_EFF_MPR_PAGE_PG0 = 0,
    ENUM_ATTR_EFF_MPR_PAGE_PG1 = 1,
    ENUM_ATTR_EFF_MPR_PAGE_PG2 = 2,
    ENUM_ATTR_EFF_MPR_PAGE_PG3 = 3,
};

/* ATTR_EFF_GEARDOWN_MODE */
typedef uint8_t ATTR_EFF_GEARDOWN_MODE_Type;
const bool ATTR_EFF_GEARDOWN_MODE_Privileged = false;
const TargetTypes_t ATTR_EFF_GEARDOWN_MODE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_GEARDOWN_MODE_PlatInit = false;
enum ATTR_EFF_GEARDOWN_MODE_Enum
{
    ENUM_ATTR_EFF_GEARDOWN_MODE_HALF =0,
    ENUM_ATTR_EFF_GEARDOWN_MODE_QUARTER=1,
};

/* ATTR_EFF_PER_DRAM_ACCESS */
typedef uint8_t ATTR_EFF_PER_DRAM_ACCESS_Type;
const bool ATTR_EFF_PER_DRAM_ACCESS_Privileged = false;
const TargetTypes_t ATTR_EFF_PER_DRAM_ACCESS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_PER_DRAM_ACCESS_PlatInit = false;
enum ATTR_EFF_PER_DRAM_ACCESS_Enum
{
    ENUM_ATTR_EFF_PER_DRAM_ACCESS_DISABLE = 0,
    ENUM_ATTR_EFF_PER_DRAM_ACCESS_ENABLE = 1,
};

/* ATTR_EFF_TEMP_READOUT */
typedef uint8_t ATTR_EFF_TEMP_READOUT_Type;
const bool ATTR_EFF_TEMP_READOUT_Privileged = false;
const TargetTypes_t ATTR_EFF_TEMP_READOUT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_TEMP_READOUT_PlatInit = false;
enum ATTR_EFF_TEMP_READOUT_Enum
{
    ENUM_ATTR_EFF_TEMP_READOUT_DISABLE = 0,
    ENUM_ATTR_EFF_TEMP_READOUT_ENABLE = 1,
};

/* ATTR_EFF_FINE_REFRESH_MODE */
typedef uint8_t ATTR_EFF_FINE_REFRESH_MODE_Type;
const bool ATTR_EFF_FINE_REFRESH_MODE_Privileged = false;
const TargetTypes_t ATTR_EFF_FINE_REFRESH_MODE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_FINE_REFRESH_MODE_PlatInit = false;
enum ATTR_EFF_FINE_REFRESH_MODE_Enum
{
    ENUM_ATTR_EFF_FINE_REFRESH_MODE_NORMAL = 0,
    ENUM_ATTR_EFF_FINE_REFRESH_MODE_FIXED_2X = 1,
    ENUM_ATTR_EFF_FINE_REFRESH_MODE_FIXED_4X = 2,
    ENUM_ATTR_EFF_FINE_REFRESH_MODE_FLY_2X = 5,
    ENUM_ATTR_EFF_FINE_REFRESH_MODE_FLY_4X = 6,
};

/* ATTR_EFF_CRC_WR_LATENCY */
typedef uint8_t ATTR_EFF_CRC_WR_LATENCY_Type;
const bool ATTR_EFF_CRC_WR_LATENCY_Privileged = false;
const TargetTypes_t ATTR_EFF_CRC_WR_LATENCY_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CRC_WR_LATENCY_PlatInit = false;
enum ATTR_EFF_CRC_WR_LATENCY_Enum
{
    ENUM_ATTR_EFF_CRC_WR_LATENCY_4NCK = 4,
    ENUM_ATTR_EFF_CRC_WR_LATENCY_5NCK = 5,
    ENUM_ATTR_EFF_CRC_WR_LATENCY_6NCK = 6,
};

/* ATTR_EFF_MPR_RD_FORMAT */
typedef uint8_t ATTR_EFF_MPR_RD_FORMAT_Type;
const bool ATTR_EFF_MPR_RD_FORMAT_Privileged = false;
const TargetTypes_t ATTR_EFF_MPR_RD_FORMAT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_MPR_RD_FORMAT_PlatInit = false;
enum ATTR_EFF_MPR_RD_FORMAT_Enum
{
    ENUM_ATTR_EFF_MPR_RD_FORMAT_SERIAL = 0,
    ENUM_ATTR_EFF_MPR_RD_FORMAT_PARALLEL = 1,
    ENUM_ATTR_EFF_MPR_RD_FORMAT_STAGGERED = 2,
    ENUM_ATTR_EFF_MPR_RD_FORMAT_RESERVED_TEMP= 3,
};

/* ATTR_EFF_MAX_POWERDOWN_MODE */
typedef uint8_t ATTR_EFF_MAX_POWERDOWN_MODE_Type;
const bool ATTR_EFF_MAX_POWERDOWN_MODE_Privileged = false;
const TargetTypes_t ATTR_EFF_MAX_POWERDOWN_MODE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_MAX_POWERDOWN_MODE_PlatInit = false;
enum ATTR_EFF_MAX_POWERDOWN_MODE_Enum
{
    ENUM_ATTR_EFF_MAX_POWERDOWN_MODE_DISABLE = 0,
    ENUM_ATTR_EFF_MAX_POWERDOWN_MODE_ENABLE = 1,
};

/* ATTR_EFF_TEMP_REF_RANGE */
typedef uint8_t ATTR_EFF_TEMP_REF_RANGE_Type;
const bool ATTR_EFF_TEMP_REF_RANGE_Privileged = false;
const TargetTypes_t ATTR_EFF_TEMP_REF_RANGE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_TEMP_REF_RANGE_PlatInit = false;
enum ATTR_EFF_TEMP_REF_RANGE_Enum
{
    ENUM_ATTR_EFF_TEMP_REF_RANGE_NORMAL = 0,
    ENUM_ATTR_EFF_TEMP_REF_RANGE_EXTEND = 1,
};

/* ATTR_EFF_TEMP_REF_MODE */
typedef uint8_t ATTR_EFF_TEMP_REF_MODE_Type;
const bool ATTR_EFF_TEMP_REF_MODE_Privileged = false;
const TargetTypes_t ATTR_EFF_TEMP_REF_MODE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_TEMP_REF_MODE_PlatInit = false;
enum ATTR_EFF_TEMP_REF_MODE_Enum
{
    ENUM_ATTR_EFF_TEMP_REF_MODE_DISABLE = 0,
    ENUM_ATTR_EFF_TEMP_REF_MODE_ENABLE = 1,
};

/* ATTR_EFF_INT_VREF_MON */
typedef uint8_t ATTR_EFF_INT_VREF_MON_Type;
const bool ATTR_EFF_INT_VREF_MON_Privileged = false;
const TargetTypes_t ATTR_EFF_INT_VREF_MON_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_INT_VREF_MON_PlatInit = false;
enum ATTR_EFF_INT_VREF_MON_Enum
{
    ENUM_ATTR_EFF_INT_VREF_MON_DISABLE = 0,
    ENUM_ATTR_EFF_INT_VREF_MON_ENABLE = 1,
};

/* ATTR_EFF_CS_CMD_LATENCY */
typedef uint8_t ATTR_EFF_CS_CMD_LATENCY_Type;
const bool ATTR_EFF_CS_CMD_LATENCY_Privileged = false;
const TargetTypes_t ATTR_EFF_CS_CMD_LATENCY_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CS_CMD_LATENCY_PlatInit = false;
enum ATTR_EFF_CS_CMD_LATENCY_Enum
{
    ENUM_ATTR_EFF_CS_CMD_LATENCY_DISABLE = 0,
    ENUM_ATTR_EFF_CS_CMD_LATENCY_3CYC = 3,
    ENUM_ATTR_EFF_CS_CMD_LATENCY_4CYC = 4,
    ENUM_ATTR_EFF_CS_CMD_LATENCY_5CYC = 5,
    ENUM_ATTR_EFF_CS_CMD_LATENCY_6CYC = 6,
    ENUM_ATTR_EFF_CS_CMD_LATENCY_8CYC = 8,
};

/* ATTR_EFF_SELF_REF_ABORT */
typedef uint8_t ATTR_EFF_SELF_REF_ABORT_Type;
const bool ATTR_EFF_SELF_REF_ABORT_Privileged = false;
const TargetTypes_t ATTR_EFF_SELF_REF_ABORT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_SELF_REF_ABORT_PlatInit = false;
enum ATTR_EFF_SELF_REF_ABORT_Enum
{
    ENUM_ATTR_EFF_SELF_REF_ABORT_DISABLE = 0,
    ENUM_ATTR_EFF_SELF_REF_ABORT_ENABLE = 1,
};

/* ATTR_EFF_RD_PREAMBLE_TRAIN */
typedef uint8_t ATTR_EFF_RD_PREAMBLE_TRAIN_Type;
const bool ATTR_EFF_RD_PREAMBLE_TRAIN_Privileged = false;
const TargetTypes_t ATTR_EFF_RD_PREAMBLE_TRAIN_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_RD_PREAMBLE_TRAIN_PlatInit = false;
enum ATTR_EFF_RD_PREAMBLE_TRAIN_Enum
{
    ENUM_ATTR_EFF_RD_PREAMBLE_TRAIN_DISABLE = 0,
    ENUM_ATTR_EFF_RD_PREAMBLE_TRAIN_ENABLE = 1,
};

/* ATTR_EFF_RD_PREAMBLE */
typedef uint8_t ATTR_EFF_RD_PREAMBLE_Type;
const bool ATTR_EFF_RD_PREAMBLE_Privileged = false;
const TargetTypes_t ATTR_EFF_RD_PREAMBLE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_RD_PREAMBLE_PlatInit = false;
enum ATTR_EFF_RD_PREAMBLE_Enum
{
    ENUM_ATTR_EFF_RD_PREAMBLE_1NCLK = 1,
    ENUM_ATTR_EFF_RD_PREAMBLE_2NCLK = 2,
};

/* ATTR_EFF_WR_PREAMBLE */
typedef uint8_t ATTR_EFF_WR_PREAMBLE_Type;
const bool ATTR_EFF_WR_PREAMBLE_Privileged = false;
const TargetTypes_t ATTR_EFF_WR_PREAMBLE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_WR_PREAMBLE_PlatInit = false;
enum ATTR_EFF_WR_PREAMBLE_Enum
{
    ENUM_ATTR_EFF_WR_PREAMBLE_1NCLK = 1,
    ENUM_ATTR_EFF_WR_PREAMBLE_2NCLK = 2,
};

/* ATTR_EFF_CA_PARITY_LATENCY */
typedef uint8_t ATTR_EFF_CA_PARITY_LATENCY_Type;
const bool ATTR_EFF_CA_PARITY_LATENCY_Privileged = false;
const TargetTypes_t ATTR_EFF_CA_PARITY_LATENCY_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CA_PARITY_LATENCY_PlatInit = false;
enum ATTR_EFF_CA_PARITY_LATENCY_Enum
{
    ENUM_ATTR_EFF_CA_PARITY_LATENCY_DISABLE = 0,
    ENUM_ATTR_EFF_CA_PARITY_LATENCY_PL4 = 4,
    ENUM_ATTR_EFF_CA_PARITY_LATENCY_PL5 = 5,
    ENUM_ATTR_EFF_CA_PARITY_LATENCY_PL6 = 6,
    ENUM_ATTR_EFF_CA_PARITY_LATENCY_PL8 = 8,
};

/* ATTR_EFF_CRC_ERROR_CLEAR */
typedef uint8_t ATTR_EFF_CRC_ERROR_CLEAR_Type;
const bool ATTR_EFF_CRC_ERROR_CLEAR_Privileged = false;
const TargetTypes_t ATTR_EFF_CRC_ERROR_CLEAR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CRC_ERROR_CLEAR_PlatInit = false;
enum ATTR_EFF_CRC_ERROR_CLEAR_Enum
{
    ENUM_ATTR_EFF_CRC_ERROR_CLEAR_CLEAR = 0,
    ENUM_ATTR_EFF_CRC_ERROR_CLEAR_ERROR = 1,
};

/* ATTR_EFF_CA_PARITY_ERROR_STATUS */
typedef uint8_t ATTR_EFF_CA_PARITY_ERROR_STATUS_Type;
const bool ATTR_EFF_CA_PARITY_ERROR_STATUS_Privileged = false;
const TargetTypes_t ATTR_EFF_CA_PARITY_ERROR_STATUS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CA_PARITY_ERROR_STATUS_PlatInit = false;
enum ATTR_EFF_CA_PARITY_ERROR_STATUS_Enum
{
    ENUM_ATTR_EFF_CA_PARITY_ERROR_STATUS_CLEAR = 0,
    ENUM_ATTR_EFF_CA_PARITY_ERROR_STATUS_ERROR = 1,
};

/* ATTR_EFF_ODT_INPUT_BUFF */
typedef uint8_t ATTR_EFF_ODT_INPUT_BUFF_Type;
const bool ATTR_EFF_ODT_INPUT_BUFF_Privileged = false;
const TargetTypes_t ATTR_EFF_ODT_INPUT_BUFF_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_ODT_INPUT_BUFF_PlatInit = false;
enum ATTR_EFF_ODT_INPUT_BUFF_Enum
{
    ENUM_ATTR_EFF_ODT_INPUT_BUFF_DEACTIVATED = 0,
    ENUM_ATTR_EFF_ODT_INPUT_BUFF_ACTIVATED = 1,
};

/* ATTR_EFF_RTT_PARK */
typedef uint8_t ATTR_EFF_RTT_PARK_Type[2][2][4];
const bool ATTR_EFF_RTT_PARK_Privileged = false;
const TargetTypes_t ATTR_EFF_RTT_PARK_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_RTT_PARK_PlatInit = false;
enum ATTR_EFF_RTT_PARK_Enum
{
    ENUM_ATTR_EFF_RTT_PARK_DISABLE = 0,
    ENUM_ATTR_EFF_RTT_PARK_60OHM = 60,
    ENUM_ATTR_EFF_RTT_PARK_120OHM = 120,
    ENUM_ATTR_EFF_RTT_PARK_40OHM = 40,
    ENUM_ATTR_EFF_RTT_PARK_240OHM = 240,
    ENUM_ATTR_EFF_RTT_PARK_48OHM = 48,
    ENUM_ATTR_EFF_RTT_PARK_80OHM = 80,
    ENUM_ATTR_EFF_RTT_PARK_34OHM = 34,
};

/* ATTR_EFF_CA_PARITY */
typedef uint8_t ATTR_EFF_CA_PARITY_Type;
const bool ATTR_EFF_CA_PARITY_Privileged = false;
const TargetTypes_t ATTR_EFF_CA_PARITY_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_CA_PARITY_PlatInit = false;
enum ATTR_EFF_CA_PARITY_Enum
{
    ENUM_ATTR_EFF_CA_PARITY_DISABLE = 0,
    ENUM_ATTR_EFF_CA_PARITY_ENABLE = 1,
};

/* ATTR_EFF_DATA_MASK */
typedef uint8_t ATTR_EFF_DATA_MASK_Type;
const bool ATTR_EFF_DATA_MASK_Privileged = false;
const TargetTypes_t ATTR_EFF_DATA_MASK_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DATA_MASK_PlatInit = false;
enum ATTR_EFF_DATA_MASK_Enum
{
    ENUM_ATTR_EFF_DATA_MASK_DISABLE = 0,
    ENUM_ATTR_EFF_DATA_MASK_ENABLE = 1,
};

/* ATTR_EFF_WRITE_DBI */
typedef uint8_t ATTR_EFF_WRITE_DBI_Type;
const bool ATTR_EFF_WRITE_DBI_Privileged = false;
const TargetTypes_t ATTR_EFF_WRITE_DBI_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_WRITE_DBI_PlatInit = false;
enum ATTR_EFF_WRITE_DBI_Enum
{
    ENUM_ATTR_EFF_WRITE_DBI_DISABLE = 0,
    ENUM_ATTR_EFF_WRITE_DBI_ENABLE = 1,
};

/* ATTR_EFF_READ_DBI */
typedef uint8_t ATTR_EFF_READ_DBI_Type;
const bool ATTR_EFF_READ_DBI_Privileged = false;
const TargetTypes_t ATTR_EFF_READ_DBI_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_READ_DBI_PlatInit = false;
enum ATTR_EFF_READ_DBI_Enum
{
    ENUM_ATTR_EFF_READ_DBI_DISABLE = 0,
    ENUM_ATTR_EFF_READ_DBI_ENABLE = 1,
};

/* ATTR_VREF_DQ_TRAIN_VALUE */
typedef uint8_t ATTR_VREF_DQ_TRAIN_VALUE_Type[2][2][4];
const bool ATTR_VREF_DQ_TRAIN_VALUE_Privileged = false;
const TargetTypes_t ATTR_VREF_DQ_TRAIN_VALUE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VREF_DQ_TRAIN_VALUE_PlatInit = false;

/* ATTR_VREF_DQ_TRAIN_RANGE */
typedef uint8_t ATTR_VREF_DQ_TRAIN_RANGE_Type[2][2][4];
const bool ATTR_VREF_DQ_TRAIN_RANGE_Privileged = false;
const TargetTypes_t ATTR_VREF_DQ_TRAIN_RANGE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VREF_DQ_TRAIN_RANGE_PlatInit = false;
enum ATTR_VREF_DQ_TRAIN_RANGE_Enum
{
    ENUM_ATTR_VREF_DQ_TRAIN_RANGE_RANGE1 = 0,
    ENUM_ATTR_VREF_DQ_TRAIN_RANGE_RANGE2 = 1,
};

/* ATTR_VREF_DQ_TRAIN_ENABLE */
typedef uint8_t ATTR_VREF_DQ_TRAIN_ENABLE_Type[2][2][4];
const bool ATTR_VREF_DQ_TRAIN_ENABLE_Privileged = false;
const TargetTypes_t ATTR_VREF_DQ_TRAIN_ENABLE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VREF_DQ_TRAIN_ENABLE_PlatInit = false;
enum ATTR_VREF_DQ_TRAIN_ENABLE_Enum
{
    ENUM_ATTR_VREF_DQ_TRAIN_ENABLE_DISABLE = 0,
    ENUM_ATTR_VREF_DQ_TRAIN_ENABLE_ENABLE = 1,
};

/* ATTR_EFF_DRAM_TCCD_L */
typedef uint8_t ATTR_EFF_DRAM_TCCD_L_Type;
const bool ATTR_EFF_DRAM_TCCD_L_Privileged = false;
const TargetTypes_t ATTR_EFF_DRAM_TCCD_L_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_DRAM_TCCD_L_PlatInit = false;
enum ATTR_EFF_DRAM_TCCD_L_Enum
{
    ENUM_ATTR_EFF_DRAM_TCCD_L_4NCK = 4,
    ENUM_ATTR_EFF_DRAM_TCCD_L_5NCK = 5,
    ENUM_ATTR_EFF_DRAM_TCCD_L_6NCK = 6,
    ENUM_ATTR_EFF_DRAM_TCCD_L_7NCK = 7,
    ENUM_ATTR_EFF_DRAM_TCCD_L_8NCK = 8,
};

/* ATTR_TCCD_L */
typedef uint8_t ATTR_TCCD_L_Type;
const bool ATTR_TCCD_L_Privileged = false;
const TargetTypes_t ATTR_TCCD_L_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_TCCD_L_PlatInit = false;
enum ATTR_TCCD_L_Enum
{
    ENUM_ATTR_TCCD_L_4NCK = 4,
    ENUM_ATTR_TCCD_L_5NCK = 5,
    ENUM_ATTR_TCCD_L_6NCK = 6,
    ENUM_ATTR_TCCD_L_7NCK = 7,
    ENUM_ATTR_TCCD_L_8NCK = 8,
};

/* ATTR_EFF_WRITE_CRC */
typedef uint8_t ATTR_EFF_WRITE_CRC_Type;
const bool ATTR_EFF_WRITE_CRC_Privileged = false;
const TargetTypes_t ATTR_EFF_WRITE_CRC_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_WRITE_CRC_PlatInit = false;
enum ATTR_EFF_WRITE_CRC_Enum
{
    ENUM_ATTR_EFF_WRITE_CRC_DISABLE = 0,
    ENUM_ATTR_EFF_WRITE_CRC_ENABLE = 1,
};

/* ATTR_MSS_CAL_STEP_ENABLE */
typedef uint8_t ATTR_MSS_CAL_STEP_ENABLE_Type;
const bool ATTR_MSS_CAL_STEP_ENABLE_Privileged = false;
const TargetTypes_t ATTR_MSS_CAL_STEP_ENABLE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_CAL_STEP_ENABLE_PlatInit = false;

/* ATTR_MSS_DRAMINIT_RESET_DISABLE */
typedef uint8_t ATTR_MSS_DRAMINIT_RESET_DISABLE_Type;
const bool ATTR_MSS_DRAMINIT_RESET_DISABLE_Privileged = false;
const TargetTypes_t ATTR_MSS_DRAMINIT_RESET_DISABLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_DRAMINIT_RESET_DISABLE_PlatInit = true;
enum ATTR_MSS_DRAMINIT_RESET_DISABLE_Enum
{
    ENUM_ATTR_MSS_DRAMINIT_RESET_DISABLE_DISABLE = 1,
    ENUM_ATTR_MSS_DRAMINIT_RESET_DISABLE_ENABLE = 0,
};
#define ATTR_MSS_DRAMINIT_RESET_DISABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_MEM_IPL_COMPLETE */
typedef uint8_t ATTR_MSS_MEM_IPL_COMPLETE_Type;
const bool ATTR_MSS_MEM_IPL_COMPLETE_Privileged = false;
const TargetTypes_t ATTR_MSS_MEM_IPL_COMPLETE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_MSS_MEM_IPL_COMPLETE_PlatInit = false;

/* ATTR_MSS_SLEW_RATE_DATA */
typedef uint8_t ATTR_MSS_SLEW_RATE_DATA_Type[2][4][4];
const bool ATTR_MSS_SLEW_RATE_DATA_Privileged = false;
const TargetTypes_t ATTR_MSS_SLEW_RATE_DATA_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_SLEW_RATE_DATA_PlatInit = false;

/* ATTR_MSS_SLEW_RATE_ADR */
typedef uint8_t ATTR_MSS_SLEW_RATE_ADR_Type[2][4][4];
const bool ATTR_MSS_SLEW_RATE_ADR_Privileged = false;
const TargetTypes_t ATTR_MSS_SLEW_RATE_ADR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_SLEW_RATE_ADR_PlatInit = false;

/* ATTR_ECID */
typedef uint64_t ATTR_ECID_Type[2];
const bool ATTR_ECID_Privileged = false;
const TargetTypes_t ATTR_ECID_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_ECID_PlatInit = false;

/* ATTR_MSS_ALLOW_SINGLE_PORT */
typedef uint8_t ATTR_MSS_ALLOW_SINGLE_PORT_Type;
const bool ATTR_MSS_ALLOW_SINGLE_PORT_Privileged = false;
const TargetTypes_t ATTR_MSS_ALLOW_SINGLE_PORT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_ALLOW_SINGLE_PORT_PlatInit = true;
enum ATTR_MSS_ALLOW_SINGLE_PORT_Enum
{
    ENUM_ATTR_MSS_ALLOW_SINGLE_PORT_FALSE = 0,
    ENUM_ATTR_MSS_ALLOW_SINGLE_PORT_TRUE = 1,
};
#define ATTR_MSS_ALLOW_SINGLE_PORT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_DQS_SWIZZLE_TYPE */
typedef uint8_t ATTR_MSS_DQS_SWIZZLE_TYPE_Type;
const bool ATTR_MSS_DQS_SWIZZLE_TYPE_Privileged = false;
const TargetTypes_t ATTR_MSS_DQS_SWIZZLE_TYPE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_DQS_SWIZZLE_TYPE_PlatInit = true;
enum ATTR_MSS_DQS_SWIZZLE_TYPE_Enum
{
    ENUM_ATTR_MSS_DQS_SWIZZLE_TYPE_NORMAL_TYPE_0 = 0,
    ENUM_ATTR_MSS_DQS_SWIZZLE_TYPE_GLACIER_TYPE_1 = 1,
    ENUM_ATTR_MSS_DQS_SWIZZLE_TYPE_ISDIMM_TYPE_2 = 2,
};
#define ATTR_MSS_DQS_SWIZZLE_TYPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_PSRO */
typedef uint8_t ATTR_MSS_PSRO_Type;
const bool ATTR_MSS_PSRO_Privileged = false;
const TargetTypes_t ATTR_MSS_PSRO_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_PSRO_PlatInit = false;

/* ATTR_MSS_NWELL_MISPLACEMENT */
typedef uint8_t ATTR_MSS_NWELL_MISPLACEMENT_Type;
const bool ATTR_MSS_NWELL_MISPLACEMENT_Privileged = false;
const TargetTypes_t ATTR_MSS_NWELL_MISPLACEMENT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_NWELL_MISPLACEMENT_PlatInit = false;
enum ATTR_MSS_NWELL_MISPLACEMENT_Enum
{
    ENUM_ATTR_MSS_NWELL_MISPLACEMENT_FALSE = 0,
    ENUM_ATTR_MSS_NWELL_MISPLACEMENT_TRUE = 1,
};

/* ATTR_MSS_BLUEWATERFALL_BROKEN */
typedef uint8_t ATTR_MSS_BLUEWATERFALL_BROKEN_Type;
const bool ATTR_MSS_BLUEWATERFALL_BROKEN_Privileged = false;
const TargetTypes_t ATTR_MSS_BLUEWATERFALL_BROKEN_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_BLUEWATERFALL_BROKEN_PlatInit = false;
enum ATTR_MSS_BLUEWATERFALL_BROKEN_Enum
{
    ENUM_ATTR_MSS_BLUEWATERFALL_BROKEN_FALSE = 0,
    ENUM_ATTR_MSS_BLUEWATERFALL_BROKEN_TRUE = 1,
};

/* ATTR_MCBIST_PATTERN */
typedef uint32_t ATTR_MCBIST_PATTERN_Type;
const bool ATTR_MCBIST_PATTERN_Privileged = false;
const TargetTypes_t ATTR_MCBIST_PATTERN_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_PATTERN_PlatInit = false;

/* ATTR_MCBIST_TEST_TYPE */
typedef uint32_t ATTR_MCBIST_TEST_TYPE_Type;
const bool ATTR_MCBIST_TEST_TYPE_Privileged = false;
const TargetTypes_t ATTR_MCBIST_TEST_TYPE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_TEST_TYPE_PlatInit = false;

/* ATTR_MCBIST_PRINTING_DISABLE */
typedef uint8_t ATTR_MCBIST_PRINTING_DISABLE_Type;
const bool ATTR_MCBIST_PRINTING_DISABLE_Privileged = false;
const TargetTypes_t ATTR_MCBIST_PRINTING_DISABLE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_PRINTING_DISABLE_PlatInit = false;

/* ATTR_MCBIST_DATA_ENABLE */
typedef uint8_t ATTR_MCBIST_DATA_ENABLE_Type;
const bool ATTR_MCBIST_DATA_ENABLE_Privileged = false;
const TargetTypes_t ATTR_MCBIST_DATA_ENABLE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_DATA_ENABLE_PlatInit = false;

/* ATTR_MCBIST_USER_RANK */
typedef uint8_t ATTR_MCBIST_USER_RANK_Type;
const bool ATTR_MCBIST_USER_RANK_Privileged = false;
const TargetTypes_t ATTR_MCBIST_USER_RANK_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_USER_RANK_PlatInit = false;

/* ATTR_MCBIST_USER_BANK */
typedef uint8_t ATTR_MCBIST_USER_BANK_Type;
const bool ATTR_MCBIST_USER_BANK_Privileged = false;
const TargetTypes_t ATTR_MCBIST_USER_BANK_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_USER_BANK_PlatInit = false;

/* ATTR_SCHMOO_MULTIPLE_SETUP_CALL */
typedef uint8_t ATTR_SCHMOO_MULTIPLE_SETUP_CALL_Type;
const bool ATTR_SCHMOO_MULTIPLE_SETUP_CALL_Privileged = false;
const TargetTypes_t ATTR_SCHMOO_MULTIPLE_SETUP_CALL_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_SCHMOO_MULTIPLE_SETUP_CALL_PlatInit = false;

/* ATTR_EFF_BUFFER_LATENCY */
typedef uint8_t ATTR_EFF_BUFFER_LATENCY_Type;
const bool ATTR_EFF_BUFFER_LATENCY_Privileged = false;
const TargetTypes_t ATTR_EFF_BUFFER_LATENCY_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_BUFFER_LATENCY_PlatInit = true;

/* ATTR_EFF_LRDIMM_WORD_X */
typedef uint64_t ATTR_EFF_LRDIMM_WORD_X_Type[2][2];
const bool ATTR_EFF_LRDIMM_WORD_X_Privileged = false;
const TargetTypes_t ATTR_EFF_LRDIMM_WORD_X_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_LRDIMM_WORD_X_PlatInit = true;

/* ATTR_LRDIMM_MR12_REG */
typedef uint8_t ATTR_LRDIMM_MR12_REG_Type[2][2];
const bool ATTR_LRDIMM_MR12_REG_Privileged = false;
const TargetTypes_t ATTR_LRDIMM_MR12_REG_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_LRDIMM_MR12_REG_PlatInit = false;

/* ATTR_EFF_LRDIMM_ADDITIONAL_CNTL_WORDS */
typedef uint64_t ATTR_EFF_LRDIMM_ADDITIONAL_CNTL_WORDS_Type[2][2];
const bool ATTR_EFF_LRDIMM_ADDITIONAL_CNTL_WORDS_Privileged = false;
const TargetTypes_t ATTR_EFF_LRDIMM_ADDITIONAL_CNTL_WORDS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_EFF_LRDIMM_ADDITIONAL_CNTL_WORDS_PlatInit = false;

/* ATTR_LRDIMM_ADDITIONAL_CNTL_WORDS */
typedef uint64_t ATTR_LRDIMM_ADDITIONAL_CNTL_WORDS_Type[2][2];
const bool ATTR_LRDIMM_ADDITIONAL_CNTL_WORDS_Privileged = false;
const TargetTypes_t ATTR_LRDIMM_ADDITIONAL_CNTL_WORDS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_LRDIMM_ADDITIONAL_CNTL_WORDS_PlatInit = false;

/* ATTR_LRDIMM_RANK_MULT_MODE */
typedef uint8_t ATTR_LRDIMM_RANK_MULT_MODE_Type;
const bool ATTR_LRDIMM_RANK_MULT_MODE_Privileged = false;
const TargetTypes_t ATTR_LRDIMM_RANK_MULT_MODE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_LRDIMM_RANK_MULT_MODE_PlatInit = false;
enum ATTR_LRDIMM_RANK_MULT_MODE_Enum
{
    ENUM_ATTR_LRDIMM_RANK_MULT_MODE_NORMAL = 0,
    ENUM_ATTR_LRDIMM_RANK_MULT_MODE_2X_MULT = 2,
    ENUM_ATTR_LRDIMM_RANK_MULT_MODE_4X_MULT = 4,
};

/* ATTR_MSS_THROTTLE_CONTROL_RAS_WEIGHT */
typedef uint8_t ATTR_MSS_THROTTLE_CONTROL_RAS_WEIGHT_Type;
const bool ATTR_MSS_THROTTLE_CONTROL_RAS_WEIGHT_Privileged = false;
const TargetTypes_t ATTR_MSS_THROTTLE_CONTROL_RAS_WEIGHT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_THROTTLE_CONTROL_RAS_WEIGHT_PlatInit = false;

/* ATTR_MSS_THROTTLE_CONTROL_CAS_WEIGHT */
typedef uint8_t ATTR_MSS_THROTTLE_CONTROL_CAS_WEIGHT_Type;
const bool ATTR_MSS_THROTTLE_CONTROL_CAS_WEIGHT_Privileged = false;
const TargetTypes_t ATTR_MSS_THROTTLE_CONTROL_CAS_WEIGHT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_THROTTLE_CONTROL_CAS_WEIGHT_PlatInit = false;

/* ATTR_MCBIST_RANDOM_SEED_VALUE */
typedef uint32_t ATTR_MCBIST_RANDOM_SEED_VALUE_Type;
const bool ATTR_MCBIST_RANDOM_SEED_VALUE_Privileged = false;
const TargetTypes_t ATTR_MCBIST_RANDOM_SEED_VALUE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_RANDOM_SEED_VALUE_PlatInit = false;

/* ATTR_MCBIST_RANDOM_SEED_TYPE */
typedef uint8_t ATTR_MCBIST_RANDOM_SEED_TYPE_Type;
const bool ATTR_MCBIST_RANDOM_SEED_TYPE_Privileged = false;
const TargetTypes_t ATTR_MCBIST_RANDOM_SEED_TYPE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_RANDOM_SEED_TYPE_PlatInit = false;

/* ATTR_MCBIST_DDR4_PDA_ENABLE */
typedef uint8_t ATTR_MCBIST_DDR4_PDA_ENABLE_Type;
const bool ATTR_MCBIST_DDR4_PDA_ENABLE_Privileged = false;
const TargetTypes_t ATTR_MCBIST_DDR4_PDA_ENABLE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_DDR4_PDA_ENABLE_PlatInit = false;

/* ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT */
typedef uint8_t ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_Type;
const bool ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_Privileged = false;
const TargetTypes_t ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_PlatInit = true;
#define ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_IDLE */
typedef uint8_t ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_IDLE_Type;
const bool ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_IDLE_Privileged = false;
const TargetTypes_t ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_IDLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_IDLE_PlatInit = true;
#define ATTR_MRW_DIMM_POWER_CURVE_PERCENT_UPLIFT_IDLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MRW_MEM_THROTTLE_DENOMINATOR */
typedef uint32_t ATTR_MRW_MEM_THROTTLE_DENOMINATOR_Type;
const bool ATTR_MRW_MEM_THROTTLE_DENOMINATOR_Privileged = false;
const TargetTypes_t ATTR_MRW_MEM_THROTTLE_DENOMINATOR_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_MEM_THROTTLE_DENOMINATOR_PlatInit = true;
#define ATTR_MRW_MEM_THROTTLE_DENOMINATOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_INIT_STATE */
typedef uint8_t ATTR_MSS_INIT_STATE_Type;
const bool ATTR_MSS_INIT_STATE_Privileged = false;
const TargetTypes_t ATTR_MSS_INIT_STATE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_INIT_STATE_PlatInit = false;
enum ATTR_MSS_INIT_STATE_Enum
{
    ENUM_ATTR_MSS_INIT_STATE_COLD = 0,
    ENUM_ATTR_MSS_INIT_STATE_CLOCKS_ON = 1,
    ENUM_ATTR_MSS_INIT_STATE_DMI_ACTIVE = 2,
};

/* ATTR_MRW_MAX_DRAM_DATABUS_UTIL */
typedef uint32_t ATTR_MRW_MAX_DRAM_DATABUS_UTIL_Type;
const bool ATTR_MRW_MAX_DRAM_DATABUS_UTIL_Privileged = false;
const TargetTypes_t ATTR_MRW_MAX_DRAM_DATABUS_UTIL_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_MAX_DRAM_DATABUS_UTIL_PlatInit = true;
#define ATTR_MRW_MAX_DRAM_DATABUS_UTIL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_EFF_VPD_VERSION */
typedef uint32_t ATTR_MSS_EFF_VPD_VERSION_Type;
const bool ATTR_MSS_EFF_VPD_VERSION_Privileged = false;
const TargetTypes_t ATTR_MSS_EFF_VPD_VERSION_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_EFF_VPD_VERSION_PlatInit = false;

/* ATTR_MSS_NEST_CAPABLE_FREQUENCIES */
typedef uint8_t ATTR_MSS_NEST_CAPABLE_FREQUENCIES_Type;
const bool ATTR_MSS_NEST_CAPABLE_FREQUENCIES_Privileged = false;
const TargetTypes_t ATTR_MSS_NEST_CAPABLE_FREQUENCIES_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_NEST_CAPABLE_FREQUENCIES_PlatInit = false;
enum ATTR_MSS_NEST_CAPABLE_FREQUENCIES_Enum
{
    ENUM_ATTR_MSS_NEST_CAPABLE_FREQUENCIES_NONE = 0,
    ENUM_ATTR_MSS_NEST_CAPABLE_FREQUENCIES_8_0G = 1,
    ENUM_ATTR_MSS_NEST_CAPABLE_FREQUENCIES_9_6G = 2,
    ENUM_ATTR_MSS_NEST_CAPABLE_FREQUENCIES_8_0G_OR_9_6G = 3,
};

/* ATTR_MRW_STRICT_MBA_PLUG_RULE_CHECKING */
typedef uint8_t ATTR_MRW_STRICT_MBA_PLUG_RULE_CHECKING_Type;
const bool ATTR_MRW_STRICT_MBA_PLUG_RULE_CHECKING_Privileged = false;
const TargetTypes_t ATTR_MRW_STRICT_MBA_PLUG_RULE_CHECKING_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_STRICT_MBA_PLUG_RULE_CHECKING_PlatInit = true;
enum ATTR_MRW_STRICT_MBA_PLUG_RULE_CHECKING_Enum
{
    ENUM_ATTR_MRW_STRICT_MBA_PLUG_RULE_CHECKING_FALSE = 0,
    ENUM_ATTR_MRW_STRICT_MBA_PLUG_RULE_CHECKING_TRUE = 1,
};
#define ATTR_MRW_STRICT_MBA_PLUG_RULE_CHECKING_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING */
typedef uint8_t ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING_Type;
const bool ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING_Privileged = false;
const TargetTypes_t ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING_PlatInit = true;
enum ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING_Enum
{
    ENUM_ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING_FALSE = 0,
    ENUM_ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING_TRUE = 1,
};
#define ATTR_MRW_ENHANCED_GROUPING_NO_MIRRORING_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE */
typedef uint8_t ATTR_MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE_Type;
const bool ATTR_MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE_Privileged = false;
const TargetTypes_t ATTR_MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE_PlatInit = true;
enum ATTR_MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE_Enum
{
    ENUM_ATTR_MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE_OFF = 0,
    ENUM_ATTR_MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE_ON = 1,
};
#define ATTR_MRW_CDIMM_MASTER_I2C_TEMP_SENSOR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE */
typedef uint8_t ATTR_MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE_Type;
const bool ATTR_MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE_Privileged = false;
const TargetTypes_t ATTR_MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE_PlatInit = true;
enum ATTR_MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE_Enum
{
    ENUM_ATTR_MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE_OFF = 0,
    ENUM_ATTR_MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE_ON = 1,
};
#define ATTR_MRW_CDIMM_SPARE_I2C_TEMP_SENSOR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_AVDD_OFFSET_DISABLE */
typedef uint8_t ATTR_MSS_AVDD_OFFSET_DISABLE_Type;
const bool ATTR_MSS_AVDD_OFFSET_DISABLE_Privileged = false;
const TargetTypes_t ATTR_MSS_AVDD_OFFSET_DISABLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_AVDD_OFFSET_DISABLE_PlatInit = true;
enum ATTR_MSS_AVDD_OFFSET_DISABLE_Enum
{
    ENUM_ATTR_MSS_AVDD_OFFSET_DISABLE_DISABLE = 1,
    ENUM_ATTR_MSS_AVDD_OFFSET_DISABLE_ENABLE = 0,
};
#define ATTR_MSS_AVDD_OFFSET_DISABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VDD_OFFSET_DISABLE */
typedef uint8_t ATTR_MSS_VDD_OFFSET_DISABLE_Type;
const bool ATTR_MSS_VDD_OFFSET_DISABLE_Privileged = false;
const TargetTypes_t ATTR_MSS_VDD_OFFSET_DISABLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_VDD_OFFSET_DISABLE_PlatInit = true;
enum ATTR_MSS_VDD_OFFSET_DISABLE_Enum
{
    ENUM_ATTR_MSS_VDD_OFFSET_DISABLE_DISABLE = 1,
    ENUM_ATTR_MSS_VDD_OFFSET_DISABLE_ENABLE = 0,
};
#define ATTR_MSS_VDD_OFFSET_DISABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VCS_OFFSET_DISABLE */
typedef uint8_t ATTR_MSS_VCS_OFFSET_DISABLE_Type;
const bool ATTR_MSS_VCS_OFFSET_DISABLE_Privileged = false;
const TargetTypes_t ATTR_MSS_VCS_OFFSET_DISABLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_VCS_OFFSET_DISABLE_PlatInit = true;
enum ATTR_MSS_VCS_OFFSET_DISABLE_Enum
{
    ENUM_ATTR_MSS_VCS_OFFSET_DISABLE_DISABLE = 1,
    ENUM_ATTR_MSS_VCS_OFFSET_DISABLE_ENABLE = 0,
};
#define ATTR_MSS_VCS_OFFSET_DISABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VPP_OFFSET_DISABLE */
typedef uint8_t ATTR_MSS_VPP_OFFSET_DISABLE_Type;
const bool ATTR_MSS_VPP_OFFSET_DISABLE_Privileged = false;
const TargetTypes_t ATTR_MSS_VPP_OFFSET_DISABLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_VPP_OFFSET_DISABLE_PlatInit = true;
enum ATTR_MSS_VPP_OFFSET_DISABLE_Enum
{
    ENUM_ATTR_MSS_VPP_OFFSET_DISABLE_DISABLE = 1,
    ENUM_ATTR_MSS_VPP_OFFSET_DISABLE_ENABLE = 0,
};
#define ATTR_MSS_VPP_OFFSET_DISABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VDDR_OFFSET_DISABLE */
typedef uint8_t ATTR_MSS_VDDR_OFFSET_DISABLE_Type;
const bool ATTR_MSS_VDDR_OFFSET_DISABLE_Privileged = false;
const TargetTypes_t ATTR_MSS_VDDR_OFFSET_DISABLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_VDDR_OFFSET_DISABLE_PlatInit = true;
enum ATTR_MSS_VDDR_OFFSET_DISABLE_Enum
{
    ENUM_ATTR_MSS_VDDR_OFFSET_DISABLE_DISABLE = 1,
    ENUM_ATTR_MSS_VDDR_OFFSET_DISABLE_ENABLE = 0,
};
#define ATTR_MSS_VDDR_OFFSET_DISABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_AVDD_SLOPE_ACTIVE */
typedef uint32_t ATTR_MSS_AVDD_SLOPE_ACTIVE_Type;
const bool ATTR_MSS_AVDD_SLOPE_ACTIVE_Privileged = false;
const TargetTypes_t ATTR_MSS_AVDD_SLOPE_ACTIVE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_AVDD_SLOPE_ACTIVE_PlatInit = true;
#define ATTR_MSS_AVDD_SLOPE_ACTIVE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_AVDD_SLOPE_INACTIVE */
typedef uint32_t ATTR_MSS_AVDD_SLOPE_INACTIVE_Type;
const bool ATTR_MSS_AVDD_SLOPE_INACTIVE_Privileged = false;
const TargetTypes_t ATTR_MSS_AVDD_SLOPE_INACTIVE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_AVDD_SLOPE_INACTIVE_PlatInit = true;
#define ATTR_MSS_AVDD_SLOPE_INACTIVE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_AVDD_SLOPE_INTERCEPT */
typedef uint32_t ATTR_MSS_AVDD_SLOPE_INTERCEPT_Type;
const bool ATTR_MSS_AVDD_SLOPE_INTERCEPT_Privileged = false;
const TargetTypes_t ATTR_MSS_AVDD_SLOPE_INTERCEPT_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_AVDD_SLOPE_INTERCEPT_PlatInit = true;
#define ATTR_MSS_AVDD_SLOPE_INTERCEPT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VDD_SLOPE_ACTIVE */
typedef uint32_t ATTR_MSS_VDD_SLOPE_ACTIVE_Type;
const bool ATTR_MSS_VDD_SLOPE_ACTIVE_Privileged = false;
const TargetTypes_t ATTR_MSS_VDD_SLOPE_ACTIVE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VDD_SLOPE_ACTIVE_PlatInit = true;
#define ATTR_MSS_VDD_SLOPE_ACTIVE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VDD_SLOPE_INACTIVE */
typedef uint32_t ATTR_MSS_VDD_SLOPE_INACTIVE_Type;
const bool ATTR_MSS_VDD_SLOPE_INACTIVE_Privileged = false;
const TargetTypes_t ATTR_MSS_VDD_SLOPE_INACTIVE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VDD_SLOPE_INACTIVE_PlatInit = true;
#define ATTR_MSS_VDD_SLOPE_INACTIVE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VDD_SLOPE_INTERCEPT */
typedef uint32_t ATTR_MSS_VDD_SLOPE_INTERCEPT_Type;
const bool ATTR_MSS_VDD_SLOPE_INTERCEPT_Privileged = false;
const TargetTypes_t ATTR_MSS_VDD_SLOPE_INTERCEPT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VDD_SLOPE_INTERCEPT_PlatInit = true;
#define ATTR_MSS_VDD_SLOPE_INTERCEPT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VCS_SLOPE_ACTIVE */
typedef uint32_t ATTR_MSS_VCS_SLOPE_ACTIVE_Type;
const bool ATTR_MSS_VCS_SLOPE_ACTIVE_Privileged = false;
const TargetTypes_t ATTR_MSS_VCS_SLOPE_ACTIVE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VCS_SLOPE_ACTIVE_PlatInit = true;
#define ATTR_MSS_VCS_SLOPE_ACTIVE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VCS_SLOPE_INACTIVE */
typedef uint32_t ATTR_MSS_VCS_SLOPE_INACTIVE_Type;
const bool ATTR_MSS_VCS_SLOPE_INACTIVE_Privileged = false;
const TargetTypes_t ATTR_MSS_VCS_SLOPE_INACTIVE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VCS_SLOPE_INACTIVE_PlatInit = true;
#define ATTR_MSS_VCS_SLOPE_INACTIVE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VCS_SLOPE_INTERCEPT */
typedef uint32_t ATTR_MSS_VCS_SLOPE_INTERCEPT_Type;
const bool ATTR_MSS_VCS_SLOPE_INTERCEPT_Privileged = false;
const TargetTypes_t ATTR_MSS_VCS_SLOPE_INTERCEPT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VCS_SLOPE_INTERCEPT_PlatInit = true;
#define ATTR_MSS_VCS_SLOPE_INTERCEPT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VPP_SLOPE */
typedef uint32_t ATTR_MSS_VPP_SLOPE_Type;
const bool ATTR_MSS_VPP_SLOPE_Privileged = false;
const TargetTypes_t ATTR_MSS_VPP_SLOPE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VPP_SLOPE_PlatInit = true;
#define ATTR_MSS_VPP_SLOPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VPP_SLOPE_INTERCEPT */
typedef uint32_t ATTR_MSS_VPP_SLOPE_INTERCEPT_Type;
const bool ATTR_MSS_VPP_SLOPE_INTERCEPT_Privileged = false;
const TargetTypes_t ATTR_MSS_VPP_SLOPE_INTERCEPT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VPP_SLOPE_INTERCEPT_PlatInit = true;
#define ATTR_MSS_VPP_SLOPE_INTERCEPT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_DDR3_VDDR_SLOPE */
typedef uint32_t ATTR_MSS_DDR3_VDDR_SLOPE_Type;
const bool ATTR_MSS_DDR3_VDDR_SLOPE_Privileged = false;
const TargetTypes_t ATTR_MSS_DDR3_VDDR_SLOPE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_DDR3_VDDR_SLOPE_PlatInit = true;
#define ATTR_MSS_DDR3_VDDR_SLOPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_DDR3_VDDR_INTERCEPT */
typedef uint32_t ATTR_MSS_DDR3_VDDR_INTERCEPT_Type;
const bool ATTR_MSS_DDR3_VDDR_INTERCEPT_Privileged = false;
const TargetTypes_t ATTR_MSS_DDR3_VDDR_INTERCEPT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_DDR3_VDDR_INTERCEPT_PlatInit = true;
#define ATTR_MSS_DDR3_VDDR_INTERCEPT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_DDR4_VDDR_SLOPE */
typedef uint32_t ATTR_MSS_DDR4_VDDR_SLOPE_Type;
const bool ATTR_MSS_DDR4_VDDR_SLOPE_Privileged = false;
const TargetTypes_t ATTR_MSS_DDR4_VDDR_SLOPE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_DDR4_VDDR_SLOPE_PlatInit = true;
#define ATTR_MSS_DDR4_VDDR_SLOPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_DDR4_VDDR_INTERCEPT */
typedef uint32_t ATTR_MSS_DDR4_VDDR_INTERCEPT_Type;
const bool ATTR_MSS_DDR4_VDDR_INTERCEPT_Privileged = false;
const TargetTypes_t ATTR_MSS_DDR4_VDDR_INTERCEPT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_DDR4_VDDR_INTERCEPT_PlatInit = true;
#define ATTR_MSS_DDR4_VDDR_INTERCEPT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VOLT_OVERRIDE */
typedef uint8_t ATTR_MSS_VOLT_OVERRIDE_Type;
const bool ATTR_MSS_VOLT_OVERRIDE_Privileged = false;
const TargetTypes_t ATTR_MSS_VOLT_OVERRIDE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VOLT_OVERRIDE_PlatInit = true;
enum ATTR_MSS_VOLT_OVERRIDE_Enum
{
    ENUM_ATTR_MSS_VOLT_OVERRIDE_NONE = 0x00,
    ENUM_ATTR_MSS_VOLT_OVERRIDE_VOLT_135 = 0x01,
    ENUM_ATTR_MSS_VOLT_OVERRIDE_VOLT_120 = 0x02,
};
#define ATTR_MSS_VOLT_OVERRIDE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VOLT_COMPLIANT_DIMMS */
typedef uint8_t ATTR_MSS_VOLT_COMPLIANT_DIMMS_Type;
const bool ATTR_MSS_VOLT_COMPLIANT_DIMMS_Privileged = false;
const TargetTypes_t ATTR_MSS_VOLT_COMPLIANT_DIMMS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_VOLT_COMPLIANT_DIMMS_PlatInit = true;
enum ATTR_MSS_VOLT_COMPLIANT_DIMMS_Enum
{
    ENUM_ATTR_MSS_VOLT_COMPLIANT_DIMMS_PROCEDURE_DEFINED = 0x00,
    ENUM_ATTR_MSS_VOLT_COMPLIANT_DIMMS_ALL_VOLTAGES = 0x01,
};
#define ATTR_MSS_VOLT_COMPLIANT_DIMMS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MRW_MCS_PREFETCH_RETRY_THRESHOLD */
typedef uint8_t ATTR_MRW_MCS_PREFETCH_RETRY_THRESHOLD_Type;
const bool ATTR_MRW_MCS_PREFETCH_RETRY_THRESHOLD_Privileged = false;
const TargetTypes_t ATTR_MRW_MCS_PREFETCH_RETRY_THRESHOLD_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_MCS_PREFETCH_RETRY_THRESHOLD_PlatInit = true;
#define ATTR_MRW_MCS_PREFETCH_RETRY_THRESHOLD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MRW_POWER_CONTROL_REQUESTED */
typedef uint8_t ATTR_MRW_POWER_CONTROL_REQUESTED_Type;
const bool ATTR_MRW_POWER_CONTROL_REQUESTED_Privileged = false;
const TargetTypes_t ATTR_MRW_POWER_CONTROL_REQUESTED_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_POWER_CONTROL_REQUESTED_PlatInit = true;
enum ATTR_MRW_POWER_CONTROL_REQUESTED_Enum
{
    ENUM_ATTR_MRW_POWER_CONTROL_REQUESTED_OFF = 0x00,
    ENUM_ATTR_MRW_POWER_CONTROL_REQUESTED_SLOWEXIT = 0x01,
    ENUM_ATTR_MRW_POWER_CONTROL_REQUESTED_FASTEXIT = 0x02,
};
#define ATTR_MRW_POWER_CONTROL_REQUESTED_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_AVDD_OFFSET */
typedef uint32_t ATTR_MSS_AVDD_OFFSET_Type;
const bool ATTR_MSS_AVDD_OFFSET_Privileged = false;
const TargetTypes_t ATTR_MSS_AVDD_OFFSET_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_AVDD_OFFSET_PlatInit = false;

/* ATTR_MSS_VDD_OFFSET */
typedef uint32_t ATTR_MSS_VDD_OFFSET_Type;
const bool ATTR_MSS_VDD_OFFSET_Privileged = false;
const TargetTypes_t ATTR_MSS_VDD_OFFSET_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VDD_OFFSET_PlatInit = false;

/* ATTR_MSS_VCS_OFFSET */
typedef uint32_t ATTR_MSS_VCS_OFFSET_Type;
const bool ATTR_MSS_VCS_OFFSET_Privileged = false;
const TargetTypes_t ATTR_MSS_VCS_OFFSET_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VCS_OFFSET_PlatInit = false;

/* ATTR_MSS_VPP_OFFSET */
typedef uint32_t ATTR_MSS_VPP_OFFSET_Type;
const bool ATTR_MSS_VPP_OFFSET_Privileged = false;
const TargetTypes_t ATTR_MSS_VPP_OFFSET_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VPP_OFFSET_PlatInit = false;

/* ATTR_MSS_VDDR_OFFSET */
typedef uint32_t ATTR_MSS_VDDR_OFFSET_Type;
const bool ATTR_MSS_VDDR_OFFSET_Privileged = false;
const TargetTypes_t ATTR_MSS_VDDR_OFFSET_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_VDDR_OFFSET_PlatInit = false;

/* ATTR_MSS_VDDR_OVERIDE_SPD */
typedef uint8_t ATTR_MSS_VDDR_OVERIDE_SPD_Type;
const bool ATTR_MSS_VDDR_OVERIDE_SPD_Privileged = false;
const TargetTypes_t ATTR_MSS_VDDR_OVERIDE_SPD_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_VDDR_OVERIDE_SPD_PlatInit = true;
enum ATTR_MSS_VDDR_OVERIDE_SPD_Enum
{
    ENUM_ATTR_MSS_VDDR_OVERIDE_SPD_NONE = 0x00,
    ENUM_ATTR_MSS_VDDR_OVERIDE_SPD_VOLT_1350 = 0x01,
    ENUM_ATTR_MSS_VDDR_OVERIDE_SPD_VOLT_1200 = 0x02,
};
#define ATTR_MSS_VDDR_OVERIDE_SPD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_ISDIMMTOC4DQ */
typedef uint8_t ATTR_VPD_ISDIMMTOC4DQ_Type[4][80];
const bool ATTR_VPD_ISDIMMTOC4DQ_Privileged = false;
const TargetTypes_t ATTR_VPD_ISDIMMTOC4DQ_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_VPD_ISDIMMTOC4DQ_PlatInit = true;
#define ATTR_VPD_ISDIMMTOC4DQ_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_ISDIMMTOC4DQS */
typedef uint8_t ATTR_VPD_ISDIMMTOC4DQS_Type[4][20];
const bool ATTR_VPD_ISDIMMTOC4DQS_Privileged = false;
const TargetTypes_t ATTR_VPD_ISDIMMTOC4DQS_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_VPD_ISDIMMTOC4DQS_PlatInit = true;
#define ATTR_VPD_ISDIMMTOC4DQS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_ISDIMM_POWER_CURVE_ALGORITHM_VERSION */
typedef uint32_t ATTR_ISDIMM_POWER_CURVE_ALGORITHM_VERSION_Type;
const bool ATTR_ISDIMM_POWER_CURVE_ALGORITHM_VERSION_Privileged = false;
const TargetTypes_t ATTR_ISDIMM_POWER_CURVE_ALGORITHM_VERSION_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_ISDIMM_POWER_CURVE_ALGORITHM_VERSION_PlatInit = true;

/* ATTR_MRW_DDR3_VDDR_MAX_LIMIT */
typedef uint32_t ATTR_MRW_DDR3_VDDR_MAX_LIMIT_Type;
const bool ATTR_MRW_DDR3_VDDR_MAX_LIMIT_Privileged = false;
const TargetTypes_t ATTR_MRW_DDR3_VDDR_MAX_LIMIT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MRW_DDR3_VDDR_MAX_LIMIT_PlatInit = true;
#define ATTR_MRW_DDR3_VDDR_MAX_LIMIT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MRW_DDR4_VDDR_MAX_LIMIT */
typedef uint32_t ATTR_MRW_DDR4_VDDR_MAX_LIMIT_Type;
const bool ATTR_MRW_DDR4_VDDR_MAX_LIMIT_Privileged = false;
const TargetTypes_t ATTR_MRW_DDR4_VDDR_MAX_LIMIT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MRW_DDR4_VDDR_MAX_LIMIT_PlatInit = true;
#define ATTR_MRW_DDR4_VDDR_MAX_LIMIT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MRW_MEM_SENSOR_CACHE_ADDR_MAP */
typedef uint32_t ATTR_MRW_MEM_SENSOR_CACHE_ADDR_MAP_Type;
const bool ATTR_MRW_MEM_SENSOR_CACHE_ADDR_MAP_Privileged = false;
const TargetTypes_t ATTR_MRW_MEM_SENSOR_CACHE_ADDR_MAP_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MRW_MEM_SENSOR_CACHE_ADDR_MAP_PlatInit = true;
#define ATTR_MRW_MEM_SENSOR_CACHE_ADDR_MAP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_VMEM_REGULATOR_MAX_DIMM_COUNT */
typedef uint8_t ATTR_MSS_VMEM_REGULATOR_MAX_DIMM_COUNT_Type;
const bool ATTR_MSS_VMEM_REGULATOR_MAX_DIMM_COUNT_Privileged = false;
const TargetTypes_t ATTR_MSS_VMEM_REGULATOR_MAX_DIMM_COUNT_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MSS_VMEM_REGULATOR_MAX_DIMM_COUNT_PlatInit = false;

/* ATTR_MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE */
typedef uint8_t ATTR_MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE_Type;
const bool ATTR_MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE_Privileged = false;
const TargetTypes_t ATTR_MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE_PlatInit = true;
enum ATTR_MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE_Enum
{
    ENUM_ATTR_MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE_FALSE = 0,
    ENUM_ATTR_MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE_TRUE = 1,
};
#define ATTR_MRW_VMEM_REGULATOR_POWER_LIMIT_PER_DIMM_ADJ_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MRW_MAX_NUMBER_DIMMS_POSSIBLE_PER_VMEM_REGULATOR */
typedef uint8_t ATTR_MRW_MAX_NUMBER_DIMMS_POSSIBLE_PER_VMEM_REGULATOR_Type;
const bool ATTR_MRW_MAX_NUMBER_DIMMS_POSSIBLE_PER_VMEM_REGULATOR_Privileged = false;
const TargetTypes_t ATTR_MRW_MAX_NUMBER_DIMMS_POSSIBLE_PER_VMEM_REGULATOR_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_MAX_NUMBER_DIMMS_POSSIBLE_PER_VMEM_REGULATOR_PlatInit = true;
#define ATTR_MRW_MAX_NUMBER_DIMMS_POSSIBLE_PER_VMEM_REGULATOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MRW_VMEM_REGULATOR_MEMORY_POWER_LIMIT_PER_DIMM */
typedef uint32_t ATTR_MRW_VMEM_REGULATOR_MEMORY_POWER_LIMIT_PER_DIMM_Type;
const bool ATTR_MRW_VMEM_REGULATOR_MEMORY_POWER_LIMIT_PER_DIMM_Privileged = false;
const TargetTypes_t ATTR_MRW_VMEM_REGULATOR_MEMORY_POWER_LIMIT_PER_DIMM_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MRW_VMEM_REGULATOR_MEMORY_POWER_LIMIT_PER_DIMM_PlatInit = true;
#define ATTR_MRW_VMEM_REGULATOR_MEMORY_POWER_LIMIT_PER_DIMM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_L2_R_T0_EPS */
typedef uint32_t ATTR_L2_R_T0_EPS_Type;
const bool ATTR_L2_R_T0_EPS_Privileged = false;
const TargetTypes_t ATTR_L2_R_T0_EPS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_L2_R_T0_EPS_PlatInit = false;

/* ATTR_L2_R_T1_EPS */
typedef uint32_t ATTR_L2_R_T1_EPS_Type;
const bool ATTR_L2_R_T1_EPS_Privileged = false;
const TargetTypes_t ATTR_L2_R_T1_EPS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_L2_R_T1_EPS_PlatInit = false;

/* ATTR_L2_R_T2_EPS */
typedef uint32_t ATTR_L2_R_T2_EPS_Type;
const bool ATTR_L2_R_T2_EPS_Privileged = false;
const TargetTypes_t ATTR_L2_R_T2_EPS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_L2_R_T2_EPS_PlatInit = false;

/* ATTR_L2_FORCE_R_T2_EPS */
typedef uint8_t ATTR_L2_FORCE_R_T2_EPS_Type;
const bool ATTR_L2_FORCE_R_T2_EPS_Privileged = false;
const TargetTypes_t ATTR_L2_FORCE_R_T2_EPS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_L2_FORCE_R_T2_EPS_PlatInit = false;
enum ATTR_L2_FORCE_R_T2_EPS_Enum
{
    ENUM_ATTR_L2_FORCE_R_T2_EPS_OFF = 0x00,
    ENUM_ATTR_L2_FORCE_R_T2_EPS_ON = 0x01,
};

/* ATTR_L2_W_EPS */
typedef uint32_t ATTR_L2_W_EPS_Type;
const bool ATTR_L2_W_EPS_Privileged = false;
const TargetTypes_t ATTR_L2_W_EPS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_L2_W_EPS_PlatInit = false;

/* ATTR_L3_R_T0_EPS */
typedef uint32_t ATTR_L3_R_T0_EPS_Type;
const bool ATTR_L3_R_T0_EPS_Privileged = false;
const TargetTypes_t ATTR_L3_R_T0_EPS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_L3_R_T0_EPS_PlatInit = false;

/* ATTR_L3_R_T1_EPS */
typedef uint32_t ATTR_L3_R_T1_EPS_Type;
const bool ATTR_L3_R_T1_EPS_Privileged = false;
const TargetTypes_t ATTR_L3_R_T1_EPS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_L3_R_T1_EPS_PlatInit = false;

/* ATTR_L3_R_T2_EPS */
typedef uint32_t ATTR_L3_R_T2_EPS_Type;
const bool ATTR_L3_R_T2_EPS_Privileged = false;
const TargetTypes_t ATTR_L3_R_T2_EPS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_L3_R_T2_EPS_PlatInit = false;

/* ATTR_L3_FORCE_R_T2_EPS */
typedef uint8_t ATTR_L3_FORCE_R_T2_EPS_Type;
const bool ATTR_L3_FORCE_R_T2_EPS_Privileged = false;
const TargetTypes_t ATTR_L3_FORCE_R_T2_EPS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_L3_FORCE_R_T2_EPS_PlatInit = false;
enum ATTR_L3_FORCE_R_T2_EPS_Enum
{
    ENUM_ATTR_L3_FORCE_R_T2_EPS_OFF = 0x00,
    ENUM_ATTR_L3_FORCE_R_T2_EPS_ON = 0x01,
};

/* ATTR_L3_W_EPS */
typedef uint32_t ATTR_L3_W_EPS_Type;
const bool ATTR_L3_W_EPS_Privileged = false;
const TargetTypes_t ATTR_L3_W_EPS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_L3_W_EPS_PlatInit = false;

/* ATTR_SCRATCH_UINT8_1 */
typedef uint8_t ATTR_SCRATCH_UINT8_1_Type;
const bool ATTR_SCRATCH_UINT8_1_Privileged = false;
const TargetTypes_t ATTR_SCRATCH_UINT8_1_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT8_1_PlatInit = false;

/* ATTR_SCRATCH_UINT8_2 */
typedef uint8_t ATTR_SCRATCH_UINT8_2_Type;
const bool ATTR_SCRATCH_UINT8_2_Privileged = false;
const TargetTypes_t ATTR_SCRATCH_UINT8_2_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT8_2_PlatInit = false;

/* ATTR_SCRATCH_UINT32_1 */
typedef uint32_t ATTR_SCRATCH_UINT32_1_Type;
const bool ATTR_SCRATCH_UINT32_1_Privileged = false;
const TargetTypes_t ATTR_SCRATCH_UINT32_1_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT32_1_PlatInit = false;

/* ATTR_SCRATCH_UINT32_2 */
typedef uint32_t ATTR_SCRATCH_UINT32_2_Type;
const bool ATTR_SCRATCH_UINT32_2_Privileged = false;
const TargetTypes_t ATTR_SCRATCH_UINT32_2_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT32_2_PlatInit = false;

/* ATTR_SCRATCH_UINT64_1 */
typedef uint64_t ATTR_SCRATCH_UINT64_1_Type;
const bool ATTR_SCRATCH_UINT64_1_Privileged = false;
const TargetTypes_t ATTR_SCRATCH_UINT64_1_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT64_1_PlatInit = false;

/* ATTR_SCRATCH_UINT64_2 */
typedef uint64_t ATTR_SCRATCH_UINT64_2_Type;
const bool ATTR_SCRATCH_UINT64_2_Privileged = false;
const TargetTypes_t ATTR_SCRATCH_UINT64_2_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT64_2_PlatInit = false;
enum ATTR_SCRATCH_UINT64_2_Enum
{
    ENUM_ATTR_SCRATCH_UINT64_2_VAL_A = 0ULL,
    ENUM_ATTR_SCRATCH_UINT64_2_VAL_B = 5ULL,
    ENUM_ATTR_SCRATCH_UINT64_2_VAL_C = 0xffffffffffffffffULL,
};

/* ATTR_SCRATCH_UINT8_ARRAY_1 */
typedef uint8_t ATTR_SCRATCH_UINT8_ARRAY_1_Type[32];
const bool ATTR_SCRATCH_UINT8_ARRAY_1_Privileged = false;
const TargetTypes_t ATTR_SCRATCH_UINT8_ARRAY_1_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT8_ARRAY_1_PlatInit = false;

/* ATTR_SCRATCH_UINT8_ARRAY_2 */
typedef uint8_t ATTR_SCRATCH_UINT8_ARRAY_2_Type[2][3][4];
const bool ATTR_SCRATCH_UINT8_ARRAY_2_Privileged = false;
const TargetTypes_t ATTR_SCRATCH_UINT8_ARRAY_2_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT8_ARRAY_2_PlatInit = false;

/* ATTR_SCRATCH_UINT32_ARRAY_1 */
typedef uint32_t ATTR_SCRATCH_UINT32_ARRAY_1_Type[8];
const bool ATTR_SCRATCH_UINT32_ARRAY_1_Privileged = false;
const TargetTypes_t ATTR_SCRATCH_UINT32_ARRAY_1_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT32_ARRAY_1_PlatInit = false;

/* ATTR_SCRATCH_UINT32_ARRAY_2 */
typedef uint32_t ATTR_SCRATCH_UINT32_ARRAY_2_Type[2][3];
const bool ATTR_SCRATCH_UINT32_ARRAY_2_Privileged = false;
const TargetTypes_t ATTR_SCRATCH_UINT32_ARRAY_2_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT32_ARRAY_2_PlatInit = false;

/* ATTR_SCRATCH_UINT64_ARRAY_1 */
typedef uint64_t ATTR_SCRATCH_UINT64_ARRAY_1_Type[4];
const bool ATTR_SCRATCH_UINT64_ARRAY_1_Privileged = false;
const TargetTypes_t ATTR_SCRATCH_UINT64_ARRAY_1_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT64_ARRAY_1_PlatInit = false;

/* ATTR_SCRATCH_UINT64_ARRAY_2 */
typedef uint64_t ATTR_SCRATCH_UINT64_ARRAY_2_Type[2][2];
const bool ATTR_SCRATCH_UINT64_ARRAY_2_Privileged = false;
const TargetTypes_t ATTR_SCRATCH_UINT64_ARRAY_2_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT64_ARRAY_2_PlatInit = false;
enum ATTR_SCRATCH_UINT64_ARRAY_2_Enum
{
    ENUM_ATTR_SCRATCH_UINT64_ARRAY_2_VAL_A = 0x0123456789abcdefULL,
    ENUM_ATTR_SCRATCH_UINT64_ARRAY_2_VAL_B = 0ULL,
    ENUM_ATTR_SCRATCH_UINT64_ARRAY_2_VAL_C = 0xffffffffffffffffULL,
};

/* ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8 */
typedef uint8_t ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8_Type[1][3][5];
const bool ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8_Privileged = false;
const TargetTypes_t ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8_PlatInit = true;

/* ATTR_EXECUTION_PLATFORM */
typedef uint8_t ATTR_EXECUTION_PLATFORM_Type;
const bool ATTR_EXECUTION_PLATFORM_Privileged = false;
const TargetTypes_t ATTR_EXECUTION_PLATFORM_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_EXECUTION_PLATFORM_PlatInit = true;
enum ATTR_EXECUTION_PLATFORM_Enum
{
    ENUM_ATTR_EXECUTION_PLATFORM_HOST = 0x01,
    ENUM_ATTR_EXECUTION_PLATFORM_FSP = 0x02,
    ENUM_ATTR_EXECUTION_PLATFORM_OCC = 0x03,
};
#define ATTR_EXECUTION_PLATFORM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_IS_SIMULATION */
typedef uint8_t ATTR_IS_SIMULATION_Type;
const bool ATTR_IS_SIMULATION_Privileged = false;
const TargetTypes_t ATTR_IS_SIMULATION_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_IS_SIMULATION_PlatInit = true;
#define ATTR_IS_SIMULATION_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MNFG_FLAGS */
typedef uint64_t ATTR_MNFG_FLAGS_Type;
const bool ATTR_MNFG_FLAGS_Privileged = false;
const TargetTypes_t ATTR_MNFG_FLAGS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MNFG_FLAGS_PlatInit = true;
enum ATTR_MNFG_FLAGS_Enum
{
    ENUM_ATTR_MNFG_FLAGS_MNFG_NO_FLAG                        = 0x0000000000000000ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_THRESHOLDS                     = 0x0000000000000001ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_AVP_ENABLE                     = 0x0000000000000002ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_HDAT_AVP_ENABLE                = 0x0000000000000004ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_SRC_TERM                       = 0x0000000000000008ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_IPL_MEMORY_CE_CHECKING         = 0x0000000000000010ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_FAST_BACKGROUND_SCRUB          = 0x0000000000000020ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_TEST_DRAM_REPAIRS              = 0x0000000000000040ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_DISABLE_DRAM_REPAIRS           = 0x0000000000000080ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_ENABLE_EXHAUSTIVE_PATTERN_TEST = 0x0000000000000100ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_ENABLE_STANDARD_PATTERN_TEST   = 0x0000000000000200ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_ENABLE_MINIMUM_PATTERN_TEST    = 0x0000000000000400ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_DISABLE_FABRIC_eREPAIR         = 0x0000000000000800ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_DISABLE_MEMORY_eREPAIR         = 0x0000000000001000ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_FABRIC_DEPLOY_LANE_SPARES      = 0x0000000000002000ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_DMI_DEPLOY_LANE_SPARES         = 0x0000000000004000ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_PSI_DIAGNOSTIC                 = 0x0000000000008000ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_BRAZOS_WRAP_CONFIG             = 0x0000000000010000ULL,
};
#define ATTR_MNFG_FLAGS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_IS_MPIPL */
typedef uint8_t ATTR_IS_MPIPL_Type;
const bool ATTR_IS_MPIPL_Privileged = false;
const TargetTypes_t ATTR_IS_MPIPL_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_IS_MPIPL_PlatInit = true;

/* ATTR_PROC_EPS_TABLE_TYPE */
typedef uint8_t ATTR_PROC_EPS_TABLE_TYPE_Type;
const bool ATTR_PROC_EPS_TABLE_TYPE_Privileged = false;
const TargetTypes_t ATTR_PROC_EPS_TABLE_TYPE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PROC_EPS_TABLE_TYPE_PlatInit = true;
enum ATTR_PROC_EPS_TABLE_TYPE_Enum
{
    ENUM_ATTR_PROC_EPS_TABLE_TYPE_EPS_TYPE_LE = 0x01,
    ENUM_ATTR_PROC_EPS_TABLE_TYPE_EPS_TYPE_HE = 0x02,
    ENUM_ATTR_PROC_EPS_TABLE_TYPE_EPS_TYPE_1S = 0x03,
};
#define ATTR_PROC_EPS_TABLE_TYPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FABRIC_PUMP_MODE */
typedef uint8_t ATTR_PROC_FABRIC_PUMP_MODE_Type;
const bool ATTR_PROC_FABRIC_PUMP_MODE_Privileged = false;
const TargetTypes_t ATTR_PROC_FABRIC_PUMP_MODE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PROC_FABRIC_PUMP_MODE_PlatInit = true;
enum ATTR_PROC_FABRIC_PUMP_MODE_Enum
{
    ENUM_ATTR_PROC_FABRIC_PUMP_MODE_MODE1 = 0x01,
    ENUM_ATTR_PROC_FABRIC_PUMP_MODE_MODE2 = 0x02,
};
#define ATTR_PROC_FABRIC_PUMP_MODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_X_BUS_WIDTH */
typedef uint8_t ATTR_PROC_X_BUS_WIDTH_Type;
const bool ATTR_PROC_X_BUS_WIDTH_Privileged = false;
const TargetTypes_t ATTR_PROC_X_BUS_WIDTH_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PROC_X_BUS_WIDTH_PlatInit = true;
enum ATTR_PROC_X_BUS_WIDTH_Enum
{
    ENUM_ATTR_PROC_X_BUS_WIDTH_W4BYTE = 0x01,
    ENUM_ATTR_PROC_X_BUS_WIDTH_W8BYTE = 0x02,
};
#define ATTR_PROC_X_BUS_WIDTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_ALL_MCS_IN_INTERLEAVING_GROUP */
typedef uint8_t ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_Type;
const bool ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_Privileged = false;
const TargetTypes_t ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_PlatInit = true;
#define ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_NEST_FREQ_MHZ */
typedef uint32_t ATTR_NEST_FREQ_MHZ_Type;
const bool ATTR_NEST_FREQ_MHZ_Privileged = false;
const TargetTypes_t ATTR_NEST_FREQ_MHZ_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_NEST_FREQ_MHZ_PlatInit = true;

/* ATTR_BOOT_FREQ_MHZ */
typedef uint32_t ATTR_BOOT_FREQ_MHZ_Type;
const bool ATTR_BOOT_FREQ_MHZ_Privileged = false;
const TargetTypes_t ATTR_BOOT_FREQ_MHZ_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_BOOT_FREQ_MHZ_PlatInit = true;

/* ATTR_EX_GARD_BITS */
typedef uint32_t ATTR_EX_GARD_BITS_Type;
const bool ATTR_EX_GARD_BITS_Privileged = false;
const TargetTypes_t ATTR_EX_GARD_BITS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_EX_GARD_BITS_PlatInit = true;

/* ATTR_DISABLE_I2C_ACCESS */
typedef uint8_t ATTR_DISABLE_I2C_ACCESS_Type;
const bool ATTR_DISABLE_I2C_ACCESS_Privileged = false;
const TargetTypes_t ATTR_DISABLE_I2C_ACCESS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_DISABLE_I2C_ACCESS_PlatInit = true;
#define ATTR_DISABLE_I2C_ACCESS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PIB_I2C_REFCLOCK */
typedef uint32_t ATTR_PIB_I2C_REFCLOCK_Type;
const bool ATTR_PIB_I2C_REFCLOCK_Privileged = false;
const TargetTypes_t ATTR_PIB_I2C_REFCLOCK_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PIB_I2C_REFCLOCK_PlatInit = true;

/* ATTR_PIB_I2C_NEST_PLL */
typedef uint32_t ATTR_PIB_I2C_NEST_PLL_Type;
const bool ATTR_PIB_I2C_NEST_PLL_Privileged = false;
const TargetTypes_t ATTR_PIB_I2C_NEST_PLL_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PIB_I2C_NEST_PLL_PlatInit = true;

/* ATTR_SBE_IMAGE_OFFSET */
typedef uint32_t ATTR_SBE_IMAGE_OFFSET_Type;
const bool ATTR_SBE_IMAGE_OFFSET_Privileged = false;
const TargetTypes_t ATTR_SBE_IMAGE_OFFSET_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SBE_IMAGE_OFFSET_PlatInit = true;

/* ATTR_BOOT_VOLTAGE */
typedef uint32_t ATTR_BOOT_VOLTAGE_Type;
const bool ATTR_BOOT_VOLTAGE_Privileged = false;
const TargetTypes_t ATTR_BOOT_VOLTAGE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_BOOT_VOLTAGE_PlatInit = true;

/* ATTR_RISK_LEVEL */
typedef uint32_t ATTR_RISK_LEVEL_Type;
const bool ATTR_RISK_LEVEL_Privileged = false;
const TargetTypes_t ATTR_RISK_LEVEL_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_RISK_LEVEL_PlatInit = true;
enum ATTR_RISK_LEVEL_Enum
{
    ENUM_ATTR_RISK_LEVEL_RL0 = 0x000,
    ENUM_ATTR_RISK_LEVEL_RL100 = 0x100,
};
#define ATTR_RISK_LEVEL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_REFCLOCK_RCVR_TERM */
typedef uint8_t ATTR_PROC_REFCLOCK_RCVR_TERM_Type;
const bool ATTR_PROC_REFCLOCK_RCVR_TERM_Privileged = false;
const TargetTypes_t ATTR_PROC_REFCLOCK_RCVR_TERM_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PROC_REFCLOCK_RCVR_TERM_PlatInit = true;
#define ATTR_PROC_REFCLOCK_RCVR_TERM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PCI_REFCLOCK_RCVR_TERM */
typedef uint8_t ATTR_PCI_REFCLOCK_RCVR_TERM_Type;
const bool ATTR_PCI_REFCLOCK_RCVR_TERM_Privileged = false;
const TargetTypes_t ATTR_PCI_REFCLOCK_RCVR_TERM_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PCI_REFCLOCK_RCVR_TERM_PlatInit = true;
#define ATTR_PCI_REFCLOCK_RCVR_TERM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM */
typedef uint8_t ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM_Type;
const bool ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM_Privileged = false;
const TargetTypes_t ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM_PlatInit = true;
#define ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM */
typedef uint8_t ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM_Type;
const bool ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM_Privileged = false;
const TargetTypes_t ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM_PlatInit = true;
#define ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEM_FILTER_PLL_SOURCE */
typedef uint8_t ATTR_MEM_FILTER_PLL_SOURCE_Type;
const bool ATTR_MEM_FILTER_PLL_SOURCE_Privileged = false;
const TargetTypes_t ATTR_MEM_FILTER_PLL_SOURCE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MEM_FILTER_PLL_SOURCE_PlatInit = true;
enum ATTR_MEM_FILTER_PLL_SOURCE_Enum
{
    ENUM_ATTR_MEM_FILTER_PLL_SOURCE_PROC_REFCLK = 0x0,
    ENUM_ATTR_MEM_FILTER_PLL_SOURCE_PCI_REFCLK = 0x1,
};
#define ATTR_MEM_FILTER_PLL_SOURCE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MULTI_SCOM_BUFFER_MAX_SIZE */
typedef uint64_t ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_Type;
const bool ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_Privileged = false;
const TargetTypes_t ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_PlatInit = true;
enum ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_Enum
{
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_1KB   = 0x0000000000000400ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_2KB   = 0x0000000000000800ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_4KB   = 0x0000000000001000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_8KB   = 0x0000000000002000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_16KB  = 0x0000000000004000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_32KB  = 0x0000000000008000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_64KB  = 0x0000000000010000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_128KB = 0x0000000000020000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_256KB = 0x0000000000040000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_512KB = 0x0000000000080000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_1MB   = 0x0000000000100000ULL,
};
#define ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_RECONFIGURE_LOOP */
typedef uint8_t ATTR_RECONFIGURE_LOOP_Type;
const bool ATTR_RECONFIGURE_LOOP_Privileged = false;
const TargetTypes_t ATTR_RECONFIGURE_LOOP_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_RECONFIGURE_LOOP_PlatInit = false;
enum ATTR_RECONFIGURE_LOOP_Enum
{
    ENUM_ATTR_RECONFIGURE_LOOP_DECONFIGURE      = 0x1,
    ENUM_ATTR_RECONFIGURE_LOOP_BAD_DQ_BIT_SET   = 0x2,
};

/* ATTR_PM_HWP_ATTR_VERSION */
typedef uint32_t ATTR_PM_HWP_ATTR_VERSION_Type;
const bool ATTR_PM_HWP_ATTR_VERSION_Privileged = false;
const TargetTypes_t ATTR_PM_HWP_ATTR_VERSION_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_HWP_ATTR_VERSION_PlatInit = true;

/* ATTR_REDUNDANT_CLOCKS */
typedef uint8_t ATTR_REDUNDANT_CLOCKS_Type;
const bool ATTR_REDUNDANT_CLOCKS_Privileged = false;
const TargetTypes_t ATTR_REDUNDANT_CLOCKS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_REDUNDANT_CLOCKS_PlatInit = true;
#define ATTR_REDUNDANT_CLOCKS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MFG_TRACE_ENABLE */
typedef uint8_t ATTR_MFG_TRACE_ENABLE_Type;
const bool ATTR_MFG_TRACE_ENABLE_Privileged = false;
const TargetTypes_t ATTR_MFG_TRACE_ENABLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MFG_TRACE_ENABLE_PlatInit = true;
#define ATTR_MFG_TRACE_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_WOF_ENABLED */
typedef uint8_t ATTR_WOF_ENABLED_Type;
const bool ATTR_WOF_ENABLED_Privileged = false;
const TargetTypes_t ATTR_WOF_ENABLED_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_WOF_ENABLED_PlatInit = true;
enum ATTR_WOF_ENABLED_Enum
{
    ENUM_ATTR_WOF_ENABLED_DISABLED = 0x0,
    ENUM_ATTR_WOF_ENABLED_ENABLED = 0x1,
};
#define ATTR_WOF_ENABLED_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FORCE_USE_SBE_SLAVE_SCAN_SERVICE */
typedef uint8_t ATTR_FORCE_USE_SBE_SLAVE_SCAN_SERVICE_Type;
const bool ATTR_FORCE_USE_SBE_SLAVE_SCAN_SERVICE_Privileged = false;
const TargetTypes_t ATTR_FORCE_USE_SBE_SLAVE_SCAN_SERVICE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_FORCE_USE_SBE_SLAVE_SCAN_SERVICE_PlatInit = true;
enum ATTR_FORCE_USE_SBE_SLAVE_SCAN_SERVICE_Enum
{
    ENUM_ATTR_FORCE_USE_SBE_SLAVE_SCAN_SERVICE_FALSE = 0,
    ENUM_ATTR_FORCE_USE_SBE_SLAVE_SCAN_SERVICE_TRUE = 1,
};

/* ATTR_TRUSTED_SLAVE_SCAN_PATH_ACTIVE */
typedef uint8_t ATTR_TRUSTED_SLAVE_SCAN_PATH_ACTIVE_Type;
const bool ATTR_TRUSTED_SLAVE_SCAN_PATH_ACTIVE_Privileged = false;
const TargetTypes_t ATTR_TRUSTED_SLAVE_SCAN_PATH_ACTIVE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_TRUSTED_SLAVE_SCAN_PATH_ACTIVE_PlatInit = true;
enum ATTR_TRUSTED_SLAVE_SCAN_PATH_ACTIVE_Enum
{
    ENUM_ATTR_TRUSTED_SLAVE_SCAN_PATH_ACTIVE_FALSE = 0,
    ENUM_ATTR_TRUSTED_SLAVE_SCAN_PATH_ACTIVE_TRUE = 1,
};

/* ATTR_FORCE_SKIP_SBE_MASTER_INTR_SERVICE */
typedef uint8_t ATTR_FORCE_SKIP_SBE_MASTER_INTR_SERVICE_Type;
const bool ATTR_FORCE_SKIP_SBE_MASTER_INTR_SERVICE_Privileged = false;
const TargetTypes_t ATTR_FORCE_SKIP_SBE_MASTER_INTR_SERVICE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_FORCE_SKIP_SBE_MASTER_INTR_SERVICE_PlatInit = true;
enum ATTR_FORCE_SKIP_SBE_MASTER_INTR_SERVICE_Enum
{
    ENUM_ATTR_FORCE_SKIP_SBE_MASTER_INTR_SERVICE_FALSE = 0,
    ENUM_ATTR_FORCE_SKIP_SBE_MASTER_INTR_SERVICE_TRUE = 1,
};

/* ATTR_SBE_MASTER_INTR_SERVICE_DELAY_CYCLES */
typedef uint32_t ATTR_SBE_MASTER_INTR_SERVICE_DELAY_CYCLES_Type;
const bool ATTR_SBE_MASTER_INTR_SERVICE_DELAY_CYCLES_Privileged = false;
const TargetTypes_t ATTR_SBE_MASTER_INTR_SERVICE_DELAY_CYCLES_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SBE_MASTER_INTR_SERVICE_DELAY_CYCLES_PlatInit = false;

/* ATTR_SBE_MASTER_INTR_SERVICE_DELAY_US */
typedef uint32_t ATTR_SBE_MASTER_INTR_SERVICE_DELAY_US_Type;
const bool ATTR_SBE_MASTER_INTR_SERVICE_DELAY_US_Privileged = false;
const TargetTypes_t ATTR_SBE_MASTER_INTR_SERVICE_DELAY_US_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SBE_MASTER_INTR_SERVICE_DELAY_US_PlatInit = false;

/* ATTR_CHIP_ID */
typedef uint32_t ATTR_CHIP_ID_Type;
const bool ATTR_CHIP_ID_Privileged = false;
const TargetTypes_t ATTR_CHIP_ID_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CHIP_ID_PlatInit = true;
#define ATTR_CHIP_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_NAME */
typedef uint8_t ATTR_NAME_Type;
const bool ATTR_NAME_Privileged = true;
const TargetTypes_t ATTR_NAME_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_NAME_PlatInit = true;
enum ATTR_NAME_Enum
{
    ENUM_ATTR_NAME_NONE = 0,
    ENUM_ATTR_NAME_VENICE = 1,
    ENUM_ATTR_NAME_MURANO = 2,
    ENUM_ATTR_NAME_CENTAUR = 3,
    ENUM_ATTR_NAME_NAPLES = 4,
};
#define ATTR_NAME_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_EC */
typedef uint8_t ATTR_EC_Type;
const bool ATTR_EC_Privileged = true;
const TargetTypes_t ATTR_EC_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_EC_PlatInit = true;
#define ATTR_EC_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FSI_GP_REG_SCOM_ACCESS */
typedef uint8_t ATTR_FSI_GP_REG_SCOM_ACCESS_Type;
const bool ATTR_FSI_GP_REG_SCOM_ACCESS_Privileged = false;
const TargetTypes_t ATTR_FSI_GP_REG_SCOM_ACCESS_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_FSI_GP_REG_SCOM_ACCESS_PlatInit = true;
enum ATTR_FSI_GP_REG_SCOM_ACCESS_Enum
{
    ENUM_ATTR_FSI_GP_REG_SCOM_ACCESS_false = 0,
    ENUM_ATTR_FSI_GP_REG_SCOM_ACCESS_true = 1,
};
#define ATTR_FSI_GP_REG_SCOM_ACCESS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FABRIC_NODE_ID */
typedef uint8_t ATTR_FABRIC_NODE_ID_Type;
const bool ATTR_FABRIC_NODE_ID_Privileged = false;
const TargetTypes_t ATTR_FABRIC_NODE_ID_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_FABRIC_NODE_ID_PlatInit = true;
#define ATTR_FABRIC_NODE_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FABRIC_CHIP_ID */
typedef uint8_t ATTR_FABRIC_CHIP_ID_Type;
const bool ATTR_FABRIC_CHIP_ID_Privileged = false;
const TargetTypes_t ATTR_FABRIC_CHIP_ID_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_FABRIC_CHIP_ID_PlatInit = true;
#define ATTR_FABRIC_CHIP_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_HAS_SBE */
typedef uint8_t ATTR_CHIP_HAS_SBE_Type;
const bool ATTR_CHIP_HAS_SBE_Privileged = false;
const TargetTypes_t ATTR_CHIP_HAS_SBE_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CHIP_HAS_SBE_PlatInit = true;
enum ATTR_CHIP_HAS_SBE_Enum
{
    ENUM_ATTR_CHIP_HAS_SBE_false = 0,
    ENUM_ATTR_CHIP_HAS_SBE_true = 1,
};
#define ATTR_CHIP_HAS_SBE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_DCM_INSTALLED */
typedef uint8_t ATTR_PROC_DCM_INSTALLED_Type;
const bool ATTR_PROC_DCM_INSTALLED_Privileged = false;
const TargetTypes_t ATTR_PROC_DCM_INSTALLED_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_DCM_INSTALLED_PlatInit = true;
enum ATTR_PROC_DCM_INSTALLED_Enum
{
    ENUM_ATTR_PROC_DCM_INSTALLED_false = 0,
    ENUM_ATTR_PROC_DCM_INSTALLED_true = 1,
};
#define ATTR_PROC_DCM_INSTALLED_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_REGIONS_TO_ENABLE */
typedef uint64_t ATTR_CHIP_REGIONS_TO_ENABLE_Type[32];
const bool ATTR_CHIP_REGIONS_TO_ENABLE_Privileged = false;
const TargetTypes_t ATTR_CHIP_REGIONS_TO_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_REGIONS_TO_ENABLE_PlatInit = true;
#define ATTR_CHIP_REGIONS_TO_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_EX_L2_SINGLE_MEMBER_ENABLE */
typedef uint32_t ATTR_EX_L2_SINGLE_MEMBER_ENABLE_Type;
const bool ATTR_EX_L2_SINGLE_MEMBER_ENABLE_Privileged = false;
const TargetTypes_t ATTR_EX_L2_SINGLE_MEMBER_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_EX_L2_SINGLE_MEMBER_ENABLE_PlatInit = true;
#define ATTR_EX_L2_SINGLE_MEMBER_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_BOOT_VOLTAGE_VID */
typedef uint32_t ATTR_PROC_BOOT_VOLTAGE_VID_Type;
const bool ATTR_PROC_BOOT_VOLTAGE_VID_Privileged = false;
const TargetTypes_t ATTR_PROC_BOOT_VOLTAGE_VID_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_BOOT_VOLTAGE_VID_PlatInit = true;

/* ATTR_PCI_OSCSWITCH_CONFIG */
typedef uint8_t ATTR_PCI_OSCSWITCH_CONFIG_Type;
const bool ATTR_PCI_OSCSWITCH_CONFIG_Privileged = false;
const TargetTypes_t ATTR_PCI_OSCSWITCH_CONFIG_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PCI_OSCSWITCH_CONFIG_PlatInit = true;
#define ATTR_PCI_OSCSWITCH_CONFIG_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_OSCSWITCH_CTL0 */
typedef uint32_t ATTR_OSCSWITCH_CTL0_Type;
const bool ATTR_OSCSWITCH_CTL0_Privileged = false;
const TargetTypes_t ATTR_OSCSWITCH_CTL0_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_OSCSWITCH_CTL0_PlatInit = true;
#define ATTR_OSCSWITCH_CTL0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_OSCSWITCH_CTL1 */
typedef uint8_t ATTR_OSCSWITCH_CTL1_Type;
const bool ATTR_OSCSWITCH_CTL1_Privileged = false;
const TargetTypes_t ATTR_OSCSWITCH_CTL1_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_OSCSWITCH_CTL1_PlatInit = true;
#define ATTR_OSCSWITCH_CTL1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_OSCSWITCH_CTL2 */
typedef uint32_t ATTR_OSCSWITCH_CTL2_Type;
const bool ATTR_OSCSWITCH_CTL2_Privileged = false;
const TargetTypes_t ATTR_OSCSWITCH_CTL2_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_OSCSWITCH_CTL2_PlatInit = true;
#define ATTR_OSCSWITCH_CTL2_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_I2C_SLAVE_ADDRESS */
typedef uint8_t ATTR_I2C_SLAVE_ADDRESS_Type;
const bool ATTR_I2C_SLAVE_ADDRESS_Privileged = false;
const TargetTypes_t ATTR_I2C_SLAVE_ADDRESS_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_I2C_SLAVE_ADDRESS_PlatInit = true;
#define ATTR_I2C_SLAVE_ADDRESS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_TARGET_SCOMABLE */
typedef uint8_t ATTR_TARGET_SCOMABLE_Type;
const bool ATTR_TARGET_SCOMABLE_Privileged = false;
const TargetTypes_t ATTR_TARGET_SCOMABLE_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP | TARGET_TYPE_EX_CHIPLET | TARGET_TYPE_MCS_CHIPLET | TARGET_TYPE_XBUS_ENDPOINT | TARGET_TYPE_ABUS_ENDPOINT | TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_TARGET_SCOMABLE_PlatInit = true;
enum ATTR_TARGET_SCOMABLE_Enum
{
    ENUM_ATTR_TARGET_SCOMABLE_FALSE = 0,
    ENUM_ATTR_TARGET_SCOMABLE_TRUE = 1,
};

/* ATTR_TDP_RDP_CURRENT_FACTOR */
typedef uint32_t ATTR_TDP_RDP_CURRENT_FACTOR_Type;
const bool ATTR_TDP_RDP_CURRENT_FACTOR_Privileged = false;
const TargetTypes_t ATTR_TDP_RDP_CURRENT_FACTOR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_TDP_RDP_CURRENT_FACTOR_PlatInit = false;
#define ATTR_TDP_RDP_CURRENT_FACTOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_DRAM_DEVICE_TYPE */
typedef uint8_t ATTR_SPD_DRAM_DEVICE_TYPE_Type;
const bool ATTR_SPD_DRAM_DEVICE_TYPE_Privileged = false;
const TargetTypes_t ATTR_SPD_DRAM_DEVICE_TYPE_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_DRAM_DEVICE_TYPE_PlatInit = true;
enum ATTR_SPD_DRAM_DEVICE_TYPE_Enum
{
    ENUM_ATTR_SPD_DRAM_DEVICE_TYPE_DDR3 = 0x0b,
    ENUM_ATTR_SPD_DRAM_DEVICE_TYPE_DDR4 = 0x0c,
};
#define ATTR_SPD_DRAM_DEVICE_TYPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_TYPE */
typedef uint8_t ATTR_SPD_MODULE_TYPE_Type;
const bool ATTR_SPD_MODULE_TYPE_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_TYPE_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_TYPE_PlatInit = true;
enum ATTR_SPD_MODULE_TYPE_Enum
{
    ENUM_ATTR_SPD_MODULE_TYPE_CDIMM = 0x00,
    ENUM_ATTR_SPD_MODULE_TYPE_RDIMM = 0x01,
    ENUM_ATTR_SPD_MODULE_TYPE_UDIMM = 0x02,
    ENUM_ATTR_SPD_MODULE_TYPE_SO_DIMM=0x03,
    ENUM_ATTR_SPD_MODULE_TYPE_LRDIMM = 0x0b,
    ENUM_ATTR_SPD_MODULE_TYPE_INVALID = 0xff,
};
#define ATTR_SPD_MODULE_TYPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_CUSTOM */
typedef uint8_t ATTR_SPD_CUSTOM_Type;
const bool ATTR_SPD_CUSTOM_Privileged = false;
const TargetTypes_t ATTR_SPD_CUSTOM_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_CUSTOM_PlatInit = true;
enum ATTR_SPD_CUSTOM_Enum
{
    ENUM_ATTR_SPD_CUSTOM_NO = 0x0,
    ENUM_ATTR_SPD_CUSTOM_YES = 0x1,
};
#define ATTR_SPD_CUSTOM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_DENSITY */
typedef uint8_t ATTR_SPD_SDRAM_DENSITY_Type;
const bool ATTR_SPD_SDRAM_DENSITY_Privileged = false;
const TargetTypes_t ATTR_SPD_SDRAM_DENSITY_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_SDRAM_DENSITY_PlatInit = true;
enum ATTR_SPD_SDRAM_DENSITY_Enum
{
    ENUM_ATTR_SPD_SDRAM_DENSITY_D256MB = 0x00,
    ENUM_ATTR_SPD_SDRAM_DENSITY_D512Mb = 0x01,
    ENUM_ATTR_SPD_SDRAM_DENSITY_D1GB = 0x02,
    ENUM_ATTR_SPD_SDRAM_DENSITY_D2GB = 0x03,
    ENUM_ATTR_SPD_SDRAM_DENSITY_D4GB = 0x04,
    ENUM_ATTR_SPD_SDRAM_DENSITY_D8GB = 0x05,
    ENUM_ATTR_SPD_SDRAM_DENSITY_D16GB = 0x06,
    ENUM_ATTR_SPD_SDRAM_DENSITY_D32GB=0x07,
};
#define ATTR_SPD_SDRAM_DENSITY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_BANKS */
typedef uint8_t ATTR_SPD_SDRAM_BANKS_Type;
const bool ATTR_SPD_SDRAM_BANKS_Privileged = false;
const TargetTypes_t ATTR_SPD_SDRAM_BANKS_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_SDRAM_BANKS_PlatInit = true;
enum ATTR_SPD_SDRAM_BANKS_Enum
{
    ENUM_ATTR_SPD_SDRAM_BANKS_B8 = 0x00,
    ENUM_ATTR_SPD_SDRAM_BANKS_B16 = 0x01,
    ENUM_ATTR_SPD_SDRAM_BANKS_B32 = 0x02,
    ENUM_ATTR_SPD_SDRAM_BANKS_B64 = 0x03,
    ENUM_ATTR_SPD_SDRAM_BANKS_B4 = 0x04,
    ENUM_ATTR_SPD_SDRAM_BANKS_UNKNOWN = 0xff,
};
#define ATTR_SPD_SDRAM_BANKS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_ROWS */
typedef uint8_t ATTR_SPD_SDRAM_ROWS_Type;
const bool ATTR_SPD_SDRAM_ROWS_Privileged = false;
const TargetTypes_t ATTR_SPD_SDRAM_ROWS_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_SDRAM_ROWS_PlatInit = true;
enum ATTR_SPD_SDRAM_ROWS_Enum
{
    ENUM_ATTR_SPD_SDRAM_ROWS_R12 = 0x00,
    ENUM_ATTR_SPD_SDRAM_ROWS_R13 = 0x01,
    ENUM_ATTR_SPD_SDRAM_ROWS_R14 = 0x02,
    ENUM_ATTR_SPD_SDRAM_ROWS_R15 = 0x03,
    ENUM_ATTR_SPD_SDRAM_ROWS_R16 = 0x04,
    ENUM_ATTR_SPD_SDRAM_ROWS_R17 = 0x05,
    ENUM_ATTR_SPD_SDRAM_ROWS_R18 = 0x06,
};
#define ATTR_SPD_SDRAM_ROWS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_COLUMNS */
typedef uint8_t ATTR_SPD_SDRAM_COLUMNS_Type;
const bool ATTR_SPD_SDRAM_COLUMNS_Privileged = false;
const TargetTypes_t ATTR_SPD_SDRAM_COLUMNS_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_SDRAM_COLUMNS_PlatInit = true;
enum ATTR_SPD_SDRAM_COLUMNS_Enum
{
    ENUM_ATTR_SPD_SDRAM_COLUMNS_C9 = 0x00,
    ENUM_ATTR_SPD_SDRAM_COLUMNS_C10 = 0x01,
    ENUM_ATTR_SPD_SDRAM_COLUMNS_C11 = 0x02,
    ENUM_ATTR_SPD_SDRAM_COLUMNS_C12 = 0x03,
};
#define ATTR_SPD_SDRAM_COLUMNS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_NOMINAL_VOLTAGE */
typedef uint8_t ATTR_SPD_MODULE_NOMINAL_VOLTAGE_Type;
const bool ATTR_SPD_MODULE_NOMINAL_VOLTAGE_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_NOMINAL_VOLTAGE_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_NOMINAL_VOLTAGE_PlatInit = true;
enum ATTR_SPD_MODULE_NOMINAL_VOLTAGE_Enum
{
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_NOTOP1_5 = 0x01,
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_OP1_35 = 0x02,
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_OP1_2X = 0x04,
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_OP1_2V = 0x08,
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_END1_2V = 0x10,
};
#define ATTR_SPD_MODULE_NOMINAL_VOLTAGE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_NUM_RANKS */
typedef uint8_t ATTR_SPD_NUM_RANKS_Type;
const bool ATTR_SPD_NUM_RANKS_Privileged = false;
const TargetTypes_t ATTR_SPD_NUM_RANKS_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_NUM_RANKS_PlatInit = true;
enum ATTR_SPD_NUM_RANKS_Enum
{
    ENUM_ATTR_SPD_NUM_RANKS_R1 = 0x00,
    ENUM_ATTR_SPD_NUM_RANKS_R2 = 0x01,
    ENUM_ATTR_SPD_NUM_RANKS_R4 = 0x03,
    ENUM_ATTR_SPD_NUM_RANKS_RX = 0xFF,
};
#define ATTR_SPD_NUM_RANKS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_DRAM_WIDTH */
typedef uint8_t ATTR_SPD_DRAM_WIDTH_Type;
const bool ATTR_SPD_DRAM_WIDTH_Privileged = false;
const TargetTypes_t ATTR_SPD_DRAM_WIDTH_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_DRAM_WIDTH_PlatInit = true;
enum ATTR_SPD_DRAM_WIDTH_Enum
{
    ENUM_ATTR_SPD_DRAM_WIDTH_W4 = 0x00,
    ENUM_ATTR_SPD_DRAM_WIDTH_W8 = 0x01,
    ENUM_ATTR_SPD_DRAM_WIDTH_W16 = 0x02,
    ENUM_ATTR_SPD_DRAM_WIDTH_W32 = 0x03,
};
#define ATTR_SPD_DRAM_WIDTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_MEMORY_BUS_WIDTH */
typedef uint8_t ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_Type;
const bool ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_PlatInit = true;
enum ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_Enum
{
    ENUM_ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_W8 = 0x00,
    ENUM_ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_W16 = 0x01,
    ENUM_ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_W32 = 0x02,
    ENUM_ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_W64 = 0x03,
    ENUM_ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_WE8 = 0x08,
    ENUM_ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_WE16 = 0x09,
    ENUM_ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_WE32 = 0x0a,
    ENUM_ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_WE64 = 0x0b,
};
#define ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TCKMIN */
typedef uint8_t ATTR_SPD_TCKMIN_Type;
const bool ATTR_SPD_TCKMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_TCKMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TCKMIN_PlatInit = true;
#define ATTR_SPD_TCKMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_CAS_LATENCIES_SUPPORTED */
typedef uint32_t ATTR_SPD_CAS_LATENCIES_SUPPORTED_Type;
const bool ATTR_SPD_CAS_LATENCIES_SUPPORTED_Privileged = false;
const TargetTypes_t ATTR_SPD_CAS_LATENCIES_SUPPORTED_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_CAS_LATENCIES_SUPPORTED_PlatInit = true;
enum ATTR_SPD_CAS_LATENCIES_SUPPORTED_Enum
{
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_24 = 0x00100000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_23 = 0x00080000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_22 = 0x00040000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_21 = 0x00020000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_20 = 0x00010000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_19 = 0x00008000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_18 = 0x00004000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_17 = 0x00002000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_16 = 0x00001000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_15 = 0x00000800,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_14 = 0x00000400,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_13 = 0x00000200,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_12 = 0x00000100,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_11 = 0x00000080,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_10 = 0x00000040,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_9  = 0x00000020,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_8  = 0x00000010,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_7  = 0x00000008,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_6  = 0x00000004,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_5  = 0x00000002,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_4  = 0x00000001,
};
#define ATTR_SPD_CAS_LATENCIES_SUPPORTED_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TAAMIN */
typedef uint8_t ATTR_SPD_TAAMIN_Type;
const bool ATTR_SPD_TAAMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_TAAMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TAAMIN_PlatInit = true;
#define ATTR_SPD_TAAMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRCDMIN */
typedef uint8_t ATTR_SPD_TRCDMIN_Type;
const bool ATTR_SPD_TRCDMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_TRCDMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TRCDMIN_PlatInit = true;
#define ATTR_SPD_TRCDMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRPMIN */
typedef uint8_t ATTR_SPD_TRPMIN_Type;
const bool ATTR_SPD_TRPMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_TRPMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TRPMIN_PlatInit = true;
#define ATTR_SPD_TRPMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRASMIN */
typedef uint32_t ATTR_SPD_TRASMIN_Type;
const bool ATTR_SPD_TRASMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_TRASMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TRASMIN_PlatInit = true;
#define ATTR_SPD_TRASMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRCMIN */
typedef uint32_t ATTR_SPD_TRCMIN_Type;
const bool ATTR_SPD_TRCMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_TRCMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TRCMIN_PlatInit = true;
#define ATTR_SPD_TRCMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TFAWMIN */
typedef uint32_t ATTR_SPD_TFAWMIN_Type;
const bool ATTR_SPD_TFAWMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_TFAWMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TFAWMIN_PlatInit = true;
#define ATTR_SPD_TFAWMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_OPTIONAL_FEATURES */
typedef uint8_t ATTR_SPD_SDRAM_OPTIONAL_FEATURES_Type;
const bool ATTR_SPD_SDRAM_OPTIONAL_FEATURES_Privileged = false;
const TargetTypes_t ATTR_SPD_SDRAM_OPTIONAL_FEATURES_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_SDRAM_OPTIONAL_FEATURES_PlatInit = true;
enum ATTR_SPD_SDRAM_OPTIONAL_FEATURES_Enum
{
    ENUM_ATTR_SPD_SDRAM_OPTIONAL_FEATURES_DLL_OFF = 0x80,
    ENUM_ATTR_SPD_SDRAM_OPTIONAL_FEATURES_RZQ7 = 0x02,
    ENUM_ATTR_SPD_SDRAM_OPTIONAL_FEATURES_RZQ6 = 0x01,
};
#define ATTR_SPD_SDRAM_OPTIONAL_FEATURES_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS */
typedef uint8_t ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_Type;
const bool ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_Privileged = false;
const TargetTypes_t ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_PlatInit = true;
enum ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_Enum
{
    ENUM_ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_PASR = 0x80,
    ENUM_ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_ODTS = 0x08,
    ENUM_ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_ASR = 0x05,
    ENUM_ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_ETRR = 0x02,
    ENUM_ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_ETR = 0x01,
};
#define ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_THERMAL_SENSOR */
typedef uint8_t ATTR_SPD_MODULE_THERMAL_SENSOR_Type;
const bool ATTR_SPD_MODULE_THERMAL_SENSOR_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_THERMAL_SENSOR_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_THERMAL_SENSOR_PlatInit = true;
enum ATTR_SPD_MODULE_THERMAL_SENSOR_Enum
{
    ENUM_ATTR_SPD_MODULE_THERMAL_SENSOR_PRESENT = 0x80,
    ENUM_ATTR_SPD_MODULE_THERMAL_SENSOR_ACCURACY_MASK = 0x7F,
};
#define ATTR_SPD_MODULE_THERMAL_SENSOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_DEVICE_TYPE */
typedef uint8_t ATTR_SPD_SDRAM_DEVICE_TYPE_Type;
const bool ATTR_SPD_SDRAM_DEVICE_TYPE_Privileged = false;
const TargetTypes_t ATTR_SPD_SDRAM_DEVICE_TYPE_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_SDRAM_DEVICE_TYPE_PlatInit = true;
enum ATTR_SPD_SDRAM_DEVICE_TYPE_Enum
{
    ENUM_ATTR_SPD_SDRAM_DEVICE_TYPE_STANDARD_MONOLITHIC = 0x00,
    ENUM_ATTR_SPD_SDRAM_DEVICE_TYPE_NON_STANDARD = 0x01,
};
#define ATTR_SPD_SDRAM_DEVICE_TYPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING */
typedef uint8_t ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_Type;
const bool ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_Privileged = false;
const TargetTypes_t ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_PlatInit = true;
enum ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_Enum
{
    ENUM_ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_NOT_SPECIFIED = 0x00,
    ENUM_ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_MULTI_LOAD_STACK = 0x01,
    ENUM_ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_SINGLE_LOAD_STACK = 0x02,
};
#define ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_DIE_COUNT */
typedef uint8_t ATTR_SPD_SDRAM_DIE_COUNT_Type;
const bool ATTR_SPD_SDRAM_DIE_COUNT_Privileged = false;
const TargetTypes_t ATTR_SPD_SDRAM_DIE_COUNT_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_SDRAM_DIE_COUNT_PlatInit = true;
enum ATTR_SPD_SDRAM_DIE_COUNT_Enum
{
    ENUM_ATTR_SPD_SDRAM_DIE_COUNT_DIE1 = 0x00,
    ENUM_ATTR_SPD_SDRAM_DIE_COUNT_DIE2 = 0x01,
    ENUM_ATTR_SPD_SDRAM_DIE_COUNT_DIE4 = 0x02,
    ENUM_ATTR_SPD_SDRAM_DIE_COUNT_DIE8 = 0x03,
};
#define ATTR_SPD_SDRAM_DIE_COUNT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TCKMIN */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TCKMIN_Type;
const bool ATTR_SPD_FINE_OFFSET_TCKMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_FINE_OFFSET_TCKMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_FINE_OFFSET_TCKMIN_PlatInit = true;
#define ATTR_SPD_FINE_OFFSET_TCKMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TAAMIN */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TAAMIN_Type;
const bool ATTR_SPD_FINE_OFFSET_TAAMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_FINE_OFFSET_TAAMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_FINE_OFFSET_TAAMIN_PlatInit = true;
#define ATTR_SPD_FINE_OFFSET_TAAMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TRCDMIN */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TRCDMIN_Type;
const bool ATTR_SPD_FINE_OFFSET_TRCDMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_FINE_OFFSET_TRCDMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_FINE_OFFSET_TRCDMIN_PlatInit = true;
#define ATTR_SPD_FINE_OFFSET_TRCDMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TRPMIN */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TRPMIN_Type;
const bool ATTR_SPD_FINE_OFFSET_TRPMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_FINE_OFFSET_TRPMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_FINE_OFFSET_TRPMIN_PlatInit = true;
#define ATTR_SPD_FINE_OFFSET_TRPMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TRCMIN */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TRCMIN_Type;
const bool ATTR_SPD_FINE_OFFSET_TRCMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_FINE_OFFSET_TRCMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_FINE_OFFSET_TRCMIN_PlatInit = true;
#define ATTR_SPD_FINE_OFFSET_TRCMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_NUM_OF_REGISTERS_USED_ON_RDIMM */
typedef uint8_t ATTR_SPD_NUM_OF_REGISTERS_USED_ON_RDIMM_Type;
const bool ATTR_SPD_NUM_OF_REGISTERS_USED_ON_RDIMM_Privileged = false;
const TargetTypes_t ATTR_SPD_NUM_OF_REGISTERS_USED_ON_RDIMM_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_NUM_OF_REGISTERS_USED_ON_RDIMM_PlatInit = true;
#define ATTR_SPD_NUM_OF_REGISTERS_USED_ON_RDIMM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_SPECIFIC_SECTION */
typedef uint8_t ATTR_SPD_MODULE_SPECIFIC_SECTION_Type[57];
const bool ATTR_SPD_MODULE_SPECIFIC_SECTION_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_SPECIFIC_SECTION_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_SPECIFIC_SECTION_PlatInit = true;
#define ATTR_SPD_MODULE_SPECIFIC_SECTION_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_ID_MODULE_MANUFACTURERS_JEDEC_ID_CODE */
typedef uint32_t ATTR_SPD_MODULE_ID_MODULE_MANUFACTURERS_JEDEC_ID_CODE_Type;
const bool ATTR_SPD_MODULE_ID_MODULE_MANUFACTURERS_JEDEC_ID_CODE_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_ID_MODULE_MANUFACTURERS_JEDEC_ID_CODE_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_ID_MODULE_MANUFACTURERS_JEDEC_ID_CODE_PlatInit = true;
#define ATTR_SPD_MODULE_ID_MODULE_MANUFACTURERS_JEDEC_ID_CODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_LOCATION */
typedef uint8_t ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_LOCATION_Type;
const bool ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_LOCATION_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_LOCATION_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_LOCATION_PlatInit = true;
#define ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_LOCATION_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_DATE */
typedef uint32_t ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_DATE_Type;
const bool ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_DATE_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_DATE_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_DATE_PlatInit = true;
#define ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_DATE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_ID_MODULE_SERIAL_NUMBER */
typedef uint32_t ATTR_SPD_MODULE_ID_MODULE_SERIAL_NUMBER_Type;
const bool ATTR_SPD_MODULE_ID_MODULE_SERIAL_NUMBER_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_ID_MODULE_SERIAL_NUMBER_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_ID_MODULE_SERIAL_NUMBER_PlatInit = true;
#define ATTR_SPD_MODULE_ID_MODULE_SERIAL_NUMBER_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_CYCLICAL_REDUNDANCY_CODE */
typedef uint32_t ATTR_SPD_CYCLICAL_REDUNDANCY_CODE_Type;
const bool ATTR_SPD_CYCLICAL_REDUNDANCY_CODE_Privileged = false;
const TargetTypes_t ATTR_SPD_CYCLICAL_REDUNDANCY_CODE_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_CYCLICAL_REDUNDANCY_CODE_PlatInit = true;
#define ATTR_SPD_CYCLICAL_REDUNDANCY_CODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_PART_NUMBER */
typedef uint8_t ATTR_SPD_MODULE_PART_NUMBER_Type[18];
const bool ATTR_SPD_MODULE_PART_NUMBER_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_PART_NUMBER_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_PART_NUMBER_PlatInit = true;
#define ATTR_SPD_MODULE_PART_NUMBER_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_REVISION_CODE */
typedef uint32_t ATTR_SPD_MODULE_REVISION_CODE_Type;
const bool ATTR_SPD_MODULE_REVISION_CODE_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_REVISION_CODE_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_REVISION_CODE_PlatInit = true;
#define ATTR_SPD_MODULE_REVISION_CODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_DRAM_MANUFACTURER_JEDEC_ID_CODE */
typedef uint32_t ATTR_SPD_DRAM_MANUFACTURER_JEDEC_ID_CODE_Type;
const bool ATTR_SPD_DRAM_MANUFACTURER_JEDEC_ID_CODE_Privileged = false;
const TargetTypes_t ATTR_SPD_DRAM_MANUFACTURER_JEDEC_ID_CODE_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_DRAM_MANUFACTURER_JEDEC_ID_CODE_PlatInit = true;
#define ATTR_SPD_DRAM_MANUFACTURER_JEDEC_ID_CODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_BAD_DQ_DATA */
typedef uint8_t ATTR_SPD_BAD_DQ_DATA_Type[80];
const bool ATTR_SPD_BAD_DQ_DATA_Privileged = false;
const TargetTypes_t ATTR_SPD_BAD_DQ_DATA_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_BAD_DQ_DATA_PlatInit = true;

/* ATTR_SPD_DIMM_RCD_CNTL_WORD_0_15 */
typedef uint64_t ATTR_SPD_DIMM_RCD_CNTL_WORD_0_15_Type;
const bool ATTR_SPD_DIMM_RCD_CNTL_WORD_0_15_Privileged = false;
const TargetTypes_t ATTR_SPD_DIMM_RCD_CNTL_WORD_0_15_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_DIMM_RCD_CNTL_WORD_0_15_PlatInit = false;
#define ATTR_SPD_DIMM_RCD_CNTL_WORD_0_15_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_DIMM_RCD_CNTL_WORD_0_15 */
typedef uint64_t ATTR_VPD_DIMM_RCD_CNTL_WORD_0_15_Type;
const bool ATTR_VPD_DIMM_RCD_CNTL_WORD_0_15_Privileged = false;
const TargetTypes_t ATTR_VPD_DIMM_RCD_CNTL_WORD_0_15_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_VPD_DIMM_RCD_CNTL_WORD_0_15_PlatInit = false;
#define ATTR_VPD_DIMM_RCD_CNTL_WORD_0_15_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_DIMM_RCD_OUTPUT_TIMING */
typedef uint8_t ATTR_VPD_DIMM_RCD_OUTPUT_TIMING_Type[2][2];
const bool ATTR_VPD_DIMM_RCD_OUTPUT_TIMING_Privileged = false;
const TargetTypes_t ATTR_VPD_DIMM_RCD_OUTPUT_TIMING_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_DIMM_RCD_OUTPUT_TIMING_PlatInit = false;
enum ATTR_VPD_DIMM_RCD_OUTPUT_TIMING_Enum
{
    ENUM_ATTR_VPD_DIMM_RCD_OUTPUT_TIMING_1T = 0x01,
    ENUM_ATTR_VPD_DIMM_RCD_OUTPUT_TIMING_3T = 0x03,
};
#define ATTR_VPD_DIMM_RCD_OUTPUT_TIMING_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FTB_DIVIDEND */
typedef uint8_t ATTR_SPD_FTB_DIVIDEND_Type;
const bool ATTR_SPD_FTB_DIVIDEND_Privileged = false;
const TargetTypes_t ATTR_SPD_FTB_DIVIDEND_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_FTB_DIVIDEND_PlatInit = true;
#define ATTR_SPD_FTB_DIVIDEND_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FTB_DIVISOR */
typedef uint8_t ATTR_SPD_FTB_DIVISOR_Type;
const bool ATTR_SPD_FTB_DIVISOR_Privileged = false;
const TargetTypes_t ATTR_SPD_FTB_DIVISOR_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_FTB_DIVISOR_PlatInit = true;
#define ATTR_SPD_FTB_DIVISOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MTB_DIVIDEND */
typedef uint8_t ATTR_SPD_MTB_DIVIDEND_Type;
const bool ATTR_SPD_MTB_DIVIDEND_Privileged = false;
const TargetTypes_t ATTR_SPD_MTB_DIVIDEND_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MTB_DIVIDEND_PlatInit = true;
#define ATTR_SPD_MTB_DIVIDEND_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MTB_DIVISOR */
typedef uint8_t ATTR_SPD_MTB_DIVISOR_Type;
const bool ATTR_SPD_MTB_DIVISOR_Privileged = false;
const TargetTypes_t ATTR_SPD_MTB_DIVISOR_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MTB_DIVISOR_PlatInit = true;
#define ATTR_SPD_MTB_DIVISOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TWRMIN */
typedef uint8_t ATTR_SPD_TWRMIN_Type;
const bool ATTR_SPD_TWRMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_TWRMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TWRMIN_PlatInit = true;
#define ATTR_SPD_TWRMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRRDMIN */
typedef uint8_t ATTR_SPD_TRRDMIN_Type;
const bool ATTR_SPD_TRRDMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_TRRDMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TRRDMIN_PlatInit = true;
#define ATTR_SPD_TRRDMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRFCMIN */
typedef uint32_t ATTR_SPD_TRFCMIN_Type;
const bool ATTR_SPD_TRFCMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_TRFCMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TRFCMIN_PlatInit = true;
#define ATTR_SPD_TRFCMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TWTRMIN */
typedef uint8_t ATTR_SPD_TWTRMIN_Type;
const bool ATTR_SPD_TWTRMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_TWTRMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TWTRMIN_PlatInit = true;
#define ATTR_SPD_TWTRMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRTPMIN */
typedef uint8_t ATTR_SPD_TRTPMIN_Type;
const bool ATTR_SPD_TRTPMIN_Privileged = false;
const TargetTypes_t ATTR_SPD_TRTPMIN_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TRTPMIN_PlatInit = true;
#define ATTR_SPD_TRTPMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_ADDR_MIRRORING */
typedef uint8_t ATTR_SPD_LR_ADDR_MIRRORING_Type;
const bool ATTR_SPD_LR_ADDR_MIRRORING_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_ADDR_MIRRORING_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_ADDR_MIRRORING_PlatInit = true;
enum ATTR_SPD_LR_ADDR_MIRRORING_Enum
{
    ENUM_ATTR_SPD_LR_ADDR_MIRRORING_NO_RANKS = 0x00,
    ENUM_ATTR_SPD_LR_ADDR_MIRRORING_ODD_RANKS = 0x01,
};
#define ATTR_SPD_LR_ADDR_MIRRORING_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F0RC3_F0RC2 */
typedef uint8_t ATTR_SPD_LR_F0RC3_F0RC2_Type;
const bool ATTR_SPD_LR_F0RC3_F0RC2_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F0RC3_F0RC2_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F0RC3_F0RC2_PlatInit = true;
#define ATTR_SPD_LR_F0RC3_F0RC2_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F0RC5_F0RC4 */
typedef uint8_t ATTR_SPD_LR_F0RC5_F0RC4_Type;
const bool ATTR_SPD_LR_F0RC5_F0RC4_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F0RC5_F0RC4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F0RC5_F0RC4_PlatInit = true;
#define ATTR_SPD_LR_F0RC5_F0RC4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F1RC11_F1RC8 */
typedef uint8_t ATTR_SPD_LR_F1RC11_F1RC8_Type;
const bool ATTR_SPD_LR_F1RC11_F1RC8_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F1RC11_F1RC8_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F1RC11_F1RC8_PlatInit = true;
#define ATTR_SPD_LR_F1RC11_F1RC8_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F1RC13_F1RC12 */
typedef uint8_t ATTR_SPD_LR_F1RC13_F1RC12_Type;
const bool ATTR_SPD_LR_F1RC13_F1RC12_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F1RC13_F1RC12_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F1RC13_F1RC12_PlatInit = true;
#define ATTR_SPD_LR_F1RC13_F1RC12_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F1RC15_F1RC14 */
typedef uint8_t ATTR_SPD_LR_F1RC15_F1RC14_Type;
const bool ATTR_SPD_LR_F1RC15_F1RC14_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F1RC15_F1RC14_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F1RC15_F1RC14_PlatInit = true;
#define ATTR_SPD_LR_F1RC15_F1RC14_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F3RC9_F3RC8_FOR_800_1066 */
typedef uint8_t ATTR_SPD_LR_F3RC9_F3RC8_FOR_800_1066_Type;
const bool ATTR_SPD_LR_F3RC9_F3RC8_FOR_800_1066_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F3RC9_F3RC8_FOR_800_1066_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F3RC9_F3RC8_FOR_800_1066_PlatInit = true;
#define ATTR_SPD_LR_F3RC9_F3RC8_FOR_800_1066_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F34RC11_F34RC10_FOR_800_1066 */
typedef uint8_t ATTR_SPD_LR_F34RC11_F34RC10_FOR_800_1066_Type;
const bool ATTR_SPD_LR_F34RC11_F34RC10_FOR_800_1066_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F34RC11_F34RC10_FOR_800_1066_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F34RC11_F34RC10_FOR_800_1066_PlatInit = true;
#define ATTR_SPD_LR_F34RC11_F34RC10_FOR_800_1066_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F56RC11_F56RC10_FOR_800_1066 */
typedef uint8_t ATTR_SPD_LR_F56RC11_F56RC10_FOR_800_1066_Type;
const bool ATTR_SPD_LR_F56RC11_F56RC10_FOR_800_1066_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F56RC11_F56RC10_FOR_800_1066_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F56RC11_F56RC10_FOR_800_1066_PlatInit = true;
#define ATTR_SPD_LR_F56RC11_F56RC10_FOR_800_1066_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F78RC11_F78RC10_FOR_800_1066 */
typedef uint8_t ATTR_SPD_LR_F78RC11_F78RC10_FOR_800_1066_Type;
const bool ATTR_SPD_LR_F78RC11_F78RC10_FOR_800_1066_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F78RC11_F78RC10_FOR_800_1066_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F78RC11_F78RC10_FOR_800_1066_PlatInit = true;
#define ATTR_SPD_LR_F78RC11_F78RC10_FOR_800_1066_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F910RC11_F910RC10_FOR_800_1066 */
typedef uint8_t ATTR_SPD_LR_F910RC11_F910RC10_FOR_800_1066_Type;
const bool ATTR_SPD_LR_F910RC11_F910RC10_FOR_800_1066_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F910RC11_F910RC10_FOR_800_1066_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F910RC11_F910RC10_FOR_800_1066_PlatInit = true;
#define ATTR_SPD_LR_F910RC11_F910RC10_FOR_800_1066_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_MR12_FOR_800_1066 */
typedef uint8_t ATTR_SPD_LR_MR12_FOR_800_1066_Type;
const bool ATTR_SPD_LR_MR12_FOR_800_1066_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_MR12_FOR_800_1066_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_MR12_FOR_800_1066_PlatInit = true;
#define ATTR_SPD_LR_MR12_FOR_800_1066_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F3RC9_F3RC8_FOR_1333_1600 */
typedef uint8_t ATTR_SPD_LR_F3RC9_F3RC8_FOR_1333_1600_Type;
const bool ATTR_SPD_LR_F3RC9_F3RC8_FOR_1333_1600_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F3RC9_F3RC8_FOR_1333_1600_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F3RC9_F3RC8_FOR_1333_1600_PlatInit = true;
#define ATTR_SPD_LR_F3RC9_F3RC8_FOR_1333_1600_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F34RC11_F34RC10_FOR_1333_1600 */
typedef uint8_t ATTR_SPD_LR_F34RC11_F34RC10_FOR_1333_1600_Type;
const bool ATTR_SPD_LR_F34RC11_F34RC10_FOR_1333_1600_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F34RC11_F34RC10_FOR_1333_1600_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F34RC11_F34RC10_FOR_1333_1600_PlatInit = true;
#define ATTR_SPD_LR_F34RC11_F34RC10_FOR_1333_1600_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F56RC11_F56RC10_FOR_1333_1600 */
typedef uint8_t ATTR_SPD_LR_F56RC11_F56RC10_FOR_1333_1600_Type;
const bool ATTR_SPD_LR_F56RC11_F56RC10_FOR_1333_1600_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F56RC11_F56RC10_FOR_1333_1600_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F56RC11_F56RC10_FOR_1333_1600_PlatInit = true;
#define ATTR_SPD_LR_F56RC11_F56RC10_FOR_1333_1600_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F78RC11_F78RC10_FOR_1333_1600 */
typedef uint8_t ATTR_SPD_LR_F78RC11_F78RC10_FOR_1333_1600_Type;
const bool ATTR_SPD_LR_F78RC11_F78RC10_FOR_1333_1600_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F78RC11_F78RC10_FOR_1333_1600_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F78RC11_F78RC10_FOR_1333_1600_PlatInit = true;
#define ATTR_SPD_LR_F78RC11_F78RC10_FOR_1333_1600_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F910RC11_F910RC10_FOR_1333_1600 */
typedef uint8_t ATTR_SPD_LR_F910RC11_F910RC10_FOR_1333_1600_Type;
const bool ATTR_SPD_LR_F910RC11_F910RC10_FOR_1333_1600_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F910RC11_F910RC10_FOR_1333_1600_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F910RC11_F910RC10_FOR_1333_1600_PlatInit = true;
#define ATTR_SPD_LR_F910RC11_F910RC10_FOR_1333_1600_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_MR12_FOR_1333_1600 */
typedef uint8_t ATTR_SPD_LR_MR12_FOR_1333_1600_Type;
const bool ATTR_SPD_LR_MR12_FOR_1333_1600_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_MR12_FOR_1333_1600_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_MR12_FOR_1333_1600_PlatInit = true;
#define ATTR_SPD_LR_MR12_FOR_1333_1600_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F3RC9_F3RC8_FOR_1866_2133 */
typedef uint8_t ATTR_SPD_LR_F3RC9_F3RC8_FOR_1866_2133_Type;
const bool ATTR_SPD_LR_F3RC9_F3RC8_FOR_1866_2133_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F3RC9_F3RC8_FOR_1866_2133_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F3RC9_F3RC8_FOR_1866_2133_PlatInit = true;
#define ATTR_SPD_LR_F3RC9_F3RC8_FOR_1866_2133_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F34RC11_F34RC10_FOR_1866_2133 */
typedef uint8_t ATTR_SPD_LR_F34RC11_F34RC10_FOR_1866_2133_Type;
const bool ATTR_SPD_LR_F34RC11_F34RC10_FOR_1866_2133_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F34RC11_F34RC10_FOR_1866_2133_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F34RC11_F34RC10_FOR_1866_2133_PlatInit = true;
#define ATTR_SPD_LR_F34RC11_F34RC10_FOR_1866_2133_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F56RC11_F56RC10_FOR_1866_2133 */
typedef uint8_t ATTR_SPD_LR_F56RC11_F56RC10_FOR_1866_2133_Type;
const bool ATTR_SPD_LR_F56RC11_F56RC10_FOR_1866_2133_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F56RC11_F56RC10_FOR_1866_2133_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F56RC11_F56RC10_FOR_1866_2133_PlatInit = true;
#define ATTR_SPD_LR_F56RC11_F56RC10_FOR_1866_2133_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F78RC11_F78RC10_FOR_1866_2133 */
typedef uint8_t ATTR_SPD_LR_F78RC11_F78RC10_FOR_1866_2133_Type;
const bool ATTR_SPD_LR_F78RC11_F78RC10_FOR_1866_2133_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F78RC11_F78RC10_FOR_1866_2133_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F78RC11_F78RC10_FOR_1866_2133_PlatInit = true;
#define ATTR_SPD_LR_F78RC11_F78RC10_FOR_1866_2133_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_F910RC11_F910RC10_FOR_1866_2133 */
typedef uint8_t ATTR_SPD_LR_F910RC11_F910RC10_FOR_1866_2133_Type;
const bool ATTR_SPD_LR_F910RC11_F910RC10_FOR_1866_2133_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_F910RC11_F910RC10_FOR_1866_2133_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_F910RC11_F910RC10_FOR_1866_2133_PlatInit = true;
#define ATTR_SPD_LR_F910RC11_F910RC10_FOR_1866_2133_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_MR12_FOR_1866_2133 */
typedef uint8_t ATTR_SPD_LR_MR12_FOR_1866_2133_Type;
const bool ATTR_SPD_LR_MR12_FOR_1866_2133_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_MR12_FOR_1866_2133_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_MR12_FOR_1866_2133_PlatInit = true;
#define ATTR_SPD_LR_MR12_FOR_1866_2133_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_BANKGROUPS_DDR4 */
typedef uint8_t ATTR_SPD_SDRAM_BANKGROUPS_DDR4_Type;
const bool ATTR_SPD_SDRAM_BANKGROUPS_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_SDRAM_BANKGROUPS_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_SDRAM_BANKGROUPS_DDR4_PlatInit = true;
enum ATTR_SPD_SDRAM_BANKGROUPS_DDR4_Enum
{
    ENUM_ATTR_SPD_SDRAM_BANKGROUPS_DDR4_BG0 = 0x00,
    ENUM_ATTR_SPD_SDRAM_BANKGROUPS_DDR4_BG2 = 0x01,
    ENUM_ATTR_SPD_SDRAM_BANKGROUPS_DDR4_BG4 = 0x02,
};
#define ATTR_SPD_SDRAM_BANKGROUPS_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TIMEBASE_MTB_DDR4 */
typedef uint8_t ATTR_SPD_TIMEBASE_MTB_DDR4_Type;
const bool ATTR_SPD_TIMEBASE_MTB_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_TIMEBASE_MTB_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TIMEBASE_MTB_DDR4_PlatInit = true;
enum ATTR_SPD_TIMEBASE_MTB_DDR4_Enum
{
    ENUM_ATTR_SPD_TIMEBASE_MTB_DDR4_PS125 = 0x00,
};
#define ATTR_SPD_TIMEBASE_MTB_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TIMEBASE_FTB_DDR4 */
typedef uint8_t ATTR_SPD_TIMEBASE_FTB_DDR4_Type;
const bool ATTR_SPD_TIMEBASE_FTB_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_TIMEBASE_FTB_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TIMEBASE_FTB_DDR4_PlatInit = true;
enum ATTR_SPD_TIMEBASE_FTB_DDR4_Enum
{
    ENUM_ATTR_SPD_TIMEBASE_FTB_DDR4_PS1 = 0x00,
};
#define ATTR_SPD_TIMEBASE_FTB_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TCKMAX_DDR4 */
typedef uint8_t ATTR_SPD_TCKMAX_DDR4_Type;
const bool ATTR_SPD_TCKMAX_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_TCKMAX_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TCKMAX_DDR4_PlatInit = true;
#define ATTR_SPD_TCKMAX_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRFC1MIN_DDR4 */
typedef uint32_t ATTR_SPD_TRFC1MIN_DDR4_Type;
const bool ATTR_SPD_TRFC1MIN_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_TRFC1MIN_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TRFC1MIN_DDR4_PlatInit = true;
#define ATTR_SPD_TRFC1MIN_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRFC2MIN_DDR4 */
typedef uint32_t ATTR_SPD_TRFC2MIN_DDR4_Type;
const bool ATTR_SPD_TRFC2MIN_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_TRFC2MIN_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TRFC2MIN_DDR4_PlatInit = true;
#define ATTR_SPD_TRFC2MIN_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRFC4MIN_DDR4 */
typedef uint32_t ATTR_SPD_TRFC4MIN_DDR4_Type;
const bool ATTR_SPD_TRFC4MIN_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_TRFC4MIN_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TRFC4MIN_DDR4_PlatInit = true;
#define ATTR_SPD_TRFC4MIN_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRRDSMIN_DDR4 */
typedef uint8_t ATTR_SPD_TRRDSMIN_DDR4_Type;
const bool ATTR_SPD_TRRDSMIN_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_TRRDSMIN_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TRRDSMIN_DDR4_PlatInit = true;
#define ATTR_SPD_TRRDSMIN_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRRDLMIN_DDR4 */
typedef uint8_t ATTR_SPD_TRRDLMIN_DDR4_Type;
const bool ATTR_SPD_TRRDLMIN_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_TRRDLMIN_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TRRDLMIN_DDR4_PlatInit = true;
#define ATTR_SPD_TRRDLMIN_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TCCDLMIN_DDR4 */
typedef uint8_t ATTR_SPD_TCCDLMIN_DDR4_Type;
const bool ATTR_SPD_TCCDLMIN_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_TCCDLMIN_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_TCCDLMIN_DDR4_PlatInit = true;
#define ATTR_SPD_TCCDLMIN_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TCCDLMIN_DDR4 */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TCCDLMIN_DDR4_Type;
const bool ATTR_SPD_FINE_OFFSET_TCCDLMIN_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_FINE_OFFSET_TCCDLMIN_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_FINE_OFFSET_TCCDLMIN_DDR4_PlatInit = true;
#define ATTR_SPD_FINE_OFFSET_TCCDLMIN_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TRRDLMIN_DDR4 */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TRRDLMIN_DDR4_Type;
const bool ATTR_SPD_FINE_OFFSET_TRRDLMIN_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_FINE_OFFSET_TRRDLMIN_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_FINE_OFFSET_TRRDLMIN_DDR4_PlatInit = true;
#define ATTR_SPD_FINE_OFFSET_TRRDLMIN_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TRRDSMIN_DDR4 */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TRRDSMIN_DDR4_Type;
const bool ATTR_SPD_FINE_OFFSET_TRRDSMIN_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_FINE_OFFSET_TRRDSMIN_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_FINE_OFFSET_TRRDSMIN_DDR4_PlatInit = true;
#define ATTR_SPD_FINE_OFFSET_TRRDSMIN_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TCKMAX_DDR4 */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TCKMAX_DDR4_Type;
const bool ATTR_SPD_FINE_OFFSET_TCKMAX_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_FINE_OFFSET_TCKMAX_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_FINE_OFFSET_TCKMAX_DDR4_PlatInit = true;
#define ATTR_SPD_FINE_OFFSET_TCKMAX_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_CRC_BASE_CONFIG_DDR4 */
typedef uint32_t ATTR_SPD_CRC_BASE_CONFIG_DDR4_Type;
const bool ATTR_SPD_CRC_BASE_CONFIG_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_CRC_BASE_CONFIG_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_CRC_BASE_CONFIG_DDR4_PlatInit = true;
#define ATTR_SPD_CRC_BASE_CONFIG_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_DRAM_STEPPING_DDR4 */
typedef uint8_t ATTR_SPD_DRAM_STEPPING_DDR4_Type;
const bool ATTR_SPD_DRAM_STEPPING_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_DRAM_STEPPING_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_DRAM_STEPPING_DDR4_PlatInit = true;
#define ATTR_SPD_DRAM_STEPPING_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_CRC_MNFG_SEC_DDR4 */
typedef uint32_t ATTR_SPD_CRC_MNFG_SEC_DDR4_Type;
const bool ATTR_SPD_CRC_MNFG_SEC_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_CRC_MNFG_SEC_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_CRC_MNFG_SEC_DDR4_PlatInit = true;
#define ATTR_SPD_CRC_MNFG_SEC_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_VERSION */
typedef uint32_t ATTR_VPD_VERSION_Type;
const bool ATTR_VPD_VERSION_Privileged = false;
const TargetTypes_t ATTR_VPD_VERSION_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_VPD_VERSION_PlatInit = true;
#define ATTR_VPD_VERSION_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_DIMM_MODULE_LR_ATTRIBUTES */
typedef uint8_t ATTR_SPD_DIMM_MODULE_LR_ATTRIBUTES_Type;
const bool ATTR_SPD_DIMM_MODULE_LR_ATTRIBUTES_Privileged = false;
const TargetTypes_t ATTR_SPD_DIMM_MODULE_LR_ATTRIBUTES_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_DIMM_MODULE_LR_ATTRIBUTES_PlatInit = true;
#define ATTR_SPD_DIMM_MODULE_LR_ATTRIBUTES_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_REGISTER_MANF_ID */
typedef uint32_t ATTR_SPD_LR_REGISTER_MANF_ID_Type;
const bool ATTR_SPD_LR_REGISTER_MANF_ID_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_REGISTER_MANF_ID_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_REGISTER_MANF_ID_PlatInit = true;
#define ATTR_SPD_LR_REGISTER_MANF_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_ADDR_MAP_REG_TO_DRAM */
typedef uint32_t ATTR_SPD_LR_ADDR_MAP_REG_TO_DRAM_Type;
const bool ATTR_SPD_LR_ADDR_MAP_REG_TO_DRAM_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_ADDR_MAP_REG_TO_DRAM_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_ADDR_MAP_REG_TO_DRAM_PlatInit = true;
#define ATTR_SPD_LR_ADDR_MAP_REG_TO_DRAM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_REG_OUTPUT_DRV_STRENGTH_CK */
typedef uint8_t ATTR_SPD_LR_REG_OUTPUT_DRV_STRENGTH_CK_Type;
const bool ATTR_SPD_LR_REG_OUTPUT_DRV_STRENGTH_CK_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_REG_OUTPUT_DRV_STRENGTH_CK_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_REG_OUTPUT_DRV_STRENGTH_CK_PlatInit = true;
#define ATTR_SPD_LR_REG_OUTPUT_DRV_STRENGTH_CK_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_VREF_DQ_RANK0 */
typedef uint8_t ATTR_SPD_LR_DRAM_VREF_DQ_RANK0_Type;
const bool ATTR_SPD_LR_DRAM_VREF_DQ_RANK0_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_VREF_DQ_RANK0_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_VREF_DQ_RANK0_PlatInit = true;
#define ATTR_SPD_LR_DRAM_VREF_DQ_RANK0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_VREF_DQ_RANK1 */
typedef uint8_t ATTR_SPD_LR_DRAM_VREF_DQ_RANK1_Type;
const bool ATTR_SPD_LR_DRAM_VREF_DQ_RANK1_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_VREF_DQ_RANK1_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_VREF_DQ_RANK1_PlatInit = true;
#define ATTR_SPD_LR_DRAM_VREF_DQ_RANK1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_VREF_DQ_RANK2 */
typedef uint8_t ATTR_SPD_LR_DRAM_VREF_DQ_RANK2_Type;
const bool ATTR_SPD_LR_DRAM_VREF_DQ_RANK2_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_VREF_DQ_RANK2_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_VREF_DQ_RANK2_PlatInit = true;
#define ATTR_SPD_LR_DRAM_VREF_DQ_RANK2_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_VREF_DQ_RANK3 */
typedef uint8_t ATTR_SPD_LR_DRAM_VREF_DQ_RANK3_Type;
const bool ATTR_SPD_LR_DRAM_VREF_DQ_RANK3_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_VREF_DQ_RANK3_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_VREF_DQ_RANK3_PlatInit = true;
#define ATTR_SPD_LR_DRAM_VREF_DQ_RANK3_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_BUF_VREF_DQ_FOR_DRAM */
typedef uint8_t ATTR_SPD_LR_BUF_VREF_DQ_FOR_DRAM_Type;
const bool ATTR_SPD_LR_BUF_VREF_DQ_FOR_DRAM_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_BUF_VREF_DQ_FOR_DRAM_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_BUF_VREF_DQ_FOR_DRAM_PlatInit = true;
#define ATTR_SPD_LR_BUF_VREF_DQ_FOR_DRAM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_BUF_MDQ_DRV_LESS_THAN_1866 */
typedef uint8_t ATTR_SPD_LR_BUF_MDQ_DRV_LESS_THAN_1866_Type;
const bool ATTR_SPD_LR_BUF_MDQ_DRV_LESS_THAN_1866_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_BUF_MDQ_DRV_LESS_THAN_1866_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_BUF_MDQ_DRV_LESS_THAN_1866_PlatInit = true;
#define ATTR_SPD_LR_BUF_MDQ_DRV_LESS_THAN_1866_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_BUF_MDQ_DRV_1866_2400 */
typedef uint8_t ATTR_SPD_LR_BUF_MDQ_DRV_1866_2400_Type;
const bool ATTR_SPD_LR_BUF_MDQ_DRV_1866_2400_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_BUF_MDQ_DRV_1866_2400_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_BUF_MDQ_DRV_1866_2400_PlatInit = true;
#define ATTR_SPD_LR_BUF_MDQ_DRV_1866_2400_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_BUF_MDQ_DRV_2400_3200 */
typedef uint8_t ATTR_SPD_LR_BUF_MDQ_DRV_2400_3200_Type;
const bool ATTR_SPD_LR_BUF_MDQ_DRV_2400_3200_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_BUF_MDQ_DRV_2400_3200_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_BUF_MDQ_DRV_2400_3200_PlatInit = true;
#define ATTR_SPD_LR_BUF_MDQ_DRV_2400_3200_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_DRV_STRENGTH */
typedef uint8_t ATTR_SPD_LR_DRAM_DRV_STRENGTH_Type;
const bool ATTR_SPD_LR_DRAM_DRV_STRENGTH_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_DRV_STRENGTH_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_DRV_STRENGTH_PlatInit = true;
#define ATTR_SPD_LR_DRAM_DRV_STRENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_ODT_RTT_WR_LESS_THAN_1866 */
typedef uint8_t ATTR_SPD_LR_DRAM_ODT_RTT_WR_LESS_THAN_1866_Type;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_WR_LESS_THAN_1866_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_ODT_RTT_WR_LESS_THAN_1866_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_WR_LESS_THAN_1866_PlatInit = true;
#define ATTR_SPD_LR_DRAM_ODT_RTT_WR_LESS_THAN_1866_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_ODT_RTT_NOM_LESS_THAN_1866 */
typedef uint8_t ATTR_SPD_LR_DRAM_ODT_RTT_NOM_LESS_THAN_1866_Type;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_NOM_LESS_THAN_1866_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_ODT_RTT_NOM_LESS_THAN_1866_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_NOM_LESS_THAN_1866_PlatInit = true;
#define ATTR_SPD_LR_DRAM_ODT_RTT_NOM_LESS_THAN_1866_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_ODT_RTT_WR_1866_2400 */
typedef uint8_t ATTR_SPD_LR_DRAM_ODT_RTT_WR_1866_2400_Type;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_WR_1866_2400_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_ODT_RTT_WR_1866_2400_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_WR_1866_2400_PlatInit = true;
#define ATTR_SPD_LR_DRAM_ODT_RTT_WR_1866_2400_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_ODT_RTT_NOM_1866_2400 */
typedef uint8_t ATTR_SPD_LR_DRAM_ODT_RTT_NOM_1866_2400_Type;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_NOM_1866_2400_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_ODT_RTT_NOM_1866_2400_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_NOM_1866_2400_PlatInit = true;
#define ATTR_SPD_LR_DRAM_ODT_RTT_NOM_1866_2400_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_ODT_RTT_WR_2400_3200 */
typedef uint8_t ATTR_SPD_LR_DRAM_ODT_RTT_WR_2400_3200_Type;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_WR_2400_3200_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_ODT_RTT_WR_2400_3200_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_WR_2400_3200_PlatInit = true;
#define ATTR_SPD_LR_DRAM_ODT_RTT_WR_2400_3200_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_ODT_RTT_NOM_2400_3200 */
typedef uint8_t ATTR_SPD_LR_DRAM_ODT_RTT_NOM_2400_3200_Type;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_NOM_2400_3200_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_ODT_RTT_NOM_2400_3200_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_NOM_2400_3200_PlatInit = true;
#define ATTR_SPD_LR_DRAM_ODT_RTT_NOM_2400_3200_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_ODT_RTT_PARK_LESS_THAN_1866 */
typedef uint8_t ATTR_SPD_LR_DRAM_ODT_RTT_PARK_LESS_THAN_1866_Type;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_PARK_LESS_THAN_1866_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_ODT_RTT_PARK_LESS_THAN_1866_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_PARK_LESS_THAN_1866_PlatInit = true;
#define ATTR_SPD_LR_DRAM_ODT_RTT_PARK_LESS_THAN_1866_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_ODT_RTT_PARK_1866_2400 */
typedef uint8_t ATTR_SPD_LR_DRAM_ODT_RTT_PARK_1866_2400_Type;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_PARK_1866_2400_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_ODT_RTT_PARK_1866_2400_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_PARK_1866_2400_PlatInit = true;
#define ATTR_SPD_LR_DRAM_ODT_RTT_PARK_1866_2400_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_LR_DRAM_ODT_RTT_PARK_2400_3200 */
typedef uint8_t ATTR_SPD_LR_DRAM_ODT_RTT_PARK_2400_3200_Type;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_PARK_2400_3200_Privileged = false;
const TargetTypes_t ATTR_SPD_LR_DRAM_ODT_RTT_PARK_2400_3200_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_LR_DRAM_ODT_RTT_PARK_2400_3200_PlatInit = true;
#define ATTR_SPD_LR_DRAM_ODT_RTT_PARK_2400_3200_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_BANKS_DDR3 */
typedef uint8_t ATTR_SPD_SDRAM_BANKS_DDR3_Type;
const bool ATTR_SPD_SDRAM_BANKS_DDR3_Privileged = false;
const TargetTypes_t ATTR_SPD_SDRAM_BANKS_DDR3_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_SDRAM_BANKS_DDR3_PlatInit = true;
enum ATTR_SPD_SDRAM_BANKS_DDR3_Enum
{
    ENUM_ATTR_SPD_SDRAM_BANKS_DDR3_B8 = 0x00,
    ENUM_ATTR_SPD_SDRAM_BANKS_DDR3_B16 = 0x01,
    ENUM_ATTR_SPD_SDRAM_BANKS_DDR3_B32 = 0x02,
    ENUM_ATTR_SPD_SDRAM_BANKS_DDR3_B64 = 0x03,
};
#define ATTR_SPD_SDRAM_BANKS_DDR3_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR3 */
typedef uint8_t ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR3_Type;
const bool ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR3_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR3_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR3_PlatInit = true;
enum ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR3_Enum
{
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR3_NOTOP1_5 = 0x01,
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR3_OP1_35 = 0x02,
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR3_OP1_2X = 0x04,
};
#define ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR3_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3 */
typedef uint32_t ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_Type;
const bool ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_Privileged = false;
const TargetTypes_t ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_PlatInit = true;
enum ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_Enum
{
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_18 = 0x00004000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_17 = 0x00002000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_16 = 0x00001000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_15 = 0x00000800,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_14 = 0x00000400,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_13 = 0x00000200,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_12 = 0x00000100,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_11 = 0x00000080,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_10 = 0x00000040,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_9  = 0x00000020,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_8  = 0x00000010,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_7  = 0x00000008,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_6  = 0x00000004,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_5  = 0x00000002,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_CL_4  = 0x00000001,
};
#define ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR3_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_REVISION_CODE_DDR3 */
typedef uint32_t ATTR_SPD_MODULE_REVISION_CODE_DDR3_Type;
const bool ATTR_SPD_MODULE_REVISION_CODE_DDR3_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_REVISION_CODE_DDR3_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_REVISION_CODE_DDR3_PlatInit = true;
#define ATTR_SPD_MODULE_REVISION_CODE_DDR3_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_BANKS_DDR4 */
typedef uint8_t ATTR_SPD_SDRAM_BANKS_DDR4_Type;
const bool ATTR_SPD_SDRAM_BANKS_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_SDRAM_BANKS_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_SDRAM_BANKS_DDR4_PlatInit = true;
enum ATTR_SPD_SDRAM_BANKS_DDR4_Enum
{
    ENUM_ATTR_SPD_SDRAM_BANKS_DDR4_B4 = 0x00,
    ENUM_ATTR_SPD_SDRAM_BANKS_DDR4_B8 = 0x01,
};
#define ATTR_SPD_SDRAM_BANKS_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4 */
typedef uint8_t ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4_Type;
const bool ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4_PlatInit = true;
enum ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4_Enum
{
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4_OP1_2V = 0x01,
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4_END1_2V = 0x02,
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4_OPTBD1V = 0x04,
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4_ENDTBD1V = 0x08,
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4_OPTBD2V = 0x10,
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4_ENDTBD2V = 0x20,
};
#define ATTR_SPD_MODULE_NOMINAL_VOLTAGE_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4 */
typedef uint32_t ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_Type;
const bool ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_PlatInit = true;
enum ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_Enum
{
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_24 = 0x00020000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_23 = 0x00010000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_22 = 0x00008000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_21 = 0x00004000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_20 = 0x00002000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_19 = 0x00001000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_18 = 0x00000800,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_17 = 0x00000400,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_16 = 0x00000200,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_15 = 0x00000100,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_14 = 0x00000080,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_13 = 0x00000040,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_12 = 0x00000020,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_11 = 0x00000010,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_10 = 0x00000008,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_9  = 0x00000004,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_8  = 0x00000002,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_CL_7  = 0x00000001,
};
#define ATTR_SPD_CAS_LATENCIES_SUPPORTED_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_REVISION_CODE_DDR4 */
typedef uint8_t ATTR_SPD_MODULE_REVISION_CODE_DDR4_Type;
const bool ATTR_SPD_MODULE_REVISION_CODE_DDR4_Privileged = false;
const TargetTypes_t ATTR_SPD_MODULE_REVISION_CODE_DDR4_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODULE_REVISION_CODE_DDR4_PlatInit = true;
#define ATTR_SPD_MODULE_REVISION_CODE_DDR4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_DRAM_ADDRESS_MIRRORING */
typedef uint8_t ATTR_VPD_DRAM_ADDRESS_MIRRORING_Type[2][2];
const bool ATTR_VPD_DRAM_ADDRESS_MIRRORING_Privileged = false;
const TargetTypes_t ATTR_VPD_DRAM_ADDRESS_MIRRORING_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_DRAM_ADDRESS_MIRRORING_PlatInit = true;
enum ATTR_VPD_DRAM_ADDRESS_MIRRORING_Enum
{
    ENUM_ATTR_VPD_DRAM_ADDRESS_MIRRORING_RANK0_MIRRORED = 0x08,
    ENUM_ATTR_VPD_DRAM_ADDRESS_MIRRORING_RANK1_MIRRORED = 0x04,
    ENUM_ATTR_VPD_DRAM_ADDRESS_MIRRORING_RANK2_MIRRORED = 0x02,
    ENUM_ATTR_VPD_DRAM_ADDRESS_MIRRORING_RANK3_MIRRORED = 0x01,
};
#define ATTR_VPD_DRAM_ADDRESS_MIRRORING_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_ODT_RD */
typedef uint8_t ATTR_VPD_ODT_RD_Type[2][2][4];
const bool ATTR_VPD_ODT_RD_Privileged = false;
const TargetTypes_t ATTR_VPD_ODT_RD_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_ODT_RD_PlatInit = true;
#define ATTR_VPD_ODT_RD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_ODT_WR */
typedef uint8_t ATTR_VPD_ODT_WR_Type[2][2][4];
const bool ATTR_VPD_ODT_WR_Privileged = false;
const TargetTypes_t ATTR_VPD_ODT_WR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_ODT_WR_PlatInit = true;
#define ATTR_VPD_ODT_WR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_DRAM_RON */
typedef uint8_t ATTR_VPD_DRAM_RON_Type[2][2];
const bool ATTR_VPD_DRAM_RON_Privileged = false;
const TargetTypes_t ATTR_VPD_DRAM_RON_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_DRAM_RON_PlatInit = true;
enum ATTR_VPD_DRAM_RON_Enum
{
    ENUM_ATTR_VPD_DRAM_RON_INVALID = 0,
    ENUM_ATTR_VPD_DRAM_RON_OHM34 = 34,
    ENUM_ATTR_VPD_DRAM_RON_OHM40 = 40,
    ENUM_ATTR_VPD_DRAM_RON_OHM48 = 48,
};
#define ATTR_VPD_DRAM_RON_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_DRAM_RTT_NOM */
typedef uint8_t ATTR_VPD_DRAM_RTT_NOM_Type[2][2][4];
const bool ATTR_VPD_DRAM_RTT_NOM_Privileged = false;
const TargetTypes_t ATTR_VPD_DRAM_RTT_NOM_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_DRAM_RTT_NOM_PlatInit = true;
enum ATTR_VPD_DRAM_RTT_NOM_Enum
{
    ENUM_ATTR_VPD_DRAM_RTT_NOM_DISABLE = 0,
    ENUM_ATTR_VPD_DRAM_RTT_NOM_OHM20 = 20,
    ENUM_ATTR_VPD_DRAM_RTT_NOM_OHM30 = 30,
    ENUM_ATTR_VPD_DRAM_RTT_NOM_OHM34 = 34,
    ENUM_ATTR_VPD_DRAM_RTT_NOM_OHM40 = 40,
    ENUM_ATTR_VPD_DRAM_RTT_NOM_OHM48 = 48,
    ENUM_ATTR_VPD_DRAM_RTT_NOM_OHM60 = 60,
    ENUM_ATTR_VPD_DRAM_RTT_NOM_OHM80 = 80,
    ENUM_ATTR_VPD_DRAM_RTT_NOM_OHM120 = 120,
    ENUM_ATTR_VPD_DRAM_RTT_NOM_OHM240 = 240,
};
#define ATTR_VPD_DRAM_RTT_NOM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_DRAM_RTT_WR */
typedef uint8_t ATTR_VPD_DRAM_RTT_WR_Type[2][2][4];
const bool ATTR_VPD_DRAM_RTT_WR_Privileged = false;
const TargetTypes_t ATTR_VPD_DRAM_RTT_WR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_DRAM_RTT_WR_PlatInit = true;
enum ATTR_VPD_DRAM_RTT_WR_Enum
{
    ENUM_ATTR_VPD_DRAM_RTT_WR_DISABLE = 0,
    ENUM_ATTR_VPD_DRAM_RTT_WR_OHM60 = 60,
    ENUM_ATTR_VPD_DRAM_RTT_WR_OHM120 = 120,
    ENUM_ATTR_VPD_DRAM_RTT_WR_OHM240 = 240,
    ENUM_ATTR_VPD_DRAM_RTT_WR_HIGHZ = 1,
};
#define ATTR_VPD_DRAM_RTT_WR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_DRAM_RTT_PARK */
typedef uint8_t ATTR_VPD_DRAM_RTT_PARK_Type[2][2][4];
const bool ATTR_VPD_DRAM_RTT_PARK_Privileged = false;
const TargetTypes_t ATTR_VPD_DRAM_RTT_PARK_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_DRAM_RTT_PARK_PlatInit = true;
enum ATTR_VPD_DRAM_RTT_PARK_Enum
{
    ENUM_ATTR_VPD_DRAM_RTT_PARK_DISABLE = 0,
    ENUM_ATTR_VPD_DRAM_RTT_PARK_60OHM = 60,
    ENUM_ATTR_VPD_DRAM_RTT_PARK_120OHM = 120,
    ENUM_ATTR_VPD_DRAM_RTT_PARK_40OHM = 40,
    ENUM_ATTR_VPD_DRAM_RTT_PARK_240OHM = 240,
    ENUM_ATTR_VPD_DRAM_RTT_PARK_48OHM = 48,
    ENUM_ATTR_VPD_DRAM_RTT_PARK_80OHM = 80,
    ENUM_ATTR_VPD_DRAM_RTT_PARK_34OHM = 34,
};
#define ATTR_VPD_DRAM_RTT_PARK_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_DRAM_WR_VREF */
typedef uint32_t ATTR_VPD_DRAM_WR_VREF_Type[2];
const bool ATTR_VPD_DRAM_WR_VREF_Privileged = false;
const TargetTypes_t ATTR_VPD_DRAM_WR_VREF_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_DRAM_WR_VREF_PlatInit = true;
enum ATTR_VPD_DRAM_WR_VREF_Enum
{
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD420 = 420,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD425 = 425,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD430 = 430,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD435 = 435,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD440 = 440,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD445 = 445,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD450 = 450,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD455 = 455,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD460 = 460,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD465 = 465,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD470 = 470,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD475 = 475,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD480 = 480,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD485 = 485,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD490 = 490,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD495 = 495,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD500 = 500,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD505 = 505,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD510 = 510,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD515 = 515,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD520 = 520,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD525 = 525,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD530 = 530,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD535 = 535,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD540 = 540,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD545 = 545,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD550 = 550,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD555 = 555,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD560 = 560,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD565 = 565,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD570 = 570,
    ENUM_ATTR_VPD_DRAM_WR_VREF_VDD575 = 575,
};
#define ATTR_VPD_DRAM_WR_VREF_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_DRAM_WRDDR4_VREF */
typedef uint8_t ATTR_VPD_DRAM_WRDDR4_VREF_Type[2];
const bool ATTR_VPD_DRAM_WRDDR4_VREF_Privileged = false;
const TargetTypes_t ATTR_VPD_DRAM_WRDDR4_VREF_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_DRAM_WRDDR4_VREF_PlatInit = true;
#define ATTR_VPD_DRAM_WRDDR4_VREF_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_DRV_IMP_DQ_DQS */
typedef uint8_t ATTR_VPD_CEN_DRV_IMP_DQ_DQS_Type[2];
const bool ATTR_VPD_CEN_DRV_IMP_DQ_DQS_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_DRV_IMP_DQ_DQS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_DRV_IMP_DQ_DQS_PlatInit = true;
enum ATTR_VPD_CEN_DRV_IMP_DQ_DQS_Enum
{
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM24_FFE0 = 0x0A,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM30_FFE0 = 0x08,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM30_FFE480 = 0x48,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM30_FFE240 = 0x38,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM30_FFE160 = 0x28,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM30_FFE120 = 0x18,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM34_FFE0 = 0x07,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM34_FFE480 = 0x47,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM34_FFE240 = 0x37,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM34_FFE160 = 0x27,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM34_FFE120 = 0x17,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM40_FFE0 = 0x06,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM40_FFE480 = 0x46,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM40_FFE240 = 0x36,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM40_FFE160 = 0x26,
    ENUM_ATTR_VPD_CEN_DRV_IMP_DQ_DQS_OHM40_FFE120 = 0x16,
};
#define ATTR_VPD_CEN_DRV_IMP_DQ_DQS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_DRV_IMP_ADDR */
typedef uint8_t ATTR_VPD_CEN_DRV_IMP_ADDR_Type[2];
const bool ATTR_VPD_CEN_DRV_IMP_ADDR_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_DRV_IMP_ADDR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_DRV_IMP_ADDR_PlatInit = true;
enum ATTR_VPD_CEN_DRV_IMP_ADDR_Enum
{
    ENUM_ATTR_VPD_CEN_DRV_IMP_ADDR_OHM15 = 15,
    ENUM_ATTR_VPD_CEN_DRV_IMP_ADDR_OHM20 = 20,
    ENUM_ATTR_VPD_CEN_DRV_IMP_ADDR_OHM30 = 30,
    ENUM_ATTR_VPD_CEN_DRV_IMP_ADDR_OHM40 = 40,
};
#define ATTR_VPD_CEN_DRV_IMP_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_DRV_IMP_CNTL */
typedef uint8_t ATTR_VPD_CEN_DRV_IMP_CNTL_Type[2];
const bool ATTR_VPD_CEN_DRV_IMP_CNTL_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_DRV_IMP_CNTL_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_DRV_IMP_CNTL_PlatInit = true;
enum ATTR_VPD_CEN_DRV_IMP_CNTL_Enum
{
    ENUM_ATTR_VPD_CEN_DRV_IMP_CNTL_OHM15 = 15,
    ENUM_ATTR_VPD_CEN_DRV_IMP_CNTL_OHM20 = 20,
    ENUM_ATTR_VPD_CEN_DRV_IMP_CNTL_OHM30 = 30,
    ENUM_ATTR_VPD_CEN_DRV_IMP_CNTL_OHM40 = 40,
};
#define ATTR_VPD_CEN_DRV_IMP_CNTL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_DRV_IMP_CLK */
typedef uint8_t ATTR_VPD_CEN_DRV_IMP_CLK_Type[2];
const bool ATTR_VPD_CEN_DRV_IMP_CLK_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_DRV_IMP_CLK_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_DRV_IMP_CLK_PlatInit = true;
enum ATTR_VPD_CEN_DRV_IMP_CLK_Enum
{
    ENUM_ATTR_VPD_CEN_DRV_IMP_CLK_OHM15 = 15,
    ENUM_ATTR_VPD_CEN_DRV_IMP_CLK_OHM20 = 20,
    ENUM_ATTR_VPD_CEN_DRV_IMP_CLK_OHM30 = 30,
    ENUM_ATTR_VPD_CEN_DRV_IMP_CLK_OHM40 = 40,
};
#define ATTR_VPD_CEN_DRV_IMP_CLK_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_DRV_IMP_SPCKE */
typedef uint8_t ATTR_VPD_CEN_DRV_IMP_SPCKE_Type[2];
const bool ATTR_VPD_CEN_DRV_IMP_SPCKE_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_DRV_IMP_SPCKE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_DRV_IMP_SPCKE_PlatInit = true;
enum ATTR_VPD_CEN_DRV_IMP_SPCKE_Enum
{
    ENUM_ATTR_VPD_CEN_DRV_IMP_SPCKE_OHM15 = 15,
    ENUM_ATTR_VPD_CEN_DRV_IMP_SPCKE_OHM20 = 20,
    ENUM_ATTR_VPD_CEN_DRV_IMP_SPCKE_OHM30 = 30,
    ENUM_ATTR_VPD_CEN_DRV_IMP_SPCKE_OHM40 = 40,
};
#define ATTR_VPD_CEN_DRV_IMP_SPCKE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_RCV_IMP_DQ_DQS */
typedef uint8_t ATTR_VPD_CEN_RCV_IMP_DQ_DQS_Type[2];
const bool ATTR_VPD_CEN_RCV_IMP_DQ_DQS_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_RCV_IMP_DQ_DQS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_RCV_IMP_DQ_DQS_PlatInit = true;
enum ATTR_VPD_CEN_RCV_IMP_DQ_DQS_Enum
{
    ENUM_ATTR_VPD_CEN_RCV_IMP_DQ_DQS_OHM15 = 15,
    ENUM_ATTR_VPD_CEN_RCV_IMP_DQ_DQS_OHM20 = 20,
    ENUM_ATTR_VPD_CEN_RCV_IMP_DQ_DQS_OHM30 = 30,
    ENUM_ATTR_VPD_CEN_RCV_IMP_DQ_DQS_OHM40 = 40,
    ENUM_ATTR_VPD_CEN_RCV_IMP_DQ_DQS_OHM48 = 48,
    ENUM_ATTR_VPD_CEN_RCV_IMP_DQ_DQS_OHM60 = 60,
    ENUM_ATTR_VPD_CEN_RCV_IMP_DQ_DQS_OHM80 = 80,
    ENUM_ATTR_VPD_CEN_RCV_IMP_DQ_DQS_OHM120 = 120,
    ENUM_ATTR_VPD_CEN_RCV_IMP_DQ_DQS_OHM160 = 160,
    ENUM_ATTR_VPD_CEN_RCV_IMP_DQ_DQS_OHM240 = 240,
};
#define ATTR_VPD_CEN_RCV_IMP_DQ_DQS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_SLEW_RATE_DQ_DQS */
typedef uint8_t ATTR_VPD_CEN_SLEW_RATE_DQ_DQS_Type[2];
const bool ATTR_VPD_CEN_SLEW_RATE_DQ_DQS_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_SLEW_RATE_DQ_DQS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_SLEW_RATE_DQ_DQS_PlatInit = true;
enum ATTR_VPD_CEN_SLEW_RATE_DQ_DQS_Enum
{
    ENUM_ATTR_VPD_CEN_SLEW_RATE_DQ_DQS_SLEW_3V_NS = 3,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_DQ_DQS_SLEW_4V_NS = 4,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_DQ_DQS_SLEW_5V_NS = 5,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_DQ_DQS_SLEW_6V_NS = 6,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_DQ_DQS_SLEW_MAXV_NS = 7,
};
#define ATTR_VPD_CEN_SLEW_RATE_DQ_DQS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_SLEW_RATE_ADDR */
typedef uint8_t ATTR_VPD_CEN_SLEW_RATE_ADDR_Type[2];
const bool ATTR_VPD_CEN_SLEW_RATE_ADDR_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_SLEW_RATE_ADDR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_SLEW_RATE_ADDR_PlatInit = true;
enum ATTR_VPD_CEN_SLEW_RATE_ADDR_Enum
{
    ENUM_ATTR_VPD_CEN_SLEW_RATE_ADDR_SLEW_3V_NS = 3,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_ADDR_SLEW_4V_NS = 4,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_ADDR_SLEW_5V_NS = 5,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_ADDR_SLEW_6V_NS = 6,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_ADDR_SLEW_MAXV_NS = 7,
};
#define ATTR_VPD_CEN_SLEW_RATE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_SLEW_RATE_CLK */
typedef uint8_t ATTR_VPD_CEN_SLEW_RATE_CLK_Type[2];
const bool ATTR_VPD_CEN_SLEW_RATE_CLK_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_SLEW_RATE_CLK_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_SLEW_RATE_CLK_PlatInit = true;
enum ATTR_VPD_CEN_SLEW_RATE_CLK_Enum
{
    ENUM_ATTR_VPD_CEN_SLEW_RATE_CLK_SLEW_3V_NS = 3,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_CLK_SLEW_4V_NS = 4,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_CLK_SLEW_5V_NS = 5,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_CLK_SLEW_6V_NS = 6,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_CLK_SLEW_MAXV_NS = 7,
};
#define ATTR_VPD_CEN_SLEW_RATE_CLK_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_SLEW_RATE_SPCKE */
typedef uint8_t ATTR_VPD_CEN_SLEW_RATE_SPCKE_Type[2];
const bool ATTR_VPD_CEN_SLEW_RATE_SPCKE_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_SLEW_RATE_SPCKE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_SLEW_RATE_SPCKE_PlatInit = true;
enum ATTR_VPD_CEN_SLEW_RATE_SPCKE_Enum
{
    ENUM_ATTR_VPD_CEN_SLEW_RATE_SPCKE_SLEW_3V_NS = 3,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_SPCKE_SLEW_4V_NS = 4,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_SPCKE_SLEW_5V_NS = 5,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_SPCKE_SLEW_6V_NS = 6,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_SPCKE_SLEW_MAXV_NS = 7,
};
#define ATTR_VPD_CEN_SLEW_RATE_SPCKE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_SLEW_RATE_CNTL */
typedef uint8_t ATTR_VPD_CEN_SLEW_RATE_CNTL_Type[2];
const bool ATTR_VPD_CEN_SLEW_RATE_CNTL_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_SLEW_RATE_CNTL_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_SLEW_RATE_CNTL_PlatInit = true;
enum ATTR_VPD_CEN_SLEW_RATE_CNTL_Enum
{
    ENUM_ATTR_VPD_CEN_SLEW_RATE_CNTL_SLEW_3V_NS = 3,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_CNTL_SLEW_4V_NS = 4,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_CNTL_SLEW_5V_NS = 5,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_CNTL_SLEW_6V_NS = 6,
    ENUM_ATTR_VPD_CEN_SLEW_RATE_CNTL_SLEW_MAXV_NS = 7,
};
#define ATTR_VPD_CEN_SLEW_RATE_CNTL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_RD_VREF */
typedef uint32_t ATTR_VPD_CEN_RD_VREF_Type[2];
const bool ATTR_VPD_CEN_RD_VREF_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_RD_VREF_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_RD_VREF_PlatInit = true;
enum ATTR_VPD_CEN_RD_VREF_Enum
{
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD40375 = 40375,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD41750 = 41750,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD43125 = 43125,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD44500 = 44500,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD45875 = 45875,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD47250 = 47250,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD48625 = 48625,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD50000 = 50000,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD51375 = 51375,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD52750 = 52750,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD54125 = 54125,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD55500 = 55500,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD56875 = 56875,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD58250 = 58250,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD59625 = 59625,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD61000 = 61000,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD60375 = 60375,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD61750 = 61750,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD63125 = 63125,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD64500 = 64500,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD65875 = 65875,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD67250 = 67250,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD68625 = 68625,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD70000 = 70000,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD71375 = 71375,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD72750 = 72750,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD74125 = 74125,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD75500 = 75500,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD76875 = 76875,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD78250 = 78250,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD79625 = 79625,
    ENUM_ATTR_VPD_CEN_RD_VREF_VDD81000 = 81000,
};
#define ATTR_VPD_CEN_RD_VREF_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P0 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P0_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P0_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P0_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P1 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P1_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P1_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P1_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M0_CLK_P1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P0 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P0_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P0_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P0_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P1 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P1_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P1_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P1_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M1_CLK_P1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A0 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A0_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A0_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A0_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A1 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A1_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A1_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A1_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A2 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A2_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A2_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A2_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A2_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A3 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A3_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A3_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A3_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A3_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A3_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A4 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A4_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A4_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A4_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A4_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A4_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A5 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A5_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A5_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A5_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A5_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A5_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A6 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A6_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A6_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A6_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A6_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A6_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A7 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A7_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A7_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A7_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A7_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A7_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A8 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A8_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A8_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A8_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A8_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A8_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A9 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A9_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A9_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A9_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A9_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A9_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A10 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A10_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A10_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A10_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A10_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A10_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A11 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A11_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A11_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A11_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A11_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A11_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A12 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A12_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A12_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A12_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A12_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A12_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A13 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A13_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A13_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A13_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A13_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A13_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A14 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A14_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A14_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A14_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A14_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A14_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_A15 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A15_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A15_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_A15_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_A15_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_A15_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA0 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA0_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA0_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA0_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA1 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA1_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA1_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA1_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA2 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA2_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA2_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA2_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_BA2_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_CASN */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_CASN_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_CASN_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_CASN_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_CASN_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_CASN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_RASN */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_RASN_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_RASN_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_RASN_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_RASN_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_RASN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_CMD_WEN */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_WEN_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_WEN_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_CMD_WEN_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_CMD_WEN_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_CMD_WEN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_PAR */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_PAR_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_PAR_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_PAR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_PAR_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_PAR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M_ACTN */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M_ACTN_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M_ACTN_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M_ACTN_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M_ACTN_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M_ACTN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE0 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE0_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE0_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE0_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE1 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE1_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE1_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE1_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE2 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE2_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE2_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE2_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE2_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE3 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE3_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE3_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE3_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE3_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CKE3_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN0 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN0_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN0_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN0_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN1 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN1_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN1_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN1_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN2 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN2_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN2_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN2_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN2_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN3 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN3_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN3_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN3_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN3_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_CSN3_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT0 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT0_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT0_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT0_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT1 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT1_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT1_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT1_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M0_CNTL_ODT1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE0 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE0_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE0_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE0_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE1 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE1_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE1_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE1_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE2 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE2_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE2_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE2_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE2_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE3 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE3_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE3_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE3_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE3_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CKE3_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN0 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN0_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN0_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN0_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN1 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN1_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN1_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN1_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN2 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN2_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN2_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN2_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN2_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN2_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN3 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN3_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN3_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN3_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN3_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_CSN3_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT0 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT0_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT0_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT0_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT0_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT1 */
typedef uint8_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT1_Type[2];
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT1_Privileged = false;
const TargetTypes_t ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT1_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT1_PlatInit = true;
#define ATTR_VPD_CEN_PHASE_ROT_M1_CNTL_ODT1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_PERIODIC_MEMCAL_MODE_OPTIONS */
typedef uint32_t ATTR_VPD_PERIODIC_MEMCAL_MODE_OPTIONS_Type[2];
const bool ATTR_VPD_PERIODIC_MEMCAL_MODE_OPTIONS_Privileged = false;
const TargetTypes_t ATTR_VPD_PERIODIC_MEMCAL_MODE_OPTIONS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_PERIODIC_MEMCAL_MODE_OPTIONS_PlatInit = true;
#define ATTR_VPD_PERIODIC_MEMCAL_MODE_OPTIONS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CKE_PRI_MAP */
typedef uint32_t ATTR_VPD_CKE_PRI_MAP_Type[2];
const bool ATTR_VPD_CKE_PRI_MAP_Privileged = false;
const TargetTypes_t ATTR_VPD_CKE_PRI_MAP_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CKE_PRI_MAP_PlatInit = true;
#define ATTR_VPD_CKE_PRI_MAP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CKE_PWR_MAP */
typedef uint64_t ATTR_VPD_CKE_PWR_MAP_Type;
const bool ATTR_VPD_CKE_PWR_MAP_Privileged = false;
const TargetTypes_t ATTR_VPD_CKE_PWR_MAP_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_CKE_PWR_MAP_PlatInit = true;
#define ATTR_VPD_CKE_PWR_MAP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_GPO */
typedef uint8_t ATTR_VPD_GPO_Type[2];
const bool ATTR_VPD_GPO_Privileged = false;
const TargetTypes_t ATTR_VPD_GPO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_GPO_PlatInit = true;
#define ATTR_VPD_GPO_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_RLO */
typedef uint8_t ATTR_VPD_RLO_Type[2];
const bool ATTR_VPD_RLO_Privileged = false;
const TargetTypes_t ATTR_VPD_RLO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_RLO_PlatInit = true;
#define ATTR_VPD_RLO_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_WLO */
typedef uint8_t ATTR_VPD_WLO_Type[2];
const bool ATTR_VPD_WLO_Privileged = false;
const TargetTypes_t ATTR_VPD_WLO_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_WLO_PlatInit = true;
#define ATTR_VPD_WLO_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_TSYS_ADR */
typedef uint8_t ATTR_VPD_TSYS_ADR_Type[2];
const bool ATTR_VPD_TSYS_ADR_Privileged = false;
const TargetTypes_t ATTR_VPD_TSYS_ADR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_TSYS_ADR_PlatInit = true;
#define ATTR_VPD_TSYS_ADR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_TSYS_DP18 */
typedef uint8_t ATTR_VPD_TSYS_DP18_Type[2];
const bool ATTR_VPD_TSYS_DP18_Privileged = false;
const TargetTypes_t ATTR_VPD_TSYS_DP18_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_TSYS_DP18_PlatInit = true;
#define ATTR_VPD_TSYS_DP18_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CDIMM_SENSOR_MAP_PRIMARY */
typedef uint8_t ATTR_VPD_CDIMM_SENSOR_MAP_PRIMARY_Type;
const bool ATTR_VPD_CDIMM_SENSOR_MAP_PRIMARY_Privileged = false;
const TargetTypes_t ATTR_VPD_CDIMM_SENSOR_MAP_PRIMARY_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_VPD_CDIMM_SENSOR_MAP_PRIMARY_PlatInit = true;
#define ATTR_VPD_CDIMM_SENSOR_MAP_PRIMARY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_CDIMM_SENSOR_MAP_SECONDARY */
typedef uint8_t ATTR_VPD_CDIMM_SENSOR_MAP_SECONDARY_Type;
const bool ATTR_VPD_CDIMM_SENSOR_MAP_SECONDARY_Privileged = false;
const TargetTypes_t ATTR_VPD_CDIMM_SENSOR_MAP_SECONDARY_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_VPD_CDIMM_SENSOR_MAP_SECONDARY_PlatInit = true;
#define ATTR_VPD_CDIMM_SENSOR_MAP_SECONDARY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_DRAM_2N_MODE_ENABLED */
typedef uint8_t ATTR_VPD_DRAM_2N_MODE_ENABLED_Type;
const bool ATTR_VPD_DRAM_2N_MODE_ENABLED_Privileged = false;
const TargetTypes_t ATTR_VPD_DRAM_2N_MODE_ENABLED_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_DRAM_2N_MODE_ENABLED_PlatInit = true;
enum ATTR_VPD_DRAM_2N_MODE_ENABLED_Enum
{
    ENUM_ATTR_VPD_DRAM_2N_MODE_ENABLED_FALSE = 0,
    ENUM_ATTR_VPD_DRAM_2N_MODE_ENABLED_TRUE = 1,
};
#define ATTR_VPD_DRAM_2N_MODE_ENABLED_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CDIMM_VPD_MASTER_POWER_SLOPE */
typedef uint32_t ATTR_CDIMM_VPD_MASTER_POWER_SLOPE_Type;
const bool ATTR_CDIMM_VPD_MASTER_POWER_SLOPE_Privileged = false;
const TargetTypes_t ATTR_CDIMM_VPD_MASTER_POWER_SLOPE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CDIMM_VPD_MASTER_POWER_SLOPE_PlatInit = true;
#define ATTR_CDIMM_VPD_MASTER_POWER_SLOPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CDIMM_VPD_MASTER_POWER_INTERCEPT */
typedef uint32_t ATTR_CDIMM_VPD_MASTER_POWER_INTERCEPT_Type;
const bool ATTR_CDIMM_VPD_MASTER_POWER_INTERCEPT_Privileged = false;
const TargetTypes_t ATTR_CDIMM_VPD_MASTER_POWER_INTERCEPT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CDIMM_VPD_MASTER_POWER_INTERCEPT_PlatInit = true;
#define ATTR_CDIMM_VPD_MASTER_POWER_INTERCEPT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CDIMM_VPD_SUPPLIER_POWER_SLOPE */
typedef uint32_t ATTR_CDIMM_VPD_SUPPLIER_POWER_SLOPE_Type;
const bool ATTR_CDIMM_VPD_SUPPLIER_POWER_SLOPE_Privileged = false;
const TargetTypes_t ATTR_CDIMM_VPD_SUPPLIER_POWER_SLOPE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CDIMM_VPD_SUPPLIER_POWER_SLOPE_PlatInit = true;
#define ATTR_CDIMM_VPD_SUPPLIER_POWER_SLOPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CDIMM_VPD_SUPPLIER_POWER_INTERCEPT */
typedef uint32_t ATTR_CDIMM_VPD_SUPPLIER_POWER_INTERCEPT_Type;
const bool ATTR_CDIMM_VPD_SUPPLIER_POWER_INTERCEPT_Privileged = false;
const TargetTypes_t ATTR_CDIMM_VPD_SUPPLIER_POWER_INTERCEPT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CDIMM_VPD_SUPPLIER_POWER_INTERCEPT_PlatInit = true;
#define ATTR_CDIMM_VPD_SUPPLIER_POWER_INTERCEPT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_L4_BANK_DELETE_VPD */
typedef uint32_t ATTR_L4_BANK_DELETE_VPD_Type;
const bool ATTR_L4_BANK_DELETE_VPD_Privileged = false;
const TargetTypes_t ATTR_L4_BANK_DELETE_VPD_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_L4_BANK_DELETE_VPD_PlatInit = false;

/* ATTR_VPD_MT_VERSION_BYTE */
typedef uint8_t ATTR_VPD_MT_VERSION_BYTE_Type;
const bool ATTR_VPD_MT_VERSION_BYTE_Privileged = false;
const TargetTypes_t ATTR_VPD_MT_VERSION_BYTE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_VPD_MT_VERSION_BYTE_PlatInit = true;
#define ATTR_VPD_MT_VERSION_BYTE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_MR_VERSION_BYTE */
typedef uint8_t ATTR_VPD_MR_VERSION_BYTE_Type;
const bool ATTR_VPD_MR_VERSION_BYTE_Privileged = false;
const TargetTypes_t ATTR_VPD_MR_VERSION_BYTE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_VPD_MR_VERSION_BYTE_PlatInit = true;
#define ATTR_VPD_MR_VERSION_BYTE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_MR_DATA_CONTROL_BYTE */
typedef uint8_t ATTR_VPD_MR_DATA_CONTROL_BYTE_Type;
const bool ATTR_VPD_MR_DATA_CONTROL_BYTE_Privileged = false;
const TargetTypes_t ATTR_VPD_MR_DATA_CONTROL_BYTE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_VPD_MR_DATA_CONTROL_BYTE_PlatInit = true;
#define ATTR_VPD_MR_DATA_CONTROL_BYTE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_MT_DATA_CONTROL_BYTE */
typedef uint8_t ATTR_VPD_MT_DATA_CONTROL_BYTE_Type;
const bool ATTR_VPD_MT_DATA_CONTROL_BYTE_Privileged = false;
const TargetTypes_t ATTR_VPD_MT_DATA_CONTROL_BYTE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_VPD_MT_DATA_CONTROL_BYTE_PlatInit = true;
#define ATTR_VPD_MT_DATA_CONTROL_BYTE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_VM_KEYWORD */
typedef uint32_t ATTR_VPD_VM_KEYWORD_Type;
const bool ATTR_VPD_VM_KEYWORD_Privileged = false;
const TargetTypes_t ATTR_VPD_VM_KEYWORD_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_VPD_VM_KEYWORD_PlatInit = true;
#define ATTR_VPD_VM_KEYWORD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_VD_KEYWORD */
typedef uint32_t ATTR_VPD_VD_KEYWORD_Type;
const bool ATTR_VPD_VD_KEYWORD_Privileged = false;
const TargetTypes_t ATTR_VPD_VD_KEYWORD_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_VPD_VD_KEYWORD_PlatInit = true;
#define ATTR_VPD_VD_KEYWORD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_DW_KEYWORD */
typedef uint32_t ATTR_VPD_DW_KEYWORD_Type;
const bool ATTR_VPD_DW_KEYWORD_Privileged = false;
const TargetTypes_t ATTR_VPD_DW_KEYWORD_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_VPD_DW_KEYWORD_PlatInit = true;
#define ATTR_VPD_DW_KEYWORD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_REV */
typedef uint8_t ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_REV_Type;
const bool ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_REV_Privileged = false;
const TargetTypes_t ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_REV_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_REV_PlatInit = true;
#define ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_REV_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODSPEC_COM_REF_RAW_CARD */
typedef uint8_t ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_Type;
const bool ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_Privileged = false;
const TargetTypes_t ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_PlatInit = true;
enum ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_Enum
{
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_A = 0x00,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_B = 0x01,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_C = 0x02,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_D = 0x03,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_E = 0x04,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_F = 0x05,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_G = 0x06,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_H = 0x07,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_J = 0x08,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_K = 0x09,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_L = 0x0a,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_M = 0x0b,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_N = 0x0c,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_P = 0x0d,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_R = 0x0e,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_T = 0x0f,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_U = 0x10,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_V = 0x11,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_W = 0x12,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_Y = 0x13,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AA = 0x14,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AB = 0x15,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AC = 0x16,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AD = 0x17,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AE = 0x18,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AF = 0x19,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AG = 0x1a,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AH = 0x1b,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AJ = 0x1c,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AK = 0x1d,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AL = 0x1e,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AM = 0x20,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AN = 0x21,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AP = 0x22,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AR = 0x23,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AT = 0x24,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AU = 0x25,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AV = 0x26,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AW = 0x27,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_AY = 0x28,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BA = 0x29,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BB = 0x2a,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BC = 0x2b,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BD = 0x2c,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BE = 0x2d,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BF = 0x2e,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BG = 0x2f,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BH = 0x30,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BJ = 0x31,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BK = 0x32,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BL = 0x33,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BM = 0x34,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BN = 0x35,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BP = 0x36,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BR = 0x37,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BT = 0x38,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BU = 0x39,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BV = 0x3a,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BW = 0x3b,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_BY = 0x3c,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_CA = 0x3d,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_CB = 0x3e,
    ENUM_ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_ZZ = 0x3f,
};
#define ATTR_SPD_MODSPEC_COM_REF_RAW_CARD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_POWER_CONTROL_CAPABLE */
typedef uint8_t ATTR_VPD_POWER_CONTROL_CAPABLE_Type;
const bool ATTR_VPD_POWER_CONTROL_CAPABLE_Privileged = false;
const TargetTypes_t ATTR_VPD_POWER_CONTROL_CAPABLE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_VPD_POWER_CONTROL_CAPABLE_PlatInit = true;
enum ATTR_VPD_POWER_CONTROL_CAPABLE_Enum
{
    ENUM_ATTR_VPD_POWER_CONTROL_CAPABLE_NONE = 0x00,
    ENUM_ATTR_VPD_POWER_CONTROL_CAPABLE_SLOWEXIT_CAPABLE = 0x01,
    ENUM_ATTR_VPD_POWER_CONTROL_CAPABLE_FASTEXIT_CAPABLE = 0x02,
    ENUM_ATTR_VPD_POWER_CONTROL_CAPABLE_FASTSLOW_CAPABLE = 0x03,
};
#define ATTR_VPD_POWER_CONTROL_CAPABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_DIMM_RCD_IBT */
typedef uint32_t ATTR_VPD_DIMM_RCD_IBT_Type[2][2];
const bool ATTR_VPD_DIMM_RCD_IBT_Privileged = false;
const TargetTypes_t ATTR_VPD_DIMM_RCD_IBT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_DIMM_RCD_IBT_PlatInit = false;
enum ATTR_VPD_DIMM_RCD_IBT_Enum
{
    ENUM_ATTR_VPD_DIMM_RCD_IBT_IBT_OFF = 0,
    ENUM_ATTR_VPD_DIMM_RCD_IBT_IBT_100 = 100,
    ENUM_ATTR_VPD_DIMM_RCD_IBT_IBT_150 = 150,
    ENUM_ATTR_VPD_DIMM_RCD_IBT_IBT_200 = 200,
    ENUM_ATTR_VPD_DIMM_RCD_IBT_IBT_300 = 300,
};
#define ATTR_VPD_DIMM_RCD_IBT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VPD_RD_CTR_WINDAGE_OFFSET */
typedef uint32_t ATTR_VPD_RD_CTR_WINDAGE_OFFSET_Type[2];
const bool ATTR_VPD_RD_CTR_WINDAGE_OFFSET_Privileged = false;
const TargetTypes_t ATTR_VPD_RD_CTR_WINDAGE_OFFSET_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_RD_CTR_WINDAGE_OFFSET_PlatInit = true;
#define ATTR_VPD_RD_CTR_WINDAGE_OFFSET_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_ISDIMM_MBVPD_INDEX */
typedef uint8_t ATTR_ISDIMM_MBVPD_INDEX_Type;
const bool ATTR_ISDIMM_MBVPD_INDEX_Privileged = false;
const TargetTypes_t ATTR_ISDIMM_MBVPD_INDEX_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_ISDIMM_MBVPD_INDEX_PlatInit = true;
#define ATTR_ISDIMM_MBVPD_INDEX_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_SLOPE */
typedef uint32_t ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_SLOPE_Type;
const bool ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_SLOPE_Privileged = false;
const TargetTypes_t ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_SLOPE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_SLOPE_PlatInit = true;
#define ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_SLOPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_INTERCEPT */
typedef uint32_t ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_INTERCEPT_Type;
const bool ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_INTERCEPT_Privileged = false;
const TargetTypes_t ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_INTERCEPT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_INTERCEPT_PlatInit = true;
#define ATTR_CDIMM_VPD_MASTER_TOTAL_POWER_INTERCEPT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_SLOPE */
typedef uint32_t ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_SLOPE_Type;
const bool ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_SLOPE_Privileged = false;
const TargetTypes_t ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_SLOPE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_SLOPE_PlatInit = true;
#define ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_SLOPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_INTERCEPT */
typedef uint32_t ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_INTERCEPT_Type;
const bool ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_INTERCEPT_Privileged = false;
const TargetTypes_t ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_INTERCEPT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_INTERCEPT_PlatInit = true;
#define ATTR_CDIMM_VPD_SUPPLIER_TOTAL_POWER_INTERCEPT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CEN_DQ_TO_DIMM_CONN_DQ */
typedef uint8_t ATTR_CEN_DQ_TO_DIMM_CONN_DQ_Type[80];
const bool ATTR_CEN_DQ_TO_DIMM_CONN_DQ_Privileged = false;
const TargetTypes_t ATTR_CEN_DQ_TO_DIMM_CONN_DQ_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_CEN_DQ_TO_DIMM_CONN_DQ_PlatInit = true;
#define ATTR_CEN_DQ_TO_DIMM_CONN_DQ_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MBA_PORT */
typedef uint8_t ATTR_MBA_PORT_Type;
const bool ATTR_MBA_PORT_Privileged = false;
const TargetTypes_t ATTR_MBA_PORT_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_MBA_PORT_PlatInit = true;
#define ATTR_MBA_PORT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MBA_DIMM */
typedef uint8_t ATTR_MBA_DIMM_Type;
const bool ATTR_MBA_DIMM_Privileged = false;
const TargetTypes_t ATTR_MBA_DIMM_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_MBA_DIMM_PlatInit = true;
#define ATTR_MBA_DIMM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_BAD_DQ_BITMAP */
typedef uint8_t ATTR_BAD_DQ_BITMAP_Type[4][10];
const bool ATTR_BAD_DQ_BITMAP_Privileged = false;
const TargetTypes_t ATTR_BAD_DQ_BITMAP_TargetTypes = TARGET_TYPE_DIMM;
const bool ATTR_BAD_DQ_BITMAP_PlatInit = true;

/* ATTR_VPD_DIMM_SPARE */
typedef uint8_t ATTR_VPD_DIMM_SPARE_Type[2][2][4];
const bool ATTR_VPD_DIMM_SPARE_Privileged = false;
const TargetTypes_t ATTR_VPD_DIMM_SPARE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_VPD_DIMM_SPARE_PlatInit = true;
enum ATTR_VPD_DIMM_SPARE_Enum
{
    ENUM_ATTR_VPD_DIMM_SPARE_NO_SPARE = 0x00,
    ENUM_ATTR_VPD_DIMM_SPARE_LOW_NIBBLE = 0x01,
    ENUM_ATTR_VPD_DIMM_SPARE_HIGH_NIBBLE = 0x02,
    ENUM_ATTR_VPD_DIMM_SPARE_FULL_BYTE = 0x03,
};
#define ATTR_VPD_DIMM_SPARE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_UNIT_POS */
typedef uint8_t ATTR_CHIP_UNIT_POS_Type;
const bool ATTR_CHIP_UNIT_POS_Privileged = false;
const TargetTypes_t ATTR_CHIP_UNIT_POS_TargetTypes = TARGET_TYPE_EX_CHIPLET | TARGET_TYPE_MBA_CHIPLET | TARGET_TYPE_MCS_CHIPLET;
const bool ATTR_CHIP_UNIT_POS_PlatInit = true;
#define ATTR_CHIP_UNIT_POS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_PROC_REFCLOCK */
typedef uint32_t ATTR_FREQ_PROC_REFCLOCK_Type;
const bool ATTR_FREQ_PROC_REFCLOCK_Privileged = false;
const TargetTypes_t ATTR_FREQ_PROC_REFCLOCK_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_FREQ_PROC_REFCLOCK_PlatInit = true;
#define ATTR_FREQ_PROC_REFCLOCK_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_PROC_REFCLOCK_KHZ */
typedef uint32_t ATTR_FREQ_PROC_REFCLOCK_KHZ_Type;
const bool ATTR_FREQ_PROC_REFCLOCK_KHZ_Privileged = false;
const TargetTypes_t ATTR_FREQ_PROC_REFCLOCK_KHZ_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_FREQ_PROC_REFCLOCK_KHZ_PlatInit = true;
#define ATTR_FREQ_PROC_REFCLOCK_KHZ_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_MEM_REFCLOCK */
typedef uint32_t ATTR_FREQ_MEM_REFCLOCK_Type;
const bool ATTR_FREQ_MEM_REFCLOCK_Privileged = false;
const TargetTypes_t ATTR_FREQ_MEM_REFCLOCK_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_FREQ_MEM_REFCLOCK_PlatInit = true;
#define ATTR_FREQ_MEM_REFCLOCK_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_CORE_FLOOR */
typedef uint32_t ATTR_FREQ_CORE_FLOOR_Type;
const bool ATTR_FREQ_CORE_FLOOR_Privileged = false;
const TargetTypes_t ATTR_FREQ_CORE_FLOOR_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_FREQ_CORE_FLOOR_PlatInit = true;
#define ATTR_FREQ_CORE_FLOOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_CORE_NOMINAL */
typedef uint32_t ATTR_FREQ_CORE_NOMINAL_Type;
const bool ATTR_FREQ_CORE_NOMINAL_Privileged = false;
const TargetTypes_t ATTR_FREQ_CORE_NOMINAL_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_FREQ_CORE_NOMINAL_PlatInit = true;
#define ATTR_FREQ_CORE_NOMINAL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_PB */
typedef uint32_t ATTR_FREQ_PB_Type;
const bool ATTR_FREQ_PB_Privileged = false;
const TargetTypes_t ATTR_FREQ_PB_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_FREQ_PB_PlatInit = true;
#define ATTR_FREQ_PB_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_A */
typedef uint32_t ATTR_FREQ_A_Type;
const bool ATTR_FREQ_A_Privileged = false;
const TargetTypes_t ATTR_FREQ_A_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_FREQ_A_PlatInit = true;
#define ATTR_FREQ_A_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_X */
typedef uint32_t ATTR_FREQ_X_Type;
const bool ATTR_FREQ_X_Privileged = false;
const TargetTypes_t ATTR_FREQ_X_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_FREQ_X_PlatInit = true;
#define ATTR_FREQ_X_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_PCIE */
typedef uint32_t ATTR_FREQ_PCIE_Type;
const bool ATTR_FREQ_PCIE_Privileged = false;
const TargetTypes_t ATTR_FREQ_PCIE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_FREQ_PCIE_PlatInit = true;
#define ATTR_FREQ_PCIE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_EI_BUS_TX_MSBSWAP */
typedef uint8_t ATTR_EI_BUS_TX_MSBSWAP_Type;
const bool ATTR_EI_BUS_TX_MSBSWAP_Privileged = false;
const TargetTypes_t ATTR_EI_BUS_TX_MSBSWAP_TargetTypes = TARGET_TYPE_MCS_CHIPLET | TARGET_TYPE_MEMBUF_CHIP | TARGET_TYPE_ABUS_ENDPOINT;
const bool ATTR_EI_BUS_TX_MSBSWAP_PlatInit = true;
#define ATTR_EI_BUS_TX_MSBSWAP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_EI_BUS_TX_LANE_INVERT */
typedef uint32_t ATTR_EI_BUS_TX_LANE_INVERT_Type;
const bool ATTR_EI_BUS_TX_LANE_INVERT_Privileged = false;
const TargetTypes_t ATTR_EI_BUS_TX_LANE_INVERT_TargetTypes = TARGET_TYPE_MCS_CHIPLET | TARGET_TYPE_MEMBUF_CHIP | TARGET_TYPE_ABUS_ENDPOINT;
const bool ATTR_EI_BUS_TX_LANE_INVERT_PlatInit = true;
#define ATTR_EI_BUS_TX_LANE_INVERT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_DMI_REFCLOCK_SWIZZLE */
typedef uint8_t ATTR_DMI_REFCLOCK_SWIZZLE_Type;
const bool ATTR_DMI_REFCLOCK_SWIZZLE_Privileged = false;
const TargetTypes_t ATTR_DMI_REFCLOCK_SWIZZLE_TargetTypes = TARGET_TYPE_MCS_CHIPLET;
const bool ATTR_DMI_REFCLOCK_SWIZZLE_PlatInit = true;
#define ATTR_DMI_REFCLOCK_SWIZZLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_DMI_DFE_OVERRIDE */
typedef uint8_t ATTR_DMI_DFE_OVERRIDE_Type;
const bool ATTR_DMI_DFE_OVERRIDE_Privileged = false;
const TargetTypes_t ATTR_DMI_DFE_OVERRIDE_TargetTypes = TARGET_TYPE_MCS_CHIPLET | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_DMI_DFE_OVERRIDE_PlatInit = true;
#define ATTR_DMI_DFE_OVERRIDE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_BRAZOS_RX_FIFO_OVERRIDE */
typedef uint8_t ATTR_BRAZOS_RX_FIFO_OVERRIDE_Type;
const bool ATTR_BRAZOS_RX_FIFO_OVERRIDE_Privileged = false;
const TargetTypes_t ATTR_BRAZOS_RX_FIFO_OVERRIDE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_BRAZOS_RX_FIFO_OVERRIDE_PlatInit = true;
#define ATTR_BRAZOS_RX_FIFO_OVERRIDE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_TEST1 */
typedef uint8_t ATTR_CHIP_EC_FEATURE_TEST1_Type;
const bool ATTR_CHIP_EC_FEATURE_TEST1_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_TEST1_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CHIP_EC_FEATURE_TEST1_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_TEST1_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_TEST1_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_TEST2 */
typedef uint8_t ATTR_CHIP_EC_FEATURE_TEST2_Type;
const bool ATTR_CHIP_EC_FEATURE_TEST2_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_TEST2_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CHIP_EC_FEATURE_TEST2_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_TEST2_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_TEST2_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_ENABLE_TRACE_ARRAY_CLKSTOP_ON_XSTOP_FW624741 */
typedef uint8_t ATTR_CENTAUR_EC_ENABLE_TRACE_ARRAY_CLKSTOP_ON_XSTOP_FW624741_Type;
const bool ATTR_CENTAUR_EC_ENABLE_TRACE_ARRAY_CLKSTOP_ON_XSTOP_FW624741_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_ENABLE_TRACE_ARRAY_CLKSTOP_ON_XSTOP_FW624741_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_ENABLE_TRACE_ARRAY_CLKSTOP_ON_XSTOP_FW624741_PlatInit = false;
#define ATTR_CENTAUR_EC_ENABLE_TRACE_ARRAY_CLKSTOP_ON_XSTOP_FW624741_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_ENABLE_TRACE_ARRAY_CLKSTOP_ON_XSTOP_FW624741_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_ENABLE_SAFE_MODE_THROTTLE */
typedef uint8_t ATTR_CENTAUR_EC_ENABLE_SAFE_MODE_THROTTLE_Type;
const bool ATTR_CENTAUR_EC_ENABLE_SAFE_MODE_THROTTLE_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_ENABLE_SAFE_MODE_THROTTLE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_ENABLE_SAFE_MODE_THROTTLE_PlatInit = false;
#define ATTR_CENTAUR_EC_ENABLE_SAFE_MODE_THROTTLE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_ENABLE_SAFE_MODE_THROTTLE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_ENABLE_RCE_WITH_OTHER_ERRORS_HW246685 */
typedef uint8_t ATTR_CENTAUR_EC_ENABLE_RCE_WITH_OTHER_ERRORS_HW246685_Type;
const bool ATTR_CENTAUR_EC_ENABLE_RCE_WITH_OTHER_ERRORS_HW246685_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_ENABLE_RCE_WITH_OTHER_ERRORS_HW246685_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_ENABLE_RCE_WITH_OTHER_ERRORS_HW246685_PlatInit = false;
#define ATTR_CENTAUR_EC_ENABLE_RCE_WITH_OTHER_ERRORS_HW246685_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_ENABLE_RCE_WITH_OTHER_ERRORS_HW246685_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_ENABLE_PAGE_MODE_FOR_RRQ */
typedef uint8_t ATTR_CENTAUR_EC_ENABLE_PAGE_MODE_FOR_RRQ_Type;
const bool ATTR_CENTAUR_EC_ENABLE_PAGE_MODE_FOR_RRQ_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_ENABLE_PAGE_MODE_FOR_RRQ_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_ENABLE_PAGE_MODE_FOR_RRQ_PlatInit = false;
#define ATTR_CENTAUR_EC_ENABLE_PAGE_MODE_FOR_RRQ_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_ENABLE_PAGE_MODE_FOR_RRQ_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_ENABLE_TRACE_LCL_CLK_GATE_CTRL */
typedef uint8_t ATTR_CENTAUR_EC_ENABLE_TRACE_LCL_CLK_GATE_CTRL_Type;
const bool ATTR_CENTAUR_EC_ENABLE_TRACE_LCL_CLK_GATE_CTRL_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_ENABLE_TRACE_LCL_CLK_GATE_CTRL_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_ENABLE_TRACE_LCL_CLK_GATE_CTRL_PlatInit = false;
#define ATTR_CENTAUR_EC_ENABLE_TRACE_LCL_CLK_GATE_CTRL_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_ENABLE_TRACE_LCL_CLK_GATE_CTRL_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_ENABLE_NM_CHANGE_AFTER_SYNC */
typedef uint8_t ATTR_CENTAUR_EC_ENABLE_NM_CHANGE_AFTER_SYNC_Type;
const bool ATTR_CENTAUR_EC_ENABLE_NM_CHANGE_AFTER_SYNC_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_ENABLE_NM_CHANGE_AFTER_SYNC_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_ENABLE_NM_CHANGE_AFTER_SYNC_PlatInit = false;
#define ATTR_CENTAUR_EC_ENABLE_NM_CHANGE_AFTER_SYNC_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_ENABLE_NM_CHANGE_AFTER_SYNC_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_ENABLE_ROW_HAMMER_FEATURE */
typedef uint8_t ATTR_CENTAUR_EC_ENABLE_ROW_HAMMER_FEATURE_Type;
const bool ATTR_CENTAUR_EC_ENABLE_ROW_HAMMER_FEATURE_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_ENABLE_ROW_HAMMER_FEATURE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_ENABLE_ROW_HAMMER_FEATURE_PlatInit = false;
#define ATTR_CENTAUR_EC_ENABLE_ROW_HAMMER_FEATURE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_ENABLE_ROW_HAMMER_FEATURE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_WRITE_FIR_MASK_FEATURE */
typedef uint8_t ATTR_CENTAUR_EC_WRITE_FIR_MASK_FEATURE_Type;
const bool ATTR_CENTAUR_EC_WRITE_FIR_MASK_FEATURE_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_WRITE_FIR_MASK_FEATURE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_WRITE_FIR_MASK_FEATURE_PlatInit = false;
#define ATTR_CENTAUR_EC_WRITE_FIR_MASK_FEATURE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_WRITE_FIR_MASK_FEATURE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_BLUEWATERFALL_NWELL_BROKEN_CHECK_FLAG */
typedef uint8_t ATTR_CENTAUR_BLUEWATERFALL_NWELL_BROKEN_CHECK_FLAG_Type;
const bool ATTR_CENTAUR_BLUEWATERFALL_NWELL_BROKEN_CHECK_FLAG_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_BLUEWATERFALL_NWELL_BROKEN_CHECK_FLAG_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_BLUEWATERFALL_NWELL_BROKEN_CHECK_FLAG_PlatInit = false;
#define ATTR_CENTAUR_BLUEWATERFALL_NWELL_BROKEN_CHECK_FLAG_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_BLUEWATERFALL_NWELL_BROKEN_CHECK_FLAG_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_MSS_CONTINUE_ON_DP18_PLL_LOCK_FAIL */
typedef uint8_t ATTR_CENTAUR_EC_MSS_CONTINUE_ON_DP18_PLL_LOCK_FAIL_Type;
const bool ATTR_CENTAUR_EC_MSS_CONTINUE_ON_DP18_PLL_LOCK_FAIL_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_MSS_CONTINUE_ON_DP18_PLL_LOCK_FAIL_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_MSS_CONTINUE_ON_DP18_PLL_LOCK_FAIL_PlatInit = false;
#define ATTR_CENTAUR_EC_MSS_CONTINUE_ON_DP18_PLL_LOCK_FAIL_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_MSS_CONTINUE_ON_DP18_PLL_LOCK_FAIL_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_MSS_READ_PHASE_SELECT_RESET */
typedef uint8_t ATTR_CENTAUR_EC_MSS_READ_PHASE_SELECT_RESET_Type;
const bool ATTR_CENTAUR_EC_MSS_READ_PHASE_SELECT_RESET_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_MSS_READ_PHASE_SELECT_RESET_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_MSS_READ_PHASE_SELECT_RESET_PlatInit = false;
#define ATTR_CENTAUR_EC_MSS_READ_PHASE_SELECT_RESET_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_MSS_READ_PHASE_SELECT_RESET_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_CHECK_L4_CACHE_ENABLE_UNKNOWN */
typedef uint8_t ATTR_CENTAUR_EC_CHECK_L4_CACHE_ENABLE_UNKNOWN_Type;
const bool ATTR_CENTAUR_EC_CHECK_L4_CACHE_ENABLE_UNKNOWN_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_CHECK_L4_CACHE_ENABLE_UNKNOWN_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_CHECK_L4_CACHE_ENABLE_UNKNOWN_PlatInit = false;
#define ATTR_CENTAUR_EC_CHECK_L4_CACHE_ENABLE_UNKNOWN_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_CHECK_L4_CACHE_ENABLE_UNKNOWN_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_DISABLE1_REG_FIXED */
typedef uint8_t ATTR_MSS_DISABLE1_REG_FIXED_Type;
const bool ATTR_MSS_DISABLE1_REG_FIXED_Privileged = false;
const TargetTypes_t ATTR_MSS_DISABLE1_REG_FIXED_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_DISABLE1_REG_FIXED_PlatInit = false;
#define ATTR_MSS_DISABLE1_REG_FIXED_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_MSS_DISABLE1_REG_FIXED_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_DISABLE1_RDCLK_REG_FIXED */
typedef uint8_t ATTR_MSS_DISABLE1_RDCLK_REG_FIXED_Type;
const bool ATTR_MSS_DISABLE1_RDCLK_REG_FIXED_Privileged = false;
const TargetTypes_t ATTR_MSS_DISABLE1_RDCLK_REG_FIXED_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MSS_DISABLE1_RDCLK_REG_FIXED_PlatInit = false;
#define ATTR_MSS_DISABLE1_RDCLK_REG_FIXED_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_MSS_DISABLE1_RDCLK_REG_FIXED_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_ECID_CONTAINS_PORT_LOGIC_BAD_INDICATION */
typedef uint8_t ATTR_CENTAUR_EC_ECID_CONTAINS_PORT_LOGIC_BAD_INDICATION_Type;
const bool ATTR_CENTAUR_EC_ECID_CONTAINS_PORT_LOGIC_BAD_INDICATION_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_ECID_CONTAINS_PORT_LOGIC_BAD_INDICATION_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_ECID_CONTAINS_PORT_LOGIC_BAD_INDICATION_PlatInit = false;
#define ATTR_CENTAUR_EC_ECID_CONTAINS_PORT_LOGIC_BAD_INDICATION_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_ECID_CONTAINS_PORT_LOGIC_BAD_INDICATION_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_MCBIST_RANDOM_DATA_GEN */
typedef uint8_t ATTR_CENTAUR_EC_MCBIST_RANDOM_DATA_GEN_Type;
const bool ATTR_CENTAUR_EC_MCBIST_RANDOM_DATA_GEN_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_MCBIST_RANDOM_DATA_GEN_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_MCBIST_RANDOM_DATA_GEN_PlatInit = false;
#define ATTR_CENTAUR_EC_MCBIST_RANDOM_DATA_GEN_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_MCBIST_RANDOM_DATA_GEN_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_MCBIST_TRAP_RESET */
typedef uint8_t ATTR_CENTAUR_EC_MCBIST_TRAP_RESET_Type;
const bool ATTR_CENTAUR_EC_MCBIST_TRAP_RESET_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_MCBIST_TRAP_RESET_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_MCBIST_TRAP_RESET_PlatInit = false;
#define ATTR_CENTAUR_EC_MCBIST_TRAP_RESET_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_MCBIST_TRAP_RESET_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_MCBIST_RANDOM_ADDRESS */
typedef uint8_t ATTR_CENTAUR_EC_MCBIST_RANDOM_ADDRESS_Type;
const bool ATTR_CENTAUR_EC_MCBIST_RANDOM_ADDRESS_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_MCBIST_RANDOM_ADDRESS_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_MCBIST_RANDOM_ADDRESS_PlatInit = false;
#define ATTR_CENTAUR_EC_MCBIST_RANDOM_ADDRESS_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_MCBIST_RANDOM_ADDRESS_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_SCOM_PARITY_ERROR_HW244827_FIXED */
typedef uint8_t ATTR_CENTAUR_EC_SCOM_PARITY_ERROR_HW244827_FIXED_Type;
const bool ATTR_CENTAUR_EC_SCOM_PARITY_ERROR_HW244827_FIXED_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_SCOM_PARITY_ERROR_HW244827_FIXED_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_SCOM_PARITY_ERROR_HW244827_FIXED_PlatInit = false;
#define ATTR_CENTAUR_EC_SCOM_PARITY_ERROR_HW244827_FIXED_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_SCOM_PARITY_ERROR_HW244827_FIXED_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_HW217608_MBSPA_0_CMD_COMPLETE_ATTN_FIXED */
typedef uint8_t ATTR_CENTAUR_EC_HW217608_MBSPA_0_CMD_COMPLETE_ATTN_FIXED_Type;
const bool ATTR_CENTAUR_EC_HW217608_MBSPA_0_CMD_COMPLETE_ATTN_FIXED_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_HW217608_MBSPA_0_CMD_COMPLETE_ATTN_FIXED_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_HW217608_MBSPA_0_CMD_COMPLETE_ATTN_FIXED_PlatInit = false;
#define ATTR_CENTAUR_EC_HW217608_MBSPA_0_CMD_COMPLETE_ATTN_FIXED_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_HW217608_MBSPA_0_CMD_COMPLETE_ATTN_FIXED_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_USE_FIRST_SUPPLIER_FOR_INVALID_MODULE_ID */
typedef uint8_t ATTR_CENTAUR_EC_USE_FIRST_SUPPLIER_FOR_INVALID_MODULE_ID_Type;
const bool ATTR_CENTAUR_EC_USE_FIRST_SUPPLIER_FOR_INVALID_MODULE_ID_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_USE_FIRST_SUPPLIER_FOR_INVALID_MODULE_ID_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_USE_FIRST_SUPPLIER_FOR_INVALID_MODULE_ID_PlatInit = false;
#define ATTR_CENTAUR_EC_USE_FIRST_SUPPLIER_FOR_INVALID_MODULE_ID_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_USE_FIRST_SUPPLIER_FOR_INVALID_MODULE_ID_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_ENABLE_SAFEMODE_THROTTLE */
typedef uint8_t ATTR_CENTAUR_EC_ENABLE_SAFEMODE_THROTTLE_Type;
const bool ATTR_CENTAUR_EC_ENABLE_SAFEMODE_THROTTLE_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_ENABLE_SAFEMODE_THROTTLE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_ENABLE_SAFEMODE_THROTTLE_PlatInit = false;
#define ATTR_CENTAUR_EC_ENABLE_SAFEMODE_THROTTLE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_ENABLE_SAFEMODE_THROTTLE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_DD2_FIR_BIT_DEFN_CHANGES */
typedef uint8_t ATTR_CENTAUR_EC_DD2_FIR_BIT_DEFN_CHANGES_Type;
const bool ATTR_CENTAUR_EC_DD2_FIR_BIT_DEFN_CHANGES_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_DD2_FIR_BIT_DEFN_CHANGES_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_DD2_FIR_BIT_DEFN_CHANGES_PlatInit = false;
#define ATTR_CENTAUR_EC_DD2_FIR_BIT_DEFN_CHANGES_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_DD2_FIR_BIT_DEFN_CHANGES_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_RDCLK_PR_UPDATE_HW236658_FIXED */
typedef uint8_t ATTR_CENTAUR_EC_RDCLK_PR_UPDATE_HW236658_FIXED_Type;
const bool ATTR_CENTAUR_EC_RDCLK_PR_UPDATE_HW236658_FIXED_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_RDCLK_PR_UPDATE_HW236658_FIXED_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_RDCLK_PR_UPDATE_HW236658_FIXED_PlatInit = false;
#define ATTR_CENTAUR_EC_RDCLK_PR_UPDATE_HW236658_FIXED_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_RDCLK_PR_UPDATE_HW236658_FIXED_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_DD2_ENABLE_EXIT_POINT_1 */
typedef uint8_t ATTR_CENTAUR_EC_DD2_ENABLE_EXIT_POINT_1_Type;
const bool ATTR_CENTAUR_EC_DD2_ENABLE_EXIT_POINT_1_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_DD2_ENABLE_EXIT_POINT_1_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_DD2_ENABLE_EXIT_POINT_1_PlatInit = false;
#define ATTR_CENTAUR_EC_DD2_ENABLE_EXIT_POINT_1_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_DD2_ENABLE_EXIT_POINT_1_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CENTAUR_EC_DISABLE_VDDR_DYNAMIC_VID */
typedef uint8_t ATTR_CENTAUR_EC_DISABLE_VDDR_DYNAMIC_VID_Type;
const bool ATTR_CENTAUR_EC_DISABLE_VDDR_DYNAMIC_VID_Privileged = false;
const TargetTypes_t ATTR_CENTAUR_EC_DISABLE_VDDR_DYNAMIC_VID_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CENTAUR_EC_DISABLE_VDDR_DYNAMIC_VID_PlatInit = false;
#define ATTR_CENTAUR_EC_DISABLE_VDDR_DYNAMIC_VID_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CENTAUR_EC_DISABLE_VDDR_DYNAMIC_VID_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_FUNCTIONAL */
typedef uint8_t ATTR_FUNCTIONAL_Type;
const bool ATTR_FUNCTIONAL_Privileged = false;
const TargetTypes_t ATTR_FUNCTIONAL_TargetTypes = TARGET_TYPE_DIMM | TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP | TARGET_TYPE_EX_CHIPLET | TARGET_TYPE_MBA_CHIPLET | TARGET_TYPE_MCS_CHIPLET | TARGET_TYPE_XBUS_ENDPOINT | TARGET_TYPE_ABUS_ENDPOINT | TARGET_TYPE_L4;
const bool ATTR_FUNCTIONAL_PlatInit = true;
enum ATTR_FUNCTIONAL_Enum
{
    ENUM_ATTR_FUNCTIONAL_NON_FUNCTIONAL = 0,
    ENUM_ATTR_FUNCTIONAL_FUNCTIONAL = 1,
};
#define ATTR_FUNCTIONAL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_POS */
typedef uint32_t ATTR_POS_Type;
const bool ATTR_POS_Privileged = false;
const TargetTypes_t ATTR_POS_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP | TARGET_TYPE_DIMM;
const bool ATTR_POS_PlatInit = true;
#define ATTR_POS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SYNC_BETWEEN_STEPS */
typedef uint8_t ATTR_SYNC_BETWEEN_STEPS_Type;
const bool ATTR_SYNC_BETWEEN_STEPS_Privileged = false;
const TargetTypes_t ATTR_SYNC_BETWEEN_STEPS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SYNC_BETWEEN_STEPS_PlatInit = true;

/* ATTR_MEM_MIRROR_PLACEMENT_POLICY */
typedef uint8_t ATTR_MEM_MIRROR_PLACEMENT_POLICY_Type;
const bool ATTR_MEM_MIRROR_PLACEMENT_POLICY_Privileged = false;
const TargetTypes_t ATTR_MEM_MIRROR_PLACEMENT_POLICY_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MEM_MIRROR_PLACEMENT_POLICY_PlatInit = true;
enum ATTR_MEM_MIRROR_PLACEMENT_POLICY_Enum
{
    ENUM_ATTR_MEM_MIRROR_PLACEMENT_POLICY_NORMAL    = 0x0,
    ENUM_ATTR_MEM_MIRROR_PLACEMENT_POLICY_FLIPPED   = 0x1,
    ENUM_ATTR_MEM_MIRROR_PLACEMENT_POLICY_SELECTIVE = 0x2,
    ENUM_ATTR_MEM_MIRROR_PLACEMENT_POLICY_DRAWER    = 0x3,
    ENUM_ATTR_MEM_MIRROR_PLACEMENT_POLICY_FLIPPED_DRAWER = 0x4,
};
#define ATTR_MEM_MIRROR_PLACEMENT_POLICY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_OPT_MEMMAP_GROUP_POLICY */
typedef uint8_t ATTR_OPT_MEMMAP_GROUP_POLICY_Type;
const bool ATTR_OPT_MEMMAP_GROUP_POLICY_Privileged = false;
const TargetTypes_t ATTR_OPT_MEMMAP_GROUP_POLICY_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_OPT_MEMMAP_GROUP_POLICY_PlatInit = true;
enum ATTR_OPT_MEMMAP_GROUP_POLICY_Enum
{
    ENUM_ATTR_OPT_MEMMAP_GROUP_POLICY_CHIP_AS_GROUP = 0x0,
    ENUM_ATTR_OPT_MEMMAP_GROUP_POLICY_GROUP_AS_GROUP = 0x1,
};
#define ATTR_OPT_MEMMAP_GROUP_POLICY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MIRROR_BASE_ADDRESS */
typedef uint64_t ATTR_MIRROR_BASE_ADDRESS_Type;
const bool ATTR_MIRROR_BASE_ADDRESS_Privileged = false;
const TargetTypes_t ATTR_MIRROR_BASE_ADDRESS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MIRROR_BASE_ADDRESS_PlatInit = true;
#define ATTR_MIRROR_BASE_ADDRESS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_MEM_BASE */
typedef uint64_t ATTR_PROC_MEM_BASE_Type;
const bool ATTR_PROC_MEM_BASE_Privileged = false;
const TargetTypes_t ATTR_PROC_MEM_BASE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_MEM_BASE_PlatInit = false;

/* ATTR_PROC_MEM_BASES */
typedef uint64_t ATTR_PROC_MEM_BASES_Type[8];
const bool ATTR_PROC_MEM_BASES_Privileged = false;
const TargetTypes_t ATTR_PROC_MEM_BASES_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_MEM_BASES_PlatInit = false;

/* ATTR_PROC_MEM_BASES_ACK */
typedef uint64_t ATTR_PROC_MEM_BASES_ACK_Type[8];
const bool ATTR_PROC_MEM_BASES_ACK_Privileged = false;
const TargetTypes_t ATTR_PROC_MEM_BASES_ACK_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_MEM_BASES_ACK_PlatInit = false;

/* ATTR_PROC_MEM_SIZES */
typedef uint64_t ATTR_PROC_MEM_SIZES_Type[8];
const bool ATTR_PROC_MEM_SIZES_Privileged = false;
const TargetTypes_t ATTR_PROC_MEM_SIZES_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_MEM_SIZES_PlatInit = false;

/* ATTR_PROC_MEM_SIZES_ACK */
typedef uint64_t ATTR_PROC_MEM_SIZES_ACK_Type[8];
const bool ATTR_PROC_MEM_SIZES_ACK_Privileged = false;
const TargetTypes_t ATTR_PROC_MEM_SIZES_ACK_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_MEM_SIZES_ACK_PlatInit = false;

/* ATTR_PROC_MIRROR_BASE */
typedef uint64_t ATTR_PROC_MIRROR_BASE_Type;
const bool ATTR_PROC_MIRROR_BASE_Privileged = false;
const TargetTypes_t ATTR_PROC_MIRROR_BASE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_MIRROR_BASE_PlatInit = false;

/* ATTR_PROC_MIRROR_BASES */
typedef uint64_t ATTR_PROC_MIRROR_BASES_Type[4];
const bool ATTR_PROC_MIRROR_BASES_Privileged = false;
const TargetTypes_t ATTR_PROC_MIRROR_BASES_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_MIRROR_BASES_PlatInit = false;

/* ATTR_PROC_MIRROR_BASES_ACK */
typedef uint64_t ATTR_PROC_MIRROR_BASES_ACK_Type[4];
const bool ATTR_PROC_MIRROR_BASES_ACK_Privileged = false;
const TargetTypes_t ATTR_PROC_MIRROR_BASES_ACK_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_MIRROR_BASES_ACK_PlatInit = false;

/* ATTR_PROC_MIRROR_SIZES */
typedef uint64_t ATTR_PROC_MIRROR_SIZES_Type[4];
const bool ATTR_PROC_MIRROR_SIZES_Privileged = false;
const TargetTypes_t ATTR_PROC_MIRROR_SIZES_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_MIRROR_SIZES_PlatInit = false;

/* ATTR_PROC_MIRROR_SIZES_ACK */
typedef uint64_t ATTR_PROC_MIRROR_SIZES_ACK_Type[4];
const bool ATTR_PROC_MIRROR_SIZES_ACK_Privileged = false;
const TargetTypes_t ATTR_PROC_MIRROR_SIZES_ACK_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_MIRROR_SIZES_ACK_PlatInit = false;

/* ATTR_PROC_FOREIGN_NEAR_BASE */
typedef uint64_t ATTR_PROC_FOREIGN_NEAR_BASE_Type[2];
const bool ATTR_PROC_FOREIGN_NEAR_BASE_Privileged = false;
const TargetTypes_t ATTR_PROC_FOREIGN_NEAR_BASE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_FOREIGN_NEAR_BASE_PlatInit = true;
#define ATTR_PROC_FOREIGN_NEAR_BASE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FOREIGN_NEAR_SIZE */
typedef uint64_t ATTR_PROC_FOREIGN_NEAR_SIZE_Type[2];
const bool ATTR_PROC_FOREIGN_NEAR_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_FOREIGN_NEAR_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_FOREIGN_NEAR_SIZE_PlatInit = true;
#define ATTR_PROC_FOREIGN_NEAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FOREIGN_FAR_BASE */
typedef uint64_t ATTR_PROC_FOREIGN_FAR_BASE_Type[2];
const bool ATTR_PROC_FOREIGN_FAR_BASE_Privileged = false;
const TargetTypes_t ATTR_PROC_FOREIGN_FAR_BASE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_FOREIGN_FAR_BASE_PlatInit = true;
#define ATTR_PROC_FOREIGN_FAR_BASE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FOREIGN_FAR_SIZE */
typedef uint64_t ATTR_PROC_FOREIGN_FAR_SIZE_Type[2];
const bool ATTR_PROC_FOREIGN_FAR_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_FOREIGN_FAR_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_FOREIGN_FAR_SIZE_PlatInit = true;
#define ATTR_PROC_FOREIGN_FAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_HA_BASE */
typedef uint64_t ATTR_PROC_HA_BASE_Type[8];
const bool ATTR_PROC_HA_BASE_Privileged = false;
const TargetTypes_t ATTR_PROC_HA_BASE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_HA_BASE_PlatInit = true;
#define ATTR_PROC_HA_BASE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_HA_SIZE */
typedef uint64_t ATTR_PROC_HA_SIZE_Type[8];
const bool ATTR_PROC_HA_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_HA_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_HA_SIZE_PlatInit = true;
#define ATTR_PROC_HA_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_HTM_BAR_SIZE */
typedef uint64_t ATTR_PROC_HTM_BAR_SIZE_Type;
const bool ATTR_PROC_HTM_BAR_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_HTM_BAR_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_HTM_BAR_SIZE_PlatInit = true;
enum ATTR_PROC_HTM_BAR_SIZE_Enum
{
    ENUM_ATTR_PROC_HTM_BAR_SIZE_256_GB = 0x0000004000000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_128_GB = 0x0000002000000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_64_GB = 0x0000001000000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_32_GB = 0x0000000800000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_16_GB = 0x0000000400000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_8_GB = 0x0000000200000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_4_GB = 0x0000000100000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_2_GB = 0x0000000080000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_1_GB = 0x0000000040000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_512_MB = 0x0000000020000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_256_MB = 0x0000000010000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_128_MB = 0x0000000008000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_64_MB = 0x0000000004000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_32_MB = 0x0000000002000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_16_MB = 0x0000000001000000ULL,
    ENUM_ATTR_PROC_HTM_BAR_SIZE_ZERO = 0x0000000000000000ULL,
};
#define ATTR_PROC_HTM_BAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_HTM_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_HTM_BAR_BASE_ADDR_Type;
const bool ATTR_PROC_HTM_BAR_BASE_ADDR_Privileged = false;
const TargetTypes_t ATTR_PROC_HTM_BAR_BASE_ADDR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_HTM_BAR_BASE_ADDR_PlatInit = false;

/* ATTR_PROC_OCC_SANDBOX_SIZE */
typedef uint64_t ATTR_PROC_OCC_SANDBOX_SIZE_Type;
const bool ATTR_PROC_OCC_SANDBOX_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_OCC_SANDBOX_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_OCC_SANDBOX_SIZE_PlatInit = true;
enum ATTR_PROC_OCC_SANDBOX_SIZE_Enum
{
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_256_GB = 0x0000004000000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_128_GB = 0x0000002000000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_64_GB = 0x0000001000000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_32_GB = 0x0000000800000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_16_GB = 0x0000000400000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_8_GB = 0x0000000200000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_4_GB = 0x0000000100000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_2_GB = 0x0000000080000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_1_GB = 0x0000000040000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_512_MB = 0x0000000020000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_256_MB = 0x0000000010000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_128_MB = 0x0000000008000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_64_MB = 0x0000000004000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_32_MB = 0x0000000002000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_16_MB = 0x0000000001000000ULL,
    ENUM_ATTR_PROC_OCC_SANDBOX_SIZE_ZERO = 0x0000000000000000ULL,
};
#define ATTR_PROC_OCC_SANDBOX_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_OCC_SANDBOX_BASE_ADDR */
typedef uint64_t ATTR_PROC_OCC_SANDBOX_BASE_ADDR_Type;
const bool ATTR_PROC_OCC_SANDBOX_BASE_ADDR_Privileged = false;
const TargetTypes_t ATTR_PROC_OCC_SANDBOX_BASE_ADDR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_OCC_SANDBOX_BASE_ADDR_PlatInit = false;

/* ATTR_PROC_L3_BAR1_REG */
typedef uint64_t ATTR_PROC_L3_BAR1_REG_Type;
const bool ATTR_PROC_L3_BAR1_REG_Privileged = false;
const TargetTypes_t ATTR_PROC_L3_BAR1_REG_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_L3_BAR1_REG_PlatInit = false;

/* ATTR_PROC_L3_BAR2_REG */
typedef uint64_t ATTR_PROC_L3_BAR2_REG_Type;
const bool ATTR_PROC_L3_BAR2_REG_Privileged = false;
const TargetTypes_t ATTR_PROC_L3_BAR2_REG_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_L3_BAR2_REG_PlatInit = false;

/* ATTR_PROC_L3_BAR_GROUP_MASK_REG */
typedef uint64_t ATTR_PROC_L3_BAR_GROUP_MASK_REG_Type;
const bool ATTR_PROC_L3_BAR_GROUP_MASK_REG_Privileged = false;
const TargetTypes_t ATTR_PROC_L3_BAR_GROUP_MASK_REG_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_L3_BAR_GROUP_MASK_REG_PlatInit = false;

/* ATTR_PROC_PSI_BRIDGE_BAR_ENABLE */
typedef uint8_t ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_Type;
const bool ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_PlatInit = true;
enum ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_Enum
{
    ENUM_ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PSI_BRIDGE_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_PSI_BRIDGE_BAR_BASE_ADDR_Type;
const bool ATTR_PROC_PSI_BRIDGE_BAR_BASE_ADDR_Privileged = false;
const TargetTypes_t ATTR_PROC_PSI_BRIDGE_BAR_BASE_ADDR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PSI_BRIDGE_BAR_BASE_ADDR_PlatInit = true;
#define ATTR_PROC_PSI_BRIDGE_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FSP_BAR_ENABLE */
typedef uint8_t ATTR_PROC_FSP_BAR_ENABLE_Type;
const bool ATTR_PROC_FSP_BAR_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_FSP_BAR_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_FSP_BAR_ENABLE_PlatInit = true;
enum ATTR_PROC_FSP_BAR_ENABLE_Enum
{
    ENUM_ATTR_PROC_FSP_BAR_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_FSP_BAR_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_FSP_BAR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FSP_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_FSP_BAR_BASE_ADDR_Type;
const bool ATTR_PROC_FSP_BAR_BASE_ADDR_Privileged = false;
const TargetTypes_t ATTR_PROC_FSP_BAR_BASE_ADDR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_FSP_BAR_BASE_ADDR_PlatInit = true;
#define ATTR_PROC_FSP_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FSP_BAR_SIZE */
typedef uint64_t ATTR_PROC_FSP_BAR_SIZE_Type;
const bool ATTR_PROC_FSP_BAR_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_FSP_BAR_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_FSP_BAR_SIZE_PlatInit = true;
enum ATTR_PROC_FSP_BAR_SIZE_Enum
{
    ENUM_ATTR_PROC_FSP_BAR_SIZE_4_GB = 0x0000000100000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_2_GB = 0x0000000080000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_1_GB = 0x0000000040000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_512_MB = 0x0000000020000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_256_MB = 0x0000000010000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_128_MB = 0x0000000008000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_64_MB = 0x0000000004000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_32_MB = 0x0000000002000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_16_MB = 0x0000000001000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_8_MB = 0x0000000000800000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_4_MB = 0x0000000000400000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_2_MB = 0x0000000000200000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_1_MB = 0x0000000000100000ULL,
};
#define ATTR_PROC_FSP_BAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FSP_MMIO_MASK_SIZE */
typedef uint64_t ATTR_PROC_FSP_MMIO_MASK_SIZE_Type;
const bool ATTR_PROC_FSP_MMIO_MASK_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_FSP_MMIO_MASK_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_FSP_MMIO_MASK_SIZE_PlatInit = true;
enum ATTR_PROC_FSP_MMIO_MASK_SIZE_Enum
{
    ENUM_ATTR_PROC_FSP_MMIO_MASK_SIZE_4_GB = 0x0000000100000000ULL,
    ENUM_ATTR_PROC_FSP_MMIO_MASK_SIZE_2_GB = 0x0000000080000000ULL,
    ENUM_ATTR_PROC_FSP_MMIO_MASK_SIZE_1_GB = 0x0000000040000000ULL,
    ENUM_ATTR_PROC_FSP_MMIO_MASK_SIZE_512_MB = 0x0000000020000000ULL,
    ENUM_ATTR_PROC_FSP_MMIO_MASK_SIZE_256_MB = 0x0000000010000000ULL,
};
#define ATTR_PROC_FSP_MMIO_MASK_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_INTP_BAR_ENABLE */
typedef uint8_t ATTR_PROC_INTP_BAR_ENABLE_Type;
const bool ATTR_PROC_INTP_BAR_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_INTP_BAR_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_INTP_BAR_ENABLE_PlatInit = true;
enum ATTR_PROC_INTP_BAR_ENABLE_Enum
{
    ENUM_ATTR_PROC_INTP_BAR_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_INTP_BAR_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_INTP_BAR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_INTP_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_INTP_BAR_BASE_ADDR_Type;
const bool ATTR_PROC_INTP_BAR_BASE_ADDR_Privileged = false;
const TargetTypes_t ATTR_PROC_INTP_BAR_BASE_ADDR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_INTP_BAR_BASE_ADDR_PlatInit = true;
#define ATTR_PROC_INTP_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_AS_MMIO_BAR_ENABLE */
typedef uint8_t ATTR_PROC_AS_MMIO_BAR_ENABLE_Type;
const bool ATTR_PROC_AS_MMIO_BAR_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_AS_MMIO_BAR_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_AS_MMIO_BAR_ENABLE_PlatInit = true;
enum ATTR_PROC_AS_MMIO_BAR_ENABLE_Enum
{
    ENUM_ATTR_PROC_AS_MMIO_BAR_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_AS_MMIO_BAR_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_AS_MMIO_BAR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_AS_MMIO_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_AS_MMIO_BAR_BASE_ADDR_Type;
const bool ATTR_PROC_AS_MMIO_BAR_BASE_ADDR_Privileged = false;
const TargetTypes_t ATTR_PROC_AS_MMIO_BAR_BASE_ADDR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_AS_MMIO_BAR_BASE_ADDR_PlatInit = true;
#define ATTR_PROC_AS_MMIO_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_AS_MMIO_BAR_SIZE */
typedef uint64_t ATTR_PROC_AS_MMIO_BAR_SIZE_Type;
const bool ATTR_PROC_AS_MMIO_BAR_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_AS_MMIO_BAR_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_AS_MMIO_BAR_SIZE_PlatInit = true;
enum ATTR_PROC_AS_MMIO_BAR_SIZE_Enum
{
    ENUM_ATTR_PROC_AS_MMIO_BAR_SIZE_2_MB = 0x0000000000200000ULL,
    ENUM_ATTR_PROC_AS_MMIO_BAR_SIZE_1_MB = 0x0000000000100000ULL,
    ENUM_ATTR_PROC_AS_MMIO_BAR_SIZE_512_KB = 0x0000000000080000ULL,
    ENUM_ATTR_PROC_AS_MMIO_BAR_SIZE_256_KB = 0x0000000000040000ULL,
};
#define ATTR_PROC_AS_MMIO_BAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_NX_MMIO_BAR_ENABLE */
typedef uint8_t ATTR_PROC_NX_MMIO_BAR_ENABLE_Type;
const bool ATTR_PROC_NX_MMIO_BAR_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_NX_MMIO_BAR_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_NX_MMIO_BAR_ENABLE_PlatInit = true;
enum ATTR_PROC_NX_MMIO_BAR_ENABLE_Enum
{
    ENUM_ATTR_PROC_NX_MMIO_BAR_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_NX_MMIO_BAR_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_NX_MMIO_BAR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_NX_MMIO_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_NX_MMIO_BAR_BASE_ADDR_Type;
const bool ATTR_PROC_NX_MMIO_BAR_BASE_ADDR_Privileged = false;
const TargetTypes_t ATTR_PROC_NX_MMIO_BAR_BASE_ADDR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_NX_MMIO_BAR_BASE_ADDR_PlatInit = true;
#define ATTR_PROC_NX_MMIO_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_NX_MMIO_BAR_SIZE */
typedef uint64_t ATTR_PROC_NX_MMIO_BAR_SIZE_Type;
const bool ATTR_PROC_NX_MMIO_BAR_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_NX_MMIO_BAR_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_NX_MMIO_BAR_SIZE_PlatInit = true;
enum ATTR_PROC_NX_MMIO_BAR_SIZE_Enum
{
    ENUM_ATTR_PROC_NX_MMIO_BAR_SIZE_16_GB = 0x0000000400000000ULL,
    ENUM_ATTR_PROC_NX_MMIO_BAR_SIZE_16_MB = 0x0000000001000000ULL,
    ENUM_ATTR_PROC_NX_MMIO_BAR_SIZE_1_MB = 0x0000000000100000ULL,
    ENUM_ATTR_PROC_NX_MMIO_BAR_SIZE_64_KB = 0x0000000000010000ULL,
    ENUM_ATTR_PROC_NX_MMIO_BAR_SIZE_4_KB = 0x0000000000001000ULL,
};
#define ATTR_PROC_NX_MMIO_BAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_NPU_MMIO_BAR_ENABLE */
typedef uint8_t ATTR_PROC_NPU_MMIO_BAR_ENABLE_Type[4][2];
const bool ATTR_PROC_NPU_MMIO_BAR_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_NPU_MMIO_BAR_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_NPU_MMIO_BAR_ENABLE_PlatInit = true;
enum ATTR_PROC_NPU_MMIO_BAR_ENABLE_Enum
{
    ENUM_ATTR_PROC_NPU_MMIO_BAR_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_NPU_MMIO_BAR_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_NPU_MMIO_BAR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_NPU_MMIO_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_NPU_MMIO_BAR_BASE_ADDR_Type[4][2];
const bool ATTR_PROC_NPU_MMIO_BAR_BASE_ADDR_Privileged = false;
const TargetTypes_t ATTR_PROC_NPU_MMIO_BAR_BASE_ADDR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_NPU_MMIO_BAR_BASE_ADDR_PlatInit = true;
#define ATTR_PROC_NPU_MMIO_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_NPU_MMIO_BAR_SIZE */
typedef uint64_t ATTR_PROC_NPU_MMIO_BAR_SIZE_Type[4][2];
const bool ATTR_PROC_NPU_MMIO_BAR_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_NPU_MMIO_BAR_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_NPU_MMIO_BAR_SIZE_PlatInit = true;
enum ATTR_PROC_NPU_MMIO_BAR_SIZE_Enum
{
    ENUM_ATTR_PROC_NPU_MMIO_BAR_SIZE_2_MB = 0x0000000000200000ULL,
    ENUM_ATTR_PROC_NPU_MMIO_BAR_SIZE_1_MB = 0x0000000000100000ULL,
    ENUM_ATTR_PROC_NPU_MMIO_BAR_SIZE_512_KB = 0x0000000000080000ULL,
    ENUM_ATTR_PROC_NPU_MMIO_BAR_SIZE_256_KB = 0x0000000000040000ULL,
    ENUM_ATTR_PROC_NPU_MMIO_BAR_SIZE_128_KB = 0x0000000000020000ULL,
    ENUM_ATTR_PROC_NPU_MMIO_BAR_SIZE_64_KB = 0x0000000000010000ULL,
};
#define ATTR_PROC_NPU_MMIO_BAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_BAR_ENABLE */
typedef uint8_t ATTR_PROC_PCIE_BAR_ENABLE_Type[4][3];
const bool ATTR_PROC_PCIE_BAR_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_BAR_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_BAR_ENABLE_PlatInit = true;
enum ATTR_PROC_PCIE_BAR_ENABLE_Enum
{
    ENUM_ATTR_PROC_PCIE_BAR_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_PCIE_BAR_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_PCIE_BAR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_PCIE_BAR_BASE_ADDR_Type[4][3];
const bool ATTR_PROC_PCIE_BAR_BASE_ADDR_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_BAR_BASE_ADDR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_BAR_BASE_ADDR_PlatInit = true;
#define ATTR_PROC_PCIE_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_BAR_SIZE */
typedef uint64_t ATTR_PROC_PCIE_BAR_SIZE_Type[4][3];
const bool ATTR_PROC_PCIE_BAR_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_BAR_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_BAR_SIZE_PlatInit = true;
enum ATTR_PROC_PCIE_BAR_SIZE_Enum
{
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_1_PB = 0x0004000000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_512_TB = 0x0002000000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_256_TB = 0x0001000000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_128_TB = 0x0000800000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_64_TB = 0x0000400000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_32_TB = 0x0000200000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_16_TB = 0x0000100000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_8_TB = 0x0000080000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_4_TB = 0x0000040000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_2_TB = 0x0000020000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_1_TB = 0x0000010000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_512_GB = 0x0000008000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_256_GB = 0x0000004000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_128_GB = 0x0000002000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_64_GB = 0x0000001000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_32_GB = 0x0000000800000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_16_GB = 0x0000000400000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_8_GB = 0x0000000200000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_4_GB = 0x0000000100000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_2_GB = 0x0000000080000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_1_GB = 0x0000000040000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_512_MB = 0x0000000020000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_256_MB = 0x0000000010000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_128_MB = 0x0000000008000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_64_MB = 0x0000000004000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_32_MB = 0x0000000002000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_16_MB = 0x0000000001000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_8_MB = 0x0000000000800000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_4_MB = 0x0000000000400000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_2_MB = 0x0000000000200000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_1_MB = 0x0000000000100000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_512_KB = 0x0000000000080000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_256_KB = 0x0000000000040000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_128_KB = 0x0000000000020000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_64_KB = 0x0000000000010000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_4_KB = 0x0000000000001000ULL,
};
#define ATTR_PROC_PCIE_BAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_CORE */
typedef uint32_t ATTR_FREQ_CORE_Type;
const bool ATTR_FREQ_CORE_Privileged = false;
const TargetTypes_t ATTR_FREQ_CORE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_FREQ_CORE_PlatInit = false;

/* ATTR_PROC_EPS_GB_PERCENTAGE */
typedef uint8_t ATTR_PROC_EPS_GB_PERCENTAGE_Type;
const bool ATTR_PROC_EPS_GB_PERCENTAGE_Privileged = false;
const TargetTypes_t ATTR_PROC_EPS_GB_PERCENTAGE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PROC_EPS_GB_PERCENTAGE_PlatInit = false;

/* ATTR_PROC_EPS_GB_DIRECTION */
typedef uint8_t ATTR_PROC_EPS_GB_DIRECTION_Type;
const bool ATTR_PROC_EPS_GB_DIRECTION_Privileged = false;
const TargetTypes_t ATTR_PROC_EPS_GB_DIRECTION_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PROC_EPS_GB_DIRECTION_PlatInit = false;
enum ATTR_PROC_EPS_GB_DIRECTION_Enum
{
    ENUM_ATTR_PROC_EPS_GB_DIRECTION_POSITIVE = 0x0,
    ENUM_ATTR_PROC_EPS_GB_DIRECTION_NEGATIVE = 0x1,
};

/* ATTR_PROC_FABRIC_ASYNC_SAFE_MODE */
typedef uint8_t ATTR_PROC_FABRIC_ASYNC_SAFE_MODE_Type;
const bool ATTR_PROC_FABRIC_ASYNC_SAFE_MODE_Privileged = false;
const TargetTypes_t ATTR_PROC_FABRIC_ASYNC_SAFE_MODE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PROC_FABRIC_ASYNC_SAFE_MODE_PlatInit = false;
enum ATTR_PROC_FABRIC_ASYNC_SAFE_MODE_Enum
{
    ENUM_ATTR_PROC_FABRIC_ASYNC_SAFE_MODE_PERFORMANCE_MODE = 0x0,
    ENUM_ATTR_PROC_FABRIC_ASYNC_SAFE_MODE_SAFE_MODE = 0x1,
};

/* ATTR_PROC_PCIE_NOT_F_LINK */
typedef uint8_t ATTR_PROC_PCIE_NOT_F_LINK_Type[2];
const bool ATTR_PROC_PCIE_NOT_F_LINK_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_NOT_F_LINK_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_NOT_F_LINK_PlatInit = true;
#define ATTR_PROC_PCIE_NOT_F_LINK_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_EXTERNAL_VRM_STEPSIZE */
typedef uint8_t ATTR_PM_EXTERNAL_VRM_STEPSIZE_Type;
const bool ATTR_PM_EXTERNAL_VRM_STEPSIZE_Privileged = false;
const TargetTypes_t ATTR_PM_EXTERNAL_VRM_STEPSIZE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_EXTERNAL_VRM_STEPSIZE_PlatInit = true;
#define ATTR_PM_EXTERNAL_VRM_STEPSIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_EXTERNAL_VRM_STEPDELAY */
typedef uint32_t ATTR_PM_EXTERNAL_VRM_STEPDELAY_Type;
const bool ATTR_PM_EXTERNAL_VRM_STEPDELAY_Privileged = false;
const TargetTypes_t ATTR_PM_EXTERNAL_VRM_STEPDELAY_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_EXTERNAL_VRM_STEPDELAY_PlatInit = true;
#define ATTR_PM_EXTERNAL_VRM_STEPDELAY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_UNDERVOLTING_FRQ_MINIMUM */
typedef uint8_t ATTR_PM_UNDERVOLTING_FRQ_MINIMUM_Type;
const bool ATTR_PM_UNDERVOLTING_FRQ_MINIMUM_Privileged = false;
const TargetTypes_t ATTR_PM_UNDERVOLTING_FRQ_MINIMUM_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_UNDERVOLTING_FRQ_MINIMUM_PlatInit = true;
#define ATTR_PM_UNDERVOLTING_FRQ_MINIMUM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_UNDERVOLTING_FREQ_MAXIMUM */
typedef uint8_t ATTR_PM_UNDERVOLTING_FREQ_MAXIMUM_Type;
const bool ATTR_PM_UNDERVOLTING_FREQ_MAXIMUM_Privileged = false;
const TargetTypes_t ATTR_PM_UNDERVOLTING_FREQ_MAXIMUM_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_UNDERVOLTING_FREQ_MAXIMUM_PlatInit = true;
#define ATTR_PM_UNDERVOLTING_FREQ_MAXIMUM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SPIVID_FREQUENCY */
typedef uint32_t ATTR_PM_SPIVID_FREQUENCY_Type;
const bool ATTR_PM_SPIVID_FREQUENCY_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_FREQUENCY_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_SPIVID_FREQUENCY_PlatInit = true;
#define ATTR_PM_SPIVID_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SPIVID_PORT_ENABLE */
typedef uint8_t ATTR_PM_SPIVID_PORT_ENABLE_Type;
const bool ATTR_PM_SPIVID_PORT_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_PORT_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_PORT_ENABLE_PlatInit = true;
enum ATTR_PM_SPIVID_PORT_ENABLE_Enum
{
    ENUM_ATTR_PM_SPIVID_PORT_ENABLE_NONE = 0x00,
    ENUM_ATTR_PM_SPIVID_PORT_ENABLE_PORT0NONRED = 0x04,
    ENUM_ATTR_PM_SPIVID_PORT_ENABLE_PORT1NONRED = 0x02,
    ENUM_ATTR_PM_SPIVID_PORT_ENABLE_PORT2NONRED = 0x01,
    ENUM_ATTR_PM_SPIVID_PORT_ENABLE_REDUNDANT = 0x07,
};
#define ATTR_PM_SPIVID_PORT_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SAFE_FREQUENCY */
typedef uint32_t ATTR_PM_SAFE_FREQUENCY_Type;
const bool ATTR_PM_SAFE_FREQUENCY_Privileged = false;
const TargetTypes_t ATTR_PM_SAFE_FREQUENCY_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_SAFE_FREQUENCY_PlatInit = true;
#define ATTR_PM_SAFE_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY */
typedef uint32_t ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY_Type;
const bool ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY_Privileged = false;
const TargetTypes_t ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY_PlatInit = true;
#define ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY */
typedef uint32_t ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY_Type;
const bool ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY_Privileged = false;
const TargetTypes_t ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY_PlatInit = true;
#define ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY */
typedef uint32_t ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY_Type;
const bool ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY_Privileged = false;
const TargetTypes_t ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY_PlatInit = true;
#define ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY */
typedef uint32_t ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY_Type;
const bool ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY_Privileged = false;
const TargetTypes_t ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY_PlatInit = true;
#define ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY */
typedef uint32_t ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY_Type;
const bool ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY_Privileged = false;
const TargetTypes_t ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY_PlatInit = true;
#define ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SPIPSS_FREQUENCY */
typedef uint32_t ATTR_PM_SPIPSS_FREQUENCY_Type;
const bool ATTR_PM_SPIPSS_FREQUENCY_Privileged = false;
const TargetTypes_t ATTR_PM_SPIPSS_FREQUENCY_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_SPIPSS_FREQUENCY_PlatInit = true;
#define ATTR_PM_SPIPSS_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_APSS_CHIP_SELECT */
typedef uint8_t ATTR_PM_APSS_CHIP_SELECT_Type;
const bool ATTR_PM_APSS_CHIP_SELECT_Privileged = false;
const TargetTypes_t ATTR_PM_APSS_CHIP_SELECT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_APSS_CHIP_SELECT_PlatInit = true;
enum ATTR_PM_APSS_CHIP_SELECT_Enum
{
    ENUM_ATTR_PM_APSS_CHIP_SELECT_NONE = 0xFF,
    ENUM_ATTR_PM_APSS_CHIP_SELECT_CS0 = 0x00,
    ENUM_ATTR_PM_APSS_CHIP_SELECT_CS1 = 0x01,
};
#define ATTR_PM_APSS_CHIP_SELECT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PBAX_NODEID */
typedef uint8_t ATTR_PM_PBAX_NODEID_Type;
const bool ATTR_PM_PBAX_NODEID_Privileged = false;
const TargetTypes_t ATTR_PM_PBAX_NODEID_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PBAX_NODEID_PlatInit = true;
#define ATTR_PM_PBAX_NODEID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PBAX_CHIPID */
typedef uint8_t ATTR_PM_PBAX_CHIPID_Type;
const bool ATTR_PM_PBAX_CHIPID_Privileged = false;
const TargetTypes_t ATTR_PM_PBAX_CHIPID_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PBAX_CHIPID_PlatInit = true;
#define ATTR_PM_PBAX_CHIPID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PBAX_BRDCST_ID_VECTOR */
typedef uint8_t ATTR_PM_PBAX_BRDCST_ID_VECTOR_Type;
const bool ATTR_PM_PBAX_BRDCST_ID_VECTOR_Privileged = false;
const TargetTypes_t ATTR_PM_PBAX_BRDCST_ID_VECTOR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PBAX_BRDCST_ID_VECTOR_PlatInit = true;
#define ATTR_PM_PBAX_BRDCST_ID_VECTOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_R_LOADLINE_VDD */
typedef uint32_t ATTR_PROC_R_LOADLINE_VDD_Type;
const bool ATTR_PROC_R_LOADLINE_VDD_Privileged = false;
const TargetTypes_t ATTR_PROC_R_LOADLINE_VDD_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_R_LOADLINE_VDD_PlatInit = true;
#define ATTR_PROC_R_LOADLINE_VDD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_R_DISTLOSS_VDD */
typedef uint32_t ATTR_PROC_R_DISTLOSS_VDD_Type;
const bool ATTR_PROC_R_DISTLOSS_VDD_Privileged = false;
const TargetTypes_t ATTR_PROC_R_DISTLOSS_VDD_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_R_DISTLOSS_VDD_PlatInit = true;
#define ATTR_PROC_R_DISTLOSS_VDD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_VRM_VOFFSET_VDD */
typedef uint32_t ATTR_PROC_VRM_VOFFSET_VDD_Type;
const bool ATTR_PROC_VRM_VOFFSET_VDD_Privileged = false;
const TargetTypes_t ATTR_PROC_VRM_VOFFSET_VDD_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_VRM_VOFFSET_VDD_PlatInit = true;
#define ATTR_PROC_VRM_VOFFSET_VDD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_R_LOADLINE_VCS */
typedef uint32_t ATTR_PROC_R_LOADLINE_VCS_Type;
const bool ATTR_PROC_R_LOADLINE_VCS_Privileged = false;
const TargetTypes_t ATTR_PROC_R_LOADLINE_VCS_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_R_LOADLINE_VCS_PlatInit = true;
#define ATTR_PROC_R_LOADLINE_VCS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_R_DISTLOSS_VCS */
typedef uint32_t ATTR_PROC_R_DISTLOSS_VCS_Type;
const bool ATTR_PROC_R_DISTLOSS_VCS_Privileged = false;
const TargetTypes_t ATTR_PROC_R_DISTLOSS_VCS_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_R_DISTLOSS_VCS_PlatInit = true;
#define ATTR_PROC_R_DISTLOSS_VCS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_VRM_VOFFSET_VCS */
typedef uint32_t ATTR_PROC_VRM_VOFFSET_VCS_Type;
const bool ATTR_PROC_VRM_VOFFSET_VCS_Privileged = false;
const TargetTypes_t ATTR_PROC_VRM_VOFFSET_VCS_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_VRM_VOFFSET_VCS_PlatInit = true;
#define ATTR_PROC_VRM_VOFFSET_VCS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_CORE_MAX */
typedef uint32_t ATTR_FREQ_CORE_MAX_Type;
const bool ATTR_FREQ_CORE_MAX_Privileged = false;
const TargetTypes_t ATTR_FREQ_CORE_MAX_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_FREQ_CORE_MAX_PlatInit = true;
#define ATTR_FREQ_CORE_MAX_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CPM_TURBO_BOOST_PERCENT */
typedef uint32_t ATTR_CPM_TURBO_BOOST_PERCENT_Type;
const bool ATTR_CPM_TURBO_BOOST_PERCENT_Privileged = false;
const TargetTypes_t ATTR_CPM_TURBO_BOOST_PERCENT_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_CPM_TURBO_BOOST_PERCENT_PlatInit = true;
#define ATTR_CPM_TURBO_BOOST_PERCENT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_EXT_BIAS_UP */
typedef uint32_t ATTR_FREQ_EXT_BIAS_UP_Type;
const bool ATTR_FREQ_EXT_BIAS_UP_Privileged = false;
const TargetTypes_t ATTR_FREQ_EXT_BIAS_UP_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_FREQ_EXT_BIAS_UP_PlatInit = true;
#define ATTR_FREQ_EXT_BIAS_UP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_EXT_BIAS_DOWN */
typedef uint32_t ATTR_FREQ_EXT_BIAS_DOWN_Type;
const bool ATTR_FREQ_EXT_BIAS_DOWN_Privileged = false;
const TargetTypes_t ATTR_FREQ_EXT_BIAS_DOWN_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_FREQ_EXT_BIAS_DOWN_PlatInit = true;
#define ATTR_FREQ_EXT_BIAS_DOWN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VOLTAGE_EXT_VDD_BIAS_UP */
typedef uint32_t ATTR_VOLTAGE_EXT_VDD_BIAS_UP_Type;
const bool ATTR_VOLTAGE_EXT_VDD_BIAS_UP_Privileged = false;
const TargetTypes_t ATTR_VOLTAGE_EXT_VDD_BIAS_UP_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_VOLTAGE_EXT_VDD_BIAS_UP_PlatInit = true;
#define ATTR_VOLTAGE_EXT_VDD_BIAS_UP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VOLTAGE_EXT_VDD_BIAS_DOWN */
typedef uint32_t ATTR_VOLTAGE_EXT_VDD_BIAS_DOWN_Type;
const bool ATTR_VOLTAGE_EXT_VDD_BIAS_DOWN_Privileged = false;
const TargetTypes_t ATTR_VOLTAGE_EXT_VDD_BIAS_DOWN_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_VOLTAGE_EXT_VDD_BIAS_DOWN_PlatInit = true;
#define ATTR_VOLTAGE_EXT_VDD_BIAS_DOWN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VOLTAGE_EXT_VCS_BIAS_UP */
typedef uint32_t ATTR_VOLTAGE_EXT_VCS_BIAS_UP_Type;
const bool ATTR_VOLTAGE_EXT_VCS_BIAS_UP_Privileged = false;
const TargetTypes_t ATTR_VOLTAGE_EXT_VCS_BIAS_UP_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_VOLTAGE_EXT_VCS_BIAS_UP_PlatInit = true;
#define ATTR_VOLTAGE_EXT_VCS_BIAS_UP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VOLTAGE_EXT_VCS_BIAS_DOWN */
typedef uint32_t ATTR_VOLTAGE_EXT_VCS_BIAS_DOWN_Type;
const bool ATTR_VOLTAGE_EXT_VCS_BIAS_DOWN_Privileged = false;
const TargetTypes_t ATTR_VOLTAGE_EXT_VCS_BIAS_DOWN_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_VOLTAGE_EXT_VCS_BIAS_DOWN_PlatInit = true;
#define ATTR_VOLTAGE_EXT_VCS_BIAS_DOWN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VOLTAGE_INT_VDD_BIAS_UP */
typedef uint32_t ATTR_VOLTAGE_INT_VDD_BIAS_UP_Type;
const bool ATTR_VOLTAGE_INT_VDD_BIAS_UP_Privileged = false;
const TargetTypes_t ATTR_VOLTAGE_INT_VDD_BIAS_UP_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_VOLTAGE_INT_VDD_BIAS_UP_PlatInit = true;
#define ATTR_VOLTAGE_INT_VDD_BIAS_UP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VOLTAGE_INT_VDD_BIAS_DOWN */
typedef uint32_t ATTR_VOLTAGE_INT_VDD_BIAS_DOWN_Type;
const bool ATTR_VOLTAGE_INT_VDD_BIAS_DOWN_Privileged = false;
const TargetTypes_t ATTR_VOLTAGE_INT_VDD_BIAS_DOWN_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_VOLTAGE_INT_VDD_BIAS_DOWN_PlatInit = false;
#define ATTR_VOLTAGE_INT_VDD_BIAS_DOWN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VOLTAGE_INT_VCS_BIAS_UP */
typedef uint32_t ATTR_VOLTAGE_INT_VCS_BIAS_UP_Type;
const bool ATTR_VOLTAGE_INT_VCS_BIAS_UP_Privileged = false;
const TargetTypes_t ATTR_VOLTAGE_INT_VCS_BIAS_UP_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_VOLTAGE_INT_VCS_BIAS_UP_PlatInit = true;
#define ATTR_VOLTAGE_INT_VCS_BIAS_UP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_VOLTAGE_INT_VCS_BIAS_DOWN */
typedef uint32_t ATTR_VOLTAGE_INT_VCS_BIAS_DOWN_Type;
const bool ATTR_VOLTAGE_INT_VCS_BIAS_DOWN_Privileged = false;
const TargetTypes_t ATTR_VOLTAGE_INT_VCS_BIAS_DOWN_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_VOLTAGE_INT_VCS_BIAS_DOWN_PlatInit = true;
#define ATTR_VOLTAGE_INT_VCS_BIAS_DOWN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SLEEP_ENABLE */
typedef uint8_t ATTR_PM_SLEEP_ENABLE_Type;
const bool ATTR_PM_SLEEP_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PM_SLEEP_ENABLE_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_SLEEP_ENABLE_PlatInit = true;
enum ATTR_PM_SLEEP_ENABLE_Enum
{
    ENUM_ATTR_PM_SLEEP_ENABLE_OFF=0,
    ENUM_ATTR_PM_SLEEP_ENABLE_ON=1,
};
#define ATTR_PM_SLEEP_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SLEEP_ENTRY */
typedef uint8_t ATTR_PM_SLEEP_ENTRY_Type;
const bool ATTR_PM_SLEEP_ENTRY_Privileged = false;
const TargetTypes_t ATTR_PM_SLEEP_ENTRY_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SLEEP_ENTRY_PlatInit = true;
enum ATTR_PM_SLEEP_ENTRY_Enum
{
    ENUM_ATTR_PM_SLEEP_ENTRY_HARDWARE=0,
    ENUM_ATTR_PM_SLEEP_ENTRY_ASSISTED=1,
};
#define ATTR_PM_SLEEP_ENTRY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SLEEP_EXIT */
typedef uint8_t ATTR_PM_SLEEP_EXIT_Type;
const bool ATTR_PM_SLEEP_EXIT_Privileged = false;
const TargetTypes_t ATTR_PM_SLEEP_EXIT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SLEEP_EXIT_PlatInit = true;
enum ATTR_PM_SLEEP_EXIT_Enum
{
    ENUM_ATTR_PM_SLEEP_EXIT_HARDWARE=0,
    ENUM_ATTR_PM_SLEEP_EXIT_ASSISTED=1,
};
#define ATTR_PM_SLEEP_EXIT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SLEEP_TYPE */
typedef uint8_t ATTR_PM_SLEEP_TYPE_Type;
const bool ATTR_PM_SLEEP_TYPE_Privileged = false;
const TargetTypes_t ATTR_PM_SLEEP_TYPE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SLEEP_TYPE_PlatInit = true;
enum ATTR_PM_SLEEP_TYPE_Enum
{
    ENUM_ATTR_PM_SLEEP_TYPE_FAST=0,
    ENUM_ATTR_PM_SLEEP_TYPE_DEEP=1,
};
#define ATTR_PM_SLEEP_TYPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_WINKLE_ENTRY */
typedef uint8_t ATTR_PM_WINKLE_ENTRY_Type;
const bool ATTR_PM_WINKLE_ENTRY_Privileged = false;
const TargetTypes_t ATTR_PM_WINKLE_ENTRY_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_WINKLE_ENTRY_PlatInit = true;
enum ATTR_PM_WINKLE_ENTRY_Enum
{
    ENUM_ATTR_PM_WINKLE_ENTRY_HARDWARE=0,
    ENUM_ATTR_PM_WINKLE_ENTRY_ASSISTED=1,
};
#define ATTR_PM_WINKLE_ENTRY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_WINKLE_EXIT */
typedef uint8_t ATTR_PM_WINKLE_EXIT_Type;
const bool ATTR_PM_WINKLE_EXIT_Privileged = false;
const TargetTypes_t ATTR_PM_WINKLE_EXIT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_WINKLE_EXIT_PlatInit = true;
enum ATTR_PM_WINKLE_EXIT_Enum
{
    ENUM_ATTR_PM_WINKLE_EXIT_HARDWARE=0,
    ENUM_ATTR_PM_WINKLE_EXIT_ASSISTED=1,
};
#define ATTR_PM_WINKLE_EXIT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_WINKLE_TYPE */
typedef uint8_t ATTR_PM_WINKLE_TYPE_Type;
const bool ATTR_PM_WINKLE_TYPE_Privileged = false;
const TargetTypes_t ATTR_PM_WINKLE_TYPE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_WINKLE_TYPE_PlatInit = true;
enum ATTR_PM_WINKLE_TYPE_Enum
{
    ENUM_ATTR_PM_WINKLE_TYPE_FAST=0,
    ENUM_ATTR_PM_WINKLE_TYPE_DEEP=1,
};
#define ATTR_PM_WINKLE_TYPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SYSTEM_IVRMS_ENABLED */
typedef uint8_t ATTR_PM_SYSTEM_IVRMS_ENABLED_Type;
const bool ATTR_PM_SYSTEM_IVRMS_ENABLED_Privileged = false;
const TargetTypes_t ATTR_PM_SYSTEM_IVRMS_ENABLED_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_SYSTEM_IVRMS_ENABLED_PlatInit = true;
enum ATTR_PM_SYSTEM_IVRMS_ENABLED_Enum
{
    ENUM_ATTR_PM_SYSTEM_IVRMS_ENABLED_FALSE=0,
    ENUM_ATTR_PM_SYSTEM_IVRMS_ENABLED_TRUE=1,
};
#define ATTR_PM_SYSTEM_IVRMS_ENABLED_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SYSTEM_IVRM_VPD_MIN_LEVEL */
typedef uint8_t ATTR_PM_SYSTEM_IVRM_VPD_MIN_LEVEL_Type;
const bool ATTR_PM_SYSTEM_IVRM_VPD_MIN_LEVEL_Privileged = false;
const TargetTypes_t ATTR_PM_SYSTEM_IVRM_VPD_MIN_LEVEL_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_SYSTEM_IVRM_VPD_MIN_LEVEL_PlatInit = true;
#define ATTR_PM_SYSTEM_IVRM_VPD_MIN_LEVEL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_DPLL_DIVIDER */
typedef uint32_t ATTR_PROC_DPLL_DIVIDER_Type;
const bool ATTR_PROC_DPLL_DIVIDER_Privileged = false;
const TargetTypes_t ATTR_PROC_DPLL_DIVIDER_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_DPLL_DIVIDER_PlatInit = false;

/* ATTR_PM_POWER_PROXY_TRACE_TIMER */
typedef uint32_t ATTR_PM_POWER_PROXY_TRACE_TIMER_Type;
const bool ATTR_PM_POWER_PROXY_TRACE_TIMER_Privileged = false;
const TargetTypes_t ATTR_PM_POWER_PROXY_TRACE_TIMER_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_POWER_PROXY_TRACE_TIMER_PlatInit = false;

/* ATTR_PM_PPT_TIMER_MATCH_VALUE */
typedef uint32_t ATTR_PM_PPT_TIMER_MATCH_VALUE_Type;
const bool ATTR_PM_PPT_TIMER_MATCH_VALUE_Privileged = false;
const TargetTypes_t ATTR_PM_PPT_TIMER_MATCH_VALUE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PPT_TIMER_MATCH_VALUE_PlatInit = false;

/* ATTR_PM_PPT_TIMER_TICK */
typedef uint32_t ATTR_PM_PPT_TIMER_TICK_Type;
const bool ATTR_PM_PPT_TIMER_TICK_Privileged = false;
const TargetTypes_t ATTR_PM_PPT_TIMER_TICK_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PPT_TIMER_TICK_PlatInit = false;

/* ATTR_PM_AISS_TIMEOUT */
typedef uint8_t ATTR_PM_AISS_TIMEOUT_Type;
const bool ATTR_PM_AISS_TIMEOUT_Privileged = false;
const TargetTypes_t ATTR_PM_AISS_TIMEOUT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_AISS_TIMEOUT_PlatInit = false;
enum ATTR_PM_AISS_TIMEOUT_Enum
{
    ENUM_ATTR_PM_AISS_TIMEOUT_1MS=0,
    ENUM_ATTR_PM_AISS_TIMEOUT_2MS=1,
    ENUM_ATTR_PM_AISS_TIMEOUT_4MS=2,
    ENUM_ATTR_PM_AISS_TIMEOUT_8MS=3,
    ENUM_ATTR_PM_AISS_TIMEOUT_16MS=4,
    ENUM_ATTR_PM_AISS_TIMEOUT_32MS=5,
    ENUM_ATTR_PM_AISS_TIMEOUT_64MS=6,
    ENUM_ATTR_PM_AISS_TIMEOUT_128MS=7,
    ENUM_ATTR_PM_AISS_TIMEOUT_256MS=8,
    ENUM_ATTR_PM_AISS_TIMEOUT_512MS=9,
};

/* ATTR_PM_PSTATE_STEPSIZE */
typedef uint8_t ATTR_PM_PSTATE_STEPSIZE_Type;
const bool ATTR_PM_PSTATE_STEPSIZE_Privileged = false;
const TargetTypes_t ATTR_PM_PSTATE_STEPSIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PSTATE_STEPSIZE_PlatInit = false;

/* ATTR_PM_EXTERNAL_VRM_STEPDELAY_RANGE */
typedef uint8_t ATTR_PM_EXTERNAL_VRM_STEPDELAY_RANGE_Type;
const bool ATTR_PM_EXTERNAL_VRM_STEPDELAY_RANGE_Privileged = false;
const TargetTypes_t ATTR_PM_EXTERNAL_VRM_STEPDELAY_RANGE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_EXTERNAL_VRM_STEPDELAY_RANGE_PlatInit = false;

/* ATTR_PM_EXTERNAL_VRM_STEPDELAY_VALUE */
typedef uint8_t ATTR_PM_EXTERNAL_VRM_STEPDELAY_VALUE_Type;
const bool ATTR_PM_EXTERNAL_VRM_STEPDELAY_VALUE_Privileged = false;
const TargetTypes_t ATTR_PM_EXTERNAL_VRM_STEPDELAY_VALUE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_EXTERNAL_VRM_STEPDELAY_VALUE_PlatInit = false;

/* ATTR_PM_PMC_HANGPULSE_DIVIDER */
typedef uint8_t ATTR_PM_PMC_HANGPULSE_DIVIDER_Type;
const bool ATTR_PM_PMC_HANGPULSE_DIVIDER_Privileged = false;
const TargetTypes_t ATTR_PM_PMC_HANGPULSE_DIVIDER_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PMC_HANGPULSE_DIVIDER_PlatInit = false;

/* ATTR_PM_PVSAFE_PSTATE */
typedef uint8_t ATTR_PM_PVSAFE_PSTATE_Type;
const bool ATTR_PM_PVSAFE_PSTATE_Privileged = false;
const TargetTypes_t ATTR_PM_PVSAFE_PSTATE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PVSAFE_PSTATE_PlatInit = false;

/* ATTR_PM_SPIVID_FRAME_SIZE */
typedef uint8_t ATTR_PM_SPIVID_FRAME_SIZE_Type;
const bool ATTR_PM_SPIVID_FRAME_SIZE_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_FRAME_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_FRAME_SIZE_PlatInit = false;

/* ATTR_PM_SPIVID_IN_DELAY_FRAME1 */
typedef uint8_t ATTR_PM_SPIVID_IN_DELAY_FRAME1_Type;
const bool ATTR_PM_SPIVID_IN_DELAY_FRAME1_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_IN_DELAY_FRAME1_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_IN_DELAY_FRAME1_PlatInit = false;

/* ATTR_PM_SPIVID_IN_DELAY_FRAME2 */
typedef uint8_t ATTR_PM_SPIVID_IN_DELAY_FRAME2_Type;
const bool ATTR_PM_SPIVID_IN_DELAY_FRAME2_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_IN_DELAY_FRAME2_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_IN_DELAY_FRAME2_PlatInit = false;

/* ATTR_PM_SPIVID_CLOCK_POLARITY */
typedef uint8_t ATTR_PM_SPIVID_CLOCK_POLARITY_Type;
const bool ATTR_PM_SPIVID_CLOCK_POLARITY_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_CLOCK_POLARITY_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_CLOCK_POLARITY_PlatInit = false;
enum ATTR_PM_SPIVID_CLOCK_POLARITY_Enum
{
    ENUM_ATTR_PM_SPIVID_CLOCK_POLARITY_IDLELOW=0,
    ENUM_ATTR_PM_SPIVID_CLOCK_POLARITY_IDLEHIGH = 1,
};

/* ATTR_PM_SPIVID_CLOCK_PHASE */
typedef uint8_t ATTR_PM_SPIVID_CLOCK_PHASE_Type;
const bool ATTR_PM_SPIVID_CLOCK_PHASE_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_CLOCK_PHASE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_CLOCK_PHASE_PlatInit = false;
enum ATTR_PM_SPIVID_CLOCK_PHASE_Enum
{
    ENUM_ATTR_PM_SPIVID_CLOCK_PHASE_FIRSTEDGE=0,
    ENUM_ATTR_PM_SPIVID_CLOCK_PHASE_SECONDEDGE=1,
};

/* ATTR_PM_SPIVID_CLOCK_DIVIDER */
typedef uint32_t ATTR_PM_SPIVID_CLOCK_DIVIDER_Type;
const bool ATTR_PM_SPIVID_CLOCK_DIVIDER_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_CLOCK_DIVIDER_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_CLOCK_DIVIDER_PlatInit = false;

/* ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS */
typedef uint32_t ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_Type;
const bool ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_PlatInit = false;

/* ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE */
typedef uint32_t ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE_Type;
const bool ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE_PlatInit = false;

/* ATTR_PM_SPIVID_INTER_RETRY_DELAY_VALUE */
typedef uint32_t ATTR_PM_SPIVID_INTER_RETRY_DELAY_VALUE_Type;
const bool ATTR_PM_SPIVID_INTER_RETRY_DELAY_VALUE_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_INTER_RETRY_DELAY_VALUE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_INTER_RETRY_DELAY_VALUE_PlatInit = false;

/* ATTR_PM_SPIVID_INTER_RETRY_DELAY */
typedef uint32_t ATTR_PM_SPIVID_INTER_RETRY_DELAY_Type;
const bool ATTR_PM_SPIVID_INTER_RETRY_DELAY_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_INTER_RETRY_DELAY_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_INTER_RETRY_DELAY_PlatInit = false;

/* ATTR_PM_SPIVID_CRC_GEN_ENABLE */
typedef uint8_t ATTR_PM_SPIVID_CRC_GEN_ENABLE_Type;
const bool ATTR_PM_SPIVID_CRC_GEN_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_CRC_GEN_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_CRC_GEN_ENABLE_PlatInit = false;
enum ATTR_PM_SPIVID_CRC_GEN_ENABLE_Enum
{
    ENUM_ATTR_PM_SPIVID_CRC_GEN_ENABLE_TRUE = 1,
    ENUM_ATTR_PM_SPIVID_CRC_GEN_ENABLE_FALSE = 0,
};

/* ATTR_PM_SPIVID_CRC_CHECK_ENABLE */
typedef uint8_t ATTR_PM_SPIVID_CRC_CHECK_ENABLE_Type;
const bool ATTR_PM_SPIVID_CRC_CHECK_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_CRC_CHECK_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_CRC_CHECK_ENABLE_PlatInit = false;
enum ATTR_PM_SPIVID_CRC_CHECK_ENABLE_Enum
{
    ENUM_ATTR_PM_SPIVID_CRC_CHECK_ENABLE_TRUE = 1,
    ENUM_ATTR_PM_SPIVID_CRC_CHECK_ENABLE_FALSE = 0,
};

/* ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE */
typedef uint8_t ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE_Type;
const bool ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE_PlatInit = false;
enum ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE_Enum
{
    ENUM_ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE_TRUE = 1,
    ENUM_ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE_FALSE = 0,
};

/* ATTR_PM_SPIVID_MAX_RETRIES */
typedef uint8_t ATTR_PM_SPIVID_MAX_RETRIES_Type;
const bool ATTR_PM_SPIVID_MAX_RETRIES_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_MAX_RETRIES_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_MAX_RETRIES_PlatInit = false;

/* ATTR_PM_SPIVID_CRC_POLYNOMIAL_ENABLES */
typedef uint8_t ATTR_PM_SPIVID_CRC_POLYNOMIAL_ENABLES_Type;
const bool ATTR_PM_SPIVID_CRC_POLYNOMIAL_ENABLES_Privileged = false;
const TargetTypes_t ATTR_PM_SPIVID_CRC_POLYNOMIAL_ENABLES_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIVID_CRC_POLYNOMIAL_ENABLES_PlatInit = false;

/* ATTR_PM_OCC_HEARTBEAT_TIME */
typedef uint32_t ATTR_PM_OCC_HEARTBEAT_TIME_Type;
const bool ATTR_PM_OCC_HEARTBEAT_TIME_Privileged = false;
const TargetTypes_t ATTR_PM_OCC_HEARTBEAT_TIME_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_OCC_HEARTBEAT_TIME_PlatInit = false;
#define ATTR_PM_OCC_HEARTBEAT_TIME_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SLEEP_WINKLE_REQUEST_TIMEOUT */
typedef uint32_t ATTR_PM_SLEEP_WINKLE_REQUEST_TIMEOUT_Type;
const bool ATTR_PM_SLEEP_WINKLE_REQUEST_TIMEOUT_Privileged = false;
const TargetTypes_t ATTR_PM_SLEEP_WINKLE_REQUEST_TIMEOUT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SLEEP_WINKLE_REQUEST_TIMEOUT_PlatInit = false;

/* ATTR_PM_PFET_POWERUP_CORE_DELAY0 */
typedef uint32_t ATTR_PM_PFET_POWERUP_CORE_DELAY0_Type;
const bool ATTR_PM_PFET_POWERUP_CORE_DELAY0_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERUP_CORE_DELAY0_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERUP_CORE_DELAY0_PlatInit = true;
#define ATTR_PM_PFET_POWERUP_CORE_DELAY0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERUP_CORE_DELAY1 */
typedef uint32_t ATTR_PM_PFET_POWERUP_CORE_DELAY1_Type;
const bool ATTR_PM_PFET_POWERUP_CORE_DELAY1_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERUP_CORE_DELAY1_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERUP_CORE_DELAY1_PlatInit = true;
#define ATTR_PM_PFET_POWERUP_CORE_DELAY1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE_Type;
const bool ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE_PlatInit = false;
#define ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE_Type;
const bool ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE_PlatInit = false;
#define ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT */
typedef uint32_t ATTR_PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT_Type;
const bool ATTR_PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT_PlatInit = false;

/* ATTR_PM_PFET_POWERDOWN_CORE_DELAY0 */
typedef uint32_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_Type;
const bool ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_PlatInit = true;
#define ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERDOWN_CORE_DELAY1 */
typedef uint32_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_Type;
const bool ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_PlatInit = true;
#define ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE_Type;
const bool ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE_PlatInit = false;
#define ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE_Type;
const bool ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE_PlatInit = false;
#define ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT */
typedef uint32_t ATTR_PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT_Type;
const bool ATTR_PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT_PlatInit = false;

/* ATTR_PM_PFET_POWERUP_ECO_DELAY0 */
typedef uint32_t ATTR_PM_PFET_POWERUP_ECO_DELAY0_Type;
const bool ATTR_PM_PFET_POWERUP_ECO_DELAY0_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERUP_ECO_DELAY0_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERUP_ECO_DELAY0_PlatInit = true;
#define ATTR_PM_PFET_POWERUP_ECO_DELAY0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERUP_ECO_DELAY1 */
typedef uint32_t ATTR_PM_PFET_POWERUP_ECO_DELAY1_Type;
const bool ATTR_PM_PFET_POWERUP_ECO_DELAY1_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERUP_ECO_DELAY1_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERUP_ECO_DELAY1_PlatInit = true;
#define ATTR_PM_PFET_POWERUP_ECO_DELAY1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE_Type;
const bool ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE_PlatInit = false;
#define ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE_Type;
const bool ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE_PlatInit = false;
#define ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT */
typedef uint32_t ATTR_PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT_Type;
const bool ATTR_PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT_PlatInit = false;

/* ATTR_PM_PFET_POWERDOWN_ECO_DELAY0 */
typedef uint32_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_Type;
const bool ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_PlatInit = true;
#define ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERDOWN_ECO_DELAY1 */
typedef uint32_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_Type;
const bool ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_PlatInit = true;
#define ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE_Type;
const bool ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE_PlatInit = false;
#define ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE_Type;
const bool ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE_PlatInit = false;
#define ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT */
typedef uint32_t ATTR_PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT_Type;
const bool ATTR_PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT_PlatInit = false;

/* ATTR_PM_PSTATE0_FREQUENCY */
typedef uint32_t ATTR_PM_PSTATE0_FREQUENCY_Type;
const bool ATTR_PM_PSTATE0_FREQUENCY_Privileged = false;
const TargetTypes_t ATTR_PM_PSTATE0_FREQUENCY_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PSTATE0_FREQUENCY_PlatInit = false;
#define ATTR_PM_PSTATE0_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_IVRMS_ENABLED */
typedef uint8_t ATTR_PM_IVRMS_ENABLED_Type;
const bool ATTR_PM_IVRMS_ENABLED_Privileged = false;
const TargetTypes_t ATTR_PM_IVRMS_ENABLED_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_IVRMS_ENABLED_PlatInit = false;
enum ATTR_PM_IVRMS_ENABLED_Enum
{
    ENUM_ATTR_PM_IVRMS_ENABLED_TRUE = 1,
    ENUM_ATTR_PM_IVRMS_ENABLED_FALSE = 0,
};

/* ATTR_PM_SAFE_PSTATE */
typedef uint8_t ATTR_PM_SAFE_PSTATE_Type;
const bool ATTR_PM_SAFE_PSTATE_Privileged = false;
const TargetTypes_t ATTR_PM_SAFE_PSTATE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SAFE_PSTATE_PlatInit = false;

/* ATTR_PM_RESONANT_CLOCK_ENABLE */
typedef uint8_t ATTR_PM_RESONANT_CLOCK_ENABLE_Type;
const bool ATTR_PM_RESONANT_CLOCK_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PM_RESONANT_CLOCK_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_RESONANT_CLOCK_ENABLE_PlatInit = false;

/* ATTR_PM_RESONANT_CLOCK_FULL_CSB_PSTATE */
typedef uint8_t ATTR_PM_RESONANT_CLOCK_FULL_CSB_PSTATE_Type;
const bool ATTR_PM_RESONANT_CLOCK_FULL_CSB_PSTATE_Privileged = false;
const TargetTypes_t ATTR_PM_RESONANT_CLOCK_FULL_CSB_PSTATE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_RESONANT_CLOCK_FULL_CSB_PSTATE_PlatInit = false;

/* ATTR_PM_RESONANT_CLOCK_LFRLOW_PSTATE */
typedef uint8_t ATTR_PM_RESONANT_CLOCK_LFRLOW_PSTATE_Type;
const bool ATTR_PM_RESONANT_CLOCK_LFRLOW_PSTATE_Privileged = false;
const TargetTypes_t ATTR_PM_RESONANT_CLOCK_LFRLOW_PSTATE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_RESONANT_CLOCK_LFRLOW_PSTATE_PlatInit = false;

/* ATTR_PM_RESONANT_CLOCK_LFRUPPER_PSTATE */
typedef uint8_t ATTR_PM_RESONANT_CLOCK_LFRUPPER_PSTATE_Type;
const bool ATTR_PM_RESONANT_CLOCK_LFRUPPER_PSTATE_Privileged = false;
const TargetTypes_t ATTR_PM_RESONANT_CLOCK_LFRUPPER_PSTATE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_RESONANT_CLOCK_LFRUPPER_PSTATE_PlatInit = false;

/* ATTR_PM_RESONANT_CLOCK_HFRLOW_PSTATE */
typedef uint8_t ATTR_PM_RESONANT_CLOCK_HFRLOW_PSTATE_Type;
const bool ATTR_PM_RESONANT_CLOCK_HFRLOW_PSTATE_Privileged = false;
const TargetTypes_t ATTR_PM_RESONANT_CLOCK_HFRLOW_PSTATE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_RESONANT_CLOCK_HFRLOW_PSTATE_PlatInit = false;

/* ATTR_PM_RESONANT_CLOCK_HFRHIGH_PSTATE */
typedef uint8_t ATTR_PM_RESONANT_CLOCK_HFRHIGH_PSTATE_Type;
const bool ATTR_PM_RESONANT_CLOCK_HFRHIGH_PSTATE_Privileged = false;
const TargetTypes_t ATTR_PM_RESONANT_CLOCK_HFRHIGH_PSTATE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_RESONANT_CLOCK_HFRHIGH_PSTATE_PlatInit = false;

/* ATTR_PM_SPIPSS_FRAME_SIZE */
typedef uint8_t ATTR_PM_SPIPSS_FRAME_SIZE_Type;
const bool ATTR_PM_SPIPSS_FRAME_SIZE_Privileged = false;
const TargetTypes_t ATTR_PM_SPIPSS_FRAME_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIPSS_FRAME_SIZE_PlatInit = false;

/* ATTR_PM_SPIPSS_OUT_COUNT */
typedef uint8_t ATTR_PM_SPIPSS_OUT_COUNT_Type;
const bool ATTR_PM_SPIPSS_OUT_COUNT_Privileged = false;
const TargetTypes_t ATTR_PM_SPIPSS_OUT_COUNT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIPSS_OUT_COUNT_PlatInit = false;

/* ATTR_PM_SPIPSS_IN_DELAY */
typedef uint8_t ATTR_PM_SPIPSS_IN_DELAY_Type;
const bool ATTR_PM_SPIPSS_IN_DELAY_Privileged = false;
const TargetTypes_t ATTR_PM_SPIPSS_IN_DELAY_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIPSS_IN_DELAY_PlatInit = false;

/* ATTR_PM_SPIPSS_IN_COUNT */
typedef uint8_t ATTR_PM_SPIPSS_IN_COUNT_Type;
const bool ATTR_PM_SPIPSS_IN_COUNT_Privileged = false;
const TargetTypes_t ATTR_PM_SPIPSS_IN_COUNT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIPSS_IN_COUNT_PlatInit = false;

/* ATTR_PM_SPIPSS_CLOCK_POLARITY */
typedef uint8_t ATTR_PM_SPIPSS_CLOCK_POLARITY_Type;
const bool ATTR_PM_SPIPSS_CLOCK_POLARITY_Privileged = false;
const TargetTypes_t ATTR_PM_SPIPSS_CLOCK_POLARITY_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIPSS_CLOCK_POLARITY_PlatInit = false;
enum ATTR_PM_SPIPSS_CLOCK_POLARITY_Enum
{
    ENUM_ATTR_PM_SPIPSS_CLOCK_POLARITY_CPOL=0,
    ENUM_ATTR_PM_SPIPSS_CLOCK_POLARITY_CPOH=1,
};

/* ATTR_PM_SPIPSS_CLOCK_PHASE */
typedef uint8_t ATTR_PM_SPIPSS_CLOCK_PHASE_Type;
const bool ATTR_PM_SPIPSS_CLOCK_PHASE_Privileged = false;
const TargetTypes_t ATTR_PM_SPIPSS_CLOCK_PHASE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIPSS_CLOCK_PHASE_PlatInit = false;
enum ATTR_PM_SPIPSS_CLOCK_PHASE_Enum
{
    ENUM_ATTR_PM_SPIPSS_CLOCK_PHASE_FIRSTEDGE=0,
    ENUM_ATTR_PM_SPIPSS_CLOCK_PHASE_SECONDEDGE=1,
};

/* ATTR_PM_SPIPSS_CLOCK_DIVIDER */
typedef uint8_t ATTR_PM_SPIPSS_CLOCK_DIVIDER_Type;
const bool ATTR_PM_SPIPSS_CLOCK_DIVIDER_Privileged = false;
const TargetTypes_t ATTR_PM_SPIPSS_CLOCK_DIVIDER_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIPSS_CLOCK_DIVIDER_PlatInit = false;

/* ATTR_PM_SPIPSS_INTER_FRAME_DELAY_SETTING */
typedef uint32_t ATTR_PM_SPIPSS_INTER_FRAME_DELAY_SETTING_Type;
const bool ATTR_PM_SPIPSS_INTER_FRAME_DELAY_SETTING_Privileged = false;
const TargetTypes_t ATTR_PM_SPIPSS_INTER_FRAME_DELAY_SETTING_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIPSS_INTER_FRAME_DELAY_SETTING_PlatInit = false;

/* ATTR_PM_SPIPSS_INTER_FRAME_DELAY */
typedef uint32_t ATTR_PM_SPIPSS_INTER_FRAME_DELAY_Type;
const bool ATTR_PM_SPIPSS_INTER_FRAME_DELAY_Privileged = false;
const TargetTypes_t ATTR_PM_SPIPSS_INTER_FRAME_DELAY_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_SPIPSS_INTER_FRAME_DELAY_PlatInit = false;

/* ATTR_PM_PBAX_RCV_RESERV_TIMEOUT */
typedef uint8_t ATTR_PM_PBAX_RCV_RESERV_TIMEOUT_Type;
const bool ATTR_PM_PBAX_RCV_RESERV_TIMEOUT_Privileged = false;
const TargetTypes_t ATTR_PM_PBAX_RCV_RESERV_TIMEOUT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PBAX_RCV_RESERV_TIMEOUT_PlatInit = false;
#define ATTR_PM_PBAX_RCV_RESERV_TIMEOUT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE */
typedef uint8_t ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE_Type;
const bool ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE_PlatInit = false;
#define ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PBAX_SND_RETRY_THRESHOLD */
typedef uint8_t ATTR_PM_PBAX_SND_RETRY_THRESHOLD_Type;
const bool ATTR_PM_PBAX_SND_RETRY_THRESHOLD_Privileged = false;
const TargetTypes_t ATTR_PM_PBAX_SND_RETRY_THRESHOLD_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PBAX_SND_RETRY_THRESHOLD_PlatInit = false;
#define ATTR_PM_PBAX_SND_RETRY_THRESHOLD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PBAX_SND_RESERV_TIMEOUT */
typedef uint8_t ATTR_PM_PBAX_SND_RESERV_TIMEOUT_Type;
const bool ATTR_PM_PBAX_SND_RESERV_TIMEOUT_Privileged = false;
const TargetTypes_t ATTR_PM_PBAX_SND_RESERV_TIMEOUT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PBAX_SND_RESERV_TIMEOUT_PlatInit = false;
#define ATTR_PM_PBAX_SND_RESERV_TIMEOUT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SPWUP_FSP */
typedef uint32_t ATTR_PM_SPWUP_FSP_Type;
const bool ATTR_PM_SPWUP_FSP_Privileged = false;
const TargetTypes_t ATTR_PM_SPWUP_FSP_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_PM_SPWUP_FSP_PlatInit = false;

/* ATTR_PM_SPWUP_OCC */
typedef uint32_t ATTR_PM_SPWUP_OCC_Type;
const bool ATTR_PM_SPWUP_OCC_Privileged = false;
const TargetTypes_t ATTR_PM_SPWUP_OCC_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_PM_SPWUP_OCC_PlatInit = false;

/* ATTR_PM_SPWUP_PHYP */
typedef uint32_t ATTR_PM_SPWUP_PHYP_Type;
const bool ATTR_PM_SPWUP_PHYP_Privileged = false;
const TargetTypes_t ATTR_PM_SPWUP_PHYP_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_PM_SPWUP_PHYP_PlatInit = false;

/* ATTR_PM_SPWUP_OHA_FLAG */
typedef uint8_t ATTR_PM_SPWUP_OHA_FLAG_Type;
const bool ATTR_PM_SPWUP_OHA_FLAG_Privileged = false;
const TargetTypes_t ATTR_PM_SPWUP_OHA_FLAG_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_PM_SPWUP_OHA_FLAG_PlatInit = false;

/* ATTR_PM_SPWUP_IGNORE_XSTOP_FLAG */
typedef uint8_t ATTR_PM_SPWUP_IGNORE_XSTOP_FLAG_Type;
const bool ATTR_PM_SPWUP_IGNORE_XSTOP_FLAG_Privileged = false;
const TargetTypes_t ATTR_PM_SPWUP_IGNORE_XSTOP_FLAG_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_PM_SPWUP_IGNORE_XSTOP_FLAG_PlatInit = false;

/* ATTR_CPM_INFLECTION_POINTS */
typedef uint32_t ATTR_CPM_INFLECTION_POINTS_Type[16];
const bool ATTR_CPM_INFLECTION_POINTS_Privileged = false;
const TargetTypes_t ATTR_CPM_INFLECTION_POINTS_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CPM_INFLECTION_POINTS_PlatInit = false;

/* ATTR_PM_SLW_CONTROL_VECTOR_OFFSET */
typedef uint32_t ATTR_PM_SLW_CONTROL_VECTOR_OFFSET_Type;
const bool ATTR_PM_SLW_CONTROL_VECTOR_OFFSET_Privileged = false;
const TargetTypes_t ATTR_PM_SLW_CONTROL_VECTOR_OFFSET_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_SLW_CONTROL_VECTOR_OFFSET_PlatInit = false;

/* ATTR_PM_SLW_DEEP_WINKLE_EXIT_GOOD_HALT_ADDR */
typedef uint32_t ATTR_PM_SLW_DEEP_WINKLE_EXIT_GOOD_HALT_ADDR_Type;
const bool ATTR_PM_SLW_DEEP_WINKLE_EXIT_GOOD_HALT_ADDR_Privileged = false;
const TargetTypes_t ATTR_PM_SLW_DEEP_WINKLE_EXIT_GOOD_HALT_ADDR_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_SLW_DEEP_WINKLE_EXIT_GOOD_HALT_ADDR_PlatInit = false;

/* ATTR_PM_SLW_DEEP_SLEEP_EXIT_GOOD_HALT_ADDR */
typedef uint32_t ATTR_PM_SLW_DEEP_SLEEP_EXIT_GOOD_HALT_ADDR_Type;
const bool ATTR_PM_SLW_DEEP_SLEEP_EXIT_GOOD_HALT_ADDR_Privileged = false;
const TargetTypes_t ATTR_PM_SLW_DEEP_SLEEP_EXIT_GOOD_HALT_ADDR_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_SLW_DEEP_SLEEP_EXIT_GOOD_HALT_ADDR_PlatInit = false;

/* ATTR_PM_PCBS_FSM_TRACE_EN */
typedef uint8_t ATTR_PM_PCBS_FSM_TRACE_EN_Type;
const bool ATTR_PM_PCBS_FSM_TRACE_EN_Privileged = false;
const TargetTypes_t ATTR_PM_PCBS_FSM_TRACE_EN_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_PCBS_FSM_TRACE_EN_PlatInit = false;

/* ATTR_PM_GLOBAL_FIR_TRACE_EN */
typedef uint8_t ATTR_PM_GLOBAL_FIR_TRACE_EN_Type;
const bool ATTR_PM_GLOBAL_FIR_TRACE_EN_Privileged = false;
const TargetTypes_t ATTR_PM_GLOBAL_FIR_TRACE_EN_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_GLOBAL_FIR_TRACE_EN_PlatInit = false;

/* ATTR_PM_PFET_WORKAROUND_RUN_FLAG */
typedef uint8_t ATTR_PM_PFET_WORKAROUND_RUN_FLAG_Type;
const bool ATTR_PM_PFET_WORKAROUND_RUN_FLAG_Privileged = false;
const TargetTypes_t ATTR_PM_PFET_WORKAROUND_RUN_FLAG_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PM_PFET_WORKAROUND_RUN_FLAG_PlatInit = false;

/* ATTR_PM_OCC_LFIR_MASK */
typedef uint64_t ATTR_PM_OCC_LFIR_MASK_Type;
const bool ATTR_PM_OCC_LFIR_MASK_Privileged = false;
const TargetTypes_t ATTR_PM_OCC_LFIR_MASK_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_OCC_LFIR_MASK_PlatInit = false;

/* ATTR_PM_PBA_FIR_MASK */
typedef uint64_t ATTR_PM_PBA_FIR_MASK_Type;
const bool ATTR_PM_PBA_FIR_MASK_Privileged = false;
const TargetTypes_t ATTR_PM_PBA_FIR_MASK_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PBA_FIR_MASK_PlatInit = false;

/* ATTR_PM_PMC_LFIR_MASK */
typedef uint64_t ATTR_PM_PMC_LFIR_MASK_Type;
const bool ATTR_PM_PMC_LFIR_MASK_Privileged = false;
const TargetTypes_t ATTR_PM_PMC_LFIR_MASK_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_PMC_LFIR_MASK_PlatInit = false;

/* ATTR_PM_FIRINIT_DONE_ONCE_FLAG */
typedef uint8_t ATTR_PM_FIRINIT_DONE_ONCE_FLAG_Type;
const bool ATTR_PM_FIRINIT_DONE_ONCE_FLAG_Privileged = false;
const TargetTypes_t ATTR_PM_FIRINIT_DONE_ONCE_FLAG_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PM_FIRINIT_DONE_ONCE_FLAG_PlatInit = false;

/* ATTR_PROC_PCIE_NUM_PHB */
typedef uint8_t ATTR_PROC_PCIE_NUM_PHB_Type;
const bool ATTR_PROC_PCIE_NUM_PHB_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_NUM_PHB_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_NUM_PHB_PlatInit = true;
#define ATTR_PROC_PCIE_NUM_PHB_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_NUM_IOP */
typedef uint8_t ATTR_PROC_PCIE_NUM_IOP_Type;
const bool ATTR_PROC_PCIE_NUM_IOP_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_NUM_IOP_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_NUM_IOP_PlatInit = true;
#define ATTR_PROC_PCIE_NUM_IOP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_NUM_LANES */
typedef uint8_t ATTR_PROC_PCIE_NUM_LANES_Type;
const bool ATTR_PROC_PCIE_NUM_LANES_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_NUM_LANES_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_NUM_LANES_PlatInit = true;
#define ATTR_PROC_PCIE_NUM_LANES_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_CONFIG */
typedef uint8_t ATTR_PROC_PCIE_IOP_CONFIG_Type;
const bool ATTR_PROC_PCIE_IOP_CONFIG_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_CONFIG_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_CONFIG_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_CONFIG_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_SWAP */
typedef uint8_t ATTR_PROC_PCIE_IOP_SWAP_Type[3];
const bool ATTR_PROC_PCIE_IOP_SWAP_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_SWAP_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_SWAP_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_SWAP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_PHB_ACTIVE */
typedef uint8_t ATTR_PROC_PCIE_PHB_ACTIVE_Type;
const bool ATTR_PROC_PCIE_PHB_ACTIVE_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_PHB_ACTIVE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_PHB_ACTIVE_PlatInit = true;
#define ATTR_PROC_PCIE_PHB_ACTIVE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_REFCLOCK_ENABLE */
typedef uint8_t ATTR_PROC_PCIE_REFCLOCK_ENABLE_Type;
const bool ATTR_PROC_PCIE_REFCLOCK_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_REFCLOCK_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_REFCLOCK_ENABLE_PlatInit = true;
#define ATTR_PROC_PCIE_REFCLOCK_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_G3_PLL_CONTROL0 */
typedef uint32_t ATTR_PROC_PCIE_IOP_G3_PLL_CONTROL0_Type[3];
const bool ATTR_PROC_PCIE_IOP_G3_PLL_CONTROL0_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_G3_PLL_CONTROL0_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_G3_PLL_CONTROL0_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_G3_PLL_CONTROL0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_G2_PLL_CONTROL0 */
typedef uint32_t ATTR_PROC_PCIE_IOP_G2_PLL_CONTROL0_Type[3];
const bool ATTR_PROC_PCIE_IOP_G2_PLL_CONTROL0_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_G2_PLL_CONTROL0_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_G2_PLL_CONTROL0_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_G2_PLL_CONTROL0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL0 */
typedef uint32_t ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL0_Type[3];
const bool ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL0_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL0_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL0_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL1 */
typedef uint32_t ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL1_Type[3];
const bool ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL1_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL1_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL1_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_PLL_GLOBAL_CONTROL1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_PCS_CONTROL0 */
typedef uint32_t ATTR_PROC_PCIE_IOP_PCS_CONTROL0_Type[3];
const bool ATTR_PROC_PCIE_IOP_PCS_CONTROL0_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_PCS_CONTROL0_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_PCS_CONTROL0_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_PCS_CONTROL0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_PCS_CONTROL1 */
typedef uint32_t ATTR_PROC_PCIE_IOP_PCS_CONTROL1_Type[3];
const bool ATTR_PROC_PCIE_IOP_PCS_CONTROL1_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_PCS_CONTROL1_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_PCS_CONTROL1_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_PCS_CONTROL1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_TX_FIFO_OFFSET */
typedef uint32_t ATTR_PROC_PCIE_IOP_TX_FIFO_OFFSET_Type[3][16];
const bool ATTR_PROC_PCIE_IOP_TX_FIFO_OFFSET_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_TX_FIFO_OFFSET_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_TX_FIFO_OFFSET_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_TX_FIFO_OFFSET_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_TX_RCVRDETCNTL */
typedef uint32_t ATTR_PROC_PCIE_IOP_TX_RCVRDETCNTL_Type[3][16];
const bool ATTR_PROC_PCIE_IOP_TX_RCVRDETCNTL_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_TX_RCVRDETCNTL_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_TX_RCVRDETCNTL_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_TX_RCVRDETCNTL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_TX_BWLOSS1 */
typedef uint32_t ATTR_PROC_PCIE_IOP_TX_BWLOSS1_Type[3][16];
const bool ATTR_PROC_PCIE_IOP_TX_BWLOSS1_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_TX_BWLOSS1_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_TX_BWLOSS1_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_TX_BWLOSS1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_RX_VGA_CONTROL2 */
typedef uint32_t ATTR_PROC_PCIE_IOP_RX_VGA_CONTROL2_Type[3][16];
const bool ATTR_PROC_PCIE_IOP_RX_VGA_CONTROL2_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_RX_VGA_CONTROL2_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_RX_VGA_CONTROL2_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_RX_VGA_CONTROL2_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_RX_PEAK */
typedef uint32_t ATTR_PROC_PCIE_IOP_RX_PEAK_Type[3][16];
const bool ATTR_PROC_PCIE_IOP_RX_PEAK_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_RX_PEAK_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_RX_PEAK_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_RX_PEAK_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_RX_SDL */
typedef uint32_t ATTR_PROC_PCIE_IOP_RX_SDL_Type[3][16];
const bool ATTR_PROC_PCIE_IOP_RX_SDL_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_RX_SDL_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_RX_SDL_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_RX_SDL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_TX_FFE_GEN1 */
typedef uint32_t ATTR_PROC_PCIE_IOP_TX_FFE_GEN1_Type[3][16];
const bool ATTR_PROC_PCIE_IOP_TX_FFE_GEN1_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_TX_FFE_GEN1_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_TX_FFE_GEN1_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_TX_FFE_GEN1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_TX_FFE_GEN2 */
typedef uint32_t ATTR_PROC_PCIE_IOP_TX_FFE_GEN2_Type[3][16];
const bool ATTR_PROC_PCIE_IOP_TX_FFE_GEN2_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_TX_FFE_GEN2_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_TX_FFE_GEN2_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_TX_FFE_GEN2_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_IOP_ZCAL_CONTROL */
typedef uint32_t ATTR_PROC_PCIE_IOP_ZCAL_CONTROL_Type[3];
const bool ATTR_PROC_PCIE_IOP_ZCAL_CONTROL_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_IOP_ZCAL_CONTROL_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_IOP_ZCAL_CONTROL_PlatInit = true;
#define ATTR_PROC_PCIE_IOP_ZCAL_CONTROL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MCS_INBAND_BASE_ADDRESS */
typedef uint64_t ATTR_MCS_INBAND_BASE_ADDRESS_Type;
const bool ATTR_MCS_INBAND_BASE_ADDRESS_Privileged = false;
const TargetTypes_t ATTR_MCS_INBAND_BASE_ADDRESS_TargetTypes = TARGET_TYPE_MCS_CHIPLET;
const bool ATTR_MCS_INBAND_BASE_ADDRESS_PlatInit = true;
#define ATTR_MCS_INBAND_BASE_ADDRESS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PERV_BNDY_PLL_DATA */
typedef uint8_t ATTR_PROC_PERV_BNDY_PLL_DATA_Type[128];
const bool ATTR_PROC_PERV_BNDY_PLL_DATA_Privileged = false;
const TargetTypes_t ATTR_PROC_PERV_BNDY_PLL_DATA_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PERV_BNDY_PLL_DATA_PlatInit = true;
#define ATTR_PROC_PERV_BNDY_PLL_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PB_BNDY_DMIPLL_DATA */
typedef uint8_t ATTR_PROC_PB_BNDY_DMIPLL_DATA_Type[240];
const bool ATTR_PROC_PB_BNDY_DMIPLL_DATA_Privileged = false;
const TargetTypes_t ATTR_PROC_PB_BNDY_DMIPLL_DATA_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PB_BNDY_DMIPLL_DATA_PlatInit = true;
#define ATTR_PROC_PB_BNDY_DMIPLL_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_AB_BNDY_PLL_DATA */
typedef uint8_t ATTR_PROC_AB_BNDY_PLL_DATA_Type[110];
const bool ATTR_PROC_AB_BNDY_PLL_DATA_Privileged = false;
const TargetTypes_t ATTR_PROC_AB_BNDY_PLL_DATA_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_AB_BNDY_PLL_DATA_PlatInit = true;
#define ATTR_PROC_AB_BNDY_PLL_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCI_BNDY_PLL_DATA */
typedef uint8_t ATTR_PROC_PCI_BNDY_PLL_DATA_Type[110];
const bool ATTR_PROC_PCI_BNDY_PLL_DATA_Privileged = false;
const TargetTypes_t ATTR_PROC_PCI_BNDY_PLL_DATA_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCI_BNDY_PLL_DATA_PlatInit = true;
#define ATTR_PROC_PCI_BNDY_PLL_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PERV_BNDY_PLL_LENGTH */
typedef uint32_t ATTR_PROC_PERV_BNDY_PLL_LENGTH_Type;
const bool ATTR_PROC_PERV_BNDY_PLL_LENGTH_Privileged = false;
const TargetTypes_t ATTR_PROC_PERV_BNDY_PLL_LENGTH_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PERV_BNDY_PLL_LENGTH_PlatInit = true;
#define ATTR_PROC_PERV_BNDY_PLL_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PB_BNDY_DMIPLL_LENGTH */
typedef uint32_t ATTR_PROC_PB_BNDY_DMIPLL_LENGTH_Type;
const bool ATTR_PROC_PB_BNDY_DMIPLL_LENGTH_Privileged = false;
const TargetTypes_t ATTR_PROC_PB_BNDY_DMIPLL_LENGTH_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PB_BNDY_DMIPLL_LENGTH_PlatInit = true;
#define ATTR_PROC_PB_BNDY_DMIPLL_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_AB_BNDY_PLL_LENGTH */
typedef uint32_t ATTR_PROC_AB_BNDY_PLL_LENGTH_Type;
const bool ATTR_PROC_AB_BNDY_PLL_LENGTH_Privileged = false;
const TargetTypes_t ATTR_PROC_AB_BNDY_PLL_LENGTH_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_AB_BNDY_PLL_LENGTH_PlatInit = true;
#define ATTR_PROC_AB_BNDY_PLL_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCI_BNDY_PLL_LENGTH */
typedef uint32_t ATTR_PROC_PCI_BNDY_PLL_LENGTH_Type;
const bool ATTR_PROC_PCI_BNDY_PLL_LENGTH_Privileged = false;
const TargetTypes_t ATTR_PROC_PCI_BNDY_PLL_LENGTH_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCI_BNDY_PLL_LENGTH_PlatInit = true;
#define ATTR_PROC_PCI_BNDY_PLL_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PERV_BNDY_PLL_FLUSH */
typedef uint8_t ATTR_PROC_PERV_BNDY_PLL_FLUSH_Type[128];
const bool ATTR_PROC_PERV_BNDY_PLL_FLUSH_Privileged = false;
const TargetTypes_t ATTR_PROC_PERV_BNDY_PLL_FLUSH_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PERV_BNDY_PLL_FLUSH_PlatInit = true;
#define ATTR_PROC_PERV_BNDY_PLL_FLUSH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PB_BNDY_DMIPLL_FLUSH */
typedef uint8_t ATTR_PROC_PB_BNDY_DMIPLL_FLUSH_Type[240];
const bool ATTR_PROC_PB_BNDY_DMIPLL_FLUSH_Privileged = false;
const TargetTypes_t ATTR_PROC_PB_BNDY_DMIPLL_FLUSH_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PB_BNDY_DMIPLL_FLUSH_PlatInit = true;
#define ATTR_PROC_PB_BNDY_DMIPLL_FLUSH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_AB_BNDY_PLL_FLUSH */
typedef uint8_t ATTR_PROC_AB_BNDY_PLL_FLUSH_Type[110];
const bool ATTR_PROC_AB_BNDY_PLL_FLUSH_Privileged = false;
const TargetTypes_t ATTR_PROC_AB_BNDY_PLL_FLUSH_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_AB_BNDY_PLL_FLUSH_PlatInit = true;
#define ATTR_PROC_AB_BNDY_PLL_FLUSH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCI_BNDY_PLL_FLUSH */
typedef uint8_t ATTR_PROC_PCI_BNDY_PLL_FLUSH_Type[110];
const bool ATTR_PROC_PCI_BNDY_PLL_FLUSH_Privileged = false;
const TargetTypes_t ATTR_PROC_PCI_BNDY_PLL_FLUSH_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCI_BNDY_PLL_FLUSH_PlatInit = true;
#define ATTR_PROC_PCI_BNDY_PLL_FLUSH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PERV_BNDY_PLL_CHIPLET_ID */
typedef uint8_t ATTR_PROC_PERV_BNDY_PLL_CHIPLET_ID_Type;
const bool ATTR_PROC_PERV_BNDY_PLL_CHIPLET_ID_Privileged = false;
const TargetTypes_t ATTR_PROC_PERV_BNDY_PLL_CHIPLET_ID_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PERV_BNDY_PLL_CHIPLET_ID_PlatInit = true;
#define ATTR_PROC_PERV_BNDY_PLL_CHIPLET_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PB_BNDY_DMIPLL_CHIPLET_ID */
typedef uint8_t ATTR_PROC_PB_BNDY_DMIPLL_CHIPLET_ID_Type;
const bool ATTR_PROC_PB_BNDY_DMIPLL_CHIPLET_ID_Privileged = false;
const TargetTypes_t ATTR_PROC_PB_BNDY_DMIPLL_CHIPLET_ID_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PB_BNDY_DMIPLL_CHIPLET_ID_PlatInit = true;
#define ATTR_PROC_PB_BNDY_DMIPLL_CHIPLET_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_AB_BNDY_PLL_CHIPLET_ID */
typedef uint8_t ATTR_PROC_AB_BNDY_PLL_CHIPLET_ID_Type;
const bool ATTR_PROC_AB_BNDY_PLL_CHIPLET_ID_Privileged = false;
const TargetTypes_t ATTR_PROC_AB_BNDY_PLL_CHIPLET_ID_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_AB_BNDY_PLL_CHIPLET_ID_PlatInit = true;
#define ATTR_PROC_AB_BNDY_PLL_CHIPLET_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCI_BNDY_PLL_CHIPLET_ID */
typedef uint8_t ATTR_PROC_PCI_BNDY_PLL_CHIPLET_ID_Type;
const bool ATTR_PROC_PCI_BNDY_PLL_CHIPLET_ID_Privileged = false;
const TargetTypes_t ATTR_PROC_PCI_BNDY_PLL_CHIPLET_ID_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCI_BNDY_PLL_CHIPLET_ID_PlatInit = true;
#define ATTR_PROC_PCI_BNDY_PLL_CHIPLET_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PERV_BNDY_PLL_SCAN_SELECT */
typedef uint32_t ATTR_PROC_PERV_BNDY_PLL_SCAN_SELECT_Type;
const bool ATTR_PROC_PERV_BNDY_PLL_SCAN_SELECT_Privileged = false;
const TargetTypes_t ATTR_PROC_PERV_BNDY_PLL_SCAN_SELECT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PERV_BNDY_PLL_SCAN_SELECT_PlatInit = true;
#define ATTR_PROC_PERV_BNDY_PLL_SCAN_SELECT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PB_BNDY_DMIPLL_SCAN_SELECT */
typedef uint32_t ATTR_PROC_PB_BNDY_DMIPLL_SCAN_SELECT_Type;
const bool ATTR_PROC_PB_BNDY_DMIPLL_SCAN_SELECT_Privileged = false;
const TargetTypes_t ATTR_PROC_PB_BNDY_DMIPLL_SCAN_SELECT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PB_BNDY_DMIPLL_SCAN_SELECT_PlatInit = true;
#define ATTR_PROC_PB_BNDY_DMIPLL_SCAN_SELECT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_AB_BNDY_PLL_SCAN_SELECT */
typedef uint32_t ATTR_PROC_AB_BNDY_PLL_SCAN_SELECT_Type;
const bool ATTR_PROC_AB_BNDY_PLL_SCAN_SELECT_Privileged = false;
const TargetTypes_t ATTR_PROC_AB_BNDY_PLL_SCAN_SELECT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_AB_BNDY_PLL_SCAN_SELECT_PlatInit = true;
#define ATTR_PROC_AB_BNDY_PLL_SCAN_SELECT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCI_BNDY_PLL_SCAN_SELECT */
typedef uint32_t ATTR_PROC_PCI_BNDY_PLL_SCAN_SELECT_Type;
const bool ATTR_PROC_PCI_BNDY_PLL_SCAN_SELECT_Privileged = false;
const TargetTypes_t ATTR_PROC_PCI_BNDY_PLL_SCAN_SELECT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCI_BNDY_PLL_SCAN_SELECT_PlatInit = true;
#define ATTR_PROC_PCI_BNDY_PLL_SCAN_SELECT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_ABUS_CUPLL_PFD360_OFFSET */
typedef uint32_t ATTR_PROC_ABUS_CUPLL_PFD360_OFFSET_Type[3];
const bool ATTR_PROC_ABUS_CUPLL_PFD360_OFFSET_Privileged = false;
const TargetTypes_t ATTR_PROC_ABUS_CUPLL_PFD360_OFFSET_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_ABUS_CUPLL_PFD360_OFFSET_PlatInit = true;
#define ATTR_PROC_ABUS_CUPLL_PFD360_OFFSET_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET */
typedef uint32_t ATTR_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_Type[3];
const bool ATTR_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_Privileged = false;
const TargetTypes_t ATTR_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_PlatInit = true;
#define ATTR_PROC_ABUS_CUPLL_REFCLKSEL_OFFSET_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_DMI_CUPLL_PFD360_OFFSET */
typedef uint32_t ATTR_PROC_DMI_CUPLL_PFD360_OFFSET_Type[8];
const bool ATTR_PROC_DMI_CUPLL_PFD360_OFFSET_Privileged = false;
const TargetTypes_t ATTR_PROC_DMI_CUPLL_PFD360_OFFSET_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_DMI_CUPLL_PFD360_OFFSET_PlatInit = true;
#define ATTR_PROC_DMI_CUPLL_PFD360_OFFSET_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_DMI_CUPLL_REFCLKSEL_OFFSET */
typedef uint32_t ATTR_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_Type[8];
const bool ATTR_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_Privileged = false;
const TargetTypes_t ATTR_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_PlatInit = true;
#define ATTR_PROC_DMI_CUPLL_REFCLKSEL_OFFSET_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_NX_ENABLE */
typedef uint8_t ATTR_PROC_NX_ENABLE_Type;
const bool ATTR_PROC_NX_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_NX_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_NX_ENABLE_PlatInit = true;
enum ATTR_PROC_NX_ENABLE_Enum
{
    ENUM_ATTR_PROC_NX_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_NX_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_NX_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_ENABLE */
typedef uint8_t ATTR_PROC_PCIE_ENABLE_Type;
const bool ATTR_PROC_PCIE_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_PCIE_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PCIE_ENABLE_PlatInit = true;
enum ATTR_PROC_PCIE_ENABLE_Enum
{
    ENUM_ATTR_PROC_PCIE_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_PCIE_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_PCIE_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_L3_ENABLE */
typedef uint8_t ATTR_PROC_L3_ENABLE_Type;
const bool ATTR_PROC_L3_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_L3_ENABLE_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_PROC_L3_ENABLE_PlatInit = true;
enum ATTR_PROC_L3_ENABLE_Enum
{
    ENUM_ATTR_PROC_L3_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_L3_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_L3_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_A_ENABLE */
typedef uint8_t ATTR_PROC_A_ENABLE_Type;
const bool ATTR_PROC_A_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_A_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_A_ENABLE_PlatInit = true;
enum ATTR_PROC_A_ENABLE_Enum
{
    ENUM_ATTR_PROC_A_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_A_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_A_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_X_ENABLE */
typedef uint8_t ATTR_PROC_X_ENABLE_Type;
const bool ATTR_PROC_X_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_X_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_X_ENABLE_PlatInit = true;
enum ATTR_PROC_X_ENABLE_Enum
{
    ENUM_ATTR_PROC_X_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_X_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_X_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PBA_UNTRUSTED_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_PBA_UNTRUSTED_BAR_BASE_ADDR_Type;
const bool ATTR_PROC_PBA_UNTRUSTED_BAR_BASE_ADDR_Privileged = false;
const TargetTypes_t ATTR_PROC_PBA_UNTRUSTED_BAR_BASE_ADDR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PBA_UNTRUSTED_BAR_BASE_ADDR_PlatInit = true;
#define ATTR_PROC_PBA_UNTRUSTED_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE */
typedef uint64_t ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_Type;
const bool ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_PlatInit = true;
enum ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_Enum
{
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_2_TB = 0x000001FFFFF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_1_TB = 0x000000FFFFF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_512_GB = 0x0000007FFFF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_256_GB = 0x0000003FFFF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_128_GB = 0x0000001FFFF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_64_GB = 0x0000000FFFF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_32_GB = 0x00000007FFF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_16_GB = 0x00000003FFF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_8_GB = 0x00000001FFF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_4_GB = 0x00000000FFF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_2_GB = 0x000000007FF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_1_GB = 0x000000003FF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_512_MB = 0x000000001FF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_256_MB = 0x000000000FF00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_128_MB = 0x0000000007F00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_64_MB = 0x0000000003F00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_32_MB = 0x0000000001F00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_16_MB = 0x0000000000F00000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_8_MB = 0x0000000000700000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_4_MB = 0x0000000000300000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_2_MB = 0x0000000000100000ULL,
    ENUM_ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_1_MB = 0x0000000000000000ULL,
};
#define ATTR_PROC_PBA_UNTRUSTED_BAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_ADU_UNTRUSTED_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_ADU_UNTRUSTED_BAR_BASE_ADDR_Type;
const bool ATTR_PROC_ADU_UNTRUSTED_BAR_BASE_ADDR_Privileged = false;
const TargetTypes_t ATTR_PROC_ADU_UNTRUSTED_BAR_BASE_ADDR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_ADU_UNTRUSTED_BAR_BASE_ADDR_PlatInit = true;
#define ATTR_PROC_ADU_UNTRUSTED_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE */
typedef uint64_t ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_Type;
const bool ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_PlatInit = true;
enum ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_Enum
{
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_1_PB = 0x0000000000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_512_TB = 0x0002000000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_256_TB = 0x0003000000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_128_TB = 0x0003800000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_64_TB = 0x0003C00000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_32_TB = 0x0003E00000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_16_TB = 0x0003F00000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_8_TB = 0x0003F80000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_4_TB = 0x0003FC0000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_2_TB = 0x0003FE0000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_1_TB = 0x0003FF0000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_512_GB = 0x0003FF8000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_256_GB = 0x0003FFC000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_128_GB = 0x0003FFE000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_64_GB = 0x0003FFF000000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_32_GB = 0x0003FFF800000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_16_GB = 0x0003FFFC00000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_8_GB = 0x0003FFFE00000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_4_GB = 0x0003FFFF00000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_2_GB = 0x0003FFFF80000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_1_GB = 0x0003FFFFC0000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_512_MB = 0x0003FFFFE0000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_256_MB = 0x0003FFFFF0000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_128_MB = 0x0003FFFFF8000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_64_MB = 0x0003FFFFFC000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_32_MB = 0x0003FFFFFE000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_16_MB = 0x0003FFFFFF000000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_8_MB = 0x0003FFFFFF800000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_4_MB = 0x0003FFFFFFC00000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_2_MB = 0x0003FFFFFFE00000ULL,
    ENUM_ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_1_MB = 0x0003FFFFFFF00000ULL,
};
#define ATTR_PROC_ADU_UNTRUSTED_BAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PSI_UNTRUSTED_BAR0_BASE_ADDR */
typedef uint64_t ATTR_PROC_PSI_UNTRUSTED_BAR0_BASE_ADDR_Type;
const bool ATTR_PROC_PSI_UNTRUSTED_BAR0_BASE_ADDR_Privileged = false;
const TargetTypes_t ATTR_PROC_PSI_UNTRUSTED_BAR0_BASE_ADDR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PSI_UNTRUSTED_BAR0_BASE_ADDR_PlatInit = true;
#define ATTR_PROC_PSI_UNTRUSTED_BAR0_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE */
typedef uint64_t ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_Type;
const bool ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_PlatInit = true;
enum ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_Enum
{
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_1_PB = 0x0000000000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_512_TB = 0x0002000000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_256_TB = 0x0003000000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_128_TB = 0x0003800000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_64_TB = 0x0003C00000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_32_TB = 0x0003E00000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_16_TB = 0x0003F00000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_8_TB = 0x0003F80000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_4_TB = 0x0003FC0000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_2_TB = 0x0003FE0000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_1_TB = 0x0003FF0000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_512_GB = 0x0003FF8000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_256_GB = 0x0003FFC000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_128_GB = 0x0003FFE000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_64_GB = 0x0003FFF000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_32_GB = 0x0003FFF800000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_16_GB = 0x0003FFFC00000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_8_GB = 0x0003FFFE00000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_4_GB = 0x0003FFFF00000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_2_GB = 0x0003FFFF80000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_1_GB = 0x0003FFFFC0000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_512_MB = 0x0003FFFFE0000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_256_MB = 0x0003FFFFF0000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_128_MB = 0x0003FFFFF8000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_64_MB = 0x0003FFFFFC000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_32_MB = 0x0003FFFFFE000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_16_MB = 0x0003FFFFFF000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_8_MB = 0x0003FFFFFF800000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_4_MB = 0x0003FFFFFFC00000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_2_MB = 0x0003FFFFFFE00000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_1_MB = 0x0003FFFFFFF00000ULL,
};
#define ATTR_PROC_PSI_UNTRUSTED_BAR0_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PSI_UNTRUSTED_BAR1_BASE_ADDR */
typedef uint64_t ATTR_PROC_PSI_UNTRUSTED_BAR1_BASE_ADDR_Type;
const bool ATTR_PROC_PSI_UNTRUSTED_BAR1_BASE_ADDR_Privileged = false;
const TargetTypes_t ATTR_PROC_PSI_UNTRUSTED_BAR1_BASE_ADDR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PSI_UNTRUSTED_BAR1_BASE_ADDR_PlatInit = true;
#define ATTR_PROC_PSI_UNTRUSTED_BAR1_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE */
typedef uint64_t ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_Type;
const bool ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_Privileged = false;
const TargetTypes_t ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_PlatInit = true;
enum ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_Enum
{
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_1_PB = 0x0000000000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_512_TB = 0x0002000000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_256_TB = 0x0003000000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_128_TB = 0x0003800000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_64_TB = 0x0003C00000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_32_TB = 0x0003E00000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_16_TB = 0x0003F00000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_8_TB = 0x0003F80000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_4_TB = 0x0003FC0000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_2_TB = 0x0003FE0000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_1_TB = 0x0003FF0000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_512_GB = 0x0003FF8000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_256_GB = 0x0003FFC000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_128_GB = 0x0003FFE000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_64_GB = 0x0003FFF000000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_32_GB = 0x0003FFF800000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_16_GB = 0x0003FFFC00000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_8_GB = 0x0003FFFE00000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_4_GB = 0x0003FFFF00000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_2_GB = 0x0003FFFF80000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_1_GB = 0x0003FFFFC0000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_512_MB = 0x0003FFFFE0000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_256_MB = 0x0003FFFFF0000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_128_MB = 0x0003FFFFF8000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_64_MB = 0x0003FFFFFC000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_32_MB = 0x0003FFFFFE000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_16_MB = 0x0003FFFFFF000000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_8_MB = 0x0003FFFFFF800000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_4_MB = 0x0003FFFFFFC00000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_2_MB = 0x0003FFFFFFE00000ULL,
    ENUM_ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_1_MB = 0x0003FFFFFFF00000ULL,
};
#define ATTR_PROC_PSI_UNTRUSTED_BAR1_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_SECURITY_SETUP_VECTOR */
typedef uint64_t ATTR_PROC_SECURITY_SETUP_VECTOR_Type;
const bool ATTR_PROC_SECURITY_SETUP_VECTOR_Privileged = false;
const TargetTypes_t ATTR_PROC_SECURITY_SETUP_VECTOR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_SECURITY_SETUP_VECTOR_PlatInit = true;
#define ATTR_PROC_SECURITY_SETUP_VECTOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SBE_IMAGE_MINIMUM_VALID_EXS */
typedef uint32_t ATTR_SBE_IMAGE_MINIMUM_VALID_EXS_Type;
const bool ATTR_SBE_IMAGE_MINIMUM_VALID_EXS_Privileged = false;
const TargetTypes_t ATTR_SBE_IMAGE_MINIMUM_VALID_EXS_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_SBE_IMAGE_MINIMUM_VALID_EXS_PlatInit = true;
#define ATTR_SBE_IMAGE_MINIMUM_VALID_EXS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES */
typedef uint8_t ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES_Type;
const bool ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES_Privileged = false;
const TargetTypes_t ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES_PlatInit = true;
#define ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS */
typedef uint8_t ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS_Type[2];
const bool ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS_Privileged = false;
const TargetTypes_t ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS_PlatInit = true;
#define ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SBE_SEEPROM_I2C_PORT */
typedef uint8_t ATTR_SBE_SEEPROM_I2C_PORT_Type[2];
const bool ATTR_SBE_SEEPROM_I2C_PORT_Privileged = false;
const TargetTypes_t ATTR_SBE_SEEPROM_I2C_PORT_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_SBE_SEEPROM_I2C_PORT_PlatInit = true;
#define ATTR_SBE_SEEPROM_I2C_PORT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PNOR_I2C_ADDRESS_BYTES */
typedef uint8_t ATTR_PNOR_I2C_ADDRESS_BYTES_Type;
const bool ATTR_PNOR_I2C_ADDRESS_BYTES_Privileged = false;
const TargetTypes_t ATTR_PNOR_I2C_ADDRESS_BYTES_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_PNOR_I2C_ADDRESS_BYTES_PlatInit = true;
#define ATTR_PNOR_I2C_ADDRESS_BYTES_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MCBIST_ADDR_MODES */
typedef uint8_t ATTR_MCBIST_ADDR_MODES_Type;
const bool ATTR_MCBIST_ADDR_MODES_Privileged = false;
const TargetTypes_t ATTR_MCBIST_ADDR_MODES_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_ADDR_MODES_PlatInit = false;

/* ATTR_MCBIST_RANK */
typedef uint8_t ATTR_MCBIST_RANK_Type;
const bool ATTR_MCBIST_RANK_Privileged = false;
const TargetTypes_t ATTR_MCBIST_RANK_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_RANK_PlatInit = false;

/* ATTR_MCBIST_START_ADDR */
typedef uint64_t ATTR_MCBIST_START_ADDR_Type;
const bool ATTR_MCBIST_START_ADDR_Privileged = false;
const TargetTypes_t ATTR_MCBIST_START_ADDR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_START_ADDR_PlatInit = false;

/* ATTR_MCBIST_END_ADDR */
typedef uint64_t ATTR_MCBIST_END_ADDR_Type;
const bool ATTR_MCBIST_END_ADDR_Privileged = false;
const TargetTypes_t ATTR_MCBIST_END_ADDR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_END_ADDR_PlatInit = false;

/* ATTR_MCBIST_ERROR_CAPTURE */
typedef uint8_t ATTR_MCBIST_ERROR_CAPTURE_Type;
const bool ATTR_MCBIST_ERROR_CAPTURE_Privileged = false;
const TargetTypes_t ATTR_MCBIST_ERROR_CAPTURE_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_ERROR_CAPTURE_PlatInit = false;

/* ATTR_MCBIST_MAX_TIMEOUT */
typedef uint64_t ATTR_MCBIST_MAX_TIMEOUT_Type;
const bool ATTR_MCBIST_MAX_TIMEOUT_Privileged = false;
const TargetTypes_t ATTR_MCBIST_MAX_TIMEOUT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_MAX_TIMEOUT_PlatInit = false;

/* ATTR_MCBIST_PRINT_PORT */
typedef uint8_t ATTR_MCBIST_PRINT_PORT_Type;
const bool ATTR_MCBIST_PRINT_PORT_Privileged = false;
const TargetTypes_t ATTR_MCBIST_PRINT_PORT_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_PRINT_PORT_PlatInit = false;

/* ATTR_MCBIST_STOP_ON_ERROR */
typedef uint8_t ATTR_MCBIST_STOP_ON_ERROR_Type;
const bool ATTR_MCBIST_STOP_ON_ERROR_Privileged = false;
const TargetTypes_t ATTR_MCBIST_STOP_ON_ERROR_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_STOP_ON_ERROR_PlatInit = false;

/* ATTR_MCBIST_DATA_SEED */
typedef uint32_t ATTR_MCBIST_DATA_SEED_Type;
const bool ATTR_MCBIST_DATA_SEED_Privileged = false;
const TargetTypes_t ATTR_MCBIST_DATA_SEED_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_DATA_SEED_PlatInit = false;

/* ATTR_MCBIST_ADDR_INTER */
typedef uint8_t ATTR_MCBIST_ADDR_INTER_Type;
const bool ATTR_MCBIST_ADDR_INTER_Privileged = false;
const TargetTypes_t ATTR_MCBIST_ADDR_INTER_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_ADDR_INTER_PlatInit = false;

/* ATTR_MCBIST_ADDR_NUM_ROWS */
typedef uint8_t ATTR_MCBIST_ADDR_NUM_ROWS_Type;
const bool ATTR_MCBIST_ADDR_NUM_ROWS_Privileged = false;
const TargetTypes_t ATTR_MCBIST_ADDR_NUM_ROWS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_ADDR_NUM_ROWS_PlatInit = false;

/* ATTR_MCBIST_ADDR_NUM_COLS */
typedef uint8_t ATTR_MCBIST_ADDR_NUM_COLS_Type;
const bool ATTR_MCBIST_ADDR_NUM_COLS_Privileged = false;
const TargetTypes_t ATTR_MCBIST_ADDR_NUM_COLS_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_ADDR_NUM_COLS_PlatInit = false;

/* ATTR_MCBIST_ADDR_RANK */
typedef uint8_t ATTR_MCBIST_ADDR_RANK_Type;
const bool ATTR_MCBIST_ADDR_RANK_Privileged = false;
const TargetTypes_t ATTR_MCBIST_ADDR_RANK_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_ADDR_RANK_PlatInit = false;

/* ATTR_MCBIST_ADDR_BANK */
typedef uint8_t ATTR_MCBIST_ADDR_BANK_Type;
const bool ATTR_MCBIST_ADDR_BANK_Privileged = false;
const TargetTypes_t ATTR_MCBIST_ADDR_BANK_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_ADDR_BANK_PlatInit = false;

/* ATTR_MCBIST_ADDR_SLAVE_RANK_ON */
typedef uint8_t ATTR_MCBIST_ADDR_SLAVE_RANK_ON_Type;
const bool ATTR_MCBIST_ADDR_SLAVE_RANK_ON_Privileged = false;
const TargetTypes_t ATTR_MCBIST_ADDR_SLAVE_RANK_ON_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_ADDR_SLAVE_RANK_ON_PlatInit = false;

/* ATTR_MCBIST_ADDR_STR_MAP */
typedef uint64_t ATTR_MCBIST_ADDR_STR_MAP_Type;
const bool ATTR_MCBIST_ADDR_STR_MAP_Privileged = false;
const TargetTypes_t ATTR_MCBIST_ADDR_STR_MAP_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_ADDR_STR_MAP_PlatInit = false;

/* ATTR_MCBIST_ADDR_RAND */
typedef uint8_t ATTR_MCBIST_ADDR_RAND_Type;
const bool ATTR_MCBIST_ADDR_RAND_Privileged = false;
const TargetTypes_t ATTR_MCBIST_ADDR_RAND_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MCBIST_ADDR_RAND_PlatInit = false;

/* ATTR_PROC_EX_FUNC_L3_DELTA_DATA */
typedef uint32_t ATTR_PROC_EX_FUNC_L3_DELTA_DATA_Type[64];
const bool ATTR_PROC_EX_FUNC_L3_DELTA_DATA_Privileged = false;
const TargetTypes_t ATTR_PROC_EX_FUNC_L3_DELTA_DATA_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_EX_FUNC_L3_DELTA_DATA_PlatInit = true;
#define ATTR_PROC_EX_FUNC_L3_DELTA_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_EX_FUNC_L3_LENGTH */
typedef uint32_t ATTR_PROC_EX_FUNC_L3_LENGTH_Type;
const bool ATTR_PROC_EX_FUNC_L3_LENGTH_Privileged = false;
const TargetTypes_t ATTR_PROC_EX_FUNC_L3_LENGTH_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_EX_FUNC_L3_LENGTH_PlatInit = true;
#define ATTR_PROC_EX_FUNC_L3_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PBIEX_ASYNC_SEL */
typedef uint8_t ATTR_PROC_PBIEX_ASYNC_SEL_Type;
const bool ATTR_PROC_PBIEX_ASYNC_SEL_Privileged = false;
const TargetTypes_t ATTR_PROC_PBIEX_ASYNC_SEL_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_PROC_PBIEX_ASYNC_SEL_PlatInit = false;
enum ATTR_PROC_PBIEX_ASYNC_SEL_Enum
{
    ENUM_ATTR_PROC_PBIEX_ASYNC_SEL_SEL0 = 0x0,
    ENUM_ATTR_PROC_PBIEX_ASYNC_SEL_SEL1 = 0x1,
    ENUM_ATTR_PROC_PBIEX_ASYNC_SEL_SEL2 = 0x2,
};

/* ATTR_X_EREPAIR_THRESHOLD_FIELD */
typedef uint8_t ATTR_X_EREPAIR_THRESHOLD_FIELD_Type;
const bool ATTR_X_EREPAIR_THRESHOLD_FIELD_Privileged = false;
const TargetTypes_t ATTR_X_EREPAIR_THRESHOLD_FIELD_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_X_EREPAIR_THRESHOLD_FIELD_PlatInit = true;
#define ATTR_X_EREPAIR_THRESHOLD_FIELD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_X_EREPAIR_THRESHOLD_MNFG */
typedef uint8_t ATTR_X_EREPAIR_THRESHOLD_MNFG_Type;
const bool ATTR_X_EREPAIR_THRESHOLD_MNFG_Privileged = false;
const TargetTypes_t ATTR_X_EREPAIR_THRESHOLD_MNFG_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_X_EREPAIR_THRESHOLD_MNFG_PlatInit = true;
#define ATTR_X_EREPAIR_THRESHOLD_MNFG_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_A_EREPAIR_THRESHOLD_FIELD */
typedef uint8_t ATTR_A_EREPAIR_THRESHOLD_FIELD_Type;
const bool ATTR_A_EREPAIR_THRESHOLD_FIELD_Privileged = false;
const TargetTypes_t ATTR_A_EREPAIR_THRESHOLD_FIELD_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_A_EREPAIR_THRESHOLD_FIELD_PlatInit = true;
#define ATTR_A_EREPAIR_THRESHOLD_FIELD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_A_EREPAIR_THRESHOLD_MNFG */
typedef uint8_t ATTR_A_EREPAIR_THRESHOLD_MNFG_Type;
const bool ATTR_A_EREPAIR_THRESHOLD_MNFG_Privileged = false;
const TargetTypes_t ATTR_A_EREPAIR_THRESHOLD_MNFG_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_A_EREPAIR_THRESHOLD_MNFG_PlatInit = true;
#define ATTR_A_EREPAIR_THRESHOLD_MNFG_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_DMI_EREPAIR_THRESHOLD_FIELD */
typedef uint8_t ATTR_DMI_EREPAIR_THRESHOLD_FIELD_Type;
const bool ATTR_DMI_EREPAIR_THRESHOLD_FIELD_Privileged = false;
const TargetTypes_t ATTR_DMI_EREPAIR_THRESHOLD_FIELD_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_DMI_EREPAIR_THRESHOLD_FIELD_PlatInit = true;
#define ATTR_DMI_EREPAIR_THRESHOLD_FIELD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_DMI_EREPAIR_THRESHOLD_MNFG */
typedef uint8_t ATTR_DMI_EREPAIR_THRESHOLD_MNFG_Type;
const bool ATTR_DMI_EREPAIR_THRESHOLD_MNFG_Privileged = false;
const TargetTypes_t ATTR_DMI_EREPAIR_THRESHOLD_MNFG_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_DMI_EREPAIR_THRESHOLD_MNFG_PlatInit = true;
#define ATTR_DMI_EREPAIR_THRESHOLD_MNFG_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_DATA */
typedef uint8_t ATTR_MEMB_TP_BNDY_PLL_DATA_Type[80];
const bool ATTR_MEMB_TP_BNDY_PLL_DATA_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_DATA_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_DATA_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_LENGTH */
typedef uint32_t ATTR_MEMB_TP_BNDY_PLL_LENGTH_Type;
const bool ATTR_MEMB_TP_BNDY_PLL_LENGTH_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_LENGTH_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_LENGTH_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_FLUSH */
typedef uint8_t ATTR_MEMB_TP_BNDY_PLL_FLUSH_Type[80];
const bool ATTR_MEMB_TP_BNDY_PLL_FLUSH_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_FLUSH_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_FLUSH_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_FLUSH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_SCAN_SELECT */
typedef uint32_t ATTR_MEMB_TP_BNDY_PLL_SCAN_SELECT_Type;
const bool ATTR_MEMB_TP_BNDY_PLL_SCAN_SELECT_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_SCAN_SELECT_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_SCAN_SELECT_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_SCAN_SELECT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_DATA */
typedef uint8_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_DATA_Type[80];
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_DATA_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_DATA_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_DATA_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_LENGTH */
typedef uint32_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_LENGTH_Type;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_LENGTH_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_LENGTH_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_LENGTH_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1066_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_DATA */
typedef uint8_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_DATA_Type[80];
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_DATA_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_DATA_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_DATA_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_LENGTH */
typedef uint32_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_LENGTH_Type;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_LENGTH_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_LENGTH_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_LENGTH_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1333_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_DATA */
typedef uint8_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_DATA_Type[80];
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_DATA_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_DATA_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_DATA_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_LENGTH */
typedef uint32_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_LENGTH_Type;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_LENGTH_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_LENGTH_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_LENGTH_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1600_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_DATA */
typedef uint8_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_DATA_Type[80];
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_DATA_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_DATA_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_DATA_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_LENGTH */
typedef uint32_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_LENGTH_Type;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_LENGTH_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_LENGTH_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_LENGTH_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4000_MEM1866_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_DATA */
typedef uint8_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_DATA_Type[80];
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_DATA_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_DATA_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_DATA_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_LENGTH */
typedef uint32_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_LENGTH_Type;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_LENGTH_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_LENGTH_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_LENGTH_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1066_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_DATA */
typedef uint8_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_DATA_Type[80];
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_DATA_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_DATA_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_DATA_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_LENGTH */
typedef uint32_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_LENGTH_Type;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_LENGTH_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_LENGTH_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_LENGTH_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1333_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_DATA */
typedef uint8_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_DATA_Type[80];
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_DATA_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_DATA_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_DATA_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_LENGTH */
typedef uint32_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_LENGTH_Type;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_LENGTH_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_LENGTH_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_LENGTH_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1600_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_DATA */
typedef uint8_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_DATA_Type[80];
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_DATA_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_DATA_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_DATA_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_DATA_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_LENGTH */
typedef uint32_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_LENGTH_Type;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_LENGTH_Privileged = false;
const TargetTypes_t ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_LENGTH_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_LENGTH_PlatInit = true;
#define ATTR_MEMB_TP_BNDY_PLL_NEST4800_MEM1866_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_DMI_CUPLL_PFD360_OFFSET */
typedef uint32_t ATTR_MEMB_DMI_CUPLL_PFD360_OFFSET_Type;
const bool ATTR_MEMB_DMI_CUPLL_PFD360_OFFSET_Privileged = false;
const TargetTypes_t ATTR_MEMB_DMI_CUPLL_PFD360_OFFSET_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_DMI_CUPLL_PFD360_OFFSET_PlatInit = true;
#define ATTR_MEMB_DMI_CUPLL_PFD360_OFFSET_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET */
typedef uint32_t ATTR_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_Type;
const bool ATTR_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_Privileged = false;
const TargetTypes_t ATTR_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_PlatInit = true;
#define ATTR_MEMB_DMI_CUPLL_REFCLKSEL_OFFSET_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_MEM_PLL_CFG_UPDATE_OFFSET */
typedef uint32_t ATTR_MEMB_MEM_PLL_CFG_UPDATE_OFFSET_Type;
const bool ATTR_MEMB_MEM_PLL_CFG_UPDATE_OFFSET_Privileged = false;
const TargetTypes_t ATTR_MEMB_MEM_PLL_CFG_UPDATE_OFFSET_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_MEMB_MEM_PLL_CFG_UPDATE_OFFSET_PlatInit = true;
#define ATTR_MEMB_MEM_PLL_CFG_UPDATE_OFFSET_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_SET_ABUS_PRBS_TAP_ID */
typedef uint8_t ATTR_CHIP_EC_FEATURE_SET_ABUS_PRBS_TAP_ID_Type;
const bool ATTR_CHIP_EC_FEATURE_SET_ABUS_PRBS_TAP_ID_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_SET_ABUS_PRBS_TAP_ID_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_SET_ABUS_PRBS_TAP_ID_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_SET_ABUS_PRBS_TAP_ID_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_SET_ABUS_PRBS_TAP_ID_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_TA_PB_T1_PRESENT */
typedef uint8_t ATTR_CHIP_EC_FEATURE_TA_PB_T1_PRESENT_Type;
const bool ATTR_CHIP_EC_FEATURE_TA_PB_T1_PRESENT_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_TA_PB_T1_PRESENT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_TA_PB_T1_PRESENT_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_TA_PB_T1_PRESENT_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_TA_PB_T1_PRESENT_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_TA_A_T1_PRESENT */
typedef uint8_t ATTR_CHIP_EC_FEATURE_TA_A_T1_PRESENT_Type;
const bool ATTR_CHIP_EC_FEATURE_TA_A_T1_PRESENT_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_TA_A_T1_PRESENT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_TA_A_T1_PRESENT_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_TA_A_T1_PRESENT_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_TA_A_T1_PRESENT_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_SINGLE_XBUS_PRESENT */
typedef uint8_t ATTR_CHIP_EC_FEATURE_SINGLE_XBUS_PRESENT_Type;
const bool ATTR_CHIP_EC_FEATURE_SINGLE_XBUS_PRESENT_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_SINGLE_XBUS_PRESENT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_SINGLE_XBUS_PRESENT_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_SINGLE_XBUS_PRESENT_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_SINGLE_XBUS_PRESENT_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_NV_PRESENT */
typedef uint8_t ATTR_CHIP_EC_FEATURE_NV_PRESENT_Type;
const bool ATTR_CHIP_EC_FEATURE_NV_PRESENT_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_NV_PRESENT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_NV_PRESENT_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_NV_PRESENT_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_NV_PRESENT_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_PCI_NEST_FIR_ACTION2_PRESENT */
typedef uint8_t ATTR_CHIP_EC_FEATURE_PCI_NEST_FIR_ACTION2_PRESENT_Type;
const bool ATTR_CHIP_EC_FEATURE_PCI_NEST_FIR_ACTION2_PRESENT_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_PCI_NEST_FIR_ACTION2_PRESENT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_PCI_NEST_FIR_ACTION2_PRESENT_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_PCI_NEST_FIR_ACTION2_PRESENT_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_PCI_NEST_FIR_ACTION2_PRESENT_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_DUAL_CAPP_PRESENT */
typedef uint8_t ATTR_CHIP_EC_FEATURE_DUAL_CAPP_PRESENT_Type;
const bool ATTR_CHIP_EC_FEATURE_DUAL_CAPP_PRESENT_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_DUAL_CAPP_PRESENT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_DUAL_CAPP_PRESENT_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_DUAL_CAPP_PRESENT_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_DUAL_CAPP_PRESENT_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_SET_LEGACY_NODE_ID_VALID_MBOX_BIT */
typedef uint8_t ATTR_CHIP_EC_FEATURE_SET_LEGACY_NODE_ID_VALID_MBOX_BIT_Type;
const bool ATTR_CHIP_EC_FEATURE_SET_LEGACY_NODE_ID_VALID_MBOX_BIT_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_SET_LEGACY_NODE_ID_VALID_MBOX_BIT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_SET_LEGACY_NODE_ID_VALID_MBOX_BIT_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_SET_LEGACY_NODE_ID_VALID_MBOX_BIT_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_SET_LEGACY_NODE_ID_VALID_MBOX_BIT_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_USE_POLLING_PROT */
typedef uint8_t ATTR_CHIP_EC_FEATURE_USE_POLLING_PROT_Type;
const bool ATTR_CHIP_EC_FEATURE_USE_POLLING_PROT_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_USE_POLLING_PROT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_USE_POLLING_PROT_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_USE_POLLING_PROT_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_USE_POLLING_PROT_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_HW_BUG_PIBSLVRESET */
typedef uint8_t ATTR_CHIP_EC_FEATURE_HW_BUG_PIBSLVRESET_Type;
const bool ATTR_CHIP_EC_FEATURE_HW_BUG_PIBSLVRESET_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_HW_BUG_PIBSLVRESET_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_HW_BUG_PIBSLVRESET_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_HW_BUG_PIBSLVRESET_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_HW_BUG_PIBSLVRESET_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_BOOT_FREQ_LESS_PSAVE */
typedef uint8_t ATTR_CHIP_EC_FEATURE_BOOT_FREQ_LESS_PSAVE_Type;
const bool ATTR_CHIP_EC_FEATURE_BOOT_FREQ_LESS_PSAVE_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_BOOT_FREQ_LESS_PSAVE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_BOOT_FREQ_LESS_PSAVE_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_BOOT_FREQ_LESS_PSAVE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_BOOT_FREQ_LESS_PSAVE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_HW_BUG_PLLINIT */
typedef uint8_t ATTR_CHIP_EC_FEATURE_HW_BUG_PLLINIT_Type;
const bool ATTR_CHIP_EC_FEATURE_HW_BUG_PLLINIT_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_HW_BUG_PLLINIT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_HW_BUG_PLLINIT_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_HW_BUG_PLLINIT_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_HW_BUG_PLLINIT_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_SECURE_IOVALID_PRESENT */
typedef uint8_t ATTR_CHIP_EC_FEATURE_SECURE_IOVALID_PRESENT_Type;
const bool ATTR_CHIP_EC_FEATURE_SECURE_IOVALID_PRESENT_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_SECURE_IOVALID_PRESENT_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_SECURE_IOVALID_PRESENT_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_SECURE_IOVALID_PRESENT_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_SECURE_IOVALID_PRESENT_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_CFAM_START */
typedef uint8_t ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_CFAM_START_Type;
const bool ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_CFAM_START_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_CFAM_START_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_CFAM_START_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_CFAM_START_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_CFAM_START_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_AUTO_START */
typedef uint8_t ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_AUTO_START_Type;
const bool ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_AUTO_START_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_AUTO_START_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_AUTO_START_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_AUTO_START_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_NOT_SUPPORT_SBE_AUTO_START_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_CAPP_HANG_CONTROL_ON_SCOM */
typedef uint8_t ATTR_CHIP_EC_FEATURE_CAPP_HANG_CONTROL_ON_SCOM_Type;
const bool ATTR_CHIP_EC_FEATURE_CAPP_HANG_CONTROL_ON_SCOM_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_CAPP_HANG_CONTROL_ON_SCOM_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_CAPP_HANG_CONTROL_ON_SCOM_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_CAPP_HANG_CONTROL_ON_SCOM_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_CAPP_HANG_CONTROL_ON_SCOM_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_CAPP_PROD */
typedef uint8_t ATTR_CHIP_EC_FEATURE_CAPP_PROD_Type;
const bool ATTR_CHIP_EC_FEATURE_CAPP_PROD_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_CAPP_PROD_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_CAPP_PROD_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_CAPP_PROD_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_CAPP_PROD_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_NX_HANG_CONTROL_ON_SCOM */
typedef uint8_t ATTR_CHIP_EC_FEATURE_NX_HANG_CONTROL_ON_SCOM_Type;
const bool ATTR_CHIP_EC_FEATURE_NX_HANG_CONTROL_ON_SCOM_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_NX_HANG_CONTROL_ON_SCOM_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_NX_HANG_CONTROL_ON_SCOM_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_NX_HANG_CONTROL_ON_SCOM_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_NX_HANG_CONTROL_ON_SCOM_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_HCA_SPLIT_HANG_CONTROL */
typedef uint8_t ATTR_CHIP_EC_FEATURE_HCA_SPLIT_HANG_CONTROL_Type;
const bool ATTR_CHIP_EC_FEATURE_HCA_SPLIT_HANG_CONTROL_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_HCA_SPLIT_HANG_CONTROL_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_HCA_SPLIT_HANG_CONTROL_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_HCA_SPLIT_HANG_CONTROL_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_HCA_SPLIT_HANG_CONTROL_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_RECAL_DFE_ENABLE */
typedef uint8_t ATTR_CHIP_EC_FEATURE_RECAL_DFE_ENABLE_Type;
const bool ATTR_CHIP_EC_FEATURE_RECAL_DFE_ENABLE_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_RECAL_DFE_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CHIP_EC_FEATURE_RECAL_DFE_ENABLE_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_RECAL_DFE_ENABLE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_RECAL_DFE_ENABLE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_RECAL_DDC_ENABLE */
typedef uint8_t ATTR_CHIP_EC_FEATURE_RECAL_DDC_ENABLE_Type;
const bool ATTR_CHIP_EC_FEATURE_RECAL_DDC_ENABLE_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_RECAL_DDC_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CHIP_EC_FEATURE_RECAL_DDC_ENABLE_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_RECAL_DDC_ENABLE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_RECAL_DDC_ENABLE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_RECAL_CTLE_ENABLE */
typedef uint8_t ATTR_CHIP_EC_FEATURE_RECAL_CTLE_ENABLE_Type;
const bool ATTR_CHIP_EC_FEATURE_RECAL_CTLE_ENABLE_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_RECAL_CTLE_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP | TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CHIP_EC_FEATURE_RECAL_CTLE_ENABLE_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_RECAL_CTLE_ENABLE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_RECAL_CTLE_ENABLE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_LCTANK_PLL_VCO_BUG */
typedef uint8_t ATTR_CHIP_EC_FEATURE_LCTANK_PLL_VCO_BUG_Type;
const bool ATTR_CHIP_EC_FEATURE_LCTANK_PLL_VCO_BUG_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_LCTANK_PLL_VCO_BUG_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_LCTANK_PLL_VCO_BUG_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_LCTANK_PLL_VCO_BUG_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_LCTANK_PLL_VCO_BUG_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_XBUS_DLL_SLOW_MURANO */
typedef uint8_t ATTR_CHIP_EC_FEATURE_XBUS_DLL_SLOW_MURANO_Type;
const bool ATTR_CHIP_EC_FEATURE_XBUS_DLL_SLOW_MURANO_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_XBUS_DLL_SLOW_MURANO_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_XBUS_DLL_SLOW_MURANO_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_XBUS_DLL_SLOW_MURANO_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_XBUS_DLL_SLOW_MURANO_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_ADU_PBINIT_LAUNCH_BUG */
typedef uint8_t ATTR_CHIP_EC_FEATURE_ADU_PBINIT_LAUNCH_BUG_Type;
const bool ATTR_CHIP_EC_FEATURE_ADU_PBINIT_LAUNCH_BUG_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_ADU_PBINIT_LAUNCH_BUG_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_ADU_PBINIT_LAUNCH_BUG_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_ADU_PBINIT_LAUNCH_BUG_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_ADU_PBINIT_LAUNCH_BUG_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_MCS_ECC_BYPASS_DISABLE */
typedef uint8_t ATTR_CHIP_EC_FEATURE_MCS_ECC_BYPASS_DISABLE_Type;
const bool ATTR_CHIP_EC_FEATURE_MCS_ECC_BYPASS_DISABLE_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_MCS_ECC_BYPASS_DISABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_MCS_ECC_BYPASS_DISABLE_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_MCS_ECC_BYPASS_DISABLE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_MCS_ECC_BYPASS_DISABLE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_MCS_MURDD1_FIR_CONTROL */
typedef uint8_t ATTR_CHIP_EC_FEATURE_MCS_MURDD1_FIR_CONTROL_Type;
const bool ATTR_CHIP_EC_FEATURE_MCS_MURDD1_FIR_CONTROL_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_MCS_MURDD1_FIR_CONTROL_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_MCS_MURDD1_FIR_CONTROL_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_MCS_MURDD1_FIR_CONTROL_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_MCS_MURDD1_FIR_CONTROL_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_MCS_VENDD1_FIR_CONTROL */
typedef uint8_t ATTR_CHIP_EC_FEATURE_MCS_VENDD1_FIR_CONTROL_Type;
const bool ATTR_CHIP_EC_FEATURE_MCS_VENDD1_FIR_CONTROL_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_MCS_VENDD1_FIR_CONTROL_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_MCS_VENDD1_FIR_CONTROL_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_MCS_VENDD1_FIR_CONTROL_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_MCS_VENDD1_FIR_CONTROL_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_MCS_P8_DD2_FIR_CONTROL */
typedef uint8_t ATTR_CHIP_EC_FEATURE_MCS_P8_DD2_FIR_CONTROL_Type;
const bool ATTR_CHIP_EC_FEATURE_MCS_P8_DD2_FIR_CONTROL_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_MCS_P8_DD2_FIR_CONTROL_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_MCS_P8_DD2_FIR_CONTROL_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_MCS_P8_DD2_FIR_CONTROL_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_MCS_P8_DD2_FIR_CONTROL_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_TRACE_CONTROL_ON_SCOM */
typedef uint8_t ATTR_CHIP_EC_FEATURE_TRACE_CONTROL_ON_SCOM_Type;
const bool ATTR_CHIP_EC_FEATURE_TRACE_CONTROL_ON_SCOM_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_TRACE_CONTROL_ON_SCOM_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_TRACE_CONTROL_ON_SCOM_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_TRACE_CONTROL_ON_SCOM_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_TRACE_CONTROL_ON_SCOM_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_MPIPL_AISS_WINKLE_ENTRY */
typedef uint8_t ATTR_CHIP_EC_FEATURE_MPIPL_AISS_WINKLE_ENTRY_Type;
const bool ATTR_CHIP_EC_FEATURE_MPIPL_AISS_WINKLE_ENTRY_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_MPIPL_AISS_WINKLE_ENTRY_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_MPIPL_AISS_WINKLE_ENTRY_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_MPIPL_AISS_WINKLE_ENTRY_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_MPIPL_AISS_WINKLE_ENTRY_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_WE5_VER2 */
typedef uint8_t ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_WE5_VER2_Type;
const bool ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_WE5_VER2_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_WE5_VER2_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_WE5_VER2_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_WE5_VER2_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_WE5_VER2_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER3 */
typedef uint8_t ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER3_Type;
const bool ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER3_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER3_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER3_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER3_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER3_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER2 */
typedef uint8_t ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER2_Type;
const bool ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER2_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER2_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER2_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER2_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C8_VER2_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_RR */
typedef uint8_t ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_RR_Type;
const bool ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_RR_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_RR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_RR_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_RR_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_RR_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_LFSR_ON_STARVATION_ELSE_RR */
typedef uint8_t ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_LFSR_ON_STARVATION_ELSE_RR_Type;
const bool ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_LFSR_ON_STARVATION_ELSE_RR_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_LFSR_ON_STARVATION_ELSE_RR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_LFSR_ON_STARVATION_ELSE_RR_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_LFSR_ON_STARVATION_ELSE_RR_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_FBC_UX_SCOPE_ARB_LFSR_ON_STARVATION_ELSE_RR_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_FBC_UX_LOCAL_ARB_RR */
typedef uint8_t ATTR_CHIP_EC_FEATURE_FBC_UX_LOCAL_ARB_RR_Type;
const bool ATTR_CHIP_EC_FEATURE_FBC_UX_LOCAL_ARB_RR_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_FBC_UX_LOCAL_ARB_RR_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_FBC_UX_LOCAL_ARB_RR_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_FBC_UX_LOCAL_ARB_RR_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_FBC_UX_LOCAL_ARB_RR_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C10_VER2 */
typedef uint8_t ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C10_VER2_Type;
const bool ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C10_VER2_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C10_VER2_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C10_VER2_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C10_VER2_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_FBC_SERIAL_SCOM_C10_VER2_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_MCD_HANG_RECOVERY_BUG */
typedef uint8_t ATTR_CHIP_EC_FEATURE_MCD_HANG_RECOVERY_BUG_Type;
const bool ATTR_CHIP_EC_FEATURE_MCD_HANG_RECOVERY_BUG_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_MCD_HANG_RECOVERY_BUG_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_MCD_HANG_RECOVERY_BUG_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_MCD_HANG_RECOVERY_BUG_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_MCD_HANG_RECOVERY_BUG_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_PCBS_ERR_RESET */
typedef uint8_t ATTR_CHIP_EC_FEATURE_PCBS_ERR_RESET_Type;
const bool ATTR_CHIP_EC_FEATURE_PCBS_ERR_RESET_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_PCBS_ERR_RESET_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_PCBS_ERR_RESET_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_PCBS_ERR_RESET_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_PCBS_ERR_RESET_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_IO_TRAINING_SLS_WORKAROUND */
typedef uint8_t ATTR_IO_TRAINING_SLS_WORKAROUND_Type;
const bool ATTR_IO_TRAINING_SLS_WORKAROUND_Privileged = false;
const TargetTypes_t ATTR_IO_TRAINING_SLS_WORKAROUND_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_IO_TRAINING_SLS_WORKAROUND_PlatInit = false;
#define ATTR_IO_TRAINING_SLS_WORKAROUND_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_IO_TRAINING_SLS_WORKAROUND_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_IO_TRAINING_DLL_WORKAROUND */
typedef uint8_t ATTR_IO_TRAINING_DLL_WORKAROUND_Type;
const bool ATTR_IO_TRAINING_DLL_WORKAROUND_Privileged = false;
const TargetTypes_t ATTR_IO_TRAINING_DLL_WORKAROUND_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_IO_TRAINING_DLL_WORKAROUND_PlatInit = false;
#define ATTR_IO_TRAINING_DLL_WORKAROUND_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_IO_TRAINING_DLL_WORKAROUND_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_DCCAL_PLL_WORKAROUND */
typedef uint8_t ATTR_DCCAL_PLL_WORKAROUND_Type;
const bool ATTR_DCCAL_PLL_WORKAROUND_Privileged = false;
const TargetTypes_t ATTR_DCCAL_PLL_WORKAROUND_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_DCCAL_PLL_WORKAROUND_PlatInit = false;
#define ATTR_DCCAL_PLL_WORKAROUND_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_DCCAL_PLL_WORKAROUND_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_XBUS_RESONANT_CLK_VALID */
typedef uint8_t ATTR_CHIP_EC_FEATURE_XBUS_RESONANT_CLK_VALID_Type;
const bool ATTR_CHIP_EC_FEATURE_XBUS_RESONANT_CLK_VALID_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_XBUS_RESONANT_CLK_VALID_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_XBUS_RESONANT_CLK_VALID_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_XBUS_RESONANT_CLK_VALID_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_XBUS_RESONANT_CLK_VALID_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_RESONANT_CLK_VALID */
typedef uint8_t ATTR_CHIP_EC_FEATURE_RESONANT_CLK_VALID_Type;
const bool ATTR_CHIP_EC_FEATURE_RESONANT_CLK_VALID_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_RESONANT_CLK_VALID_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_RESONANT_CLK_VALID_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_RESONANT_CLK_VALID_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_RESONANT_CLK_VALID_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_AISS_SPECIAL_WAKEUP */
typedef uint8_t ATTR_CHIP_EC_FEATURE_AISS_SPECIAL_WAKEUP_Type;
const bool ATTR_CHIP_EC_FEATURE_AISS_SPECIAL_WAKEUP_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_AISS_SPECIAL_WAKEUP_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_AISS_SPECIAL_WAKEUP_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_AISS_SPECIAL_WAKEUP_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_AISS_SPECIAL_WAKEUP_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_OCC_CE_FIR_DISABLE */
typedef uint8_t ATTR_CHIP_EC_FEATURE_OCC_CE_FIR_DISABLE_Type;
const bool ATTR_CHIP_EC_FEATURE_OCC_CE_FIR_DISABLE_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_OCC_CE_FIR_DISABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_OCC_CE_FIR_DISABLE_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_OCC_CE_FIR_DISABLE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_OCC_CE_FIR_DISABLE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_ENABLE_IVE_PERFORMANCE_ORDERING */
typedef uint8_t ATTR_CHIP_EC_FEATURE_ENABLE_IVE_PERFORMANCE_ORDERING_Type;
const bool ATTR_CHIP_EC_FEATURE_ENABLE_IVE_PERFORMANCE_ORDERING_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_ENABLE_IVE_PERFORMANCE_ORDERING_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_ENABLE_IVE_PERFORMANCE_ORDERING_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_ENABLE_IVE_PERFORMANCE_ORDERING_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_ENABLE_IVE_PERFORMANCE_ORDERING_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_ENABLE_PCI_DMAR_OOO */
typedef uint8_t ATTR_CHIP_EC_FEATURE_ENABLE_PCI_DMAR_OOO_Type;
const bool ATTR_CHIP_EC_FEATURE_ENABLE_PCI_DMAR_OOO_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_ENABLE_PCI_DMAR_OOO_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_ENABLE_PCI_DMAR_OOO_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_ENABLE_PCI_DMAR_OOO_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_ENABLE_PCI_DMAR_OOO_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_ZCAL_OVERRIDE */
typedef uint8_t ATTR_CHIP_EC_FEATURE_ZCAL_OVERRIDE_Type;
const bool ATTR_CHIP_EC_FEATURE_ZCAL_OVERRIDE_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_ZCAL_OVERRIDE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_ZCAL_OVERRIDE_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_ZCAL_OVERRIDE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_ZCAL_OVERRIDE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_IVRM_WINKLE_BUG */
typedef uint8_t ATTR_CHIP_EC_FEATURE_IVRM_WINKLE_BUG_Type;
const bool ATTR_CHIP_EC_FEATURE_IVRM_WINKLE_BUG_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_IVRM_WINKLE_BUG_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_IVRM_WINKLE_BUG_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_IVRM_WINKLE_BUG_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_IVRM_WINKLE_BUG_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_EC_MSS_RECONFIG_POSSIBLE */
typedef uint8_t ATTR_PROC_EC_MSS_RECONFIG_POSSIBLE_Type;
const bool ATTR_PROC_EC_MSS_RECONFIG_POSSIBLE_Privileged = false;
const TargetTypes_t ATTR_PROC_EC_MSS_RECONFIG_POSSIBLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_EC_MSS_RECONFIG_POSSIBLE_PlatInit = false;
#define ATTR_PROC_EC_MSS_RECONFIG_POSSIBLE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_PROC_EC_MSS_RECONFIG_POSSIBLE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CEN_EC_THROTTLE_SYNC_POSSIBLE */
typedef uint8_t ATTR_CEN_EC_THROTTLE_SYNC_POSSIBLE_Type;
const bool ATTR_CEN_EC_THROTTLE_SYNC_POSSIBLE_Privileged = false;
const TargetTypes_t ATTR_CEN_EC_THROTTLE_SYNC_POSSIBLE_TargetTypes = TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CEN_EC_THROTTLE_SYNC_POSSIBLE_PlatInit = false;
#define ATTR_CEN_EC_THROTTLE_SYNC_POSSIBLE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CEN_EC_THROTTLE_SYNC_POSSIBLE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_EC_CORE_HANG_PULSE_BUG */
typedef uint8_t ATTR_PROC_EC_CORE_HANG_PULSE_BUG_Type;
const bool ATTR_PROC_EC_CORE_HANG_PULSE_BUG_Privileged = false;
const TargetTypes_t ATTR_PROC_EC_CORE_HANG_PULSE_BUG_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_EC_CORE_HANG_PULSE_BUG_PlatInit = false;
#define ATTR_PROC_EC_CORE_HANG_PULSE_BUG_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_PROC_EC_CORE_HANG_PULSE_BUG_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_EC_PBA_PREFETCH_ENABLE */
typedef uint8_t ATTR_PROC_EC_PBA_PREFETCH_ENABLE_Type;
const bool ATTR_PROC_EC_PBA_PREFETCH_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_EC_PBA_PREFETCH_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_EC_PBA_PREFETCH_ENABLE_PlatInit = false;
#define ATTR_PROC_EC_PBA_PREFETCH_ENABLE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_PROC_EC_PBA_PREFETCH_ENABLE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_EC_OHA_L3_PURGE_ABORT_ENABLE */
typedef uint8_t ATTR_PROC_EC_OHA_L3_PURGE_ABORT_ENABLE_Type;
const bool ATTR_PROC_EC_OHA_L3_PURGE_ABORT_ENABLE_Privileged = false;
const TargetTypes_t ATTR_PROC_EC_OHA_L3_PURGE_ABORT_ENABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_EC_OHA_L3_PURGE_ABORT_ENABLE_PlatInit = false;
#define ATTR_PROC_EC_OHA_L3_PURGE_ABORT_ENABLE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_PROC_EC_OHA_L3_PURGE_ABORT_ENABLE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_PFET_POWEROFF_BUG */
typedef uint8_t ATTR_CHIP_EC_PFET_POWEROFF_BUG_Type;
const bool ATTR_CHIP_EC_PFET_POWEROFF_BUG_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_PFET_POWEROFF_BUG_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_PFET_POWEROFF_BUG_PlatInit = false;
#define ATTR_CHIP_EC_PFET_POWEROFF_BUG_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_PFET_POWEROFF_BUG_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_OCC_DISABLE */
typedef uint8_t ATTR_CHIP_EC_FEATURE_OCC_DISABLE_Type;
const bool ATTR_CHIP_EC_FEATURE_OCC_DISABLE_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_OCC_DISABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_OCC_DISABLE_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_OCC_DISABLE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_OCC_DISABLE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_HW_BUG_PBASLVRESET */
typedef uint8_t ATTR_CHIP_EC_FEATURE_HW_BUG_PBASLVRESET_Type;
const bool ATTR_CHIP_EC_FEATURE_HW_BUG_PBASLVRESET_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_HW_BUG_PBASLVRESET_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_HW_BUG_PBASLVRESET_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_HW_BUG_PBASLVRESET_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_HW_BUG_PBASLVRESET_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_HCA_BAR_SCOM_BUG */
typedef uint8_t ATTR_CHIP_EC_FEATURE_HCA_BAR_SCOM_BUG_Type;
const bool ATTR_CHIP_EC_FEATURE_HCA_BAR_SCOM_BUG_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_HCA_BAR_SCOM_BUG_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_HCA_BAR_SCOM_BUG_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_HCA_BAR_SCOM_BUG_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_HCA_BAR_SCOM_BUG_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_HW_BUG_TOD_ERROR_MASK_NOT_WRITABLE */
typedef uint8_t ATTR_CHIP_EC_FEATURE_HW_BUG_TOD_ERROR_MASK_NOT_WRITABLE_Type;
const bool ATTR_CHIP_EC_FEATURE_HW_BUG_TOD_ERROR_MASK_NOT_WRITABLE_Privileged = false;
const TargetTypes_t ATTR_CHIP_EC_FEATURE_HW_BUG_TOD_ERROR_MASK_NOT_WRITABLE_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_EC_FEATURE_HW_BUG_TOD_ERROR_MASK_NOT_WRITABLE_PlatInit = false;
#define ATTR_CHIP_EC_FEATURE_HW_BUG_TOD_ERROR_MASK_NOT_WRITABLE_GETMACRO(ID, PTARGET, VAL) \
    PLAT_GET_CHIP_EC_FEATURE_OVERRIDE(ID, PTARGET, VAL) ? fapi::FAPI_RC_SUCCESS : \
    fapi::fapiQueryChipEcFeature(fapi::ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_HW_BUG_TOD_ERROR_MASK_NOT_WRITABLE_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_MNFG_DMI_MIN_EYE_WIDTH */
typedef uint8_t ATTR_MNFG_DMI_MIN_EYE_WIDTH_Type;
const bool ATTR_MNFG_DMI_MIN_EYE_WIDTH_Privileged = false;
const TargetTypes_t ATTR_MNFG_DMI_MIN_EYE_WIDTH_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MNFG_DMI_MIN_EYE_WIDTH_PlatInit = true;
#define ATTR_MNFG_DMI_MIN_EYE_WIDTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MNFG_DMI_MIN_EYE_HEIGHT */
typedef uint8_t ATTR_MNFG_DMI_MIN_EYE_HEIGHT_Type;
const bool ATTR_MNFG_DMI_MIN_EYE_HEIGHT_Privileged = false;
const TargetTypes_t ATTR_MNFG_DMI_MIN_EYE_HEIGHT_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MNFG_DMI_MIN_EYE_HEIGHT_PlatInit = true;
#define ATTR_MNFG_DMI_MIN_EYE_HEIGHT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MNFG_ABUS_MIN_EYE_WIDTH */
typedef uint8_t ATTR_MNFG_ABUS_MIN_EYE_WIDTH_Type;
const bool ATTR_MNFG_ABUS_MIN_EYE_WIDTH_Privileged = false;
const TargetTypes_t ATTR_MNFG_ABUS_MIN_EYE_WIDTH_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MNFG_ABUS_MIN_EYE_WIDTH_PlatInit = true;
#define ATTR_MNFG_ABUS_MIN_EYE_WIDTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MNFG_ABUS_MIN_EYE_HEIGHT */
typedef uint8_t ATTR_MNFG_ABUS_MIN_EYE_HEIGHT_Type;
const bool ATTR_MNFG_ABUS_MIN_EYE_HEIGHT_Privileged = false;
const TargetTypes_t ATTR_MNFG_ABUS_MIN_EYE_HEIGHT_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MNFG_ABUS_MIN_EYE_HEIGHT_PlatInit = true;
#define ATTR_MNFG_ABUS_MIN_EYE_HEIGHT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MNFG_XBUS_MIN_EYE_WIDTH */
typedef uint8_t ATTR_MNFG_XBUS_MIN_EYE_WIDTH_Type;
const bool ATTR_MNFG_XBUS_MIN_EYE_WIDTH_Privileged = false;
const TargetTypes_t ATTR_MNFG_XBUS_MIN_EYE_WIDTH_TargetTypes = TARGET_TYPE_SYSTEM;
const bool ATTR_MNFG_XBUS_MIN_EYE_WIDTH_PlatInit = true;
#define ATTR_MNFG_XBUS_MIN_EYE_WIDTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_DATABUS_UTIL_PER_MBA */
typedef uint8_t ATTR_MSS_DATABUS_UTIL_PER_MBA_Type;
const bool ATTR_MSS_DATABUS_UTIL_PER_MBA_Privileged = false;
const TargetTypes_t ATTR_MSS_DATABUS_UTIL_PER_MBA_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_DATABUS_UTIL_PER_MBA_PlatInit = false;

/* ATTR_MSS_UTIL_N_PER_MBA */
typedef uint32_t ATTR_MSS_UTIL_N_PER_MBA_Type;
const bool ATTR_MSS_UTIL_N_PER_MBA_Privileged = false;
const TargetTypes_t ATTR_MSS_UTIL_N_PER_MBA_TargetTypes = TARGET_TYPE_MBA_CHIPLET;
const bool ATTR_MSS_UTIL_N_PER_MBA_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_NOM_FREQ_MHZ */
typedef uint32_t ATTR_OVERRIDE_MVPD_NOM_FREQ_MHZ_Type;
const bool ATTR_OVERRIDE_MVPD_NOM_FREQ_MHZ_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_NOM_FREQ_MHZ_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_NOM_FREQ_MHZ_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_V_NEST_NOM_VOLTAGE */
typedef uint32_t ATTR_OVERRIDE_MVPD_V_NEST_NOM_VOLTAGE_Type;
const bool ATTR_OVERRIDE_MVPD_V_NEST_NOM_VOLTAGE_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_V_NEST_NOM_VOLTAGE_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_V_NEST_NOM_VOLTAGE_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_I_NEST_NOM_CURRENT */
typedef uint32_t ATTR_OVERRIDE_MVPD_I_NEST_NOM_CURRENT_Type;
const bool ATTR_OVERRIDE_MVPD_I_NEST_NOM_CURRENT_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_I_NEST_NOM_CURRENT_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_I_NEST_NOM_CURRENT_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_V_CS_NOM_VOLTAGE */
typedef uint32_t ATTR_OVERRIDE_MVPD_V_CS_NOM_VOLTAGE_Type;
const bool ATTR_OVERRIDE_MVPD_V_CS_NOM_VOLTAGE_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_V_CS_NOM_VOLTAGE_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_V_CS_NOM_VOLTAGE_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_I_CS_NOM_CURRENT */
typedef uint32_t ATTR_OVERRIDE_MVPD_I_CS_NOM_CURRENT_Type;
const bool ATTR_OVERRIDE_MVPD_I_CS_NOM_CURRENT_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_I_CS_NOM_CURRENT_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_I_CS_NOM_CURRENT_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_PS_FREQ_MHZ */
typedef uint32_t ATTR_OVERRIDE_MVPD_PS_FREQ_MHZ_Type;
const bool ATTR_OVERRIDE_MVPD_PS_FREQ_MHZ_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_PS_FREQ_MHZ_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_PS_FREQ_MHZ_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_V_NEST_PS_VOLTAGE */
typedef uint32_t ATTR_OVERRIDE_MVPD_V_NEST_PS_VOLTAGE_Type;
const bool ATTR_OVERRIDE_MVPD_V_NEST_PS_VOLTAGE_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_V_NEST_PS_VOLTAGE_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_V_NEST_PS_VOLTAGE_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_I_NEST_PS_CURRENT */
typedef uint32_t ATTR_OVERRIDE_MVPD_I_NEST_PS_CURRENT_Type;
const bool ATTR_OVERRIDE_MVPD_I_NEST_PS_CURRENT_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_I_NEST_PS_CURRENT_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_I_NEST_PS_CURRENT_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_V_CS_PS_VOLTAGE */
typedef uint32_t ATTR_OVERRIDE_MVPD_V_CS_PS_VOLTAGE_Type;
const bool ATTR_OVERRIDE_MVPD_V_CS_PS_VOLTAGE_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_V_CS_PS_VOLTAGE_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_V_CS_PS_VOLTAGE_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_I_CS_PS_CURRENT */
typedef uint32_t ATTR_OVERRIDE_MVPD_I_CS_PS_CURRENT_Type;
const bool ATTR_OVERRIDE_MVPD_I_CS_PS_CURRENT_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_I_CS_PS_CURRENT_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_I_CS_PS_CURRENT_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_TURBO_FREQ_MHZ */
typedef uint32_t ATTR_OVERRIDE_MVPD_TURBO_FREQ_MHZ_Type;
const bool ATTR_OVERRIDE_MVPD_TURBO_FREQ_MHZ_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_TURBO_FREQ_MHZ_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_TURBO_FREQ_MHZ_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_V_NEST_TURBO_VOLTAGE */
typedef uint32_t ATTR_OVERRIDE_MVPD_V_NEST_TURBO_VOLTAGE_Type;
const bool ATTR_OVERRIDE_MVPD_V_NEST_TURBO_VOLTAGE_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_V_NEST_TURBO_VOLTAGE_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_V_NEST_TURBO_VOLTAGE_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_I_NEST_TURBO_CURRENT */
typedef uint32_t ATTR_OVERRIDE_MVPD_I_NEST_TURBO_CURRENT_Type;
const bool ATTR_OVERRIDE_MVPD_I_NEST_TURBO_CURRENT_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_I_NEST_TURBO_CURRENT_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_I_NEST_TURBO_CURRENT_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_V_CS_TURBO_VOLTAGE */
typedef uint32_t ATTR_OVERRIDE_MVPD_V_CS_TURBO_VOLTAGE_Type;
const bool ATTR_OVERRIDE_MVPD_V_CS_TURBO_VOLTAGE_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_V_CS_TURBO_VOLTAGE_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_V_CS_TURBO_VOLTAGE_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_I_CS_TURBO_CURRENT */
typedef uint32_t ATTR_OVERRIDE_MVPD_I_CS_TURBO_CURRENT_Type;
const bool ATTR_OVERRIDE_MVPD_I_CS_TURBO_CURRENT_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_I_CS_TURBO_CURRENT_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_I_CS_TURBO_CURRENT_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_FVMIN_FREQ_MHZ */
typedef uint32_t ATTR_OVERRIDE_MVPD_FVMIN_FREQ_MHZ_Type;
const bool ATTR_OVERRIDE_MVPD_FVMIN_FREQ_MHZ_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_FVMIN_FREQ_MHZ_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_FVMIN_FREQ_MHZ_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_V_NEST_FVMIN_VOLTAGE */
typedef uint32_t ATTR_OVERRIDE_MVPD_V_NEST_FVMIN_VOLTAGE_Type;
const bool ATTR_OVERRIDE_MVPD_V_NEST_FVMIN_VOLTAGE_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_V_NEST_FVMIN_VOLTAGE_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_V_NEST_FVMIN_VOLTAGE_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_I_NEST_FVMIN_CURRENT */
typedef uint32_t ATTR_OVERRIDE_MVPD_I_NEST_FVMIN_CURRENT_Type;
const bool ATTR_OVERRIDE_MVPD_I_NEST_FVMIN_CURRENT_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_I_NEST_FVMIN_CURRENT_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_I_NEST_FVMIN_CURRENT_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_V_CS_FVMIN_VOLTAGE */
typedef uint32_t ATTR_OVERRIDE_MVPD_V_CS_FVMIN_VOLTAGE_Type;
const bool ATTR_OVERRIDE_MVPD_V_CS_FVMIN_VOLTAGE_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_V_CS_FVMIN_VOLTAGE_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_V_CS_FVMIN_VOLTAGE_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_I_CS_FVMIN_CURRENT */
typedef uint32_t ATTR_OVERRIDE_MVPD_I_CS_FVMIN_CURRENT_Type;
const bool ATTR_OVERRIDE_MVPD_I_CS_FVMIN_CURRENT_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_I_CS_FVMIN_CURRENT_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_I_CS_FVMIN_CURRENT_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_LAB_FREQ_MHZ */
typedef uint32_t ATTR_OVERRIDE_MVPD_LAB_FREQ_MHZ_Type;
const bool ATTR_OVERRIDE_MVPD_LAB_FREQ_MHZ_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_LAB_FREQ_MHZ_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_LAB_FREQ_MHZ_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_V_NEST_LAB_VOLTAGE */
typedef uint32_t ATTR_OVERRIDE_MVPD_V_NEST_LAB_VOLTAGE_Type;
const bool ATTR_OVERRIDE_MVPD_V_NEST_LAB_VOLTAGE_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_V_NEST_LAB_VOLTAGE_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_V_NEST_LAB_VOLTAGE_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_I_NEST_LAB_CURRENT */
typedef uint32_t ATTR_OVERRIDE_MVPD_I_NEST_LAB_CURRENT_Type;
const bool ATTR_OVERRIDE_MVPD_I_NEST_LAB_CURRENT_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_I_NEST_LAB_CURRENT_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_I_NEST_LAB_CURRENT_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_V_CS_LAB_VOLTAGE */
typedef uint32_t ATTR_OVERRIDE_MVPD_V_CS_LAB_VOLTAGE_Type;
const bool ATTR_OVERRIDE_MVPD_V_CS_LAB_VOLTAGE_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_V_CS_LAB_VOLTAGE_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_V_CS_LAB_VOLTAGE_PlatInit = false;

/* ATTR_OVERRIDE_MVPD_I_CS_LAB_CURRENT */
typedef uint32_t ATTR_OVERRIDE_MVPD_I_CS_LAB_CURRENT_Type;
const bool ATTR_OVERRIDE_MVPD_I_CS_LAB_CURRENT_Privileged = false;
const TargetTypes_t ATTR_OVERRIDE_MVPD_I_CS_LAB_CURRENT_TargetTypes = TARGET_TYPE_EX_CHIPLET;
const bool ATTR_OVERRIDE_MVPD_I_CS_LAB_CURRENT_PlatInit = false;

/* ATTR_PROC_PERV_VITL_LENGTH */
typedef uint32_t ATTR_PROC_PERV_VITL_LENGTH_Type;
const bool ATTR_PROC_PERV_VITL_LENGTH_Privileged = false;
const TargetTypes_t ATTR_PROC_PERV_VITL_LENGTH_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_PERV_VITL_LENGTH_PlatInit = true;
#define ATTR_PROC_PERV_VITL_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_TP_VITL_SPY_LENGTH */
typedef uint32_t ATTR_PROC_TP_VITL_SPY_LENGTH_Type;
const bool ATTR_PROC_TP_VITL_SPY_LENGTH_Privileged = false;
const TargetTypes_t ATTR_PROC_TP_VITL_SPY_LENGTH_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_TP_VITL_SPY_LENGTH_PlatInit = true;
#define ATTR_PROC_TP_VITL_SPY_LENGTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_TP_VITL_SPY_OFFSETS */
typedef uint32_t ATTR_PROC_TP_VITL_SPY_OFFSETS_Type[24];
const bool ATTR_PROC_TP_VITL_SPY_OFFSETS_Privileged = false;
const TargetTypes_t ATTR_PROC_TP_VITL_SPY_OFFSETS_TargetTypes = TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_TP_VITL_SPY_OFFSETS_PlatInit = true;
#define ATTR_PROC_TP_VITL_SPY_OFFSETS_SETMACRO ATTRIBUTE_NOT_WRITABLE

}

#endif
