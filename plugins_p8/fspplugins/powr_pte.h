// IBM_PROLOG_BEGIN_TAG 
// This is an automatically generated prolog. 
//  
// fips911 src/powr/fsp/tool/powr_pte.h 1.2.1.71 
//  
// IBM CONFIDENTIAL 
//  
// OBJECT CODE ONLY SOURCE MATERIALS 
//  
// COPYRIGHT International Business Machines Corp. 2005,2018 
// All Rights Reserved 
//  
// The source code for this program is not published or otherwise 
// divested of its trade secrets, irrespective of what has been 
// deposited with the U.S. Copyright Office. 
//  
// IBM_PROLOG_END_TAG 
//  LAST_VERSION_FROM_CC: 
// $Source: fips760 fsp/src/powr/fsp/tool/powr_pte.h 1$

/*****************************************************************************************************************************
 *  CHANGE ACTIVITY:
 *
 *  Flag  Track    Release      Date     Userid    Comments
 *  ----- -------- -----------  -------- --------- -------------------------------
 *  @000  SW318447 fips910      08/14/15 minglw    Port 840 to 910
 *  @007  SW301362 fips910      09/10/15 v2cibmd   MPV:STC830:Brazos:System Failed to IPL after PROC VRM Pgood Fault on Node 3
 *  @008  SW315069 fips910      09/15/15 jlwright  DDR4 support
 *  @009  SW322595 fips910      09/17/15 klema     OV3_POWR: Remove eco support
 *  @00A  SW322795 fips910      09/18/15 klema     0V3_POWR Remove Extended Poll Data from P9
 *  @010  SW291669 fips910      09/29/15 v2cibmd   Power supply AC fault not cleared for PS hot plug
 *
 *
 *  END CHANGE ACTIVITY
*****************************************************************************************************************************/



#include <vector>
using namespace std;

#ifdef powr_C
#define GLOBAL
#else
#define GLOBAL extern
#endif

//#define IS_SIMULATOR (getenv("REG_CONF_PATH") != NULL)
#define IS_SIMULATOR ( FALSE )

// Put symbols in the powr namespace.  Otherwise they conflict with identical
// symbol names in other components when the errl plugin is built on x86.
namespace powr
{

enum e_color {
  C_NORMAL = 0,
  C_RED,
  C_BLUE,
  C_GREEN,
  C_BOLD,
  C_BLACK,
  C_YELLOW,
  C_MAGENTA,
  C_CYAN,
  C_WHITE,
  C_ERROR,
  C_WARNING,
  C_FLAG
};

struct s_colortbl
{
  enum e_color c;
  char xterm[30];
  char html[30];
};

#define COLOR_TABLE_SIZE 13
#ifdef powr_C
struct s_colortbl G_color_table[COLOR_TABLE_SIZE] =
{
  {C_NORMAL,    "\033[0m"                   },
  {C_RED,       "\033[31;1m",          "red"},
  {C_BLUE,      "\033[34;1m",         "blue"},
  {C_GREEN,     "\033[32;1m",        "green"},
  {C_BOLD,      "\033[00;1m",             ""},
  {C_BLACK,     "\033[30;1m",        "black"},
  {C_YELLOW,    "\033[33;1m",       "yellow"},
  {C_MAGENTA,   "\033[35;1m",      "magenta"},
  {C_CYAN,      "\033[36;1m",         "cyan"},
  {C_WHITE,     "\033[37;1m",        "white"},
  {C_ERROR,     "\033[31;1m",          "red"},
  {C_WARNING,   "\033[35;1m",    "goldenrod"},
  {C_FLAG,      "\033[34;1m", "MidnightBlue"}
};
#else
extern struct s_colortbl G_color_table[COLOR_TABLE_SIZE];
#endif

#define MAX_PTE_LENGTH 9
struct pte_entry_struct
{
  char key[MAX_PTE_LENGTH];
  enum e_color color;
  char format[150];
  char file[128];
  char function[128];
};

#ifdef powr_C
unsigned int G_pte_entry_count = 0;
char G_test_start_date[64] = "";
char G_output_dir[256] = "";
char G_base_name[256] = "";
#else
extern unsigned int G_pte_entry_count;
extern char G_test_start_date[64];
extern char G_output_dir[256];
extern char G_base_name[256];
#endif


//Dynamic pte_entry table, call initialize_pte_lists() before first use
#ifdef powr_C
vector<pte_entry_struct> G_pte_entry;
#else
extern vector<pte_entry_struct> G_pte_entry;
#endif
void initialize_pte_lists();
enum e_color get_pte_color(const char *orig_pte);
char * get_pte_comment_color(const char *orig_pte);
char * get_pte_comment(const char *orig_pte);
char * get_bpc_cmd_status(unsigned int i_status);
char * get_resource_name(unsigned int resource_type);
char * get_svpd_status_name(unsigned int i_status);
char * get_bpc_comm_status(unsigned int i_status);
char * get_network_rsp_status(unsigned int i_status);
char * format_poll_flags(const unsigned int flags);
char * format_ibf_flags(const unsigned int flags);
char * format_cage_flags(const unsigned int flags);
char * format_vbias_flags(const unsigned int flags);
char * format_power_on_octant_flags(const unsigned int flags);
char * format_critical_octant_flags(const unsigned int flags);
char * format_CPU_power_on_octant_flags(const unsigned int flags);
char * format_CPU_critical_octant_flags(const unsigned int flags);
char * format_octant_poll_flags(const char * header, const unsigned int flags);

#define MAX_LINE_LENGTH 512

#define PTE_TABLE_SIZE 3000
#ifdef powr_C
struct pte_entry_struct static_pte_entry_table[PTE_TABLE_SIZE] =
{
  { "FFFFFFFF", C_NORMAL, "...END OF SRC ENTRIES - START ILOG..." },
  { "EEEEEEEE", C_NORMAL, "...END OF ILOG - REMAINING PTES YET TO BE PROCESSED..." },
  //
  { "0100**"  , C_BOLD,   "Power On - Begin power on, node type 0x%02X" },
  { "0101"    , C_BOLD,   "Power On - Bulks On" },
  { "0103"    , C_BOLD,   "Power On - Regs On" },
  { "0104"    , C_BOLD,   "Power On - Power up complete" },
  { "0105"    , C_BOLD,   "Power On - PUP delay expired (10 sec)" },
  { "0107"    , C_BOLD,   "Power On - Start pgood delay" },
  { "0108"    , C_ERROR,  "Power On - Dallas 1 wire failure" },
  { "01060000", C_BOLD,   "CPM disabled by domain fault" },
  { "01060001", C_BOLD,   "CPM disabled by domain fault" },
  { "010E"    , C_BOLD,   "Rack power on cmd processed (poff_net_rcvd=%d, spcn_state=0x%02X)" },
  { "010F"    , C_BOLD,   "Broadcast slave pwr on processed" },
  { "0110"    , C_BOLD,   "Power On - Restart begins" },
  { "0111"    , C_BOLD,   "Power On - Restart successful" },
  { "0120"    , C_ERROR,  "Power On - PBATs XRAM fail" },
  { "0121"    , C_ERROR,  "Power On - PBATs PEROM fail" },
  { "0130"    , C_ERROR,  "Power On - 28v not failed to power up" },
  { "014000"  , C_BOLD,   "Power On - Checking for cec cage id 0x%02X in eth poll from BPC", "powr_fsp_power_up_state.C", "BPCRackClass::attemptCecPowerUp()" },
  { "0140"    , C_BOLD,   "Power On - Cec cage is now in eth poll (bpc_cage_flags=0x%02x, cage=0x%02X)", "powr_fsp_power_up_state.C", "BPCRackClass::attemptCecPowerUp()" },
  { "0141"    , C_NORMAL, "Power On - Processors owned = 0x%02X, Torrent owned = 0x%02X" },
  { "0142"    , C_NORMAL, "Power On - CEC IPL type 0x%02X%02X - (OLCT IPL type = 0x000E)" },
  { "01500000", C_NORMAL, "Power On - TMS safe (first power up)", "ibt_rack_cmd.c", "rack_pas_proc()" },
  { "01500001", C_NORMAL, "Power On - TMS safe (RPN_EXEC)", "ibt_rack_cmd.c", "rack_rpn_exec()" },
  { "01500002", C_NORMAL, "Power On - TMS safe (RPN_PROC)", "ibt_rack_cmd.c", "rack_rpn_proc()" },
  { "015000FF", C_NORMAL, "Power On - TMS safe (NORMAL)", "ibt_states.c", "normal_state()" },
  { "0163"    , C_BOLD,   "PNU slave power on processed" },
  { "0170"    , C_BOLD,   "Power On - Auto power on" },
  { "0180"    , C_NORMAL, "Power On - GX pgood gpio set to input" },
  { "0181"    , C_NORMAL, "Pgood verification complete" },
  { "01C1"    , C_ERROR,  "Progress Code failure (prog_code=0x%02X%02X, status=0x%02X)", "powr_fsp_ipl.C", "displayIPLProgress()" },
  { "01E0"    , C_ERROR,  "Power On - VPD fail port %02x status %02x" },
  { "01E1"    , C_ERROR,  "Power On - PS input type mismatch 110V weight=%02X 1400W present=%02X"},
  { "01EA"    , C_NORMAL, "Power On - spreadspec enabled (unit=0x%02X)" },
  { "01D000"  , C_ERROR,  "PS on timeout expired (port=%d)" },
  { "01D100"  , C_ERROR,  "REG on timeout expired (port=%d)" },
  { "01EC00"  , C_ERROR,  "VRM pgood not on (idx=0x%02X)" },
  { "01ED0000", C_ERROR,  "Blade Q112 Gate Detect" },
  { "01ED0001", C_ERROR,  "Exp. Blade Q112 Gate Detect" },
  { "01EE0000", C_ERROR,  "Blade Q113 Gate Detect" },
  { "01EE0001", C_ERROR,  "Exp. Blade Q113 Gate Detect" },
  { "01EF00"  , C_NORMAL, "Blade chassis type %d" },
  { "01F000"  , C_ERROR,  "TMGT oversubsription state: %d" },

  //
  { "0200"    , C_BOLD,   "Cold start code level: %c%c" },
  { "0201"    , C_ERROR,  "Power Off - Battery timeout" },
  { "0202"    , C_ERROR,  "Power Off - critical fault down" },
  { "0203"    , C_BOLD,   "Power Off - PFU" },
  { "0204"    , C_BOLD,   "Power Off - Switch transition" },
  { "0205"    , C_BOLD,   "Power Off - CPM enabled" },
  { "0206"    , C_BOLD,   "Power Off - CPM disabled" },
  { "0207"    , C_BOLD,   "Power Off -" },
  { "0208"    , C_BOLD,   "Power Off - No battery" },
  { "0209"    , C_BOLD,   "Power Off - Battery disabled" },
  { "020A"    , C_ERROR,  "Power Off - fan meltdown" },
  { "020C"    , C_BOLD,   "Power Off successful" },
  { "020D"    , C_BOLD,   "Monitor CPM Regs" },
  { "020E"    , C_BOLD,   "Rack power off cmd processed" },
  { "020F"    , C_BOLD,   "PFU/RPF cmd processed (Poff_net_rcvd: 0x%02X, spcn_state: 0x%02X)" },
  { "0210"    , C_BOLD,   "Compile Date %02X%02X" },
  { "0220"    , C_BOLD,   "SF2+ Workstation PS", "powr_fsp_por_state.C", "por_state()" },
  { "0221"    , C_ERROR,  "Power Off - null node vpd (cfg_id=0x%02X, resv=%d)", "powr_fsp_por_state.C", "por_state()" },
  { "022F"    , C_BOLD,   "broadcast slave power off processed" },
  { "0241"    , C_BOLD,   "IPL type lo       %02X%02X" },
  { "0242"    , C_BOLD,   "IPL type hi 0x%02X%02X" },
  { "0243"    , C_BOLD,   "CEC IPL type hi 0x%02X%02X" },
  { "0244"    , C_BOLD,   "CEC IPL type lo 0x%02X%02X" },
  { "02500001", C_NORMAL, "Power Off - TMS safe (power off)", "ibt_rack_cmd.c", "rack_rpf_proc()" },
  { "025000"  , C_NORMAL, "RPF/RPN state: 0x%02X" },
  { "0261"    , C_BOLD,   "PFU slave power off processed" },
  { "0263"    , C_NORMAL, "RFU/RPF state (poff_net=0x%02X, rcvd_spcn_state=0x%02X)" },
  { "0264"    , C_ERROR,  "Pwm controller init failed (rc=0x%02X)" },
  { "02A0"    , C_NORMAL, "Power Off - FSI link recovered (drawer_link=0x%02X)" },
  { "02AC"    , C_ERROR,  "Power Off - CFD due to loss of standby (drawer=0x%02X)" },
  { "02B0"    , C_ERROR,  "POR - pgood off during hot restart (PgoodOnControl=0x%02X, drawer=0x%02X)" },
  { "02C0"    , C_BOLD,   "Cold start Entered (state=%d/transition=%d)" },
  { "02CC1000", C_BOLD,   "Suspend cold start exit" },
  { "02CC"    , C_BOLD,   "Cold start Exit (state=%d/transition=%d)" },
  //
  //
  { "030100"  , C_ERROR,  "Node Gard - chicGetNodePowerGardStates error (rc=0x%02X)", "powr_power_up_state.C", "pup_gard()" }, // @007C
  { "0302"    , C_BOLD,   "Node Gard - Unit garded on power up (unit=0x%02X)", "powr_power_up_state.C", "pup_gard()"  }, // @007C
  { "0303"    , C_ERROR,  "Node Gard - All POWER nodes garded", "powr_power_up_state.C", "pup_gard()"  }, // @007C

  { "030400"  , C_ERROR,  "Node Gard - Unit 0x%02X not owned so not powered on", "powr_fsp_power_up_state.C", "BPCPrimaryRackClass::attemptCecPowerUp()" },
  { "030500"  , C_ERROR,  "Node Gard - Unit 0x%02X not found in the DPM data -- No power on attempted", "powr_fsp_power_up_state.C", "BPCPrimaryRackClass::attemptCecPowerUp()" },
  { "0306"    , C_BOLD,   "Node Gard - Octant No Power (rid: 0x%02X%02X)" },
  { "0307"    , C_BOLD,   "Node Gard - CPU No Power (rid: 0x%02X%02X)"    },
  { "0308"    , C_BOLD,   "Node Gard - Octant Fault Bit (rid: 0x%02X%02X)" },
  { "03100100", C_ERROR,  "POR - node found to be off after hot restart (unit 0x01)" },
  { "03100200", C_ERROR,  "POR - node found to be off after hot restart (unit 0x02)" },
  { "03100300", C_ERROR,  "POR - node found to be off after hot restart (unit 0x03)" },
  { "03100400", C_ERROR,  "POR - node found to be off after hot restart (unit 0x04)" },

  { "03**01"  , C_NORMAL, "CCM - OK to install port %02X" },
  { "03**02"  , C_NORMAL, "CCM - OK to remove port %02X" },
  { "03**03"  , C_NORMAL, "CCM - Install complete port %02X" },
  { "03**04"  , C_NORMAL, "CCM - Remove complete port %02X" },
  { "03**05"  , C_NORMAL, "CCM - Action incomplete port %02X" },
  { "03**08"  , C_NORMAL, "CCM - Blower powered off port %02X" },
  { "03**09"  , C_NORMAL, "CCM - Bulk powered off port %02X" },
  //
  { "0400"    , C_NORMAL, "Reg %02X present" },
  { "0401"    , C_NORMAL, "Reg %02X absent" },
  { "0402CC"  , C_NORMAL, "LSP %02X skip initialize" },
  { "0402**"  , C_NORMAL, "LSP %02X present" },
  { "0403"    , C_NORMAL, "LSP %02X absent" },
  { "0404"    , C_NORMAL, "Trays present 16-31 %02X%02X" },
  { "0405"    , C_NORMAL, "Trays present  0-15 %02X%02X" },
  { "0406"    , C_NORMAL, "Trays present 32-48 %02X%02X" },
  { "0410**"  , C_NORMAL, "Fan 0x%02X is present" },
  { "042000"  , C_NORMAL, "Drawer detection (is_only_one_unit=%d)", "powr_fsp_dev.C" },
  { "044000"  , C_ERROR,  "SPCN cable missing (port=%d)" },
  { "044001"  , C_NORMAL, "SPCN cable present (port=%d)" },
  { "044100"  , C_NORMAL, "UPIC cable present for connection card instance %d" },
  { "044101"  , C_ERROR,  "UPIC cable missing for connection card instance %d" },
  { "0442"    , C_ERROR,  "12Vcs pgood read (0x%02X) failed for connection card instance %d" },
  { "0443"    , C_NORMAL, "12Vcs pgood read (0x%02X) restored for connection card instance %d" },
  { "0444"    , C_ERROR,  "12V pgood read (0x%02X) failed for connection card instance %d" },
  { "0445"    , C_NORMAL, "12V pgood read (0x%02X) restored for connection card instance %d" },
  { "0446"    , C_WARNING,"i2c device path failover (using alt path = %d) for connection card instance %d" },
  { "0447"    , C_ERROR,  "i2c device failure (using alt path = %d) for connection card instance %d" },

  //
  { "0503"    , C_NORMAL, "CMD - IFD" },
  { "0504"    , C_NORMAL, "CMD - TNB mod %02X select %02X accepted" },
  { "0505"    , C_NORMAL, "Download Complete" },
  { "0506"    , C_NORMAL, "Pwr Cntl cec went from non-Squadrons to Squadrons" },
  { "0507"    , C_NORMAL, "Pwr Cntl cec went from Squadrons to non-Squadrons (Rack: 0x%02X%02X)" },
  //

  { "06000000", C_NORMAL, "AC Loss Active" },
  { "0601"    , C_NORMAL, "Start of discharge" },
  { "06020000", C_NORMAL, "BBU - Bypass A, not present" },
  { "06020001", C_NORMAL, "BBU - Bypass A, not charged" },
  { "06020002", C_NORMAL, "BBU - Bypass A, faulted" },
  { "06020003", C_NORMAL, "BBU - Bypass A, discharging" },
  { "06020004", C_NORMAL, "BBU - Bypass A, faulted bulk" },
  { "06030000", C_NORMAL, "BBU - Bypass B, not present" },
  { "06030001", C_NORMAL, "BBU - Bypass B, not charged" },
  { "06030002", C_NORMAL, "BBU - Bypass B, faulted" },
  { "06030003", C_NORMAL, "BBU - Bypass B, discharging" },
  { "06030004", C_NORMAL, "BBU - Bypass B, faulted bulk" },
  { "0604"    , C_NORMAL, "BBU - Patht Test Hi A, Vbus=0x%02X I=0x%02X" },
  { "0605"    , C_NORMAL, "BBU - Patht Test Hi B, Vbus=0x%02X I=0x%02X" },
  { "0606"    , C_NORMAL, "BBU - Path Test Lo A" },
  { "0607"    , C_NORMAL, "BBU - Path Test Lo B" },
  { "06090000", C_NORMAL, "BBU - Test aborted time=0" },
  { "06090001", C_ERROR,  "BBU - Path Test Hi BBU1 fail" },
  { "06090002", C_ERROR,  "BBU - Path Test Lo BBU1 fail" },
  { "06090003", C_ERROR,  "BBU - Path Test Hi BBU2 fail" },
  { "06090004", C_ERROR,  "BBU - Path Test Lo BBU2 fail" },
  { "0609"    , C_NORMAL, "BBU - Path Test" },
  { "060A"    , C_NORMAL, "BBU - Capacity Test started" },
  { "060B"    , C_NORMAL, "BBU - Restart enabled" },
  { "060C"    , C_NORMAL, "BBU - Restart disabled" },
  { "060D"    , C_NORMAL, "BBU - Survival time Med/Lo" },
  { "060E"    , C_NORMAL, "BBU - Test data EWS1/EAS" },
  { "060F"    , C_NORMAL, "BBU - Test data EWS2/EAS" },
  { "06E8"    , C_NORMAL, "BBU - SRC %02X%02X" },
  //
  { "0610**10", C_NORMAL, "PCR CSC cmd (rsvd=0x%02X, mod=0x%02X - iSeries)", "ibt_slave_cmd.c", "slave_csc_exec()" },
  { "0610"    , C_NORMAL, "PCR CSC cmd (rsvd=0x%02X, mod=0x%02X - pSeries)", "ibt_slave_cmd.c", "slave_csc_exec()" },
  { "0611"    , C_ERROR,  "BBU - Capacity test failed BBU1" },
  { "0612"    , C_ERROR,  "BBU - Capacity test failed BBU2" },
  { "0613"    , C_NORMAL, "BBU - Path test BBU1" },
  { "0614"    , C_NORMAL, "BBU - Path test BBU2" },
  { "061A"    , C_NORMAL, "BBU - VPD1=0x%02X VPD2=0x%02X" },
  { "061D"    , C_NORMAL, "BBU - Phase1 cap test (survival time: 0x%02%02)" },
  { "061E"    , C_NORMAL, "BBU - Phase1 cap test (elapsed amp: 0x%02X, sec: 0x%02)" },
  //
  { "0620"    , C_NORMAL, "BBU - CB Req Out" },
  { "06210000", C_NORMAL, "BBU - CB Req In inactive" },
  { "06210001", C_NORMAL, "BBU - CB Req In active" },
  { "06210002", C_NORMAL, "BBU - CB Req In timeout" },
  { "06210003", C_NORMAL, "BBU - CB Req In stuck active" },
  { "0622"    , C_NORMAL, "BBU - CPM test BBU survival limit" },
  { "0623"    , C_NORMAL, "BBU - CPM test BBU survival count" },
  { "062D"    , C_NORMAL, "BBU - Phase2 cap test (survival time: 0x%02%02)" },
  { "062E"    , C_NORMAL, "BBU - Phase2 cap test (elapsed amp: 0x%02X, sec: 0x%02)" },
  { "0630"    , C_NORMAL, "BBU - IPF lock set" },
  { "06310001", C_NORMAL, "BBU - AC losss cap test ph1" },
  { "06310002", C_NORMAL, "BBU - AC losss cap test ph1" },
  { "06310003", C_NORMAL, "BBU - AC losss cap test ph1" },
  { "0632"    , C_NORMAL, "BBU - Bbu volt < ph2 limit" },
  { "0633"    , C_NORMAL, "BBU - survival time > ph2 limit" },
  { "063D"    , C_NORMAL, "BBU - Phase3 cap test (survival time: 0x%02%02)" },
  { "063E"    , C_NORMAL, "BBU - Phase3 cap test (elapsed amp: 0x%02X, sec: 0x%02)" },
  { "0640"    , C_NORMAL, "AC restored" },
  { "0650"    , C_NORMAL, "BBB - Ext BBU test" },
  { "0660**"  , C_ERROR,  "Unknown RPC state %02X" },
  { "066100"  , C_ERROR,  "Invalid node type 0x%02X for RPC" },
  { "0662"    , C_NORMAL, "Ethernet UPS status update (old: 0x%02X, new: 0x%02X)" },
  { "0663"    , C_BOLD,   "RPC 0 UPS update (old: 0x%02X, new: 0x%02X)" },
  { "0664"    , C_BOLD,   "RPC 1 UPS update (old: 0x%02X, new: 0x%02X)" },
  { "0665"    , C_BOLD,   "Tower UPS status change (old: 0x%02X, new: 0x%02X)" },
  { "0666"    , C_ERROR,  "Unable to open USB UPS device (errno: 0x%02X)" },
  { "0667"    , C_BOLD,   "USB UPS status change (old: 0x%02X, new: 0x%02X)" },
  { "066801"  , C_BOLD,   "USB UPS device installed" },
  { "066800"  , C_BOLD,   "USB UPS device removed" },
  { "0669"    , C_WARNING,"USB UPS unknown event type (event: 0x%02X)" },
  { "0670"    , C_ERROR,  "USB UPS Monitor failed to read the device key from the registry" },
  { "06E8"    , C_NORMAL, "BBU SRC %02X%02X" },
  //
  { "070000"  , C_NORMAL, "slave pop trace" },
  { "07"      , C_NORMAL, "Dsp Mgr - SRC %02X502X" },
  { "08001F03", C_NORMAL, "Invalid MTMS data discovered" },
  { "08001F04", C_NORMAL, "Info SRC - FLT_LO_DPSS_PGOOD_LATCHED_EVENT" },
  { "08001F**", C_NORMAL, "Info SRC" },
  { "0800"    , C_WARNING, "DPSS drawer fault: 0x%02X%02X" },
  { "08000000", C_NORMAL, "CCM - Req rcvd from IOP" },
  { "08010000", C_NORMAL, "CCM - Req aborted" },
  { "0801"    , C_NORMAL, "CCM - Req IOPNUM %02X SCSI Dev %02X" },
  { "0900"    , C_NORMAL, "Side car detected" },
  //
  { "1000"    , C_NORMAL, "Power node fault trace" },
  { "1001"    , C_NORMAL, "Power node fault trace" },
  { "1002"    , C_NORMAL, "Power node fault trace" },
  { "1003"    , C_NORMAL, "Power node fault trace" },
  { "1004"    , C_NORMAL, "Power node fault trace (macnum=0x%02X, pnnum=0x%02X)", "powr_fsp_dev.C", "build_n_plus_1_fault_src()" },
  { "1005"    , C_NORMAL, "Power node fault trace" },
  { "1006"    , C_NORMAL, "Power node fault - domain fault (pdnum=0x%02X, pnnum=0x%02X)", "powr_fsp_dev.C", "power_fault_analysis()" },
  { "101000"  , C_NORMAL, "Fallout of op state (port=0x%02X)" },
  { "101100"  , C_NORMAL, "ROS1: Bulk (port=0x%02X)" },
  { "101101"  , C_NORMAL, "PCI Reg (port=0x%02X)" },
  { "101102"  , C_NORMAL, "ROS2: PRG Reg (port=0x%02X)" },
  { "101103"  , C_NORMAL, "ROS2: Proc Reg (port=0x%02X)" },
  { "101104"  , C_NORMAL, "ROS2: Entry PS (port=0x%02X)" },
  { "101105"  , C_NORMAL, "ROS2: Condor Battery Backup (port=0x%02X)" },
  { "101106"  , C_NORMAL, "ROS3: Regatta PS (port=0x%02X)" },
  { "101108"  , C_WARNING,"ROS4: Default PS (port=0x%02X)", "powr_fsp_dev.C", "power_node_vpd_check()" },
  { "101113"  , C_NORMAL, "vpd trace (port=0x%02X)" },
  { "101114"  , C_NORMAL, "CPN (port=0x%02X)" },
  { "101116"  , C_NORMAL, "Regatta Mi ps VPD trace port %02X" },
  { "101143"  , C_NORMAL, "Proc Reg (port=0x%02X)" },
  { "101133"  , C_NORMAL, "Proc Reg (port=0x%02X)" },
  { "101183"  , C_NORMAL, "PS/Reg (port=0x%02X)" },
  { "101123"  , C_NORMAL, "PS/Reg (port=0x%02X)" },
  { "101126"  , C_NORMAL, "Regatta LE ps VPD trace port %02X" },
  { "101118"  , C_NORMAL, "SF2 PS (port=0x%02X)" },
  { "101119"  , C_NORMAL, "Regulator (port=0x%02X)" },
  { "101118"  , C_NORMAL, "Sq SF2 850W PS (port=0x%02X)", "powr_fsp_dev.C", "power_node_vpd_check()" },
  { "101128"  , C_NORMAL, "Sq L4 PS (port=0x%02X)", "powr_fsp_dev.C", "power_node_vpd_check()" },
  { "101138"  , C_NORMAL, "Sq SF4 PS (port=0x%02X)", "powr_fsp_dev.C", "power_node_vpd_check()" },
  { "101148"  , C_NORMAL, "Sq SF2 700W PS (port=0x%02X)", "powr_fsp_dev.C", "power_node_vpd_check()" },
  { "1011"    , C_NORMAL, "VPD trace (node_vpd=0x%02X, pnnum=0x%02X)", "powr_fsp_dev.C", "power_node_vpd_check()" }, // DevRos Appendix B
  { "1012"    , C_NORMAL, "Domain state port %02X" },
  { "101306"  , C_NORMAL, "PNBC - CDF rls led ctrl" },
  { "101311"  , C_NORMAL, "PNBC - CDF power on port %02X" },
  { "101326"  , C_NORMAL, "PNBC - CDF fan hi speed" },
  { "101336"  , C_NORMAL, "PNBC - CDF fan lo speed" },
  { "1013"    , C_NORMAL, "PNBC - wrong state port %02X" },
  { "1014"    , C_NORMAL, "AC loss (pdnum=0x%02X, pnnum=0x%02X)", "powr_fsp_dev.C", "vsource_fault_handler()" },
  { "1015"    , C_NORMAL, "pncrit called" },
  { "1016"    , C_NORMAL, "PNBC trace - CDF mod %02X pci %02X" },
  { "1017"    , C_ERROR,  "Comm fail (network_rsp_status=0x%02X, port 0x%02x)", "powr_fsp_dev.C", "power_node_init_fault_handler(),power_domain_on()"},
  { "1018"    , C_NORMAL, "Domain fault" },
  { "1019"    , C_NORMAL, "Cross domain analysis" },
  { "101B00"  , C_NORMAL, "PS - 12Vaux Fault detected (pnnum=0x%02X)" },
  { "101C"    , C_NORMAL, "PS - Temperature Fault detected. PSU fan fault bit = %x   (pnnum=0x%02X)" },
  { "101D"    , C_NORMAL, "PS - Other Power Supply Fault. Unknown=%x (pnnum=0x%02X)" },
  { "101E"    , C_WARNING,"PS - PS ucode cleared Input Fault bit without our sending of the CLEAR_FAULTS command (pnnum=0x%02X)" },
  { "101F"    , C_NORMAL, "Last PS voltage reading = 0x%02X%02X" }, // @010A
  { "1021"    , C_NORMAL, "CML other comm fault" },
  { "1022"    , C_NORMAL, "Non-zero PS voltage reading = 0x%02X%02X" },
  { "1030"    , C_NORMAL, "Power node fault trace", "powr_fsp_dev.C", "build_n_plus_1_fault_src()" },
  { "10400000", C_ERROR,  "Pwr node xmit buffer overflow" },
  { "1045"    , C_NORMAL, "PS Idle mode enabled (device id: 0x%02X, PS: %d)" },
  { "1046"    , C_ERROR,  "PS Idle mode cmd failed (rc: %d, PS: %d)" },
  { "1050"    , C_NORMAL, "EPOW redundant cpn present (port=0x%02X)" },
  { "1051"    , C_NORMAL, "EPOW non-redundant cfg" },
  { "1062"    , C_NORMAL, "Voltage adjust - WDI sent" },
  { "1063**01", C_NORMAL, "VRM Voltage adjust success"},
  { "1063**FF", C_ERROR,  "VRM Voltage adjust fail"},
  { "1063"    , C_NORMAL, "VRM Voltage adjust"},
  //{ "1063"    , C_NORMAL, "Voltage adjust - PU index"
  { "1064",     C_NORMAL, "REG Voltage adjust request (drawer=0x%02X, index=0x%02X)", "powr_fsp_dev.C", "voltage_adjust_state(),voltage_adjust()" },
  { "1065",     C_NORMAL, "REG Voltage adjust queued (drawer=0x%02X, pnnum=0x%02X)", "powr_fsp_dev.C", "voltage_adjust_state(),voltage_adjust()" },
  //{ "1065"    , C_NORMAL, "Voltage adjust - WDD sent" },
  { "10660002", C_ERROR,  "wdd pntb full, single node" },
  { "10660003", C_ERROR,  "wdd pntb full, multi-node" },
  { "1066",     C_ERROR,  "wdd pntb full" },
  { "1067",     C_ERROR,  "Voltage Adjust retry (pnnum=0x%02X, adjust_state=0x%02X)" },
  { "1068",     C_NORMAL, "Regulator volt_adjust request (drawer=0x%02X, proc1volt=0x%02X)", "powr_fsp_dev.C", "voltage_adjust()" },
  { "1069",     C_ERROR,  "Regulator volt_adjust request (drawer=0x%02X, proc2volt=0x%02X)" },
  { "106C"    , C_NORMAL, "logic vid trace (proc_rid=0x%02x, vid=0x%02X)" },
  { "106D"    , C_NORMAL, "cache vid trace (proc_rid=0x%02x, vid=0x%02X)" },
  { "106E"    , C_NORMAL, "default logic ps vid trace (proc_rid=0x%02x, vid=0x%02X)" },
  { "106F"    , C_NORMAL, "default cache ps vid trace (proc_rid=0x%02x, vid=0x%02X)" },
  { "1070"    , C_NORMAL, "Sig prep node fault (bytenum=0x%02X, addr=0x%02X)" },
  { "1071"    , C_NORMAL, "Sig prep node fault (bytenum=0x%02X, addr=0x%02X)" },
  { "1072"    , C_NORMAL, "Sig prep drawer fault (bytenum=0x%02X, addr=0x%02X)" },
  { "1073"    , C_NORMAL, "Sig prep drawer fault (bytenum=0x%02X, addr=0x%02X)" },
  { "1074"    , C_NORMAL, "0 tach reading from PS (pnnum=0x%02X, poll status=0x%02X)" },
  { "107500"  , C_ERROR,  "Error writing dev select for broadcast (base_gpio=0x%02X)" },
  { "107501"  , C_ERROR,  "Error reading dev select for broadcast (base_gpio=0x%02X)" },
  { "107502"  , C_ERROR,  "Error writing dev select for drawer broadcast (base_gpio=0x%02X)" },
  { "107503"  , C_ERROR,  "Error reading dev select for drawer broadcast (base_gpio=0x%02X)" },
  { "107504"  , C_ERROR,  "Error writing dev select for device (base_gpio=0x%02X)" },
  { "107505"  , C_ERROR,  "Error reading dev select for device (base_gpio=0x%02X)" },
  { "1080"    , C_ERROR,  "VRM Voltage adjust timeout (present state prohibits)", "powr_fsp_pwrsave.C", "vadj_director_L4(),vadj_director_HV()" },
  { "1081"    , C_ERROR,  "VRM Voltage adjust critical fault in a drawer", "powr_fsp_pwrsave.C", "vadj_director_L4(),vadj_director_HV()" },
  { "1082"    , C_ERROR,  "VRM Voltage adjust non-power fault (L4:pnnum/HV:vrm_rid=0x%02X)", "powr_fsp_pwrsave.C", "vadj_director_L4(),vadj_director_HV()" },
  { "1083"    , C_ERROR,  "VRM Voltage adjust retry i2c cmd (vrm_rid=0x%02X)", "powr_fsp_pwrsave.C", "vadj_director_HV()" },
  { "1084"    , C_ERROR,  "VRM Voltage adjust verify failure (vrm_rid=0x%02X%02X)", "powr_fsp_pwrsave.C", "verify_voltage()" },
  { "1085"    , C_ERROR,  "VRM read failed (vrm_rid=0x%02X%02X)","powr_fsp_pwrsave.C", "vadjust_determine_step()" },
  { "1086"    , C_ERROR,  "Bad fvmin vpd (unit:%d, card:%d)","powr_fsp_pwrsave.C", "interpolate_pwr_save_voltage()" },
  { "1090"    , C_ERROR,  "poll_check_count exceeded (pnnum=0x%02X, adjust_state=0x%02X)" },
  { "1091"    , C_NORMAL, "wdd queued (pnnum=0x%02X, adjust_state=0x%02X)" },
  { "1092"    , C_NORMAL, "voltage_index trace, single reg adjust (drawer=0x%02X, index=0x%02X)" },
  { "1093"    , C_NORMAL, "tx type for serial mux setup (pnnum=0x%02X, lsp tx type=0x%02X)" },
  { "1094"    , C_NORMAL, "sending wdd (pnnum=0x%02X, adjust_state=0x%02X)" },
  { "1095"    , C_ERROR,  "poll_check_count exceeded (rsp status=0x%02X, comm_fail=0x%02X)" },
  { "1096"    , C_NORMAL, "voltage_index trace, single drawer adjust (drawer=0x%02X, index=0x%02X)" },
  { "1097"    , C_NORMAL, "voltage_index trace, full system adjust (drawer=0x%02X, index=0x%02X)" },
  { "10B0"    , C_NORMAL, "PS deep poll (status_word_high=0x%02X, status_word_low=0x%02X)" },
  { "10B1"    , C_NORMAL, "PS deep poll (status_mfr_specific=0x%02X, status_cml=0x%02X)" },


  //{ "1093"    , C_ERROR,  "RI Keyword Not Found", "powr_i2c_dev.C", "process_misc_vpd()" },
  //{ "1094"    , C_ERROR,  "FL Keyword Not Found", "powr_i2c_dev.C", "process_misc_vpd()" },
  //{ "1095"    , C_ERROR,  "FL Keyword Tag 79 Not Found", "powr_i2c_dev.C", "process_misc_vpd()" },
  //{ "1096"    , C_ERROR,  "FL Keyword Tag 78 Not Found", "powr_i2c_dev.C", "process_misc_vpd()" },
  //
  { "1100**10", C_NORMAL, "PNL - PSX Power Incomplete no alert (pwr_new=0x%02X, sts_new=0x%02X)", "powr_fsp_panel.C", "power_status_alert_proc()" },
  { "1100"    , C_NORMAL, "PNL - PSX no alert (pwr_new=0x%02X, sts_new=0x%02X)", "powr_fsp_panel.C", "power_status_alert_proc()" },
  { "1101**80", C_BOLD,   "PNL - PSX Config Change alert (pwr_new=0x%02X, sts_new=0x%02X)", "powr_fsp_panel.C", "power_status_alert_proc()" },
  { "1101**90", C_BOLD,   "PNL - PSX Config Change/Power Incomplete alert (pwr_new=0x%02X, sts_new=0x%02X)", "powr_fsp_panel.C", "power_status_alert_proc()" },
  { "1101"    , C_BOLD,   "PNL - PSX alert (pwr_new=0x%02X, sts_new=0x%02X)", "powr_fsp_panel.C", "power_status_alert_proc()" },
  { "11020501", C_NORMAL, "PNL - I2C lock (SIC mod 5)", "powr_fsp_panel.C", "PanelInterfaceClass::panelCmdSic()" },
  { "110205FF", C_NORMAL, "PNL - I2C lock requested - busy (SIC mod 5)", "powr_fsp_panel.C", "PanelInterfaceClass::panelCmdSic()" },
  { "11020600", C_NORMAL, "PNL - release I2C lock (SIC mod 6)", "powr_fsp_panel.C", "PanelInterfaceClass::panelCmdSic()" },
  { "11020700", C_NORMAL, "PNL - release I2C lock, init sw (SIC mod 7)", "powr_fsp_panel.C", "PanelInterfaceClass::panelCmdSic()" },
  { "1102"    , C_NORMAL, "PNL - SIC mod %d (SW_LOCK=0x%02X)", "powr_fsp_panel.C", "PanelInterfaceClass::panelCmdSic" },
  { "1103"    , C_NORMAL, "PNL - PCD mod 00 trace" },
  { "110404"  , C_BOLD,   "PNL - PCR mod 4 - SERIAL_PWR_ON", "powr_fsp_panel.C", "PanelInterfaceClass::panelCmdPcr()" },
  { "110405"  , C_NORMAL, "PNL - PCR mod 5 - QUERY_CPM_STATUS", "powr_fsp_panel.C", "PanelInterfaceClass::panelCmdPcr()" },
  { "110406"  , C_BOLD,   "PNL - PCR mod 6 - SERIAL_PWR_OFF", "powr_fsp_panel.C", "PanelInterfaceClass::panelCmdPcr()" },
  { "1104"    , C_NORMAL, "PNL - PCR mod %d (rsvd=0x%02X)", "powr_fsp_panel.C", "PanelInterfaceClass::panelCmdPcr()" },
  { "11050000", C_NORMAL, "PNL - Excess bytes", "powr_fsp_panel.C", "PanelInterfaceClass::panelCmdHandler()" },
  { "11060000", C_NORMAL, "PNL - Buffer overrun" },
  { "1107"    , C_ERROR,  "PNL - Panel Ack fail (cmd=0x%02X, status=0x%02X", "powr_fsp_panel.C", "PanelInterfaceClass::panelProcessAck()" },
  { "1108"    , C_NORMAL, "PNL - PFR mod %d (subcmd=0x%02X)", "powr_fsp_panel.C", "PanelInterfaceClass::panelCmdPfr()" },
  { "1109"    , C_NORMAL, "PNL - TMS command" },
  { "110A"    , C_NORMAL, "PNL - Reset Reload ABT rcvd (mod=0x%02X)", "powr_fsp_panel.C", "PanelInterfaceClass::panelCmdAbt()" },
  { "110B"    , C_ERROR,  "PNL - Invalid PFR state (pfr_state=0x%02X,subcmd=0x%02X)", "powr_fsp_panel.C", "PanelInterfaceClass::pfrState37()" },
  { "110C"    , C_ERROR,  "PNL - Target Failure", "powr_fsp_panel.C", "PanelInterfaceClass::" },
  { "1110"    , C_BOLD,   "PNL - Alert suppressed (status_old=0x%02X, status_new=0x%02X)", "powr_fsp_panel.C", "power_status_alert_proc()" },
  { "1112"    , C_NORMAL, "PNL - (G_pci_state=%d, G_spcn_state=%d)", "powr_fsp_panel.C", "PanelInterfaceClass::panelCmdSic()" },
  { "1120**01", C_NORMAL, "PNL - PSX alert (global_new: 0x%02X, EPOW REASON: 0x%02X - UPS status)" },
  { "1120"    , C_NORMAL, "PNL - PSX alert (global_new: 0x%02X, EPOW REASON: 0x%02X)"},
  { "1161"    , C_NORMAL, "PNL - RIC rcvd I2C targ %02X" },
  { "1117"    , C_NORMAL, "PNL - WIC sent I2C targ %02X" },
  //
  { "1200"    , C_NORMAL, "Fan trace - status %02X" },
  { "1201"    , C_NORMAL, "Fan trace - panel CCM cmd no-op'd" },
  { "1220FFFF", C_NORMAL, "EPOW disabled, no valid temp sensors" },
  { "1220"    , C_NORMAL, "EPOW enabled for RID 0x%02X%02X" },
  { "1230"    , C_NORMAL, "Read ambient temperature limits in def file (epow3_limit 0x%02X, epow4_limit 0x%02X)" },
  { "1231"    , C_NORMAL, "Read performance loss limits in def file (ambient_max_limit 0x%02X, ambient_max_reset 0x%02X)" },
  { "1232"    , C_NORMAL, "Read altitude limits in def file (altitude_max_limit 0x%02X%02X )" },
  { "1233"    , C_NORMAL, "Read NEBS ambient temperature limits in def file (epow3_limit 0x%02X, epow4_limit 0x%02X)" },
  { "1234"    , C_ERROR , "Read ambient temperature limits failed, using default hardcoded values (epow3_limit 0x%02X, epow4_limit 0x%02X)" },

  { "1263"    , C_ERROR,  "Mack Fans: redundant path missing", "powrFanck.C", "FanMack::validateRedundantGpioPath()" },

  { "1276"    , C_ERROR,  "Fan faulted with RPM reading of 0x%02X%02X" },

  { "1280"    , C_ERROR,  "Shorted (stuck) fan (idx: 0x%02X, tpmf_ctrl: 0x%02X)" },
  { "1281"    , C_NORMAL, "Requested RPM of shorted fan (tpmf_speed: 0x%02X%02X)" },
  { "1282"    , C_NORMAL, "RPM reading of shorted fan (tach: 0x%02X%02X)" },

  { "12A0**"  , C_ERROR,  "Fan trace - Sensor 0x%02X faulted", "powr_fsp_fans.C", "am_error()" },
  { "12A1**"  , C_ERROR,  "Redundant Sensor 0x%02X faulted", "powr_fsp_fans.C", "am_error()" },
  { "12A2"    , C_NORMAL, "power efficient fan cntrl ON (fan %d, tpmf_ctrl %d)" },
  { "12A3"    , C_NORMAL, "power efficient fan cntrl OFF (fan %d, tpmf_ctrl %d)" },
  { "12A4"    , C_NORMAL, "power efficient fan cntrl timeout" },

  { "12AE"    , C_NORMAL, "Fan cntrl temp trace (index: %d, temp: %d)", "powr_fsp_fans.C", "epow_monitor()" },
  { "12FF00"  , C_NORMAL, "Fan %02X presence glitch reading", "powrSpcnFan.C"},

  //B
  { "1301"    , C_ERROR,  "I2C lost arbitration" },
  { "1302"    , C_ERROR,  "I2C timeout" },
  { "1303"    , C_ERROR,  "I2C transmit queue full" },
  { "1304"    , C_NORMAL, "I2C addressed as slave" },
  { "1306"    , C_ERROR,  "I2C slave no ack (state|port=0x%02X, status=0x%02X)" },
  { "1307"    , C_ERROR,  "I2C slave nack data" },
  { "1309"    , C_ERROR,  "I2C bus error (state=0x%02X, port S1=0x%02X)" },
  { "130A"    , C_ERROR,  "I2C Spurious Int (engine=0x%02X, status=0x%02X)" },
  { "130B"    , C_ERROR,  "I2C port fail (port=%d, resv=0x%02X)" },
  { "130C"    , C_ERROR,  "I2C target fail (port=%d, tgt_addr=0x%02X)" },
  { "130D"    , C_ERROR,  "I2C bus busy (state=0x%02X, port S1=0x%02X)" },
  { "130E"    , C_ERROR,  "I2C bus reset (state=0x%02X, port=0x%02X)" },
  { "1316"    , C_ERROR,  "I2C slave no ack info (engine=0x%02X, addr=0x%02X)", "ibt_i2c.c" },
  { "13A00000", C_ERROR,  "I2C bad nvs count" },
  { "13A0**01", C_NORMAL, "I2C winnippeg (lock_fd=0x%02X, rc=0x%02X (success))", "powr_fsp_vpd_monitor.C", "winnipeg_I2C_manager()" },
  { "13A0"    , C_ERROR,  "I2C winnippeg (lock_fd=0x%02X, rc=0x%02X)", "powr_fsp_vpd_monitor.C", "winnipeg_I2C_manager()" },
  { "13A10000", C_ERROR,  "I2C bad nvs cfg id" },
  { "13A1"    , C_NORMAL, "I2C winnipeg (port=0x%02X, addr=0x%02X)", "powr_fsp_vpd_monitor.C", "winnipeg_I2C_manager()" },
  { "13A20000", C_ERROR,  "I2C bad san status" },
  { "13A2"    , C_NORMAL, "I2C (unit=0x%02X,pci state=0x%02X)", "powr_fsp_vpd_monitor.C", "winnipeg_I2C_manager()" },
  { "13AF0000", C_ERROR,  "I2C bad nvs power dn complete" },
  { "13AF"    , C_NORMAL, "I2C winnipeg (lock_fd=0x%02X, addr=0x%02X)", "powr_fsp_vpd_monitor.C", "winnipeg_I2C_manager()" },
  { "13FF"    , C_NORMAL, "I2C winnipeg (port=0x%02X, addr=0x%02X)", "powr_fsp_vpd_monitor.C", "winnipeg_I2C_manager()" },
  //
  { "1410"    , C_NORMAL, "DPSS interrupt - I2C_INT_MASK reg, 0x%02X I2C_INT reg, 0x%02X" },
  { "1411D00A", C_ERROR,  "DPSS PSEQ_CTRL register read failed" },
  { "1411D00B", C_ERROR,  "DPSS PSEQ_CTRL register write failed" },
  { "1411"    , C_ERROR,  "DPSS PSEQ_CTRL register read/write failed" },
  { "1412"    , C_ERROR,  "DPSS power sequence fault, faultHi=0x%02X, faultLo=0x%02X" },
  { "1413D00A", C_ERROR,  "DPSS SOFT_PGOOD register read failed" },
  { "1413D00B", C_ERROR,  "DPSS SOFT_PGOOD register write failed" },
  { "1413"    , C_ERROR,  "DPSS SOFT_PGOOD register read/write failed" },
  { "1414D00A", C_ERROR,  "DPSS DEGATE_CPU register read failed" },
  { "1414D00B", C_ERROR,  "DPSS DEGATE_CPU register write failed" },
  { "1414"    , C_ERROR,  "DPSS DEGATE_CPU register read/write failed" },
  { "1415D00A", C_ERROR,  "DPSS DEGATE_INT register read failed" },
  { "1415D00B", C_ERROR,  "DPSS DEGATE_INT register write failed" },
  { "1415"    , C_ERROR,  "DPSS DEGATE_INT register write failed" },
  { "1416"    , C_ERROR,  "DPSS RESETS_OUT register read failed" },
  { "1417"    , C_ERROR,  "DPSS power sequence timeout, faultHi=0x%02X, faultLo=0x%02X" },
  { "1418"    , C_ERROR,  "DPSS PGOOD_STATUS_IN register read failed" },
  { "141A"    , C_ERROR,  "DPSS PGOOD_LATCHED register read failed" },
  { "1420"    , C_ERROR,  "DPSS primary power-on failed, faultHi=0x%02X, faultLo=0x%02X" },
  { "1422"    , C_ERROR,  "DPSS secondary power-on failed, faultHi=0x%02X, faultLo=0x%02X" },
  { "1424"    , C_ERROR,  "DPSS secondary power-off failed, faultHi=0x%02X, faultLo=0x%02X" },
  { "1426"    , C_ERROR,  "DPSS power-off failed, faultHi=0x%02X, faultLo=0x%02X" },
  { "1428"    , C_NORMAL, "DPSS pgood fault delay started" },
  { "1429"    , C_NORMAL, "DPSS pgood fault delay ended" },
  { "142A"    , C_ERROR,  "DPSS DELAY_CPU register write failed" },
  { "142B"    , C_ERROR,  "DPSS DELAY_IO register write failed" },
  { "142C"    , C_ERROR,  "DPSS INVERT_RESETS register write failed" },
  { "142D"    , C_ERROR,  "DPSS PRIMARY_DELAY register write failed" },
  { "142E"    , C_ERROR,  "DPSS SEC_DELAY register write failed" },
  { "142F"    , C_ERROR,  "DPSS SEC_SEQ register write failed" },
  { "1430"    , C_ERROR,  "DPSS FAULT_DELAY register write failed" },
  { "1431"    , C_ERROR,  "DPSS NUM_PS register write failed" },
  { "1432"    , C_ERROR,  "DPSS PGOOD_ENABLE register write failed" },
  { "1433"    , C_ERROR,  "DPSS ENABLE_HOLD register write failed" },
  { "1434"    , C_ERROR,  "DPSS SLIDING_INDEX register write failed" },
  { "1435"    , C_ERROR,  "DPSS I2C_INT_MASK register write failed" },
  { "1436"    , C_ERROR,  "DPSS PSEQ_SLOT register write failed" },
  { "1437"    , C_ERROR,  "DPSS PG_INVERSION register write failed" },
  { "1438"    , C_ERROR,  "DPSS EN_OD_SEL register write failed" },
  { "1439"    , C_ERROR,  "DPSS PGOOD_MASK register write failed" },
  { "143A"    , C_ERROR,  "DPSS DEGATE_IO register write failed" },
  { "143B"    , C_ERROR,  "DPSS PGOOD SLOT fault, faultHi=0x%02X, faultLo=0x%02X" },
  { "143C"    , C_ERROR,  "DPSS RESETS_OUT fault" },
  { "143D"    , C_ERROR,  "DPSS Power Sequence logic problem" },
  { "143E"    , C_ERROR,  "DPSS PS PGOOD fault, faultHi=0x%02X, faultLo=0x%02X" },
  { "143F"    , C_NORMAL, "DPSS PGOOD_LATCHED_0/1 regs, 0x%02X 0x%02X" },
  { "1440"    , C_NORMAL, "DPSS PGOOD_LATCHED_2/3 regs, 0x%02X 0x%02X" },
  { "1441"    , C_NORMAL, "DPSS SOFT_PGOOD/RESETS_OUT regs, 0x%02X 0x%02X" },
  { "1442"    , C_NORMAL, "DPSS PGOOD_STATUS_IN_0/1 0x%02X 0x%02X" },
  { "1443"    , C_NORMAL, "DPSS PGOOD_STATUS_IN_2/3 0x%02X 0x%02X" },
  { "1444"    , C_ERROR,  "DPSS Fan logic problem" },
  { "1445D00A", C_ERROR,  "DPSS FAN_PWM_DELAY register read failed" },
  { "1445D00B", C_ERROR,  "DPSS FAN_PWM_DELAY register write failed" },
  { "1445"    , C_ERROR,  "DPSS FAN_PWM_DELAY register read/write failed" },
  { "1446D00A", C_ERROR,  "DPSS FAN_PWM_STEP register read failed" },
  { "1446D00B", C_ERROR,  "DPSS FAN_PWM_STEP register write failed" },
  { "1446"    , C_ERROR,  "DPSS FAN_PWM_STEP register read/write failed" },
  { "1447D00A", C_ERROR,  "DPSS FAN_MODE register read failed" },
  { "1447D00B", C_ERROR,  "DPSS FAN_MODE register write failed" },
  { "1447"    , C_ERROR,  "DPSS FAN_MODE register read/write failed" },
  { "1448D00A", C_ERROR,  "DPSS FAN_MAN_MODE register read failed" },
  { "1448D00B", C_ERROR,  "DPSS FAN_MAN_MODE register write failed" },
  { "1448"    , C_ERROR,  "DPSS FAN_MAN_MODE register read/write failed" },
  { "1449D00A", C_ERROR,  "DPSS FAN_I2C_FFS register read failed" },
  { "1449D00B", C_ERROR,  "DPSS FAN_I2C_FFS register write failed" },
  { "1449"    , C_ERROR,  "DPSS FAN_I2C_FFS register read/write failed" },
  { "144AD00A", C_ERROR,  "DPSS FAN_WARNING_CNT register read failed" },
  { "144AD00B", C_ERROR,  "DPSS FAN_WARNING_CNT register write failed" },
  { "144A"    , C_ERROR,  "DPSS FAN_WARNING_CNT register read/write failed" },
  { "144BD00A", C_ERROR,  "DPSS FAN_WDT_END_COUNT register read failed" },
  { "144BD00B", C_ERROR,  "DPSS FAN_WDT_END_COUNT register write failed" },
  { "144B"    , C_ERROR,  "DPSS FAN_WDT_END_COUNT register read/write failed" },
  { "144CD00A", C_ERROR,  "DPSS FAN_TYPE_SEL register read failed" },
  { "144CD00B", C_ERROR,  "DPSS FAN_TYPE_SEL register write failed" },
  { "144C"    , C_ERROR,  "DPSS FAN_TYPE_SEL register read/write failed" },
  { "144DD00A", C_ERROR,  "DPSS FAN_DOMAIN register read failed" },
  { "144DD00B", C_ERROR,  "DPSS FAN_DOMAIN register write failed" },
  { "144D"    , C_ERROR,  "DPSS FAN_DOMAIN register read/write failed" },
  { "144ED00A", C_ERROR,  "DPSS FAN_MASK register read failed" },
  { "144ED00B", C_ERROR,  "DPSS FAN_MASK register write failed" },
  { "144E"    , C_ERROR,  "DPSS FAN_MASK register read/write failed" },
  { "144FD00A", C_ERROR,  "DPSS FAN_MIN_PWM register read failed" },
  { "144FD00B", C_ERROR,  "DPSS FAN_MIN_PWM register write failed" },
  { "144F"    , C_ERROR,  "DPSS FAN_MIN_PWM register read/write failed" },
  { "1450D00A", C_ERROR,  "DPSS FAN_MAX_PWM register read failed" },
  { "1450D00B", C_ERROR,  "DPSS FAN_MAX_PWM register write failed" },
  { "1450"    , C_ERROR,  "DPSS FAN_MAX_PWM register read/write failed" },
  { "1451D00A", C_ERROR,  "DPSS FAN_PPR register read failed" },
  { "1451D00B", C_ERROR,  "DPSS FAN_PPR register write failed" },
  { "1451"    , C_ERROR,  "DPSS FAN_PPR register read/write failed" },
  { "1452D00A", C_ERROR,  "DPSS FAN_HYST register read failed" },
  { "1452D00B", C_ERROR,  "DPSS FAN_HYST register write failed" },
  { "1452"    , C_ERROR,  "DPSS FAN_HYST register read/write failed" },
  { "1453D00A", C_ERROR,  "DPSS FAN_MAX_SPEED register read failed" },
  { "1453D00B", C_ERROR,  "DPSS FAN_MAX_SPEED register write failed" },
  { "1453"    , C_ERROR,  "DPSS FAN_MAX_SPEED register read/write failed" },
  { "1454D00A", C_ERROR,  "DPSS FAN_TACH_SET register read failed" },
  { "1454D00B", C_ERROR,  "DPSS FAN_TACH_SET register write failed" },
  { "1454"    , C_ERROR,  "DPSS FAN_TACH_SET register read/write failed" },
  { "1455D00A", C_ERROR,  "DPSS FAN_WDT_RESET register read failed" },
  { "1455D00B", C_ERROR,  "DPSS FAN_WDT_RESET register write failed" },
  { "1455"    , C_ERROR,  "DPSS FAN_WDT_RESET register read/write failed" },
  { "1456D00A", C_ERROR,  "DPSS FAN_PWM_DUTY_CYCLE register read failed" },
  { "1456D00B", C_ERROR,  "DPSS FAN_PWM_DUTY_CYCLE register write failed" },
  { "1456"    , C_ERROR,  "DPSS FAN_PWM_DUTY_CYCLE register read/write failed" },
  { "1457D00A", C_ERROR,  "DPSS FAN_SPEED register read failed" },
  { "1457D00B", C_ERROR,  "DPSS FAN_SPEED register write failed" },
  { "1457"    , C_ERROR,  "DPSS FAN_SPEED register read/write failed" },
  { "1458D00A", C_ERROR,  "DPSS FAN_FFS_CH register read failed" },
  { "1458D00B", C_ERROR,  "DPSS FAN_FFS_CH register write failed" },
  { "1458"    , C_ERROR,  "DPSS FAN_FFS_CH register read/write failed" },
  { "1459D00A", C_ERROR,  "DPSS FAN_ERRORS register read failed" },
  { "1459D00B", C_ERROR,  "DPSS FAN_ERRORS register write failed" },
  { "1459"    , C_ERROR,  "DPSS FAN_ERRORS register read/write failed" },
  { "145AD00A", C_ERROR,  "DPSS FAN_PRESENCE register read failed" },
  { "145AD00B", C_ERROR,  "DPSS FAN_PRESENCE register write failed" },
  { "145A"    , C_ERROR,  "DPSS FAN_PRESENCE register read/write failed" },
  { "145B"    , C_NORMAL, "DPSS PGOOD_LATCHED_0/1 saved value, 0x%02X 0x%02X" },
  { "145C"    , C_NORMAL, "DPSS PGOOD_LATCHED_2/3 saved value, 0x%02X 0x%02X" },
  { "145D**"  , C_NORMAL, "DPSS RESETS_OUT saved value, 0x%02X 0x%02X" },
  { "145E"    , C_NORMAL, "DPSS GPIO_IN register read failed" },
  { "145F"    , C_NORMAL, "DPSS GPIO_IN0/1 regs, 0x%02X 0x%02X" },
  { "1460"    , C_NORMAL, "DPSS GPIO_IN2/3 regs, 0x%02X 0x%02X" },
  { "1461"    , C_NORMAL, "DPSS GPIO_IN4/5 regs, 0x%02X 0x%02X" },
  { "1462"    , C_NORMAL, "DPSS init_b=0x%02X, done=0x%02X" },
  //
  { "1500"    , C_NORMAL, "ses entry found" },
  { "1501"    , C_NORMAL, "ses entry written" },
  { "1503"    , C_NORMAL, "Cmd - SAN IFD" },
  { "1504"    , C_NORMAL, "ses map blank label" },
  { "1505"    , C_NORMAL, "San Download Complete" },
  { "1510"    , C_ERROR,  "ses addr reset failed" },
  { "1511"    , C_ERROR,  "ses vpd read failed" },
  { "1512"    , C_ERROR,  "ses vpd write failed" },
  { "1513"    , C_ERROR,  "ses vpd readback failed" },
  { "1514"    , C_ERROR,  "ses addr reset 2 failed" },
  { "1516"    , C_ERROR,  "ses vpd page invalid" },
  { "1517"    , C_ERROR,  "ses vpd tag 82 not found" },
  { "1518"    , C_ERROR,  "ses vpd tag 84 not found" },
  { "1519"    , C_ERROR,  "ses vpd tag SM not found" },
  { "151A"    , C_ERROR,  "ses vpd tag FL not found" },
  { "151B"    , C_ERROR,  "ses vpd tag FI not found" },
  { "151C"    , C_ERROR,  "ses vpd tag 79 not found" },
  { "151D"    , C_ERROR,  "ses slot map invalid" },
  { "1520"    , C_NORMAL, "pci entry found" },
  { "1521"    , C_NORMAL, "pci read second half of vpd" },
  { "1522"    , C_NORMAL, "pci spcnum init complete" },
  { "1523"    , C_NORMAL, "pci spcnum readback match (subclass=0x%02x,addr=0x%02X)", "powr_fsp_vpd_monitor.C", "pci_vpd()" },
  { "1525"    , C_NORMAL, "Speedwagon EPOW queued" },
  { "152A"    , C_NORMAL, "I2C lock set" },
  { "152B"    , C_NORMAL, "I2C lock cleared" },
  { "152C"    , C_NORMAL, "I2C lock granted", "powr_i2c_dev.C", "speedwagon_abort_and_lock()" },
  { "1530"    , C_ERROR,  "pci spcnum init failed (addr=0x%02x,rc=0x%02X)", "powr_fsp_vpd_monitor.C", "pci_vpd()" },
  { "1531"    , C_ERROR,  "pci 1st vpd read failed" },
  { "1532"    , C_ERROR,  "pci 2nd vpd read failed" },
  { "1533"    , C_ERROR,  "pci vpd write failed" },
  { "1534"    , C_ERROR,  "pci spcnum write failed" },
  { "1535"    , C_ERROR,  "pci spcnum readback failed (subclass=0x%02x,rc=0x%02X)", "powr_fsp_vpd_monitor.C", "pci_vpd()" },
  { "1537"    , C_NORMAL, "pci vpd tag CC not found" },
  { "1538"    , C_ERROR,  "pci vpd tag SN not found" },
  { "1539"    , C_ERROR,  "pci vpd csum fail" },
  { "153A"    , C_ERROR,  "pci vpd tag FL not found" },
  { "153B"    , C_ERROR,  "pci vpd tag FI not found" },
  { "153C"    , C_ERROR,  "pci vpd tag 79 not found" },
  { "153D"    , C_ERROR,  "pci vpd write scr 200 failed" },
  { "153E"    , C_ERROR,  "pci vpd write scr 210 failed" },
  { "153F**05", C_ERROR,  "pci vpd write SPCNUM failed (I2C_addr=0x%02X, I2C_error=0x%02X = I2C_RC_BUS_ERROR)" },
  { "153F"    , C_ERROR,  "pci vpd write SPCNUM failed (I2C_addr=0x%02X, I2C_error=0x%02X)" },
  { "1540"    , C_NORMAL, "LOC cmd queued to panel" },
  { "1543"    , C_ERROR,  "Calgary disable port 0 failed (rid_sc=0x%02X, rid_addr=0x%02X)", "ibt_i2c_dev.c", "init_speedwagon()" },
  { "1544"    , C_ERROR,  "Calgary disable port 1 failed (rid_sc=0x%02X, rid_addr=0x%02X)", "ibt_i2c_dev.c", "init_speedwagon()" },
  { "1545"    , C_ERROR,  "Calgary enable port 0 failed (rid_sc=0x%02X, rid_addr=0x%02X)", "ibt_i2c_dev.c", "init_speedwagon()" },
  { "1546"    , C_ERROR,  "Calgary enable port 1 failed (rid_sc=0x%02X, rid_addr=0x%02X)", "ibt_i2c_dev.c", "init_speedwagon()" },
  { "154A"    , C_ERROR,  "Unable to find VINI keyword (rid=0x%02X%02X)", "powr_fsp_pvd.C" },
  { "154C"    , C_ERROR,  "Unable to find DINF keyword (rid=0x%02X%02X)", "powr_fsp_pvd.C" },
  { "154D18"  , C_ERROR,  "Invalid SAN WBC CMD modifier (mod=0x%02X)", "san_wbc_cntrl" },
  { "1550"    , C_NORMAL, "sw timeout adjust" },
  { "1551"    , C_BOLD,   "sw timeout adjust retry" },
  { "1552"    , C_ERROR,  "sw timeout adjust failed" },
  { "1553"    , C_NORMAL, "sw table terminate" },
  { "1555"    , C_ERROR,  "Calgary GUID read failed (keyword B8, resource=0x%02X%02X)", "ibt_vpc_col.c", "process_pci_vpd()" },
  { "1570"    , C_ERROR,  "I2C vpd write scr 200 failed" },
  { "1571"    , C_ERROR,  "I2C vpd write scr 210 failed" },
  { "157200"  , C_NORMAL, "spcn nvs variables update successful" },
  { "157300"  , C_ERROR,  "spcn nvs variables update failed" },
  { "15770000", C_ERROR,  "private vpd checksum bad" },
  { "1574"    , C_BOLD },
  { "157480"  , C_NORMAL, "NVS config id: mantis 99" },
  { "157481"  , C_NORMAL, "NVS config id: mantis 00" },
  { "157482"  , C_NORMAL, "NVS config id: AS MUM" },
  { "157483"  , C_NORMAL, "NVS config id: magnum" },
  { "157484"  , C_NORMAL, "NVS config id: outlaw" },
  { "157485"  , C_NORMAL, "NVS config id: cyclone" },
  { "157486"  , C_NORMAL, "NVS config id: RS MUM" },
  { "157487"  , C_NORMAL, "NVS config id: magnum on outlaw" },
  { "157488"  , C_NORMAL, "NVS config id: Sundance Tower" },
  { "157489"  , C_NORMAL, "NVS config id: nitro X" },
  { "15748A"  , C_NORMAL, "NVS config id: Mantis X" },
  { "15748B"  , C_NORMAL, "NVS config id: Reliance-I" },
  { "15748C"  , C_NORMAL, "NVS config id: Reliance-P" },
  { "15748D"  , C_NORMAL, "NVS config id: SundanceIB Tower" },
  { "157490"  , C_NORMAL, "NVS config id: entry io" },
  { "157491"  , C_NORMAL, "NVS config id: martinsville" },
  { "157492"  , C_NORMAL, "NVS config id: richmond" },
  { "157493"  , C_NORMAL, "NVS config id: rockingham" },
  { "157494"  , C_NORMAL, "NVS config id: loudon" },
  { "157497"  , C_NORMAL, "NVS config id: Regatta H RS MUM" },
  { "157498"  , C_NORMAL, "NVS config id: Regatta H RS CEC" },
  { "157499"  , C_NORMAL, "NVS config id: Regatta H AS MUM" },
  { "15749D"  , C_NORMAL, "NVS config id: Regatta H+ RS CEC" },
  { "1574A0"  , C_NORMAL, "NVS config id: regatta mi" },
  { "1574B1"  , C_NORMAL, "NVS config id: Squadron H" },
  { "1574B2"  , C_NORMAL, "NVS config id: Squadron L4" },
  { "1574B3"  , C_NORMAL, "NVS config id: Squadron ML" },
  { "1574B4"  , C_NORMAL, "NVS config id: Squadron SF2" },
  { "1574B5"  , C_NORMAL, "NVS config id: Squadron SF4" },
  { "1574B9"  , C_NORMAL, "NVS config id: Squadron IH" },
  { "1574"    , C_NORMAL, "NVS config id (Id=0x%02X, rsvd=0x%02X)" },
  { "157513"  , C_ERROR,  "invalid address through san interface        " },
  { "157516"  , C_ERROR,  "invalid command through san interface" },
  { "157517"  , C_ERROR,  "invalid command length through san interface" },
  { "157517"  , C_ERROR,  "invalid command modifier through san interface" },
  { "1576"    , C_ERROR,  "San I2C timeout" },
  { "15770000", C_ERROR,  "private vpd checksum bad" },
  { "157A0000", C_ERROR,  "local vpd read failed" },
  { "1580"    , C_NORMAL, "initiate vpd collection from lsp (rid=0x%02X%02X)", "powr_fsp_vpd_col.C", "vpd_col_read_vpd_extended()" },
  { "1581"    , C_NORMAL, "initiate vpd collection from I2C" },
  { "1588"    , C_NORMAL, "private vpd keyword RI found" },
  { "1590"    , C_ERROR,  "vpd lsp read response unavail." },
  { "15920000", C_ERROR,  "vpd keyword RI not found" },
  { "1593"    , C_ERROR,  "RI Keyword Not Found (rid=0x%02X%02X)", "powr_i2c_dev.C", "process_misc_vpd()" },
  { "1594"    , C_ERROR,  "FL Keyword Not Found (rid=0x%02X%02X)", "powr_i2c_dev.C", "process_misc_vpd()" },
  { "15950000", C_ERROR,  "private vpd tag 79 not found" },
  { "1595"    , C_ERROR,  "misc vpd tag 79 not found (rid=0x%02X%02X)", "powr_fsp_vpd_col.C", "preprocess_devros4_vpd()"  },
  { "1596"    , C_ERROR,  "misc vpd tag 78 not found" },
  { "1597"    , C_ERROR,  "misc vpd tag 79 not found" },

  // @00Ad
  { "159A"    , C_ERROR,  "LSP rsp unavailable - 2nd half vpd (rid address: %02X, I2C rc: %d)" },

  { "15A0"    , C_ERROR,  "bad nvs write count" },
  { "15A1"    , C_ERROR,  "bad nvs config id" },
  { "15A2"    , C_ERROR,  "bad nvs san status" },
  { "15A3"    , C_ERROR,  "bad nvs frame id" },
  { "15A4"    , C_ERROR,  "bad nvs frame type" },
  { "15A5"    , C_ERROR,  "bad nvs frame model" },
  { "15A6"    , C_ERROR,  "bad nvs frame serial number" },
  { "15A7"    , C_ERROR,  "bad nvs mfg id" },
  { "15A8"    , C_ERROR,  "bad nvs power controlling type" },
  { "15A9"    , C_ERROR,  "bad nvs power controlling model" },
  { "15AA"    , C_ERROR,  "bad nvs power controlling serial number" },
  { "15AB"    , C_ERROR,  "bad nvs scr220lo value" },
  { "15AC"    , C_ERROR,  "bad nvs scr220hi value" },
  { "15AD"    , C_ERROR,  "bad nvs scr220lo value" },
  { "15AE"    , C_ERROR,  "bad nvs scr230hi value" },
  { "15AF"    , C_ERROR,  "bad nvs power down incomplete" },
  { "15B0"    , C_ERROR,  "Bad cage type in NVS (cage=0x%02X, type=0x%02X)" },
  { "15B1"    , C_NORMAL, "No B&C owership in NVS" },
  { "15B22C"  , C_ERROR,  "INVALID MTMS and no IP addresses in NVS", "powr_fsp_nvs.C", "BPCRackClass::processRackNvsData()" },
  { "15B2AC"  , C_ERROR,  "INVALID MTMS - cage=0x%02X", "powr_fsp_ann.C", "BPCNetworkClass::addNewAnnEntries()" },
  { "15B2BE"  , C_ERROR,  "INVALID MTMS from serial poll - port=%d", "powr_fsp_bpc_handlers.C", "BPCPrimaryRackClass::handleBpcUartPollResponse()" },
  { "15B2EE0*", C_ERROR,  "INVALID MTMS from read seeprom - port=%d", "powr_fsp_bpc_handlers.C", "BPCPrimaryRackClass::BPCRackClass::handleReadVPDFromFruRsp()" },
  { "15B2EEF*", C_NORMAL, "NEW MTMS from read seeprom - rsvd|port=0x%2X", "powr_fsp_bpc_handlers.C", "BPCPrimaryRackClass::BPCRackClass::handleReadVPDFromFruRsp()" },
  { "15B1"    , C_ERROR,  "san interface failure" },
  { "15B3"    , C_ERROR,  "san cmd ack timout" },
  { "15B4"    , C_ERROR,  "san alert " },
  { "15B5"    , C_ERROR,  "san alert timeout" },
  { "15B6"    , C_ERROR,  "san status change" },
  { "15B8"    , C_ERROR,  "san power off command" },
  { "15B9"    , C_NORMAL, "cable reconnected" },
  { "15BC"    , C_ERROR,  "SAN I2C timeout" },
  { "15BD"    , C_NORMAL, "timeout write byte count: 0x%02X%02X" },
  { "15BE"    , C_NORMAL, "timeout cmd length: 0x%02X%02X" },

  { "15C00000", C_ERROR,  "bad s_sid config id in extended nvs" },
  { "15C10000", C_ERROR,  "bad mcm serial number in extended nvs, mcm 1" },
  { "15C20000", C_ERROR,  "bad mcm serial number in extended nvs, mcm 2" },
  { "15C30000", C_ERROR,  "bad mcm serial number in extended nvs, mcm 3" },
  { "15C40000", C_ERROR,  "bad mcm serial number in extended nvs, mcm 4" },
  { "15D10000", C_NORMAL, "NVS Update I1 - pop_in_process", "powr_fsp_nvs.C", "update_I1_nvs()" },
  { "15D20000", C_NORMAL, "NVS Update I1 - SAN NVS update required", "ibt_i2c_vpd.c", "update_non_vol_storage()" },
  { "15D30000", C_NORMAL, "NVS Update I1 - WVP NVS update required", "ibt_i2c_vpd.C", "update_non_vol_storage()" },
  { "15D40000", C_NORMAL, "NVS Update I1 - APA NVS update required", "powr_fsp_nvs.C", "update_I1_nvs()" },
  { "15D50000", C_NORMAL, "virtual node extended nvs update started" },
  { "15D60000", C_NORMAL, "mcm extended nvs update started" },
  { "15D70000", C_NORMAL, "NVS Update I1 - pwr_state_to_nvs_update_required", "powr_fsp_nvs.C", "update_I1_nvs()" },
  { "15D700"  , C_NORMAL, "NVS Update I1 - pwr_state_to_nvs_update_required (inv_boxid=%d)", "powr_fsp_nvs.C", "update_I1_nvs()" },
  { "15DA"    , C_NORMAL, "BPA_CONFIG_NVS_UPDATE" },
  { "15DB"    , C_NORMAL, "ECT_TABLE_NVS_UPDATE" },
  { "15DC"    , C_NORMAL, "ANN_CLEAR_IX_NVS_UPDATE" },
  { "15F0"    , C_NORMAL, "IB: Read riser VPD (I2C engine=0x%02X, addr=0x%02X)", "ibt_repeater.C", "scan_riser_frt()" },
  { "15F1"    , C_NORMAL, "IB: Read Mindspeed cfg data (I2C port=0x%02X, addr=0x%02X)", "ibt_repeater.C", "init_ib_repeater()" },
  { "15F2"    , C_ERROR,  "IB: Read Mindspeed cfg data failed (I2C addr=0x%02X, rc=0x%02X)", "ibt_repeater.C", "init_ib_repeater()" },
  { "15F3"    , C_ERROR,  "IB: Read Mindspeed cfg data checksum failed (computed_crc=0x%02X, data_crc=0x%02X)", "ibt_repeater.C", "init_ib_repeater()" },
  { "15F4"    , C_ERROR,  "IB: Write Mindspeed data failed (I2C addr=0x%02X, rc=0x%02X)", "ibt_repeater.C", "init_ib_repeater()" },
  { "15F5"    , C_NORMAL, "IB: Finished initializing Mindspeed", "ibt_repeater.C" ,"check_and_process_end_of_repeater_table()" },
  { "15F6"    , C_ERROR,  "IB: Read riser VPD fail (I2C addr=0x%02X, rc=0x%02X)", "ibt_repeater.C", "init_ib_repeater()" },
  { "15F7"    , C_NORMAL, "IB: Riser VPD not Etta (etta status=0x%02X)", "ibt_repeater.C", "init_ib_repeater()" },
  // @009d Removed 9 entries
  { "15FE"    , C_ERROR,  "VPD buffer too small (need 0x%02X%02X)" }, // T19 code
  { "15FF"    , C_ERROR,  "VPD buffer too small (current size: 0x%02X%02X)" },

  //
  { "1600"    , C_ERROR,  "UART open file descriptor error (errno=0x%02X%02X)" },
  { "1601"    , C_ERROR,  "UART close file descriptor error (errno=0x%02X%02X)" },
  { "16020000", C_ERROR,  "UART select call timeout" },
  { "1602"    , C_ERROR,  "UART select call failure (errno=0x%02X%02X)" },
  { "1603"    , C_ERROR,  "UART read failure (port: %d, errno=0x%02X)", "powr_fsp_bpc_uart_intf.C", "BPC_Uart_Intf::read()" },
  { "1604"    , C_ERROR,  "UART write failure (errno=0x%02X%02X)" },

  { "1606"    , C_NORMAL, "UART successful read (port: %d, return_val: %d)", "powr_fsp_bpc_uart_intf.C", "BPC_Uart_Intf::read()" },

  { "1610"    , C_ERROR,  "UART select failure * (rc=0x%02X,errno=0x%02X)"    , "powr_fsp_bpc_uart_intf.C", "BPC_Uart_Intf::isReadable()"  },
  { "1611"    , C_ERROR,  "UART read failure * (rc=0x%02X,errno=0x%02X)", "powr_fsp_bpc_uart_intf.C", "BPC_Uart_Intf::read()" },
  { "1612"    , C_ERROR,  "UART read failure * (rc=0x%02X,errno=0x%02X)", "powr_fsp_bpc_uart_intf.C", "BPC_Uart_Intf::write()" },
  { "1613"    , C_NORMAL, "UART flush (read_count=0x%02X%02X)", "powr_fsp_bpc_uart_intf.C", "BPC_Uart_Intf::write()" },
  { "1614"    , C_ERROR,  "UART write failure * (rc=0x%02X,errno=0x%02X)", "powr_fsp_bpc_uart_intf.C", "BPC_Uart_Intf::flush_uart()" },
  { "1615"    , C_ERROR,  "UART fsync failure (errno=0x%02X%02X)", "powr_fsp_bpc_uart_intf.C", "BPC_Uart_Intf::write()" },
  { "1616"    , C_ERROR,  "UART config failure (errno=0x%02X%02X)", "powr_fsp_bpc_uart_intf.C", "BPC_Uart_Intf::set_config()" },
  //
  { "1700"    , C_ERROR,  "IB: SMA_PACKET_ERROR (bit0-7=0x%02X, bit10-17=0x%02X)" },
  { "1701"    , C_ERROR,  "IB: SMA_QP_RECV_QUEUE_FULL (pending=%d)" },
  { "1702"    , C_ERROR,  "IB: SMA_CALG_XMIT_BUF_FULL (port=%d,calg=%d)" },
  { "1703"    , C_ERROR,  "IB: SMA_QP_RECV_QUEUE_EMPTY (pending=%d)" },
  { "1704"    , C_ERROR,  "IB: SMA_PKT_VALIDATION_FAIL (field=0x%02X,value=0x%02X)" },
  { "1705"    , C_ERROR,  "IB: SMA MAD Discarded (calgary=%d, port=%d)" },
  { "1710"    , C_BLUE,   "IB: SMA Trap sent (calgary A, trap_num=0x%02X%02X)" },
  { "1711"    , C_BLUE,   "IB: SMA Trap sent (calgary B, trap_num=0x%02X%02X)" },
  //
  { "18020*0*", C_NORMAL, "BPC: Comm recovery (new fail_count=%d, port=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "1803"    , C_ERROR,  "BPC: Comm failed (POLL, bpc_cmd_status=0x%02X, fail_count|port=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "1804"    , C_ERROR,  "BPC: Comm failed (Eth IP,UART fail count: *.%d.%d)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "1805"    , C_ERROR,  "BPC UART: Comm failure (bpc_cmd_status=0x%02X, port=0x%02X)", "powr_fsp_bpc_uart_intf.C", "BPCPrimaryRackClass::handleBpcUartCommFault()" },
  { "1806000" , C_NORMAL, "RH CEC cage on/SPCN off" },
  { "1807"    , C_WARNING,"BPC SRC follows - cage_id=0x%02X log_id=0x%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::sendBpcSrcToElwq()" },
  { "1808"    , C_ERROR,  "BPC CMD Timeout - cmd=0x%02X", "powr_fsp_bpc_monitors.C", "BPCRackClass::sendBpcRackMainlineCommand()" },
  { "1809"    , C_NORMAL, "BPC UART Status (valid_uart_poll=%d ip_from_dca=%d)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },


  // 1820/21 "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault" - handled in powr_pte.C
  { "1830"    , C_BLUE,   "BPC POLL status change (bpc_poll_flags=0x%02X, port=%d)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcPollResponse2()" },
  { "1831"    , C_BLUE,   "BPC IBF status change (ibf_flags=0x%02X, port=%d)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcPollResponse2()" },
  { "1832"    , C_NORMAL, "RH device status change" },
  { "1833"    , C_NORMAL, "RH device status change" },
  { "1834"    , C_NORMAL, "RH device status change" },
  { "1835"    , C_NORMAL, "RH device status change" },
  { "1836"    , C_NORMAL, "RH device status change" },
  { "1837"    , C_NORMAL, "BPC reported blower power: 0x%02X%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcPollResponse2" },
  { "1838"    , C_NORMAL, "RH device status change" },
  { "1839"    , C_NORMAL, "BPC reported blower power limit: 0x%02X%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcPollResponse2" },

  { "1860"    , C_NORMAL, "Code level for BPC on port 0" },
  { "1861"    , C_NORMAL, "Code level for BPC on port 1" },
  { "188400"  , C_ERROR,  "Event Monitor EvenMgt object create failed (status=0x%02X)", "powr_fsp_event_monitor.C", "event_monitor()"},
  { "188500"  , C_ERROR,  "Event Monitor Error (status=0x%02X)", "powr_fsp_event_monitor.C", "event_monitor()"},
  { "188900"  , C_ERROR,  "NETS cec cage failure (cec_cage_id=0x%02X)"},
  { "188A"    , C_NORMAL, "Initial vlan address to try (port_subnet: 0x%02X, low_ip: %02X)" },
  { "1890"    , C_NORMAL, "CEC Not Powered on (status=0x%02X, crit_fault=0x%02X)", "powr_fsp_power_up_state.C", "BPCRackClass::isCecPoweredOff()" },
  { "18910000", C_NORMAL, "Oversubscription Exit Event" },
  { "18910001", C_NORMAL, "Oversubscription Unthrottled Event" },
  { "18910011", C_NORMAL, "Oversubscription Throttled Event" },
  { "1892"    , C_NORMAL, "MCM VPD settings sent with power mode: %02X, port %d", "powr_fsp_bpc_monitors.C", "BPCRackClass::monitorBpcOn()" },
  { "1893"    , C_NORMAL, "Blower power cap sent, kicked off by TMGT (G_blower_power_cap: %02X%02X)", "powr_fsp_bpc_monitors.C", "BPCRackClass::manageBpcPowerShift()" },
  { "1894"    , C_WARNING,"Exceeded BPC cmd buffer size with cec chip vpd  (buffer size: 0x%02X%02X)" },
  //
  { "18A0A0"  , C_NORMAL, "BPC-A UART port 0 valid status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0A1"  , C_NORMAL, "BPC-A UART port 1 valid status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0A2"  , C_NORMAL, "BPC-A UART port 2 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0A3"  , C_NORMAL, "BPC-A UART port 3 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0A4"  , C_NORMAL, "BPC-A UART port 4 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0A5"  , C_NORMAL, "BPC-A UART port 5 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0A6"  , C_NORMAL, "BPC-A UART port 6 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0A7"  , C_NORMAL, "BPC-A UART port 7 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0A8"  , C_NORMAL, "BPC-A UART port 8 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0A9"  , C_NORMAL, "BPC-A UART port 9 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0AA"  , C_NORMAL, "BPC-A UART port A status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0AB"  , C_NORMAL, "BPC-A UART port B status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0AC"  , C_NORMAL, "BPC-A UART port C status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0AD"  , C_NORMAL, "BPC-A UART port D status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0AE"  , C_NORMAL, "BPC-A UART port E status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0AF"  , C_NORMAL, "BPC-A UART port F status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },

  { "18A0B0"  , C_NORMAL, "BPC-B UART port 0 valid status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0B1"  , C_NORMAL, "BPC-B UART port 1 valid status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0B2"  , C_NORMAL, "BPC-B UART port 2 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0B3"  , C_NORMAL, "BPC-B UART port 3 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0B4"  , C_NORMAL, "BPC-B UART port 4 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0B5"  , C_NORMAL, "BPC-B UART port 5 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0B6"  , C_NORMAL, "BPC-B UART port 6 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0B7"  , C_NORMAL, "BPC-B UART port 7 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0B8"  , C_NORMAL, "BPC-B UART port 8 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0B9"  , C_NORMAL, "BPC-B UART port 9 status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0BA"  , C_NORMAL, "BPC-B UART port A status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0BB"  , C_NORMAL, "BPC-B UART port B status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0BC"  , C_NORMAL, "BPC-B UART port C status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0BD"  , C_NORMAL, "BPC-B UART port D status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0BE"  , C_NORMAL, "BPC-B UART port E status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },
  { "18A0BF"  , C_NORMAL, "BPC-B UART port F status change: 0x%02X","powr_fsp_bpc_uart_intf.C","BPCPrimaryRackClass::processDcaUartPollResponse()" },

  { "18B0"    , C_NORMAL, "ETH Comm - MTMS of BPC verified (conn=%d, subnet|port=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::verifyBpcMtms()" },
  { "18BF"    , C_NORMAL, "ETH Comm - Adding/Updating BPC Connection (conn=%d, subnet|port=0x%02X)", "powr_fsp_ect.C", "EthernetConnectionTableClass::setConnection()" },
  { "18C0"    , C_BOLD,   "ETH Comm - IP address: %d.%d.*", "powr_fsp_ect.C", "EthernetConnectionTableClass::setConnection()" },
  { "18C1"    , C_BOLD,   "ETH Comm - IP address: *.%d.%d", "powr_fsp_bpc_com.C", "NetcPokPowrInterface::selectIntf()" },
  { "18C2"    , C_BLUE,   "ETH Comm - write() netcSend success (length=0x%02X%02X)", "powr_fsp_bpc_com.C", "NetcPokPowrInterface::write()" },
  { "18C3"    , C_BLUE,   "ETH Comm - read()  netcRecv success (length=0x%02X%02X)", "powr_fsp_bpc_com.C", "NetcPokPowrInterface::read()" },
  { "18C4"    , C_BLUE,   "ETH Comm - clear NETC receive buffer (length=0x%02X%02X)", "powr_fsp_bpc_com.C", "NetcPokPowrInterface::clearRcvBuffer()" },
  { "18EC"    , C_ERROR,  "BPC: Eth Comm failed - (conn=%d, bpc_comm_status=0x%02X)", "powr_fsp_bpc_com.C", "BPCRackClass::setFailStatus()" },
  //
  { "182*0081", C_BOLD }, // Success response power off
  { "182*0082", C_BOLD }, // Success response power on
  { "182***90", C_BLUE }, // Success Poll BPA rsp
  { "182*00**", C_NORMAL }, // Success response
  { "182*****", C_WARNING  }, // Failing response

  //
  { "180***10", C_NORMAL, "BPC: Deactivate Pwr Therm Fru", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()"},
  { "181***10", C_NORMAL, "XPT: Deactivate Pwr Therm Fru", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()"},
  { "182***10", C_NORMAL, "BPC: Deactivate Pwr Therm Fru rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "180***11", C_NORMAL, "BPC: Activate Pwr Therm Fru", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()"},
  { "181***11", C_NORMAL, "XPT: Activate Pwr Therm Fru", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()"},
  { "182***11", C_NORMAL, "BPC: Activate Pwr Therm Fru rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "180***1A", C_NORMAL, "BPC: Read voltage group current", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()"},
  { "181***1A", C_NORMAL, "XPT: Read voltage group current", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()"},
  { "182***1A", C_NORMAL, "BPC: Read voltage group current rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "180***1B", C_NORMAL, "BPC: Read voltage group voltages", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***1B", C_NORMAL, "XPT: Read voltage group voltages", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***1B", C_NORMAL, "BPC: Read voltage group voltages rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "180***20", C_NORMAL, "BPC: Activate voltage biasing", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***20", C_NORMAL, "XPT: Activate voltage biasing", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***20", C_NORMAL, "BPC: Activate voltage biasing rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "180***22", C_NORMAL, "BPC: Write fans speed", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***22", C_NORMAL, "XPT: Write fans speed", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***22", C_NORMAL, "BPC: Write fans speed rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },

  { "180***23", C_NORMAL, "BPC: Get environmental info", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***23", C_NORMAL, "XPT: Get environmental info", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***23", C_NORMAL, "BPC: Get environmental info rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },

  { "180***24", C_NORMAL, "BPC: Read fans speed", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***24", C_NORMAL, "BPC: Read fans speed", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***24", C_NORMAL, "BPC: Read fans speed rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "180***25", C_NORMAL, "BPC: Set Environmental Restrictions", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***25", C_NORMAL, "XPT: Set Environmental Restrictions", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***25", C_NORMAL, "BPC: Set Environmental Restrictions rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()"  },
  { "180***26", C_NORMAL, "BPC: Get environmental info", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***26", C_NORMAL, "XPT: Get environmental info", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***26", C_NORMAL, "BPC: Get environmental info rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "180***27", C_NORMAL, "BPC: LED Control", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***27", C_NORMAL, "XPT: LED Control", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***27", C_NORMAL, "BPC: LED Control rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***29", C_NORMAL, "BPC: Get Frame Properties", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***29", C_NORMAL, "XPT: Get Frame Properties", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***29", C_NORMAL, "BPC: Get Frame Properties rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***31", C_NORMAL, "BPC: Read SEEPROM data pt fru", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***31", C_NORMAL, "XPT: Read SEEPROM data pt fru", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***31", C_NORMAL, "BPC: Read SEEPROM data pt fru rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***32", C_NORMAL, "BPC: Write SEEPROM data pt fru", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***32", C_NORMAL, "XPT: Write SEEPROM data pt fru", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***32", C_NORMAL, "BPC: Write SEEPROM data pt fru rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***33", C_NORMAL, "BPC: Get avail power thermal fru ids", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***33", C_NORMAL, "XPT: Get avail power thermal fru ids", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***33", C_NORMAL, "BPC: Get avail power thermal fru ids rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***34", C_NORMAL, "BPC: Get configd power thermal fru ids", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***34", C_NORMAL, "XPT: Get configd power thermal fru ids", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***34", C_NORMAL, "BPC: Get configd power thermal fru ids rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***35", C_NORMAL, "BPC: Get down loadable fru ids", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***35", C_NORMAL, "XPT: Get down loadable fru ids", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***35", C_NORMAL, "BPC: Get down loadable fru ids rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***36", C_NORMAL, "BPC: Translate cageid fruid to port addr", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***36", C_NORMAL, "XPT: Translate cageid fruid to port addr", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***36", C_NORMAL, "BPC: Translate cageid fruid to port addr rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***40", C_NORMAL, "BPC: Remove Drawer", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***40", C_NORMAL, "XPT: Remove Drawer", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***40", C_NORMAL, "BPC: Remove Drawer rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***41", C_NORMAL, "BPC: Add Drawer", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***41", C_NORMAL, "XPT: Add Drawer", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***41", C_NORMAL, "BPC: Add Drawer rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***47", C_NORMAL, "BPC: Send system freq", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***47", C_NORMAL, "XPT: Send system freq", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***47", C_NORMAL, "BPC: Send system freq rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***48", C_NORMAL, "BPC: Send secure vpd data     (port=%d, cage=0x%02X, cmd=0x%02X)" },
  { "181***48", C_NORMAL, "XPT: Send secure vpd data     (port=%d, cage=0x%02X, cmd=0x%02X)" },
  { "182***48", C_NORMAL, "BPC: Send secure vpd data rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
/*  { "180***49", C_NORMAL, "BPC: Send processor config info", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***49", C_NORMAL, "XPT: Send processor config info", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***49", C_NORMAL, "BPC: Send processor config info rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" }, */
  { "180***49", C_NORMAL, "BPC: Test MCM interface", "powr_fsp_bpc_handlers.C" },
  { "181***49", C_NORMAL, "XPT: Test MCM interface", "powr_fsp_bpc_handlers.C" },
  { "182***49", C_NORMAL, "BPC: Test MCM interface rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)" },
  { "180***4C", C_NORMAL, "BPC: Send CEC CCIN info", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***4C", C_NORMAL, "XPT: Send CEC CCIN info", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***4C", C_NORMAL, "BPC: Send CEC CCIN info rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***60", C_NORMAL, "BPC: TMS     (port=%d, cage=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***60", C_NORMAL, "XPT: TMS     (port=%d, cage=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***60", C_NORMAL, "BPC: TMS rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***61", C_NORMAL, "BPC: Correlate PCI (CPI)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***61", C_NORMAL, "XPT: Correlate PCI (CPI)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***61", C_NORMAL, "BPC: Correlate PCI (CPI) rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***64", C_NORMAL, "BPC: Get frame number", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***64", C_NORMAL, "XPT: Get frame number", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***64", C_NORMAL, "BPC: Get frame number rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***66", C_NORMAL, "BPC: Read RIO-G cable", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***66", C_NORMAL, "XPT: Read RIO-G cable", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***66", C_NORMAL, "BPC: Read RIO-G cable rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***67", C_NORMAL, "BPC: Write enclosure MTMS", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***67", C_NORMAL, "XPT: Write enclosure MTMS", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***67", C_NORMAL, "BPC: Write enclosure MTMS rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***68", C_NORMAL, "BPC: Read enclosure MTMS", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***68", C_NORMAL, "XPT: Read enclosure MTMS", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***68", C_NORMAL, "BPC: Read enclosure MTMS rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***78", C_NORMAL, "BPC: Read/Write Pwr Therm FRU memory", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***78", C_NORMAL, "XPT: Read/Write Pwr Therm FRU memory", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***78", C_NORMAL, "BPC: Read/Write Pwr Therm FRU memory rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***79", C_NORMAL, "BPC: Send Slip Cmd to FRU (port=%d, cage=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***79", C_NORMAL, "XPT: Send Slip Cmd to FRU", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***79", C_NORMAL, "BPC: Send Slip Cmd to FRU rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***81", C_BOLD,   "BPC: Power off     (port=%d, cage=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***81", C_BOLD,   "XPT: Power off     (port=%d, cage=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***81", C_BOLD,   "BPC: Power off rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***82", C_BOLD,   "BPC: Power on     (port=%d, cage=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***82", C_BOLD,   "XPT: Power on     (rsvd|port=0x%02X, cage=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***82", C_BOLD,   "BPC: Power on rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***84", C_NORMAL, "BPC: Power off BPC", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***84", C_NORMAL, "XPT: Power off BPC", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***84", C_NORMAL, "BPC: Power off BPC rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***85", C_NORMAL, "BPC: Power on BPC", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***85", C_NORMAL, "XPT: Power on BPC", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***85", C_NORMAL, "BPC: Power on BPC rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***88", C_NORMAL, "BPC: Unthrottle MCM", "powr_fsp_bpc_handlers.C" },
  { "181***88", C_NORMAL, "XPT: Unthrottle MCM", "powr_fsp_bpc_handlers.C" },
  { "182***88", C_NORMAL, "BPC: Unthrottle MCM rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C" },
  { "180***90", C_BLUE,   "BPC: Poll BPA     (port=%d, conn=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***90", C_BLUE,   "XPT: Poll BPA     (port=%d, data[0]=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***90", C_BLUE,   "BPC: Poll BPA rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***93", C_NORMAL, "BPC: Read cage pwr status", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***93", C_NORMAL, "XPT: Read cage pwr status", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***93", C_NORMAL, "BPC: Read cage pwr status rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***97", C_NORMAL, "BPC: Read BPA pwr status", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***97", C_NORMAL, "XPT: Read BPA pwr status", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***97", C_NORMAL, "BPC: Read BPA pwr status rsp (bpc_cmd_status=0x%02X, cmd 0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***9B", C_NORMAL, "BPC: Query power thermal fru redundancy", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***9B", C_NORMAL, "XPT: Query power thermal fru redundancy", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***9B", C_NORMAL, "BPC: Query power thermal fru redundancy rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***9C", C_NORMAL, "BPC: Get frame info", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleGetFrameInfoResponse()" },
  { "181***9C", C_NORMAL, "XPT: Get frame info", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleGetFrameInfoResponse()" },
  { "182***9C", C_NORMAL, "BPC: Get frame info rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleGetFrameInfoResponse()" },
  { "180***A2", C_NORMAL, "BPC: Query power thermal fru code tables", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***A2", C_NORMAL, "XPT: Query power thermal fru code tables", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***A2", C_NORMAL, "BPC: Query power thermal fru code tables rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***AA", C_NORMAL, "BPC: TPMD Interface Reset (port=%d, cage=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***AA", C_NORMAL, "XPT: TPMD Interface Reset", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***AA", C_NORMAL, "BPC: TPMD Interface Reset rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180***D1", C_NORMAL, "BPC: Debug info (nb/ps/fru info/type,config)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***D1", C_NORMAL, "XPT: Debug info (nb/ps/fru info/type,config)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***D1", C_NORMAL, "BPC: Debug info rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "180***EF", C_NORMAL, "BPC: Retrieve power error fips log     (port=%d, logid 0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181***EF", C_NORMAL, "XPT: Retrieve power error fips log     (port=%d, logid 0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182***EF", C_NORMAL, "BPC: Retrieve power error fips log rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "180*****", C_ERROR,  "BPC: Unknown command     (port=%d, data byte 0: 0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "181*****", C_ERROR,  "XPT: Unknown command     (port=%d, logid 0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcRackCommand()" },
  { "182*****", C_ERROR,  "BPC: Unknown command rsp (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },

  { "1851****", C_BOLD,   "BPC: Command retry (bpc_cmd_status=0x%02X, cmd=0x%02X)", "powr_fsp_bpc_com.C", "bpc_rexmit()" },
  { "185200**", C_ERROR,  "BPC: Invalid CPI data length (length = %d)", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCpiResponse()" },
  { "1853****", C_ERROR,  "BPC: Get CEC cageid failed (unit=0x%02X, cage=0x%02X)", "powr_fsp_pvd.C", "BPCSlaveClass::buildRhVpd()" },

  { "18540040", C_ERROR,  "BPC: Frame LED status change (old_status=0x%02X, new_status=0x%02X (FAULTED))", "powr_fsp_bpc_monitors.C", "BPCRackClass::manageBpcLed()" },
  { "185400C0", C_ERROR,  "BPC: Frame LED status change (old_status=0x%02X, new_status=0x%02X (FAULTED,IDENTIFY))", "powr_fsp_bpc_monitors.C", "BPCRackClass::manageBpcLed()" },
  { "18544000", C_BOLD,  "BPC: Frame LED status change (old_status=0x%02X (FAULTED), new_status=0x%02X)", "powr_fsp_bpc_monitors.C", "BPCRackClass::manageBpcLed()" },
  { "185440C0", C_ERROR,  "BPC: Frame LED status change (old_status=0x%02X (FAULTED), new_status=0x%02X (FAULTED,IDENTIFY))", "powr_fsp_bpc_monitors.C", "BPCRackClass::manageBpcLed()" },
  { "1854C000", C_BOLD,  "BPC: Frame LED status change (old_status=0x%02X (FAULTED,IDENTIFY), new_status=0x%02X)", "powr_fsp_bpc_monitors.C", "BPCRackClass::manageBpcLed()" },
  { "1854C040", C_ERROR,  "BPC: Frame LED status change (old_status=0x%02X (FAULTED,IDENTIFY), new_status=0x%02X (FAULTED))", "powr_fsp_bpc_monitors.C", "BPCRackClass::manageBpcLed()" },
  { "1854****", C_BOLD,   "BPC: Frame LED status change (old_status=0x%02X, new_status=0x%02X)", "powr_fsp_bpc_monitors.C", "BPCRackClass::manageBpcLed()" },

  //
  { "18400100", C_NORMAL, "RH FRU download order determined" },
  { "18400200", C_NORMAL, "RH Finished BPC downloads" },
  { "1840FF00", C_NORMAL, "RH downloads complete" },
  { "184003"  , C_NORMAL, "RH Enter minlic state on port XX" },
  { "184004"  , C_NORMAL, "RH Exit minlic state on port XX" },
  { "184005"  , C_NORMAL, "RH FRU download finished in state = XX" },
  { "1841"    , C_NORMAL, "RH Downloading FRU type = XXXX" },
  { "1842"    , C_NORMAL, "RH code level of existing code" },
  { "1843"    , C_NORMAL, "RH Code level of requested code" },
  { "1844"    , C_NORMAL, "RH FRU download routing info" },
  { "1845"    , C_NORMAL, "RH LID to download XXXX" },
  { "1846"    , C_NORMAL, "RH code level of received code" },
  { "187200"  , C_NORMAL, "ANN - mod=%d" },
  { "18720A"  , C_NORMAL, "ANN add - cage=0x%02X", "powr_fsp_powr_fsp_ann.C" },
  { "18720D00", C_NORMAL, "ANN delete rack", "powr_fsp_powr_fsp_bpc_network.C", "BPCRackClass::~BPCRackClass" },
  { "18720D"  , C_NORMAL, "ANN delete - cage=0x%02X", "powr_fsp_powr_fsp_ann.C" },
  { "1873"    , C_NORMAL, "New FRT for cage 0x%02X (type=0x%02X)" },
  { "187A"    , C_ERROR,  "CEC Cage mismatch: port 0 = 0x%02X, port 1 = 0x%02X" },
  { "187F"    , C_ERROR,  "BPC UART: Comm failure counts: port 0 = %d, port 1 = %d" },
  { "18800"   , C_BOLD,   "BPC: New serial IP/Password received side=0x%02X port=0x%02X" },
  { "1880"    , C_BOLD,   "BPC: New serial MTMS received side=0x%02X port=0x%02X" },
  { "1881"    , C_BOLD,   "BPA Missing (num_bpas=%d, subnet=%d)", "powr_fsp_event_monitor.C", "BPCRackClass::addFrameEctInfo()" },
  { "1882"    , C_ERROR,  "EVENT_START_READ_ERR (error_handle=%02X, subnet=%d)", "powr_fsp_event_monitor.C", "BPCRackClass::addFrameEctInfo()" },
  { "1883003E", C_NORMAL, "EVENT_RECEIVED_ALERT id=EVEN_ID_BPC_FILE_UPDATED (HMCX file updated)", "powr_fsp_event_monitor.C", "event_monitor()" },
  { "1883"    , C_NORMAL, "EVENT_RECEIVED_ALERT id=0x%02X%02X", "powr_fsp_event_monitor.C", "event_monitor()" },
  { "188400"  , C_ERROR,  "EVENT_MGT_SUBSCRIBE_ERR (rc=0x%02X)", "powr_fsp_event_monitor.C", "event_monitor()" },
  { "188500"  , C_ERROR,  "EVENT_SIGNAL_ERR alert monitor failed (rc=0x%02X)" },
  { "188600"  , C_ERROR,  "EVENT_SIGNAL_ERR alert failed (rc=0x%02X)" },
  { "188700"  , C_ERROR,  "Could not read BPA record (handle=0x%02X, subnet=0x%02X)" },
  { "188800"  , C_ERROR,  "Could not release hmcx file (handle=0x%02X, subnet=0x%02X)" },
  { "1800"    , C_NORMAL, "BPC" },
  { "1820"    , C_NORMAL, "RH response rcvd from port 0 - status=0x%02X, cmd=0x%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "1821"    , C_NORMAL, "RH response rcvd from port 1 - status=0x%02X, cmd=0x%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcCommFault()" },
  { "1822"    , C_NORMAL, "RH response rcvd from PMU - status=0x%02X, cmd=0x%02X" },
  //
  { "185000"  , C_ERROR,  "failure to get resource vpd for fru id xx (where xx is the last byte)" },
  //
  { "1803F700", C_ERROR,  "RH bpc port 0 commumications  timeout" },
  { "1803F701", C_ERROR,  "RH bpc port 1 commumications  timeout" },
  { "1803F100", C_ERROR,  "RH bpc port 0 commumications error" },
  { "1803F101", C_ERROR,  "RH bpc port 0 commumications error" },

  //
//  { "19**68**", C_ERROR,  "BPC POLL status change - cage=0x%02X, bpc_cage_flags=0x%02X (CRITICAL_FAULT), type|port=0x%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcPollResponse2()" },
  { "19"      , C_BLUE,   "BPC POLL byte 3 status change - cage=0x%02X, bpc_cage_flags=0x%02X, type|port=0x%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcPollResponse2()" },
  { "1A"      , C_BLUE,   "BPC POLL byte 4 status change - cage=0x%02X, bpc_vbias_flags=0x%02X, type|port=0x%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcPollResponse2()" },
  { "1B"      , C_BLUE,   "BPC POLL byte 5 status change - cage=0x%02X, bpc_power_on_octant_flags=0x%02X, type|port=0x%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcPollResponse2()" },
  { "1C**00**", C_BLUE,   "BPC POLL byte 6 status change - cage=0x%02X, bpc_critical_octant_flags=0x%02X, type|port=0x%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcPollResponse2()" },
  { "1C"      , C_ERROR,  "BPC POLL byte 6 status change - cage=0x%02X, bpc_critical_octant_flags=0x%02X, type|port=0x%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcPollResponse2()" },
  { "1D"      , C_BLUE,   "BPC POLL byte 7 status change - cage=0x%02X, bpc_CPU_power_on_octant_flags=0x%02X, type|port=0x%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcPollResponse2()" },
  { "1E**00**", C_BLUE,   "BPC POLL byte 8 status change - cage=0x%02X, bpc_CPU_critical_octant_flags=0x%02X, type|port=0x%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcPollResponse2()" },
  { "1E"      , C_ERROR,  "BPC POLL byte 8 status change - cage=0x%02X, bpc_CPU_critical_octant_flags=0x%02X, type|port=0x%02X", "powr_fsp_bpc_handlers.C", "BPCRackClass::handleBpcPollResponse2()" },

  //
  { "200011"  , C_NORMAL, "Clock VPD Beacon/Pharos" },
  { "2000"    , C_NORMAL, "Clock VPD %02X%02X" },
  { "2001"    , C_NORMAL, "Clock VPD %02X%02X" },
  { "200231"  , C_NORMAL, "PU1 VPD - Apache" },
  { "2002"    , C_NORMAL, "PU1 VPD - %02X%02X" },
  { "20034"   , C_NORMAL, "PU1 VPD - 4 way" },
  { "2003"    , C_NORMAL, "PU1 VPD - %02X%02X" },
  { "200421"  , C_NORMAL, "BP VPD - Bridge-8" },
  { "200422"  , C_NORMAL, "BP VPD - Shark" },
  { "200423"  , C_NORMAL, "BP VPD - Bridge-12" },
  { "2004"    , C_NORMAL, "BP VPD - b33/b34" },
  { "2005"    , C_NORMAL, "BP VPD - b35/b36" },
  //
  { "20050040", C_NORMAL, "BP VPD - 640 CCM tables" },
  { "2005008" , C_NORMAL, "BP VPD - 650 CCM tables" },
  { "2006"    , C_NORMAL, "MS VPD - b33/b34" },
  { "2007"    , C_NORMAL, "MS VPD - b35/b36" },
  { "2008"    , C_NORMAL, "PU2 VPD - %02X%02X" },
  { "2009"    , C_NORMAL, "PU2 VPD - %02X%02X" },
  { "200A"    , C_NORMAL, "PU3 VPD - %02X%02X" },
  { "200B"    , C_NORMAL, "PU3 VPD - %02X%02X" },
  { "200C"    , C_NORMAL, "PU4 pwr vpd %02X%02X" },
  { "201000"  , C_NORMAL, "Box ID %02X" },
  { "20200100", C_NORMAL, "No VPD - clock card" },
  { "20200200", C_NORMAL, "No VPD - BP" },
  { "20200304", C_NORMAL, "No PU2 VPD" },
  { "20200305", C_NORMAL, "No PU3 VPD" },
  { "20200306", C_NORMAL, "No PU4 VPD" },
  { "20200400", C_NORMAL, "cleared ms vpd" },
  //
  { "20210100", C_ERROR,  "VPD Type Mismatch - clock card" },
  { "20210200", C_ERROR,  "VPD Type Mismatch - BP" },
  { "20210201", C_ERROR,  "Invalid CCM table" },
  { "20210400", C_ERROR,  "No VPD - MS" },
  { "2030"    , C_NORMAL, "VPD Code Level" },
  { "205000"  , C_RED,    "Invalid ConfigID (configID=0x%02X)", "powr_fsp_sqconfig.C", "box_config(),apply_config_parms()" },
  { "205001"  , C_RED,    "Invalid ConfigID (configID=0x%02X)", "powr_fsp_sqconfig.C", "box_config2_cfd()" },
  { "205100"  , C_RED,    "Invalid ConfigID (configID=0x%02X)", "powr_fsp_vpd_monitor.C", "vpd_cfg()" },
  { "2052"    , C_RED,    "Invalid card level (spvd rid=0x%02X%02X)", "powr_fsp_sqconfig.C", "box_config2()" },
  { "205300"  , C_BOLD,   "MFG Mode OFF" },
  { "205301"  , C_BOLD,   "MFG Mode ON" },

  //
  { "2100"    , C_ERROR,  "VPD Fail idconfig - State %02X Status %02X" },
  { "2101"    , C_ERROR,  "VPD Fail idconfig - Flags %02X Fail State %02X" },
  { "210200"  , C_ERROR,  "VPD Fail puvpd - Index %02X" },
  { "2103"    , C_ERROR,  "VPD Fail puvpd - State %02X Status %02X" },
  { "2104"    , C_ERROR,  "VPD Fail puvpd - Flags %02X Fail State %02X" },
  { "2110"    , C_NORMAL, "collect_svpd_rids() call duration: 0x%02X%02X seconds" },
  { "2120"    , C_ERROR,  "expandPersistentData version mismatch (code vers=%d, file vers=%d)", "powr_fsp_epow.C", "BPCNetworkClass::expandPersistentData" },
  { "2121"    , C_ERROR,  "opendir failed (errno=0x%02X%02X)", "powr_fsp_epow.C", "BPCNetworkClass::persistentStoreWrite()" },
  { "2122"    , C_ERROR,  "mkdir failed (errno=0x%02X%02X)", "powr_fsp_epow.C", "BPCNetworkClass::persistentStoreWrite()"  },
  { "2123"    , C_ERROR,  "closedir failed (errno=0x%02X%02X)", "powr_fsp_epow.C", "BPCNetworkClass::persistentStoreWrite()"  },
  { "2124"    , C_ERROR,  "opendir failed (errno=0x%02X%02X)", "powr_fsp_epow.C", "BPCNetworkClass::persistentStoreRead()"  },
  { "2125"    , C_ERROR,  "mkdir failed (errno=0x%02X%02X)", "powr_fsp_epow.C", "BPCNetworkClass::persistentStoreRead()"  },
  { "2126"    , C_ERROR,  "closedir failed (errno=0x%02X%02X)", "powr_fsp_epow.C", "BPCNetworkClass::persistentStoreRead()"  },
  { "2140**01", C_NORMAL, "Successfully collected installed SVPD RID (resource_type=0x%02X, collect_svpd_status=0x%02X)", "powr_i2c_dev.C", "collect_svpd_rids()" },
  { "2140"    , C_NORMAL, "Installed SVPD RID collection attempted (resource_type=0x%02X, collect_svpd_status=0x%02X)", "powr_i2c_dev.C", "collect_svpd_rids()" },
  { "2150**01", C_NORMAL, "Successfully collected SVPD RID (resource_type=0x%02X, collect_svpd_status=0x%02X)", "powr_i2c_dev.C", "collect_svpd_rids()" },
  { "2150"    , C_NORMAL, "SVPD RID collection attempted (resource_type=0x%02X, collect_svpd_status=0x%02X)" },
  { "2151"    , C_ERROR,  "Error reading location code from SVPD (rid=0x%02X%02X)" },
  { "2152"    , C_ERROR,  "Error updating FL keyword (rid=0x%02X%02X)" },
  { "2153"    , C_ERROR,  "Error reading size of stanza VPD (rid=0x%02X%02X)" },
  { "2154"    , C_ERROR,  "Error reading stanza VPD (rid=0x%02X%02X)" },
  { "2155"    , C_ERROR,  "Error reading SN keyword (loc code=...-%c%c...)" },
  { "2156"    , C_ERROR,  "Error reading CC keyword (loc code=...-%c%c...)" },
  { "2157"    , C_ERROR,  "Error reading PR keyword (rid=0x%02X%02X)" },
  { "2158"    , C_ERROR,  "Error updating FS keyword (rid=0x%02X%02X)" },
  { "2159**01", C_NORMAL, "Reading system TMS registry entries (0x%02X=success)", "powr_i2c_dev.C", "collect_tms()"  },
  { "2159**02", C_ERROR,  "Reading system TMS registry entries (0x%02X=get state fail)", "powr_i2c_dev.C", "collect_tms()"  },
  { "2159**03", C_ERROR,  "Reading system TMS registry entries (0x%02X=timeout)", "powr_i2c_dev.C", "collect_tms()"  },
  { "2159**04", C_ERROR,  "Reading system TMS registry entries (0x%02X=reg read fail)", "powr_i2c_dev.C", "collect_tms()"  },
  { "2159**"  , C_NORMAL, "Reading system TMS registry entries (status=0x%02X)", "powr_i2c_dev.C", "collect_tms()" },
  { "215A30"  , C_ERROR,  "NVS Update I1/Ix Error updating keyword - fsp%d", "powr_fsp_nvs.C", "update_I1_nvs()/update_IX_nvs()" },
  { "215B30"  , C_NORMAL, "NVS Update I1 keyword update successful - fsp%d", "powr_fsp_nvs.C", "update_I1_nvs()" },
  { "215C"    , C_ERROR,  "Error reading I1 keyword" },
  { "215D"    , C_ERROR,  "Error reading FN keyword (loc code=...-%c%c...)" },
  { "215E"    , C_ERROR,  "Location code not found in config table" },
  { "215F"    , C_ERROR,  "Error reading SVPD NVS RID (status=0x%02X,resv=%d)", "powr_i2c_dev.C", "get_nvs_svpd_rid_list()" },
  { "2160"    , C_ERROR,  "Error reading TM keyword (rid=0x%02X%02X)" },
  { "2161"    , C_ERROR,  "Error reading SE keyword (rid=0x%02X%02X)" },
  { "2162"    , C_ERROR,  "SVPD_which_fsp_am_i() call failed (rid=0x%02X%02X)" },
  { "2163"    , C_ERROR,  "Error getting parent RID" },
  { "2164"    , C_ERROR,  "Error reading VC/#V keyword (rid=0x%02X%02X)" },
  { "2165"    , C_ERROR,  "VC keyword data verification error (rid=0x%02X%02X)" },
  { "2166"    , C_ERROR,  "Pu voltage index mismatch between procs in unit 0x%02X" },
  { "2167"    , C_ERROR,  "VC keyword data version unknown" },
  //  { "2168"    , C_ERROR,  "Invalid index = 0x%02X in PR data of processor instance 0x%02X", "powr_fsp_power_up_state.C", "loadSecureVcTcData()" },
  { "2168"    , C_ERROR,  "Invalid index = 0x%02X in PR data of processor instance eclipz_proc_num=0x%02X", "powr_fsp_power_up_state.C", "loadSecureVcTcData()" },
  { "2169"    , C_WARNING,"Voltage index (index=0x%02X%02X)" },
  { "216A"    , C_WARNING,"Current index (index=0x%02X%02X)" },
  { "216B"    , C_ERROR,  "Error reading HE keyword (svpd_rid=0x%02X%02X)" },
  { "216C"    , C_ERROR,  "Error reading TC keyword (svpd_rid=0x%02X%02X)" },
  { "216D"    , C_WARNING,"Processing module vpd - nest (svpd_rid=0x%02X%02X)" },
  { "216E"    , C_WARNING,"Processing module vpd - cache (svpd_rid=0x%02X%02X)" },
  { "216F"    , C_ERROR,  "Error reading parent rid (svpd_rid=0x%02X%02X)" },
  { "217000"  , C_ERROR,  "Error reading number of VLED_FRU_ACCESS LEDs present" },
  { "217001"  , C_ERROR,  "Error reading number of VLED_ENCLOSURE_ACCESS LEDs present" },
  { "217002"  , C_ERROR,  "Error reading number of VLED_SYSTEM_ACCESS LEDs present" },
  { "217003"  , C_ERROR,  "Error reading number of VLED_POWER_ACCESS LEDs present" },
  { "217004"  , C_ERROR,  "Error reading number of VLED_ENCLOSURE_FAULT_ACCESS LEDs present" },
  { "2170"    , C_ERROR,  "Error reading number LEDs present" },
  { "2171"    , C_ERROR,  "Error getting led loc codes" },
  { "2172"    , C_ERROR,  "FRT not found for FRU LED" },
  { "2173"    , C_ERROR,  "FRT not found for enclosure LED" },
  { "2174**00", C_ERROR,  "Error getting LED access data (0x%02X VLED_FRU_ACCESS LED type)" },
  { "2174**01", C_ERROR,  "Error getting LED access data (0x%02X VLED_ENCLOSURE_ACCESS LED type)" },
  { "2174**02", C_ERROR,  "Error getting LED access data (0x%02X VLED_SYSTEM_ACCESS LED type)" },
  { "2174**03", C_ERROR,  "Error getting LED access data (0x%02X VLED_POWER_ACCESS LED type)" },
  { "2174**04", C_ERROR,  "Error getting LED access data (0x%02X VLED_ENCLOSURE_FAULT_ACCESS LED type)" },
  { "2174**05", C_ERROR,  "Error getting LED access data (0x%02X VLED_SYSTEM_POWER_ACCESS LED type)" },
  { "2174",     C_ERROR,  "Error getting LED access data (0x%02X LED type)" },
  { "2175**00", C_ERROR,  "Error controlling LED (0x%02X VLED_FRU_ACCESS LED type)" },
  { "2175**01", C_ERROR,  "Error controlling LED (0x%02X VLED_ENCLOSURE_ACCESS LED type)" },
  { "2175**02", C_ERROR,  "Error controlling LED (0x%02X VLED_SYSTEM_ACCESS LED type)" },
  { "2175**03", C_ERROR,  "Error controlling LED (0x%02X VLED_POWER_ACCESS LED type)" },
  { "2175**04", C_ERROR,  "Error controlling LED (0x%02X VLED_ENCLOSURE_FAULT_ACCESS LED type)" },
  { "2175**05", C_ERROR,  "Error controlling LED (0x%02X VLED_SYSTEM_POWER_ACCESS LED type)" },
  { "2175",     C_ERROR,  "Error controlling LED (0x%02X LED type)" },
  { "21760001", C_ERROR,  "Error setting ALL Firefly LEDs", "powr_fsp_firefly.C","controlAllFireflyLEDsThread()" },
  { "21760000", C_ERROR,  "IvpdFireFly setup call failed", "powr_fsp_firefly.C","controlAllFireflyLEDsThread()" },
  { "2177"    , C_ERROR,  "Error getting LED Firefly access data", "powr_fsp_firefly.C","rebuildFireflyAccessList()" },
  { "2180"    , C_NORMAL, "LED control request via SET cmd (rid: 0x%02X%02X)", "powr_fsp_led.C", "storeLEDStatus(),storeLedStatusWLoc()" },
  { "2181"    , C_NORMAL, "LED control request via SET cmd (old status: 0x%02X, new status: 0x%02X)", "powr_fsp_led.C", "storeLEDStatus(),storeLedStatusWLoc()"},
  { "2182"    , C_NORMAL, "Enclosure LED rollup needed (old status: 0x%02X, new status: 0x%02X)","powr_fsp_led.C","set_drawer_led()" },
  { "2183"    , C_NORMAL, "DASD LED changed (old status: 0x%02X, new status: 0x%02X)","powr_fsp_dasd_led.C","led_read_dasd_rollup()" },
  { "2184"    , C_NORMAL,  "Set received for LED control (mod: 0x%02X)", "powr_fsp_cmds.C", "c_cec_slave_rni_exec()" },
  { "218"     , C_ERROR,  "Error Updating Ix keyword (svpd rid=0x%02X%02X)" },
  { "219230"  , C_NORMAL, "NVS Update I2 - fsp%d", "powr_fsp_nvs.C", "update_IX_nvs()" },
  { "219330"  , C_NORMAL, "NVS Update I3 - fsp%d", "powr_fsp_nvs.C", "update_IX_nvs()" },
  { "219430"  , C_NORMAL, "NVS Update I4 - fsp%d", "powr_fsp_nvs.C", "update_IX_nvs()" },
  { "219530"  , C_NORMAL, "NVS Update I5 - fsp%d", "powr_fsp_nvs.C", "update_IX_nvs()" },
  { "219630"  , C_NORMAL, "NVS Update I6 - fsp%d", "powr_fsp_nvs.C", "update_IX_nvs()" },
  { "219730"  , C_NORMAL, "NVS Update I7 - fsp%d", "powr_fsp_nvs.C", "update_IX_nvs()" },
  { "219830"  , C_NORMAL, "NVS Update I8 - fsp%d", "powr_fsp_nvs.C", "update_IX_nvs()" },
  { "2193"    , C_ERROR,  "RI not found (rid=0x%02X%02X)" },
  { "219"     , C_NORMAL, "Ix keyword update success (svpd rid=0x%02X%02X)" },
  { "21A2"    , C_ERROR,  "NVS I2 All 00s or bad length - length=0x%02X%02X" },
  { "21A"     , C_ERROR,  "Error reading Ix keyword (svpd rid=0x%02X%02X)" },
  { "21B0"    , C_ERROR,  "I2C error determining presence of PHB %d" },
  { "21C0"    , C_ERROR,  "Softswitch HOM Failure - ss_get_control_info read (RID=0x%02X%02X)" },
  { "21C1"    , C_ERROR,  "Softswitch HOM Failure - card_check (RID=0x%02X%02X)" },
  { "21C2"    , C_NORMAL, "Softswitch HOM device works - ss_get_control_info read (RID=0x%02X%02X)" },
  { "21D0"    , C_NORMAL, "HyperBoot", "base/powr_fsp_misc.C", "get_ipl_speed()" },
  { "21D10002", C_NORMAL, "HyperBoot capable", "base/powr_fsp_fips_log.C", "terminateOnCritical()" },
  { "21D1"    , C_NORMAL, "Error reading IPL HyperBoot speed/capability", "base/powr_fsp_misc.C,powr_fsp_fips_log.C", "get_ipl_speed(),terminateOnCritical()" },
  { "21D2"    , C_NORMAL, "Error reading IPL HyperBoot capability", "L4/powr_fsp_pvd.C", "c_cec_slave_pvd_exec,PvdCmdHandler::processModifier1()" },
  { "21FF0000", C_NORMAL, "Default resource table used" },
  { "21FF0001", C_NORMAL, "Default resource table size used" },
  //
  { "2400"    , C_NORMAL, "Reload while powered off" },
  { "2401"    , C_NORMAL, "Reload while powered on" },
  //
  { "25000001", C_BOLD,   "Time stamp rollover occurred (add 18:12:15)" },
  { "25000002", C_BOLD,   "Time stamp rollover occurred (add 36:24:30)" },
  { "250000"  , C_BOLD,   "Time stamp rollover occurred (add 18:12:15 * %d)" },
  { "2500"    , C_BOLD,   "Time stamp rollover occurred (elog time 0x%02X%02X)" },
  { "2522"    , C_ERROR,  "SRC %02X%02X not found in xlate table" },
  { "2579"    , C_ERROR,  "elog corrupted" },
  { "257A"    , C_NORMAL, "emergency elog ptr used" },
  { "2580"    , C_ERROR,  "FFDC data collection failed" },

  //
  { "26000000", C_BOLD,   "Suspend handler started" },
  { "26000001", C_NORMAL, "SPCN state operational and suspend flag set" },
  { "26000002", C_BOLD,   "Suspend complete" },
  { "26000003", C_NORMAL, "cfg delay timer not expired (cfg data not valid for cfg check)" },
  { "26000010", C_NORMAL, "network suspended" },
  { "26000011", C_NORMAL, "queue ext smart card vpd request" },
  { "26000020", C_NORMAL, "Start BPC Suspended Timer (20s)", "powr_fsp_bpc_monitors.C", "bpc_monitor()" },
  { "26000021", C_BOLD,   "BPC Suspended", "powr_fsp_bpc_monitors.C", "bpc_monitor()" },
  { "26000030", C_NORMAL, "I2C suspended via server" },
  { "26000031", C_NORMAL, "I2C suspended via direct call" },
  { "26000040", C_NORMAL, "serial device monitor suspended" },
  { "26000041", C_NORMAL, "LSP xmit monitor suspended" },
  { "260000FF", C_NORMAL, "resume -- suspend cleared" },
  { "26000010", C_NORMAL, "queue ext smart card vpd request" },
  { "26000011", C_NORMAL, "queue ext smart card vpd request" },
  { "260010",   C_NORMAL, "Suspend requested for non-redundant FSP box (type=0x%02X)" },
  { "26002000", C_NORMAL, "Read valid CfgData file" },
  { "26002010", C_BOLD,   "SPCN Network configuration check passed" },
  { "26002011", C_ERROR,  "SPCN Network configuration check failed -- retry" },
  { "26002012", C_ERROR,  "SPCN Network configuration check failed" },
  { "2600201F", C_ERROR,  "Previous FSP had more Ethernet Connections", "powr_fsp_cfg_check.C", "EthernetConnectionTableClass::ectFspCfgCheck()" },
  { "26002020", C_ERROR,  "BPC UART 0 configuration check failed", "powr_fsp_cfg_check.C", "BPCPrimaryRackClass::uartFspCfgCheck()" },
  { "26002021", C_ERROR,  "BPC UART 1 configuration check failed", "powr_fsp_cfg_check.C", "BPCPrimaryRackClass::uartFspCfgCheck()" },
  { "26002022", C_BOLD,   "BPC UART configuration check complete/passed", "powr_fsp_cfg_check.C", "BPCPrimaryRackClass::uartFspCfgCheck()" },
  { "2600202*", C_ERROR,  "BPC UART configuration check failed (0x20|uart=0x%02X)",  },
  { "2600203E", C_BOLD,   "BPC UART configuration check complete/passed", "powr_fsp_cfg_check.C", "BPCPrimaryRackClass::uartFspCfgCheck()" },
  { "2600203F", C_BOLD,   "BPC Ethernet configuration check complete/passed", "powr_fsp_cfg_check.C", "EthernetConnectionTableClass::ectFspCfgCheck()" },
  { "2600203*", C_ERROR,  "BPC Ethernet conn#%c configuration check failed", "powr_fsp_cfg_check.C", "EthernetConnectionTableClass::ectFspCfgCheck()" },
  { "26002040", C_BOLD,   "All resume power config checks passed" },
  { "26002041", C_ERROR,  "Resume config check fail: Num present drawers dont match" },
  { "26002042", C_ERROR,  "Resume config check fail: Num present fans dont match" },
  { "26002043", C_ERROR,  "Resume config check fail: Num present serial devices dont match" },
  { "260020FD", C_ERROR,  "Failover to other FSP not possible, error ignored" },
  { "260020FE", C_BOLD,   "Request failover to other FSP", "powr_fsp_cfg_check.C", "resume_configuration_check()" },
  { "260020FF", C_BOLD,   "All config checks passed", "powr_fsp_cfg_check.C", "resume_configuration_check()" },
  { "2600AA40", C_BOLD,   "No devices present", "powr_fsp_dev.C", "serial_device_monitor_front_end()" },
  { "2601",     C_NORMAL, "CfgData invalid Format %02X Valid %02X" },
  { "26020100", C_NORMAL, "mcm nvs update required" },
  { "26030100", C_NORMAL, "ext smart card VPD collection complete" },
  { "26030200", C_ERROR,  "ext smart card VPD collection failure" },
  { "260100"  , C_NORMAL, "panel vpd cmd received" },
//  { "260200"  , C_NORMAL, "mcm nvs update required" },
//  { "260300"  , C_NORMAL, "ext smart card VPD collection in process" },
  { "2602"    , C_ERROR,  "Failover to other fsp not possible, rc upper 2 bytes: %02X%02X" },
  { "2603"    , C_ERROR,  "Failover to other fsp not possible, rc lower 2 bytes: %02X%02X" },
  { "2604"    , C_NORMAL, "Suspend Redundancy Disabled", "powr_fsp_suspend_coldstart.C", "suspend_coldstart()" },
  { "2612"    , C_NORMAL, "vses state 1.2" },
  { "2614"    , C_NORMAL, "vses state 1.4" },
  { "2615"    , C_NORMAL, "vses state 1.5" },
  { "2621"    , C_NORMAL, "vses state 2.1" },
  { "2623"    , C_NORMAL, "vses state 2.3" },
  { "2625"    , C_NORMAL, "vses state 2.5" },
  { "2627"    , C_NORMAL, "vses state 2.7" },
  { "2631"    , C_NORMAL, "vses state 3.1" },
  { "2633"    , C_NORMAL, "vses state 3.3" },
  { "2680"    , C_NORMAL, "vses dasd bp present" },
  { "2681"    , C_ERROR,  "vses dasd bp not present" },
  //
  { "2700**01", C_NORMAL, "Softswitch presence from VPD (resource_type=0x%02X, 0x%02X=success)", "powr_fsp_softswitch_control.C", "ss_presence_and_control()" },
  { "2700**02", C_NORMAL, "Softswitch presence from VPD (resource_type=0x%02X, 0x%02X=no rids returned)", "powr_fsp_softswitch_control.C", "ss_presence_and_control()" },
  { "2700**04", C_NORMAL, "Softswitch presence from VPD (resource_type=0x%02X, 0x%02X=no softswitch control)", "powr_fsp_softswitch_control.C", "ss_presence_and_control()" },
  { "2700"    , C_ERROR,  "Softswitch presence from VPD failure (resource_type=0x%02X, status=0x%02X)" },
  { "2701"    , C_ERROR,  "Softswitch I2C Cmd Sent Failed (rid=0x%02X%02X)" },
  { "2750"    , C_NORMAL, "Card DAC adjust successful (rid=0x%02X%02X)" },
  { "2751"    , C_ERROR,  "Card DAC adjust failed  (rid=0x%02X%02X)" },
  { "2752"    , C_ERROR,  "chicGetDACInfoForRID failed (rid=0x%02X%02X)" },
  { "2753"    , C_ERROR,  "chicGetDACInfoForRID returned invalid buffer size (size=0x%02X%02X)" },
  { "27C0"    , C_ERROR,  "SOFTSWITCH - HOM Failure (device=0x%02X%02X)" },
  { "27"      , C_NORMAL, "SOFTSWITCH" },
  //
  { "2800"    , C_ERROR,  "Invalid format 00 cmd from cmd line (cmd=0x%02X, mod=0x%02X)" },
  { "280150"  , C_ERROR,  "Invalid mod for direct cmd (mod=0x%02X)" },
  { "2801"    , C_ERROR,  "Invalid mod for format 00 cmd from cmd line (cmd=0x%02X, mod=0x%02X)", "base/powr_fsp_cmd_line_handler.C", "spcn_spi_thread_interface::spcnResume()" },
  { "2802"    , C_ERROR,  "Resume cmd received when not suspended (rsv=0x%02X, mod=0x%02X)", "base/powr_fsp_cmd_line_handler.C", "spcn_spi_thread_interface::spcnResume()" },
  { "2803"    , C_ERROR,  "Invalid format from cmd line (rsv=0x%02X, format=0x%02X)" },
  { "2804"    , C_ERROR,  "Invalid cmd_data_length parm (length=0x%02X%02X)" },
  { "2805"    , C_ERROR,  "Invalid length for format 00 cmd (length=0x%02X%02X)" },
  { "2806"    , C_ERROR,  "Invalid length for resume (length=0x%02X%02X)" },
  { "2807"    , C_ERROR,  "Invalid length for suspend (length=0x%02X%02X)" },
  { "2808"    , C_ERROR,  "Command not supported while suspended (cmd=0x%02X, mod=0x%02X)", "powr_fsp_cmd_line_handler.C", "cmd_line_format00()" },
  { "280F"    , C_WARNING,"Already suspended" },
  { "2810"    , C_ERROR,  "Invalid length for direct cmd (len=0x%02X, rsp_len=0x%02X)" },
  { "2811"    , C_ERROR,  "Invalid RID for worst case status direct cmd (rid=0x%02X%02X)" },
  { "2812"    , C_ERROR,  "Invalid length for fan high speed override direct cmd (length=0x%02X%02X)" },
  { "2813"    , C_ERROR,  "Invalid RID for fan high speed override direct cmd (rid=0x%02X%02X)" },
  { "2814"    , C_ERROR,  "Invalid length for send epow direct cmd (length=0x%02X%02X)" },
  { "2815"    , C_ERROR,  "Invalid RID for send epow direct cmd (rid=0x%02X%02X)" },
  { "2816"    , C_ERROR,  "Send EPOW direct cmd (epow_level=0x%02X, status=0x%02X)" },
  { "2817"    , C_NORMAL, "Invalid length for activate/deactivate command (length=0x%02%02)" },
  { "2818"    , C_NORMAL, "Invalid RID for activate/deactivate command (svpd rid=%02X%02X)" },
  { "2819"    , C_NORMAL, "Threading failure - send_activate_deactivate (pthread rc=0x%02X%02X)" },
  { "281A"    , C_NORMAL, "Invalid length for get pex power supply element (length=0x%02X%02X)" },
  { "281B"    , C_NORMAL, "CCMM read failure" },
  //
  { "290000"  , C_NORMAL, "CCM PowerOff - Begin PFU (unit = 0x%02X)", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pfu_ccm()" },
  { "2901"    , C_ERROR,  "CCM PowerOff - Invalid Length (length = 0x%02X%02X)", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pfu_ccm()" },
  { "290200"  , C_ERROR,  "CCM PowerOff - Invalid Modifier (mod = 0x%02X)", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pfu_ccm()" },
  { "290300"  , C_ERROR,  "CCM PowerOff - Invalid Node Type (node = 0x%02X)", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pfu_ccm()" },
  { "2904"    , C_ERROR,  "CCM PowerOff - Can't get CCM data", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pfu_ccm()" },
  { "2905"    , C_ERROR,  "CCM PowerOff - Not Enclosure RID (RID = 0x%02X%02X)", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pfu_ccm()" },
  { "2906"    , C_NORMAL, "CCM PowerOff - H:Unit not present, L4:Lamp Test in progress", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pfu_ccm()" },
  { "2907"    , C_ERROR,  "CCM PowerOff - H:System not up, L4: Node did not turn off (pnnum=0x%02X)", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pfu_ccm()" },
  { "2908"    , C_ERROR,  "CCM PowerOff - Failed Setting GARD state", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pfu_ccm()" },
  { "2909"    , C_NORMAL, "CCM PowerOff - PFU Complete", "powr_fsp_sqcmdline.C", "pfu_ccm2()" },
  { "290A"    , C_NORMAL, "Unit not present" },
  { "290B0000", C_NORMAL, "Power already in transition" },
  { "290B00"  , C_NORMAL, "CCM_CMD already queued (cmd=0x%02X)" },
  { "290D"    , C_NORMAL, "This is the last unit" },
  { "290E"    , C_ERROR,  "Invalid node - pfu (node=0x%02X)" },
  //
  { "300000"  , C_NORMAL, "CCM PowerOn - Begin PNU (L4:unit/H:cage=0x%02X)", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pnu_ccm()" },
  { "3001"    , C_ERROR,  "CCM PowerOn - Invalid Length (length = 0x%02X%02X)", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pnu_ccm()" },
  { "300200"  , C_ERROR,  "CCM PowerOn - Invalid Modifier (mod = 0x%02X)", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pnu_ccm()" },
  { "300300"  , C_ERROR,  "CCM PowerOn - Invalid Node Type (node = 0x%02X)", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pnu_ccm()" },
  { "3004"    , C_ERROR,  "CCM PowerOn - Cant get CCM data", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pnu_ccm()" },
  { "3005"    , C_ERROR,  "CCM PowerOn - Not Enclosure RID (RID = 0x%02X%02X)", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pnu_ccm()" },
  { "3006"    , C_ERROR,  "CCM PowerOn - Unit Not Present", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pnu_ccm()" },
  { "30070000", C_ERROR,  "CCM PowerOn - Prior System Power Up not complete", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pnu_ccm()" },
  { "3007"    , C_ERROR,  "CCM PowerOn - Node Power Up not complete", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pnu_ccm()" },
  { "3008"    , C_ERROR,  "CCM PowerOn - SES or PCI in progress", "powr_fsp_sqcmdline.C", "spcn_spi_thread_interface::pnu_ccm()" },
  { "3009"    , C_NORMAL, "CCM PowerOn - Processor VPD Collection", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "300A"    , C_ERROR,  "CCM PowerOn - Processor VPD Timeout", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "300B"    , C_NORMAL, "CCM PowerOn - Processor VPD Done", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "300C"    , C_ERROR,  "CCM PowerOn - Processor VPD Fault", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "300D"    , C_NORMAL, "CCM PowerOn - Sensor VPD collection", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "300E"    , C_ERROR,  "CCM PowerOn - Sensor VPD Timeout", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "300F"    , C_NORMAL, "CCM PowerOn - Sensor VPD Done", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "3010"    , C_ERROR,  "CCM PowerOn - pupinit timeout", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "3011"    , C_ERROR,  "CCM PowerOn - Fail During Proc Check", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "3012"    , C_ERROR,  "CCM PowerOn - Voltage Ajdust Fail", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "3013"    , C_ERROR,  "CCM PowerOn - PS Config Check Fail", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "3014"    , C_NORMAL, "CCM PowerOn - PS Power Up start", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "3015"    , C_ERROR,  "CCM PowerOn - PS Power Up CFD", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "3016"    , C_ERROR,  "CCM PowerOn - PS Power Up Timeout", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "3017"    , C_NORMAL, "CCM PowerOn - REG Power Up start", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "3018"    , C_ERROR,  "CCM PowerOn - REG Power Up CFD", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "3019"    , C_ERROR,  "CCM PowerOn - REG Power Up Timeout", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "301A"    , C_NORMAL, "CCM PowerOn - pgood check start", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "301B"    , C_ERROR,  "CCM PowerOn - pgood fail", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "301C"    , C_NORMAL, "CCM PowerOn - PNU Complete", "powr_fsp_sqcmdline.C", "pnu_ccm2()" },
  { "301D"    , C_ERROR,  "Invalid node - pnu (node=0x%02X)" },
  { "301E"    , C_ERROR,  "spreadspec timeout (unit=0x%02X)" },
  { "301F"    , C_ERROR,  "Invalid TMGT setting (CurrentVoltSetting=0x%02X)" },
  { "302000"  , C_ERROR,  "dpm call failed, errHndl = %02X" },
  { "30210000", C_ERROR,  "100v check failed" },
  { "30220000", C_ERROR,  "PS Present check failed" },

  //
  { "3101"    , C_ERROR,  "Invalid length (length=0x%02X)" },
  { "3102"    , C_ERROR,  "Invalid modifier (mod=0x%02X)" },
  { "311000"  , C_ERROR,  "Invalid node (G_node_type: 0x%02X)" },
  { "31110000", C_ERROR,  "cmd timeout" },
  { "3112"    , C_NORMAL, "BPC health status: 0x%02X%02X" },

  { "3120"    , C_NORMAL, "PFU_Octant - power off octant/sub-octant (SVPD rid: 0x%02X%02X)" },
  { "312100"  , C_ERROR,  "PFU_Octant - invalid node (G_node_type: 0x%02X)" },
  { "3122"    , C_ERROR,  "PFU_Octant - Not allowed if transitioning power (octant off 0x%02X and sub-octant off 0x%02X masks)" },
  { "3123"    , C_ERROR,  "PFU_Octant - Not allowed if SVPD failed (SVPD rid: 0x%02X%02X)" },
  { "3124"    , C_ERROR,  "PFU_Octant - DPM off failed (SVPD rid: 0x%02X%02X)" },
  { "3125"    , C_ERROR,  "PFU_Octant - Power off timer expired (SVPD rid: 0x%02X%02X)" },
  { "3126"    , C_NORMAL, "PFU_Octant - Powered off octant/sub-octant (SVPD rid: 0x%02X%02X)" },

  //
  { "3200"    , C_ERROR,  "Voltage Control - invalid modifier 0x%02X" },
  { "3201"    , C_ERROR,  "Voltage Control - invalid length 0x%02X%02X", "powr_fsp_sqcmdline.C", "tmgt_voltage_control()" },
  { "3202"    , C_ERROR,  "Voltage Control - invalid mode 0x????%02X%02X", "powr_fsp_sqcmdline.C", "tmgt_voltage_control()" },
  { "3203"    , C_ERROR,  "Voltage Control - hardware does not support" },
  { "3204"    , C_BOLD,   "Voltage Control start (mode=%d, mod=0x%02X)", "powr_fsp_sqcmdline.C", "tmgt_voltage_control()" },
  { "3205**00", C_BOLD,   "Voltage Control complete (mode=%d, status=%d)", "powr_fsp_bpc_handlers.C" },
  { "3205"    , C_ERROR,  "Voltage Control failed (mode=%d, status=%d)", "powr_fsp_bpc_handlers.C" },
  { "320600"  , C_NORMAL, "Power Cap Change Complete (status=%d)" },
  //
  { "3300"    , C_NORMAL, "Altitude sent to TMGT (0x%02X%02X)" },
  { "3301"    , C_ERROR,  "Error reading altitude" },
  { "3302"    , C_NORMAL, "Altitude not available" },
  { "3303"    , C_ERROR , "Error sending altitude to TMGT" },
  { "3304", C_ERROR,  "Error reading altitude limit in def file" },
  { "3305", C_ERROR,  "Error reading performance loss limit in def file" },

  { "3400"    , C_ERROR , "CIM: Trending data not sent (get current date/time failed)" },
  { "3401"    , C_ERROR , "CIM: Trending data not sent (write to UtilMem buffer failed)" },
  { "3402"    , C_ERROR , "CIM: Sending trending data to CIMP failed" },
  { "3403"    , C_NORMAL, "CIM: Restarted sending trending data to CIMP" },

  { "35"      , C_WARNING,"Def File: Error reading def file" },

  { "3600"    , C_NORMAL, "Enable memory voltages called"},
  { "3601"    , C_NORMAL, "Memory vrm pgoods added DEGATE_CPU0/DEGATE_CPU1"},
  { "3602"    , C_NORMAL, "Memory vrm pgoods added DEGATE_CPU2/DEGATE_CPU3"},
  { "3603"    , C_NORMAL, "Enable memory vrm completed"},
  { "3616"    , C_ERROR,  "No DIMM voltage info provided"},
  { "3617"    , C_ERROR,  "DDR4 memory is present and Vpp VRMs are not present"},   //@008A
  { "3620"    , C_NORMAL, "Disable memory voltages called"},
  { "3621"    , C_NORMAL, "Memory vrm pgoods removed DEGATE_CPU0/DEGATE_CPU1"},
  { "3622"    , C_NORMAL, "Memory vrm pgoods removed DEGATE_CPU2/DEGATE_CPU3"},
  { "3623"    , C_NORMAL, "Disable memory vrm completed"},
  { "3630"    , C_NORMAL, "Adjust memory voltages called"},
  { "3631"    , C_NORMAL, "Adjust memory voltages completed"},
  { "3640"    , C_NORMAL, "Adjust processor voltages called"},
  { "3641"    , C_NORMAL, "Adjust processor voltages completed"},

  { "3F00"    , C_BOLD,   "CM Reset: Reset not supported (card level: %02X%02X)", "powr_fsp_vin_monitor.C", "set_cm_reset()" },
  { "3F0101"  , C_NORMAL, "CM Reset: Drawers enabled  (CM_RESET_ENABLE, drawer mask: %02X)", "powr_fsp_vin_monitor.C", "set_cm_reset()" },
  { "3F0100"  , C_NORMAL, "CM Reset: Drawers disabled (CM_RESET_DISABLE, drawer mask: %02X)", "powr_fsp_vin_monitor.C", "set_cm_reset()" },
  { "3F01"    , C_NORMAL, "CM Reset: Drawer enabled/disabled (setting: %02X, drawer mask: %02X)", "powr_fsp_vin_monitor.C", "set_cm_reset()" },
  { "3F0201"  , C_NORMAL, "CM Reset: Error w/ primary FSP (CM_RESET_ENABLE, drawer mask: %02X)", "powr_fsp_vin_monitor.C", "set_cm_reset()" },
  { "3F0200"  , C_NORMAL, "CM Reset: Error w/ primary FSP (CM_RESET_DISABLE, drawer mask: %02X)", "powr_fsp_vin_monitor.C", "set_cm_reset()" },
  { "3F02"    , C_ERROR,  "CM Reset: Error w/ primary FSP (setting: %02X, drawer mask: %02X)", "powr_fsp_vin_monitor.C", "set_cm_reset()" },
  { "3F0301"  , C_NORMAL, "CM Reset: Error w/ backup FSP (CM_RESET_ENABLE, drawer mask: %02X)", "powr_fsp_vin_monitor.C", "set_cm_reset()" },
  { "3F0300"  , C_NORMAL, "CM Reset: Error w/ backup FSP (CM_RESET_DISABLE, drawer mask: %02X)", "powr_fsp_vin_monitor.C", "set_cm_reset()" },
  { "3F03"    , C_ERROR,  "CM Reset: Error w/ backup FSP (setting: %02X, drawer mask: %02X)", "powr_fsp_vin_monitor.C", "set_cm_reset()" },


  { "40000000", C_ERROR,  "I2C PSOC write failure" },

  { "410000"  , C_BOLD,   "At least one DCA powered on (rc = 0x%02X)" },
  { "410001"  , C_ERROR,  "DCA failed to power on (rc = 0x%02X)" },
  { "410100"  , C_ERROR,  "Both DCAs failed to power on (rc = 0x%02X)" },
  { "41020000", C_ERROR,  "No DCA Master" },
  { "41020001", C_ERROR,  "2 DCA Masters" },
  { "4103FF"  , C_BOLD,   "Workaround to allow single DCA power on (rc = 0x%02X)" },
  { "4103"    , C_BOLD,   "Workaround to allow single DCA power on (dca1_enable = 0x%02X, dca2_enable = 0x%02X)" },
  { "4104"    , C_ERROR,  "Planar failed to power on (mux master = 0x%02X, rc = 0x%02X)" },
  { "4105"    , C_ERROR,  "DCA failed to power off (mux=0x%02X, rc = 0x%02X)" },
  { "4106"    , C_ERROR,  "DCA failed to power on (mux=0x%02X, rc = 0x%02X)" },
  { "4107"    , C_ERROR,  "DCA planar failed to power off (mux=0x%02X, rc = 0x%02X)" },
  { "4108"    , C_ERROR,  "DCA failed to power on (mux=0x%02X)" },
  { "4110"    , C_ERROR,  "Communication Failure (mux=0x%02X, status=0x%02X)" },
  { "4111**4A", C_ERROR,  "Communication Failure - RC (seq=0x%02X, rc = 0x%02X RC_COMMAND_ERROR)" },
  { "4111**5A", C_ERROR,  "Communication Failure - RC (seq=0x%02X, rc = 0x%02X RC_COMM_ERROR)" },
  { "4111**5B", C_ERROR,  "Communication Failure - RC (seq=0x%02X, rc = 0x%02X RC_SECONDARY_COMM_ERROR)" },
  { "4111**5C", C_ERROR,  "Communication Failure - RC (seq=0x%02X, rc = 0x%02X RC_ROUTING_CB_MISCOMPARE)" },
  { "4111**5D", C_ERROR,  "Communication Failure - RC (seq=0x%02X, rc = 0x%02X RC_ROUTING_DEPOP_PORT)" },
  { "4111**5E", C_ERROR,  "Communication Failure - RC (seq=0x%02X, rc = 0x%02X RC_ROUTING_PACKET_ERROR)" },
  { "4111**6A", C_ERROR,  "Communication Failure - RC (seq=0x%02X, rc = 0x%02X RC_COMMAND_FAILED)" },
  { "4111**7A", C_ERROR,  "Communication Failure - RC (seq=0x%02X, rc = 0x%02X RC_FLASH_FAILED)" },
  { "4111**3A", C_ERROR,  "Communication Failure - RC (seq=0x%02X, rc = 0x%02X RC_COMMAND_STATUS)" },
  { "4111"    , C_ERROR,  "Communication Failure - RC (seq=0x%02X, rc = 0x%02X)" },
  { "4112"    , C_ERROR,  "Communication Failure - CRC (seq=0x%02X, crc = 0x%02X)" },
  { "4113"    , C_ERROR,  "Communication Failure (mux=0x%02X, fail count = 0x%02X)" },
  { "4114"    , C_ERROR,  "DCA failed to respond to POWER ON cmd (mux=0x%02X, rc = 0x%02X)" },
  { "411500"  , C_ERROR,  "DCA queue full" },
  { "4116"    , C_ERROR,  "Null pointer from queue" },
  { "4117"    , C_ERROR,  "Couldn't release queue pointer (0x%02X, mux=0x%02X)" },
  { "4118"    , C_ERROR,  "DCA CRC fail limit reached (mux=0x%02X, count = %d)" },
  { "4119"    , C_ERROR,  "DCA CMD fail limit reached (mux=0x%02X, count = %d)" },
  { "411A**01", C_ERROR,  "TMS to DCA CMD failed (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "411A**02", C_ERROR,  "TMS to DCA CMD failed (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "411A**03", C_ERROR,  "TMS to DCA CMD failed (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "411A**21", C_ERROR,  "TMS to DCA CMD failed (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "411A**F1", C_ERROR,  "TMS to DCA CMD failed (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "411A**F2", C_ERROR,  "TMS to DCA CMD failed (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "411A**FF", C_ERROR,  "TMS to DCA CMD failed (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "411A"    , C_ERROR,  "TMS to DCA CMD failed (mux=0x%02X, rc=0x%02X)" },
  { "411B"    , C_ERROR,  "DCA clear FRU status command failed (mux=0x%02X, cmd_rc = 0x%02X)" },
  { "411C00"  , C_ERROR,  "Tower TMS to DCA read  failed (mux=0, rc=0x%02X)" },
  { "411C80"  , C_ERROR,  "Tower TMS to DCA write failed (mux=0, rc=0x%02X)" },
  { "411C01"  , C_ERROR,  "Tower TMS to DCA read  failed (mux=1, rc=0x%02X)" },
  { "411C81"  , C_ERROR,  "Tower TMS to DCA write failed (mux=1, rc=0x%02X)" },

  { "411D00"  , C_NORMAL, "Tower TMS to DCA read done (mux=0, rc=0x%02X)" },
  { "411D80"  , C_NORMAL, "Tower TMS to DCA write done (mux=0, rc=0x%02X)" },
  { "411D01"  , C_NORMAL, "Tower TMS to DCA read done (mux=1, rc=0x%02X)" },
  { "411D81"  , C_NORMAL, "Tower TMS to DCA write done (mux=1, rc=0x%02X)" },

  { "411F"    , C_ERROR,  "Watchdog timer went off (nmi/irq=0x%02X, count = %d)" },
  { "41200100", C_ERROR,  "DCA critical fault during power on" },
  { "41200200", C_ERROR,  "DCA critical fault while powered on" },
  { "41200300", C_ERROR,  "DCA warning while powered on" },
  { "41200400", C_ERROR,  "DCA warning during power on" },
  { "4130"    , C_ERROR,  "DCA warning during power on (dca master=0x%02X, cpi_rc=0x%02X)" },
  { "4140"    , C_ERROR,  "No PRS data" },
  { "4141"    , C_ERROR,  "PRS checksum failure" },
  { "4142"    , C_ERROR,  "No VPD data" },
  { "4143"    , C_ERROR,  "VPD checksum failure" },
  { "4144"    , C_ERROR,  "DCA receive spurious interrupt" },
  { "4145"    , C_ERROR,  "DCA xmit spurious interrupt" },
  { "4146"    , C_ERROR,  "DCA-0 on, wrong power state (poll byte0 = 0x%02X, byte3 = 0x%02X)" },
  { "4147"    , C_ERROR,  "DCA-1 on, wrong power state (poll byte0 = 0x%02X, byte3 = 0x%02X)" },
  { "4148"    , C_ERROR,  "DCA-0 off, wrong power state (poll byte0 = 0x%02X, byte3 = 0x%02X)" },
  { "4149"    , C_ERROR,  "DCA-1 off, wrong power state (poll byte0 = 0x%02X, byte3 = 0x%02X)" },
  { "414A0000", C_ERROR,  "DCA-0,1 wrong power state, power off then on (poll byte0 = 0x%02X, byte3 = 0x%02X)" },
  { "414B0001", C_ERROR,  "DCA-0 AC lost" },
  { "414B0101", C_ERROR,  "DCA-1 AC lost" },
  { "414B0000", C_NORMAL, "DCA-0 AC Restored" },
  { "414B0100", C_NORMAL, "DCA-1 AC Restored" },
  { "414C0000", C_ERROR,  "DCA-0 fault during pup" },
  { "414C0001", C_ERROR,  "DCA-1 fault during pup" },
  { "414D0000", C_NORMAL, "DCA-0 power off" },
  { "414D0100", C_NORMAL, "DCA-1 power off" },
  { "414D0001", C_NORMAL, "DCA-0 power on" },
  { "414D0101", C_NORMAL, "DCA-1 power on" },
  { "414E0000", C_ERROR,  "DCA's faulted off, no AC faults - power off" },

  { "4150"    , C_ERROR,  "RSP buffer underflow (Received rsp_byte_cnt = 0x%02X%02X)" },
  { "4151"    , C_ERROR,  "RSP buffer underflow (Expected rcv_buf_length = 0x%02X%02X)" },
  { "415246"  , C_ERROR,  "RSP buffer underflow (cmd: 0x46 CMD_ALTER_BUFFER, Version: 0x%02X)" },
  { "4152"    , C_ERROR,  "RSP buffer underflow (cmd: 0x%02X, Version: 0x%02X)" },

  { "41530000", C_NORMAL, "DCA-0 dca_score (low bytes): 0x0000" },
  { "4153"    , C_ERROR,  "DCA-0 dca_score (low bytes): 0x%02X%02X" },
  { "41540000", C_NORMAL, "DCA-0 dca_score (high bytes): 0x0000" },
  { "4154"    , C_ERROR,  "DCA-0 dca_score (high bytes): 0x%02X%02X" },
  { "41550000", C_NORMAL, "DCA-1 dca_score (low bytes): 0x0000" },
  { "4155"    , C_ERROR,  "DCA-1 dca_score (low bytes): 0x%02X%02X" },
  { "41560000", C_NORMAL, "DCA-1 dca_score (high bytes): 0x0000" },
  { "4156"    , C_ERROR,  "DCA-1 dca_score (high bytes): 0x%02X%02X" },
  { "41570000", C_NORMAL, "Start lamp test" },
  { "41570001", C_NORMAL, "Stop lamp test" },
  { "41580000", C_NORMAL, "DCC command to force DCA EDFI check" },

  { "416000"  , C_NORMAL, "Start critical fan timer (fan_critical: 0x%02X)" },
  { "416031FF", C_ERROR,  "Unknown DCA EDFI fault" },
  { "416100"  , C_NORMAL, "Stop critical fan timer (fan_critical: 0x%02X)" },
  { "41620001", C_NORMAL, "dca_fan_max_cmd max speed succeeded" },
  { "41620000", C_NORMAL, "dca_fan_max_cmd normal speed succeeded" },
  { "4163"    , C_ERROR,  "Failed deque when there was nothing on DCA queue (que_pending: %d, pending: %d)" },

  { "41700000", C_BOLD,   "Force VPD Recollect Command Received (PVD mod 0x0F)" },
  { "4171"    , C_NORMAL, "DCA Comm Queue Flushed (calc_pending %d, que_pending %d)" },
  { "417201"  , C_ERROR,  "DCA Rsp Invalid ESC Byte (0x%02X)" },
  { "417300"  , C_ERROR,  "DCA Rsp Missing End (cmd = 0x%02X)" },
  { "4174"    , C_ERROR,  "DCA Comm Sequence Number Mismatch (rsp_seq: 0x%02X, cmd_seq: 0x%02X)" },
  { "41750000", C_NORMAL, "VPD Recollect Requested from OCA" },
  { "4176"    , C_ERROR,  "DCA Comm Sequence Number Mismatch w/ Comm Fail (rsp_seq: 0x%02X, cmd_seq: 0x%02X)" },
  { "417700"  , C_ERROR,  "DCA Rsp Underflow b/c it is in Boot/SRAM Mode (oca_mode: 0x%02X)" },
  { "4178"    , C_ERROR,  "Other OCA is in SRAM/Boot during download (other_mux: 0x%02X, oca_mode: 0x%02X)" },
  { "4179"    , C_ERROR,  "Master Switch Timer expired (DCA1_MASTER: 0x%02X, DCA0_MASTER: 0x%02X)" },
  { "417A"    , C_NORMAL, "DCA Set Master Command (mux_port: 0x%02X, G_dca_master: 0x%02X)" },
  { "417B"    , C_NORMAL, "DCA Clear Master Command (mux_port: 0x%02X, G_dca_master: 0x%02X)" },
  { "417C"    , C_NORMAL, "CPI data (ASCII bytes 0 & 15 -> %c %c)" },

  { "41A0"    , C_NORMAL, "Tower utms: %c %c" },
  { "41A1"    , C_NORMAL, "Tower utms: %c %c" },
  { "41A2"    , C_NORMAL, "Tower utms: %c %c" },
  { "41A3"    , C_NORMAL, "Tower utms: %c %c" },
  { "41A4"    , C_NORMAL, "Tower utms: %c %c" },
  { "41A5"    , C_NORMAL, "Tower utms: %c %c" },
  { "41A6"    , C_NORMAL, "Tower utms: %c %c" },
  { "41A7"    , C_NORMAL, "Tower utms: %c %c" },

  { "41B0"    , C_ERROR,  "DCA Comm Fail (rsp_seq: 0x%02X, rsp_rc: 0x%02X)" },
  { "41B1"    , C_ERROR,  "DCA Comm Fail (chk_len: %d, msg_len: %d)" },
  { "41B2"    , C_ERROR,  "DCA Comm Fail (cmd: 0x%02X, vers: %d)" },
  { "41B3"    , C_ERROR,  "DCA Comm Fail (rsp_rc: 0x%02X, data[0]: 0x%02X)" },
  { "41B4"    , C_ERROR,  "DCA Comm Fail (data[1]: 0x%02X, data[2]: 0x%02X)" },
  { "41B5"    , C_ERROR,  "DCA Comm Fail (rsp_cksm: 0x%02X, status.word: 0x%02X)" },

  { "41B8"    , C_NORMAL, "DCA Switch Master Set Master PTE (cmd_rc: %d, rc: %d)" },
  { "41C0"    , C_NORMAL, "DCA PHYP Interrupt Cmd Sent" },

  { "4200"    , C_NORMAL, "Port card %02X, present %02X" },
  { "420100"  , C_NORMAL, "DCA-0 present %02X" },
  { "420101"  , C_NORMAL, "DCA-1 present %02X" },
  { "4202"    , C_NORMAL, "Planar %02X, present %02X" },
  { "4203"    , C_NORMAL, "Midplane %02X, present %02X" },
  { "4204"    , C_NORMAL, "DASD backplane %02X, present %02X" },
  { "4205"    , C_NORMAL, "Conduit %02X, present %02X" },
  { "4206**01", C_NORMAL, "System controller card instance %d present(0x%02x)" },
  { "4206**00", C_WARNING,"System controller card instance %d NOT present(0x%02x)" },
  { "4207**01", C_NORMAL, "CEC drawer controller card instance %d present(0x%02x)" },
  { "4207**00", C_WARNING,"CEC drawer controller card instance %d NOT present(0x%02x)" },

  { "42"      , C_ERROR,  "Communication Failure - CRC (check_byte=0x%02X, dca_rx_msg_length=0x%02X, rsp status=0x%02X)" },

  { "4300",     C_ERROR,  "perom_test failure (checksum: 0x%02X%02X)" },
  { "4301",     C_NORMAL, "perom_test success (checksum: 0x%02X%02X)" },
  { "43020000", C_ERROR,  "background_copy_monitor erase failed" },
  { "43030000", C_NORMAL, "background_copy_monitor erase worked" },
  { "43050000", C_NORMAL, "background_copy_monitor finished" },
  { "4310",     C_NORMAL, "this code level  0x%02X%02X" },
  { "4311",     C_NORMAL, "other code level 0x%02X%02X" },
  { "4312",     C_ERROR,  "perom_select: mini checksum failure" },
  { "432042",   C_ERROR,  "Tried to erase unknown sec. (download status: 0x%02X STATUS_PEROM_FAILURE, L_idx: %d)" },
  { "4320",     C_ERROR,  "Tried to erase unknown sec. (download status: 0x%02X, L_idx: %d)" },
  { "4321",     C_NORMAL, "Reset PEROM error" },

  { "43D10000", C_NORMAL, "get_nv_storage"},
  { "43E000",   C_NORMAL, "Update non-vol storage (start)" },
  { "43E001",   C_NORMAL, "Update non-vol storage (done)" },
  { "43E10000", C_NORMAL, "Skip update of nonvol storage" },
  { "43F0",     C_NORMAL, "perom_test (initial calculated checksum 0x%02X%02X)" },
  { "43F1",     C_NORMAL, "perom_test (8-bits subtract checksum: 0x%02X%02X)" },
  { "43F2"    , C_ERROR,  "perom_test failed (code length = 0x%02X%02X)", "t19_bats.cpp" },

  { "4400",     C_NORMAL, "DCA download state machine (mux = 0x%02X, download state = 0x%02X)" },
  { "440100",   C_ERROR,  "DCA download command or step failed. rc = 0x%02X" },
  { "440101",   C_ERROR,  "DCA download command or step failed. rc = 0x%02X" },
  { "440102",   C_NORMAL, "DCA download dca_jump_to_address(). rc = 0x%02X" },
  { "4401",     C_NORMAL, "DCA download (rc = 0x%02X)" },
  { "440200",   C_ERROR,  "DCA download power on timer failure. timeout = 0x%02X" },
  { "44B0",     C_NORMAL, "DCA-0 boot code level (0x%02X%02X)" },
  { "44B1",     C_NORMAL, "DCA-1 boot code level (0x%02X%02X)" },
  { "44B2",     C_NORMAL, "Failed to get boot level  (mux=0x%02X, rc = 0x%02X)" },
  { "44C0",     C_NORMAL, "DCA-0 app code level (0x%02X%02X)" },
  { "44C1",     C_NORMAL, "DCA-1 app code level (0x%02X%02X)" },
  { "44C2",     C_ERROR,  "Failed to get code level (mux=0x%02X,rc = 0x%02X)" },
  { "44C3",     C_ERROR,  "bep update required (mux=0x%02X, bep_data = 0x%02X)" },
  { "44C4",     C_ERROR,  "bep timeout or error (timeout=0x%02X, rc = 0x%02X)" },
  { "44C5",     C_NORMAL, "bep update success (mux=0x%02X, err_cnt=%d)" },
  { "44C6",     C_ERROR,  "ROM section CRC fail (cal CRC = 0x%02X, ROM CRC = 0x%02X)" },
  { "44C70000", C_ERROR,  "app sector flash fail" },
  { "44C70001", C_ERROR,  "boot sector flash fail" },
  { "44C8",     C_ERROR,  "boot level mismatch (DCA level 0x%02X, file level 0x%02X)" },
  { "44C90000", C_ERROR,  "App failed to start" },
  { "44CA",     C_ERROR,  "App level mismatch (DCA level 0x%02X, file level 0x%02X)" },
  { "44CB",     C_ERROR,  "Non-redundant (DCA-1 stale poll cnt %d, DCA-0 stale poll cnt %d)" },
  { "44CD00",   C_ERROR,  "Download Failed (DCA %d)" },
  { "44CE",     C_ERROR,  "Download Failed (stale data counts (DCA-1: %d, DCA-0: %d)" },

  { "44D000",   C_NORMAL, "Download Boot Code (mux=0x%02X)" },
  { "44D001",   C_NORMAL, "Download App Code (mux=0x%02X)" },

  { "44F0",     C_ERROR,  "DCA download state 0 fail (rc = 0x%02X%02X)" },
  { "44F1",     C_ERROR,  "DCA download state 1 fail (rc = 0x%02X%02X)" },
  { "44F2",     C_ERROR,  "DCA download state 2 fail (rc = 0x%02X%02X)" },
  { "44F3",     C_ERROR,  "DCA download state 3 fail (rc = 0x%02X%02X)" },
  { "44F4",     C_ERROR,  "DCA download state 4 fail (rc = 0x%02X%02X)" },
  { "44F5",     C_ERROR,  "DCA download state 5 fail (rc = 0x%02X%02X)" },
  { "44F6",     C_ERROR,  "DCA download state 6 fail (rc = 0x%02X%02X)" },
  { "44F7",     C_ERROR,  "DCA download state 7 fail (rc = 0x%02X%02X)" },
  { "44F8",     C_ERROR,  "DCA download state 8 fail (rc = 0x%02X%02X)" },
  { "44F9",     C_ERROR,  "DCA download state 9 fail (rc = 0x%02X%02X)" },
  { "44FA",     C_ERROR,  "DCA download state 10 fail (rc = 0x%02X%02X)" },
  { "44FB",     C_ERROR,  "DCA download state 11 fail (rc = 0x%02X%02X)" },
  { "44FC",     C_ERROR,  "DCA download state 12 fail (rc = 0x%02X%02X)" },
  { "44FD",     C_ERROR,  "DCA download state 13 fail (rc = 0x%02X%02X)" },
  { "44FE",     C_ERROR,  "DCA download state 14 fail (rc = 0x%02X%02X)" },
  { "44FF0000", C_ERROR,  "DCA download default state fail" },

  { "4500",     C_NORMAL, "DCA POLL status change (byte 0 of DCA-0 poll = 0x%02X, DCA-0 old poll = 0x%02X)" },
  { "4501",     C_NORMAL, "DCA POLL status change (byte 1 of DCA-0 poll = 0x%02X, DCA-0 old poll = 0x%02X)" },
  { "4502",     C_NORMAL, "DCA POLL status change (byte 2 of DCA-0 poll = 0x%02X, DCA-0 old poll = 0x%02X)" },
  { "4503",     C_NORMAL, "DCA POLL status change (byte 3 of DCA-0 poll = 0x%02X, DCA-0 old poll = 0x%02X)" },
  { "4504",     C_NORMAL, "DCA POLL status change (byte 4 of DCA-0 poll = 0x%02X, DCA-0 old poll = 0x%02X)" },
  { "4505",     C_NORMAL, "DCA POLL status change (byte 5 of DCA-0 poll = 0x%02X, DCA-0 old poll = 0x%02X)" },
  { "4506",     C_NORMAL, "DCA POLL status change (byte 6 of DCA-0 poll = 0x%02X, DCA-0 old poll = 0x%02X)" },
  { "4507",     C_NORMAL, "DCA POLL status change (byte 7 of DCA-0 poll = 0x%02X, DCA-0 old poll = 0x%02X)" },
  { "4508",     C_NORMAL, "DCA POLL status change (byte 8 of DCA-0 poll = 0x%02X, DCA-0 old poll = 0x%02X)" },
  { "4509",     C_NORMAL, "DCA POLL status change (byte 9 of DCA-0 poll = 0x%02X, DCA-0 old poll = 0x%02X)" },
  { "450A",     C_NORMAL, "DCA POLL status change (byte 10 of DCA-0 poll = 0x%02X, DCA-0 old poll = 0x%02X)" },
  { "450B",     C_NORMAL, "DCA POLL status change (byte 11 of DCA-0 poll = 0x%02X, DCA-0 old poll = 0x%02X)" },
  { "4510",     C_NORMAL, "DCA POLL status change (byte 0 of DCA-1 poll = 0x%02X, DCA-1 old poll = 0x%02X)" },
  { "4511",     C_NORMAL, "DCA POLL status change (byte 1 of DCA-1 poll = 0x%02X, DCA-1 old poll = 0x%02X)" },
  { "4512",     C_NORMAL, "DCA POLL status change (byte 2 of DCA-1 poll = 0x%02X, DCA-1 old poll = 0x%02X)" },
  { "4513",     C_NORMAL, "DCA POLL status change (byte 3 of DCA-1 poll = 0x%02X, DCA-1 old poll = 0x%02X)" },
  { "4514",     C_NORMAL, "DCA POLL status change (byte 4 of DCA-1 poll = 0x%02X, DCA-1 old poll = 0x%02X)" },
  { "4515",     C_NORMAL, "DCA POLL status change (byte 5 of DCA-1 poll = 0x%02X, DCA-1 old poll = 0x%02X)" },
  { "4516",     C_NORMAL, "DCA POLL status change (byte 6 of DCA-1 poll = 0x%02X, DCA-1 old poll = 0x%02X)" },
  { "4517",     C_NORMAL, "DCA POLL status change (byte 7 of DCA-1 poll = 0x%02X, DCA-1 old poll = 0x%02X)" },
  { "4518",     C_NORMAL, "DCA POLL status change (byte 8 of DCA-1 poll = 0x%02X, DCA-1 old poll = 0x%02X)" },
  { "4519",     C_NORMAL, "DCA POLL status change (byte 9 of DCA-1 poll = 0x%02X, DCA-1 old poll = 0x%02X)" },
  { "451A",     C_NORMAL, "DCA POLL status change (byte 10 of DCA-1 poll = 0x%02X, DCA-1 old poll = 0x%02X)" },
  { "451B",     C_NORMAL, "DCA POLL status change (byte 11 of DCA-1 poll = 0x%02X, DCA-1 old poll = 0x%02X)" },

  { "4600",     C_ERROR,  "DCA erl summary bits (tres error log bytes 2 & 3 = 0x%02X, 0x%02X)" },
  { "4601",     C_ERROR,  "DCA-0 erl bits (tres error log bytes 4 & 5 = 0x%02X, 0x%02X)" },
  { "4602",     C_ERROR,  "DCA-1 erl bits (tres error log bytes 6 & 7 = 0x%02X, 0x%02X)" },
  { "4603",     C_ERROR,  "midplain erl bits (tres error log bytes 8 & 9 = 0x%02X, 0x%02X)" },
  { "4604",     C_ERROR,  "Conduit erl bits (tres error log bytes 10 & 11 = 0x%02X, 0x%02X)" },
  { "4605",     C_ERROR,  "DASD BP erl bits (tres error log bytes 12 & 13 = 0x%02X, 0x%02X)" },
  { "4606",     C_ERROR,  "Port card 1 erl bits (tres error log bytes 14 & 15 = 0x%02X, 0x%02X)" },
  { "4607",     C_ERROR,  "Port card 2 erl bits (tres error log bytes 16 & 17 = 0x%02X, 0x%02X)" },
  { "4608",     C_ERROR,  "Port card 3 erl bits (tres error log bytes 18 & 19 = 0x%02X, 0x%02X)" },
  { "4609",     C_ERROR,  "Port card 4 erl bits (tres error log bytes 20 & 21 = 0x%02X, 0x%02X)" },
  { "460A",     C_ERROR,  "PHYP erl bits (tres error log bytes 22 & 23 = 0x%02X, 0x%02X)" },
  { "460B",     C_ERROR,  "INFO erl bits (tres error log bytes 24 & 25 = 0x%02X, 0x%02X)" },
  { "460C",     C_ERROR,  "Planar1 byte 0-1 (tres error log bytes 26 & 27 = 0x%02X, 0x%02X)" },
  { "460D",     C_ERROR,  "Planar1 byte 2-3 (tres error log bytes 28 & 29 = 0x%02X, 0x%02X)" },
  { "460E",     C_ERROR,  "Planar1 byte 4-5 (tres error log bytes 30 & 31 = 0x%02X, 0x%02X)" },
  { "460F",     C_ERROR,  "Planar1 byte 6-7 (tres error log bytes 32 & 33 = 0x%02X, 0x%02X)" },
  { "4610",     C_ERROR,  "Planar1 byte 8-9 (tres error log bytes 34 & 35 = 0x%02X, 0x%02X)" },
  { "4620",     C_ERROR,  "DCA-0 Fan error data (error log bytes 2 & 3 = 0x%02X, 0x%02X)" },
  { "4621",     C_ERROR,  "DCA-0 Fan error data (error log byte 4 = 0x%02X)" },
  { "4622",     C_ERROR,  "DCA-1 Fan error data (error log bytes 5 & 6 = 0x%02X, 0x%02X)" },
  { "4623",     C_ERROR,  "DCA-1 Fan error data (error log byte 7 = 0x%02X)" },
  { "4630",     C_ERROR,  "DCA-0 VRM error data (vrm num = %d, status byte 0x00 = 0x%02X)" },
  { "4631",     C_ERROR,  "DCA-0 VRM error data (vrm num = %d, status byte 0x01 = 0x%02X)" },
  { "4632",     C_ERROR,  "DCA-0 VRM error data (vrm num = %d, status byte 0x02 = 0x%02X)" },

  { "4640",     C_ERROR,  "DCA-1 VRM error data (vrm num = %d, status byte 0x00 = 0x%02X)" },
  { "4641",     C_ERROR,  "DCA-1 VRM error data (vrm num = %d, status byte 0x01 = 0x%02X)" },
  { "4642",     C_ERROR,  "DCA-1 VRM error data (vrm num = %d, status byte 0x02 = 0x%02X)" },

  { "4701",     C_NORMAL, "SAN DDA debug (G_download_block_num=0x%02X, command_ptr->mod=0x%02X)" },
  { "4711",     C_NORMAL, "SAN DDA debug (last_block_num=0x%02X, response_ptr->mod=0x%02X)" },
  { "4712",     C_NORMAL, "SAN DDA debug (san_wbc_cmd_ready=0x%02X, san_wbc_response_ready=0x%02X)" },
  { "4713",     C_BOLD,   "First PHYP IB Cmd after PON (mod: 0x%02X, cmd: 0x%02X)" },
  { "47FF",     C_NORMAL, "SAN DDA debug (G_san_vmc_cmd.cmd=0x%02X, G_san_vmc_cmd.mod=0x%02X)" },

  { "4800**00", C_NORMAL, "dca_get_tres_errors (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "4800**01", C_ERROR,  "dca_get_tres_errors (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4800**02", C_ERROR,  "dca_get_tres_errors (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4800**03", C_ERROR,  "dca_get_tres_errors (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4800**21", C_ERROR,  "dca_get_tres_errors (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4800**F0", C_NORMAL, "dca_get_tres_errors (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4800**F1", C_ERROR,  "dca_get_tres_errors (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4800**F2", C_ERROR,  "dca_get_tres_errors (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4800**FF", C_ERROR,  "dca_get_tres_errors (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4800",     C_ERROR,  "dca_get_tres_errors (mux=0x%02X, rc=0x%02X)" },
  { "4801**00", C_NORMAL, "dca_get_fan_errors (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "4801**01", C_ERROR,  "dca_get_fan_errors (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4801**02", C_ERROR,  "dca_get_fan_errors (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4801**03", C_ERROR,  "dca_get_fan_errors (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4801**21", C_ERROR,  "dca_get_fan_errors (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4801**F0", C_NORMAL, "dca_get_fan_errors (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4801**F1", C_ERROR,  "dca_get_fan_errors (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4801**F2", C_ERROR,  "dca_get_fan_errors (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4801**FF", C_ERROR,  "dca_get_fan_errors (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4801",     C_ERROR,  "dca_get_fan_errors (mux=0x%02X, rc=0x%02X)" },
  { "4802**00", C_NORMAL, "dca_get_fault_status (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "4802**01", C_ERROR,  "dca_get_fault_status (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4802**02", C_ERROR,  "dca_get_fault_status (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4802**03", C_ERROR,  "dca_get_fault_status (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4802**21", C_ERROR,  "dca_get_fault_status (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4802**F0", C_NORMAL, "dca_get_fault_status (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4802**F1", C_ERROR,  "dca_get_fault_status (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4802**F2", C_ERROR,  "dca_get_fault_status (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4802**FF", C_ERROR,  "dca_get_fault_status (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4802",     C_ERROR,  "dca_get_fault_status (mux=0x%02X, rc=0x%02X)" },
  { "4803**00", C_NORMAL, "dca_get_vrm_status (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "4803**01", C_ERROR,  "dca_get_vrm_status (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4803**02", C_ERROR,  "dca_get_vrm_status (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4803**03", C_ERROR,  "dca_get_vrm_status (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4803**F0", C_NORMAL, "dca_get_vrm_status (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4803**21", C_ERROR,  "dca_get_vrm_status (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4803**F1", C_ERROR,  "dca_get_vrm_status (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4803**F2", C_ERROR,  "dca_get_vrm_status (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4803**FF", C_ERROR,  "dca_get_vrm_status (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4803",     C_ERROR,  "dca_get_vrm_status (mux=0x%02X, rc=0x%02X)" },
  { "4804**00", C_NORMAL, "dca_get_prs (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "4804**01", C_ERROR,  "dca_get_prs (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4804**02", C_ERROR,  "dca_get_prs (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4804**03", C_ERROR,  "dca_get_prs (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4804**F0", C_NORMAL, "dca_get_prs (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4804**21", C_ERROR,  "dca_get_prs (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4804**F1", C_ERROR,  "dca_get_prs (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4804**F2", C_ERROR,  "dca_get_prs (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4804**FF", C_ERROR,  "dca_get_prs (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4804",     C_ERROR,  "dca_get_prs (mux=0x%02X, rc=0x%02X)" },
  { "4805**00", C_NORMAL, "dca_get_vpd (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "4805**01", C_ERROR,  "dca_get_vpd (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4805**02", C_ERROR,  "dca_get_vpd (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4805**03", C_ERROR,  "dca_get_vpd (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4805**F0", C_NORMAL, "dca_get_vpd (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4805**21", C_ERROR,  "dca_get_vpd (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4805**F1", C_ERROR,  "dca_get_vpd (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4805**F2", C_ERROR,  "dca_get_vpd (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4805**FF", C_ERROR,  "dca_get_vpd (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4805",     C_ERROR,  "dca_get_vpd (mux=0x%02X, rc=0x%02X)" },
  { "4806**00", C_NORMAL, "dca_get_cpi (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "4806**01", C_ERROR,  "dca_get_cpi (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4806**02", C_ERROR,  "dca_get_cpi (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4806**03", C_ERROR,  "dca_get_cpi (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4806**F0", C_NORMAL, "dca_get_cpi (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4806**21", C_ERROR,  "dca_get_cpi (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4806**F1", C_ERROR,  "dca_get_cpi (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4806**F2", C_ERROR,  "dca_get_cpi (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4806**FF", C_ERROR,  "dca_get_cpi (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4806",     C_ERROR,  "dca_get_cpi (mux=0x%02X, rc=0x%02X)" },
  { "4807F000", C_NORMAL, "dca_lamp_test stop alt DCA (rc=0x%02X DCA_NO_ERROR_RC)" },
  { "4807F001", C_ERROR,  "dca_lamp_test stop alt DCA (rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4807F002", C_ERROR,  "dca_lamp_test stop alt DCA (rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4807F003", C_ERROR,  "dca_lamp_test stop alt DCA (rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4807F021", C_ERROR,  "dca_lamp_test stop alt DCA (rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4807F0F0", C_NORMAL, "dca_lamp_test stop alt DCA (rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4807F0F1", C_ERROR,  "dca_lamp_test stop alt DCA (rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4807F0F2", C_ERROR,  "dca_lamp_test stop alt DCA (rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4807F0FF", C_ERROR,  "dca_lamp_test stop alt DCA (rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4807F0",   C_ERROR,  "dca_lamp_test stop alt DCA failed (rc=0x%02X)" },
  { "4807F100", C_NORMAL, "dca_lamp_test start alt DCA (rc=0x%02X DCA_NO_ERROR_RC)" },
  { "4807F101", C_ERROR,  "dca_lamp_test start alt DCA (rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4807F102", C_ERROR,  "dca_lamp_test start alt DCA (rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4807F103", C_ERROR,  "dca_lamp_test start alt DCA (rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4807F121", C_ERROR,  "dca_lamp_test start alt DCA (rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4807F1F0", C_NORMAL, "dca_lamp_test start alt DCA (rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4807F1F1", C_ERROR,  "dca_lamp_test start alt DCA (rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4807F1F2", C_ERROR,  "dca_lamp_test start alt DCA (rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4807F1FF", C_ERROR,  "dca_lamp_test start alt DCA (rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4807F1",   C_ERROR,  "dca_lamp_test start alt DCA failed (rc=0x%02X)" },
  { "48070100", C_NORMAL, "dca_lamp_test start (rc=0x%02X DCA_NO_ERROR_RC)" },
  { "48070101", C_ERROR,  "dca_lamp_test start (rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "48070102", C_ERROR,  "dca_lamp_test start (rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "48070103", C_ERROR,  "dca_lamp_test start (rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "48070121", C_ERROR,  "dca_lamp_test start (rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "480701F0", C_NORMAL, "dca_lamp_test start (rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "480701F1", C_ERROR,  "dca_lamp_test start (rc=0x%02X DCA_QUE_FULL_RC)" },
  { "480701F2", C_ERROR,  "dca_lamp_test start (rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "480701FF", C_ERROR,  "dca_lamp_test start (rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "480701",   C_ERROR,  "dca_lamp_test start (rc=0x%02X)" },
  { "48070000", C_NORMAL, "dca_lamp_test stop (rc=0x%02X DCA_NO_ERROR_RC)" },
  { "48070001", C_ERROR,  "dca_lamp_test stop (rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "48070002", C_ERROR,  "dca_lamp_test stop (rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "48070003", C_ERROR,  "dca_lamp_test stop (rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "48070021", C_ERROR,  "dca_lamp_test stop (rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "480700F0", C_NORMAL, "dca_lamp_test stop (rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "480700F1", C_ERROR,  "dca_lamp_test stop (rc=0x%02X DCA_QUE_FULL_RC)" },
  { "480700F2", C_ERROR,  "dca_lamp_test stop (rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "480700FF", C_ERROR,  "dca_lamp_test stop (rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "480700",   C_ERROR,  "dca_lamp_test stop (rc=0x%02X)" },
  { "4808**00", C_NORMAL, "dca_set_cmd (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "4808**01", C_ERROR,  "dca_set_cmd (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4808**02", C_ERROR,  "dca_set_cmd (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4808**03", C_ERROR,  "dca_set_cmd (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4808**21", C_ERROR,  "dca_set_cmd (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4808**F0", C_NORMAL, "dca_set_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4808**F1", C_ERROR,  "dca_set_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4808**F2", C_ERROR,  "dca_set_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4808**FF", C_ERROR,  "dca_set_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4808",     C_ERROR,  "dca_set_cmd (mux=0x%02X, rc=0x%02X)" },
  { "4809**00", C_NORMAL, "dca_bep_status_cmd (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "4809**01", C_ERROR,  "dca_bep_status_cmd (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4809**02", C_ERROR,  "dca_bep_status_cmd (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4809**03", C_ERROR,  "dca_bep_status_cmd (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4809**21", C_ERROR,  "dca_bep_status_cmd (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4809**F0", C_NORMAL, "dca_bep_status_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4809**F1", C_ERROR,  "dca_bep_status_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4809**F2", C_ERROR,  "dca_bep_status_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4809**FF", C_ERROR,  "dca_bep_status_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4809",     C_ERROR,  "dca_bep_status_cmd (mux=0x%02X, rc=0x%02X)" },
  { "480A**00", C_NORMAL, "dca_bep_update_cmd (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "480A**01", C_ERROR,  "dca_bep_update_cmd (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "480A**02", C_ERROR,  "dca_bep_update_cmd (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "480A**03", C_ERROR,  "dca_bep_update_cmd (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "480A**21", C_ERROR,  "dca_bep_update_cmd (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "480A**F0", C_NORMAL, "dca_bep_update_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "480A**F1", C_ERROR,  "dca_bep_update_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "480A**F2", C_ERROR,  "dca_bep_update_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "480A**FF", C_ERROR,  "dca_bep_update_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "480A",     C_ERROR,  "dca_bep_update_cmd (mux=0x%02X, rc=0x%02X)" },
  { "480B**00", C_NORMAL, "dca_load_cp_cmd (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "480B**01", C_ERROR,  "dca_load_cp_cmd (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "480B**02", C_ERROR,  "dca_load_cp_cmd (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "480B**03", C_ERROR,  "dca_load_cp_cmd (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "480B**21", C_ERROR,  "dca_load_cp_cmd (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "480B**F0", C_NORMAL, "dca_load_cp_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "480B**F1", C_ERROR,  "dca_load_cp_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "480B**F2", C_ERROR,  "dca_load_cp_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "480B**FF", C_ERROR,  "dca_load_cp_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "480B",     C_ERROR,  "dca_load_cp_cmd (mux=0x%02X, rc=0x%02X)" },
  { "480C**00", C_NORMAL, "dca_clear_flash_cmd (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "480C**01", C_ERROR,  "dca_clear_flash_cmd (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "480C**02", C_ERROR,  "dca_clear_flash_cmd (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "480C**03", C_ERROR,  "dca_clear_flash_cmd (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "480C**21", C_ERROR,  "dca_clear_flash_cmd (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "480C**F0", C_NORMAL, "dca_clear_flash_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "480C**F1", C_ERROR,  "dca_clear_flash_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "480C**F2", C_ERROR,  "dca_clear_flash_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "480C**FF", C_ERROR,  "dca_clear_flash_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "480C",     C_ERROR,  "dca_clear_flash_cmd (mux=0x%02X, rc=0x%02X)" },
  { "480D**00", C_NORMAL, "dca_load_flash_cmd (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "480D**01", C_ERROR,  "dca_load_flash_cmd (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "480D**02", C_ERROR,  "dca_load_flash_cmd (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "480D**03", C_ERROR,  "dca_load_flash_cmd (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "480D**21", C_ERROR,  "dca_load_flash_cmd (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "480D**F0", C_NORMAL, "dca_load_flash_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "480D**F1", C_ERROR,  "dca_load_flash_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "480D**F2", C_ERROR,  "dca_load_flash_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "480D**FF", C_ERROR,  "dca_load_flash_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "480D",     C_ERROR,  "dca_load_flash_cmd (mux=0x%02X, rc=0x%02X)" },
  { "480E**00", C_NORMAL, "dca_get_fru_status_cmd (mux=0x%02X, rc=0x%02X DCA_NO_ERROR_RC)" },
  { "480E**01", C_ERROR,  "dca_get_fru_status_cmd (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "480E**02", C_ERROR,  "dca_get_fru_status_cmd (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "480E**03", C_ERROR,  "dca_get_fru_status_cmd (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "480E**21", C_ERROR,  "dca_get_fru_status_cmd (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "480E**F0", C_NORMAL, "dca_get_fru_status_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "480E**F1", C_ERROR,  "dca_get_fru_status_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "480E**F2", C_ERROR,  "dca_get_fru_status_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "480E**FF", C_ERROR,  "dca_get_fru_status_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "480E",     C_ERROR,  "dca_get_fru_status_cmd (mux=0x%02X, rc=0x%02X)" },
  { "480F",     C_ERROR,  "dca_code_level_check: Failed to get code levels for DCA-%d (rc=0x%02X)" },

  { "4810**01", C_ERROR,  "dca_master_test_cmd (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4810**02", C_ERROR,  "dca_master_test_cmd (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4810**03", C_ERROR,  "dca_master_test_cmd (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4810**21", C_ERROR,  "dca_master_test_cmd (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4810**F0", C_NORMAL, "dca_master_test_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4810**F1", C_ERROR,  "dca_master_test_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4810**F2", C_ERROR,  "dca_master_test_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4810**FF", C_ERROR,  "dca_master_test_cmd (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4810",     C_ERROR,  "dca_master_test_cmd (mux=0x%02X, rc=0x%02X)" },

  { "4811**01", C_ERROR,  "dca_fan_max_cmd max speed (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4811**02", C_ERROR,  "dca_fan_max_cmd max speed (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4811**03", C_ERROR,  "dca_fan_max_cmd max speed (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4811**21", C_ERROR,  "dca_fan_max_cmd max speed (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4811**F0", C_NORMAL, "dca_fan_max_cmd max speed (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4811**F1", C_ERROR,  "dca_fan_max_cmd max speed (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4811**F2", C_ERROR,  "dca_fan_max_cmd max speed (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4811**FF", C_ERROR,  "dca_fan_max_cmd max speed (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4811",     C_ERROR,  "dca_fan_max_cmd max speed (mux=0x%02X, rc=0x%02X)" },

  { "4812**01", C_ERROR,  "dca_fan_max_cmd normal speed (mux=0x%02X, rc=0x%02X DCA_CRC_ERROR_RC)" },
  { "4812**02", C_ERROR,  "dca_fan_max_cmd normal speed (mux=0x%02X, rc=0x%02X DCA_CMD_ERROR_RC)" },
  { "4812**03", C_ERROR,  "dca_fan_max_cmd normal speed (mux=0x%02X, rc=0x%02X DCA_COMM_ERROR_RC)" },
  { "4812**21", C_ERROR,  "dca_fan_max_cmd normal speed (mux=0x%02X, rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS)" },
  { "4812**F0", C_NORMAL, "dca_fan_max_cmd normal speed (mux=0x%02X, rc=0x%02X DCA_QUE_SUCCESS_RC)" },
  { "4812**F1", C_ERROR,  "dca_fan_max_cmd normal speed (mux=0x%02X, rc=0x%02X DCA_QUE_FULL_RC)" },
  { "4812**F2", C_ERROR,  "dca_fan_max_cmd normal speed (mux=0x%02X, rc=0x%02X DCA_QUE_LOCKED_RC)" },
  { "4812**FF", C_ERROR,  "dca_fan_max_cmd normal speed (mux=0x%02X, rc=0x%02X DCA_QUE_FAIL_RC)" },
  { "4812",     C_ERROR,  "dca_fan_max_cmd normal speed (mux=0x%02X, rc=0x%02X)" },
  { "4813",     C_NORMAL, "dca_clear_fru_status (mux=0x%02X, rc=0x%02X)" },

  { "48FF0000", C_ERROR,  "dca_code_level_check: Sanity check for EDF pointer failed" },
  { "48FF",     C_ERROR,  "dca_code_level_check: Failed to get code levels for both DCAs (rc1=0x%02X, rc2=0x%02X)" },

  { "49000000", C_ERROR,  "rcv spurious interrupt port 0" },
  { "49010000", C_ERROR,  "xmit spurious interrupt port 0" },
  { "49100000", C_ERROR,  "rcv spurious interrupt port 1" },
  { "49110000", C_ERROR,  "xmit spurious interrupt port 1" },
  { "4920",     C_ERROR,  "T19 SPCN network - process msg timeout" },


  { "4930",     C_ERROR,  "UART Port 0 error (Overrun Error: %d, Framing Error: %d)" },
  { "4931",     C_ERROR,  "UART Port 1 error (Overrun Error: %d, Framing Error: %d)" },

  { "500000"  , C_ERROR,  "Fan watchdog timer went off (unit 0x%02X)" },


  //
  { "50FF"    , C_ERROR,  "perom wait failed, possible perom lockup" },
  //
  { "6013C003", C_NORMAL,  "SYSMOD-Thermally required fan missing from declared location" },
  { "60******", C_NORMAL,  "SYSMOD" },

  //
  { "72"      , C_NORMAL, "RH bpc src" },
  //
  { "92"      , C_NORMAL, "RH bpc thermal src" },

  { "BB000001", C_NORMAL, "XPT command failed. rc=0x%02X DCA_CRC_ERROR_RC" },
  { "BB000002", C_NORMAL, "XPT command failed. rc=0x%02X DCA_CMD_ERROR_RC" },
  { "BB000003", C_NORMAL, "XPT command failed. rc=0x%02X DCA_COMM_ERROR_RC" },
  { "BB000021", C_NORMAL, "XPT command failed. rc=0x%02X DCA_STATUS_PRESENT_STATE_PROHIBITS" },
  { "BB0000F0", C_NORMAL, "XPT command failed. rc=0x%02X DCA_QUE_SUCCESS_RC" },
  { "BB0000F1", C_NORMAL, "XPT command failed. rc=0x%02X DCA_QUE_FULL_RC" },
  { "BB0000F2", C_NORMAL, "XPT command failed. rc=0x%02X DCA_QUE_LOCKED_RC" },
  { "BB0000FF", C_NORMAL, "XPT command failed. rc=0x%02X DCA_QUE_FAIL_RC" },
  { "BB0000",   C_NORMAL, "XPT command failed. rc=0x%02X" },

  //
  { "D0******", C_GREEN,  "CLEAR FAULT %02X%02X" },

  /////////////////////////////////////////////////////////////
  // T19 faults (from T19 SRC Translate Table 10-13-08)
  { "E90800AC", C_ERROR,  "AC loss" },
  { "E9081100", C_ERROR,  "FAULT - PS1 Non-power fault (DCA-0 Comm Fail)" },
  { "E9081101", C_ERROR,  "FAULT - PS2 Non-power fault (DCA-1 Comm Fail)" },

  { "E9081200", C_ERROR,  "FAULT - +1.2V Load Fault / Planar " },
  { "E9081201", C_ERROR,  "FAULT - +1.2V Load Fault / DASD BP" },
  { "E9081202", C_ERROR,  "FAULT - +1.5V Load Fault / Planar " },
  { "E9081203", C_ERROR,  "FAULT - +1.8V Load Fault / Planar " },
  { "E9081204", C_ERROR,  "FAULT - +1.8V Load Fault / DASD BP" },
  { "E9081205", C_ERROR,  "FAULT - +3.3V Load Fault / Logic " },
  { "E9081206", C_ERROR,  "FAULT - +3.3V Load Fault / STBY " },
  { "E9081207", C_ERROR,  "FAULT - +5.0V Load Fault / DASD BP" },
  { "E9081208", C_ERROR,  "FAULT - +12V Load Fault / Mid Plane " },

  { "E9081300", C_ERROR,  "FAULT - PS1 Power Fault" },
  { "E9081301", C_ERROR,  "FAULT - PS2 Power Fault" },

  { "E9081500", C_ERROR,  "FAULT - PS1 AC fault" },
  { "E9081501", C_ERROR,  "FAULT - PS2 AC fault" },
  { "E9081507", C_ERROR,  "PS plug ID error" },
  { "E9081517", C_ERROR,  "PS plug ID error" },
  { "E9081601", C_ERROR,  "Power Supply Missing - DCA1" },
  { "E9081602", C_ERROR,  "Power Supply Missing - DCA2" },

  { "E9081DA0", C_ERROR,  "FAULT - Planar 1 SS fault" },

  { "E9083144", C_ERROR,  "DCA-0 I2C mux error" },
  { "E9083145", C_ERROR,  "DCA-0 I2C error" },
  { "E9083154", C_ERROR,  "DCA-1 I2C mux error" },
  { "E9083155", C_ERROR,  "DCA-1 I2C error" },
  { "E9083160", C_ERROR,  "Midplane VPD I2C error (DCA-0 master)" },
  { "E9083161", C_ERROR,  "Midplane VPD I2C error (DCA-1 master)" },
  { "E9083162", C_ERROR,  "Conduit I2C error (DCA-0 master)" },
  { "E9083163", C_ERROR,  "Conduit I2C error (DCA-1 master)" },
  { "E9083164", C_ERROR,  "DASD BP VPD I2C error (DCA-0 master)" },
  { "E9083165", C_ERROR,  "DASD BP VPD I2C error (DCA-1 master)" },
  { "E9083166", C_ERROR,  "Planar 1 I2C error (DCA-0 master)" },
  { "E9083167", C_ERROR,  "Planar 1 I2C error (DCA-1 master)" },
  { "E9083168", C_ERROR,  "FAULT - DCA-0 I2C fan 1 fault (DCA-0 master)" },
  { "E9083169", C_ERROR,  "FAULT - DCA-0 I2C fan 1 fault (DCA-1 master)" },
  { "E908316A", C_ERROR,  "FAULT - DCA-0 I2C fan 2 fault (DCA-0 master)" },
  { "E908316B", C_ERROR,  "FAULT - DCA-0 I2C fan 2 fault (DCA-1 master)" },
  { "E908316C", C_ERROR,  "port card 1 I2C error (DCA-0 master)" },
  { "E908316D", C_ERROR,  "port card 1 I2C error (DCA-1 master)" },
  { "E908316E", C_ERROR,  "port card 2 I2C error (DCA-0 master)" },
  { "E908316F", C_ERROR,  "port card 2 I2C error (DCA-1 master)" },
  { "E9083170", C_ERROR,  "port card 3 I2C error (DCA-0 master)" },
  { "E9083171", C_ERROR,  "port card 3 I2C error (DCA-1 master)" },
  { "E9083172", C_ERROR,  "port card 4 I2C error (DCA-0 master)" },
  { "E9083173", C_ERROR,  "port card 4 I2C error (DCA-1 master)" },

  { "E9083178", C_ERROR,  "FAULT - DCA-1 I2C fan 1 fault (DCA-0 master)" },
  { "E9083179", C_ERROR,  "FAULT - DCA-1 I2C fan 1 fault (DCA-1 master)" },
  { "E908317A", C_ERROR,  "FAULT - DCA-1 I2C fan 2 fault (DCA-0 master)" },
  { "E908317B", C_ERROR,  "FAULT - DCA-1 I2C fan 2 fault (DCA-1 master)" },

  { "E9086000", C_ERROR,  "Midplane VPD error" },
  { "E9086001", C_ERROR,  "Conduit card VPD data error" },
  { "E9086002", C_ERROR,  "DASD BP VPD data error" },
  { "E9086003", C_ERROR,  "Planar 1 IB cable short" },
  { "E9086004", C_ERROR,  "FAULT - Calgary fault" },
  { "E9086005", C_ERROR,  "Calgary ver error, DCA code update required" },
  { "E9086006", C_ERROR,  "DCA-0 VPD, UFM, Flash error" },
  { "E9086007", C_ERROR,  "PHYP persistent data error" },
  { "E9086008", C_ERROR,  "persistent data cleared" },
  { "E9086009", C_ERROR,  "Port card 1 vpd / ss error" },
  { "E908600A", C_ERROR,  "Port card 2 vpd / ss error" },
  { "E908600B", C_ERROR,  "Port card 3 vpd / ss error" },
  { "E908600C", C_ERROR,  "Port card 4 vpd / ss error" },
  { "E9086016", C_ERROR,  "DCA-0 VPD, UFM, Flash error" },

  { "E9087200", C_ERROR,  "CalgaryE temperature error" },
  { "E9087201", C_ERROR,  "CalgaryE temperature warning" },
  { "E9087202", C_ERROR,  "Ambient temperature warning (DCA-0)" },
  { "E9087203", C_ERROR,  "Ambient temperature error (DCA-0)" },
  { "E9087204", C_ERROR,  "Ambient temperature warning (DCA-1)" },
  { "E9087205", C_ERROR,  "Ambient temperature error (DCA-1)" },

  { "E9088400", C_ERROR,  "Config ID decode" },
  { "E908840D", C_ERROR,  "SPCN default Config ID loaded from MIF" },
  { "E908840E", C_ERROR,  "SPCN default Config ID" },

  { "E9088752", C_ERROR,  "DCA-0 download failed" },
  { "E9088753", C_ERROR,  "DCA-1 download failed" },

  { "E9088756", C_BOLD,   "DCA-0 download started" },
  { "E9088757", C_BOLD,   "DCA-1 download started" },
  { "E9088758", C_NORMAL, "DCA download done" },

  { "E9088A00", C_NORMAL, "Power controlling CEC changed" },
  { "E908C62E", C_ERROR,  "Polling error" },

  { "E90C8756", C_NORMAL,   "OCA1 download started" },
  { "E90C8757", C_NORMAL,   "OCA2 download started" },
  { "E90C8758", C_NORMAL,   "OCA download completed" },
  /////////////////////////////////////////////////////////////


  // E* = all faults
  { "E0**00AC", C_ERROR,  "FAULT - AC loss while powered on", "powr_fsp_por_state.C", "por_state()"},
  { "E0**00AD", C_ERROR,  "FAULT - Unexpected power loss (non SMGR_PWR_ON_RST ipl type)", "powr_fsp_por_state.C", "por_state()"},
  { "E***1100", C_ERROR,  "FAULT - PS1 Non-power fault" },
  { "E***1101", C_ERROR,  "FAULT - PS2 Non-power fault" },
  { "E***1102", C_ERROR,  "FAULT - PS3 Non-power fault" },
  { "E***1103", C_ERROR,  "FAULT - PS4 Non-power fault" },
  { "E***1104", C_ERROR,  "FAULT - PS1 dwr 2 Non-power fault" },
  { "E***1105", C_ERROR,  "FAULT - PS2 dwr 2 Non-power fault" },
  { "E***1106", C_ERROR,  "FAULT - PS3 dwr 2 Non-power fault" },
  { "E***1107", C_ERROR,  "FAULT - PS4 dwr 2 Non-power fault" },
  { "E***1108", C_ERROR,  "FAULT - PS1 dwr 3 Non-power fault" },
  { "E***1109", C_ERROR,  "FAULT - PS2 dwr 3 Non-power fault" },
  { "E***110A", C_ERROR,  "FAULT - PS3 dwr 3 Non-power fault" },
  { "E***110B", C_ERROR,  "FAULT - PS4 dwr 3 Non-power fault" },
  { "E***110C", C_ERROR,  "FAULT - PS1 dwr 4 Non-power fault" },
  { "E***110D", C_ERROR,  "FAULT - PS2 dwr 4 Non-power fault" },
  { "E***110E", C_ERROR,  "FAULT - PS3 dwr 4 Non-power fault" },
  { "E***110F", C_ERROR,  "FAULT - PS4 dwr 4 Non-power fault" },

  { "E***1180", C_ERROR,  "FAULT - PS1 Non-power fault: Failed calibration/trending" },
  { "E***1181", C_ERROR,  "FAULT - PS2 Non-power fault: Failed calibration/trending" },
  { "E***1182", C_ERROR,  "FAULT - PS3 Non-power fault: Failed calibration/trending" },
  { "E***1183", C_ERROR,  "FAULT - PS4 Non-power fault: Failed calibration/trending" },
  { "E***1184", C_ERROR,  "FAULT - dwr 2 PS1 Non-power fault: Failed calibration/trending" },
  { "E***1185", C_ERROR,  "FAULT - dwr 2 PS2 Non-power fault: Failed calibration/trending" },
  { "E***1186", C_ERROR,  "FAULT - dwr 2 PS3 Non-power fault: Failed calibration/trending" },
  { "E***1187", C_ERROR,  "FAULT - dwr 2 PS4 Non-power fault: Failed calibration/trending" },
  { "E***1188", C_ERROR,  "FAULT - dwr 3 PS1 Non-power fault: Failed calibration/trending" },
  { "E***1189", C_ERROR,  "FAULT - dwr 3 PS2 Non-power fault: Failed calibration/trending" },
  { "E***118A", C_ERROR,  "FAULT - dwr 3 PS3 Non-power fault: Failed calibration/trending" },
  { "E***118B", C_ERROR,  "FAULT - dwr 3 PS4 Non-power fault: Failed calibration/trending" },
  { "E***118C", C_ERROR,  "FAULT - dwr 4 PS1 Non-power fault: Failed calibration/trending" },
  { "E***118D", C_ERROR,  "FAULT - dwr 4 PS2 Non-power fault: Failed calibration/trending" },
  { "E***118E", C_ERROR,  "FAULT - dwr 4 PS3 Non-power fault: Failed calibration/trending" },
  { "E***118F", C_ERROR,  "FAULT - dwr 4 PS4 Non-power fault: Failed calibration/trending" },
  { "E***11"  , C_ERROR,  "FAULT - PS/REG Non-power fault" },

  { "E***1200", C_ERROR,  "FAULT - Level 1 load fault (+12)" },
  { "E***1201", C_ERROR,  "FAULT - Level 1 dwr 2 load fault (+12)" },
  { "E***1202", C_ERROR,  "FAULT - Level 1 dwr 3 load fault (+12)" },
  { "E***1203", C_ERROR,  "FAULT - Level 1 dwr 4 load fault (+12)" },
  { "E5**12"  , C_ERROR,  "PS/REG load fault" },

  { "E***1300", C_ERROR,  "FAULT - PS1 Power Fault" },
  { "E***1301", C_ERROR,  "FAULT - PS2 Power Fault" },
  { "E***1302", C_ERROR,  "FAULT - PS3 Power Fault" },
  { "E***1303", C_ERROR,  "FAULT - PS4 Power Fault" },
  { "E***1304", C_ERROR,  "FAULT - dwr 2 PS1 Power Fault" },
  { "E***1305", C_ERROR,  "FAULT - dwr 2 PS2 Power Fault" },
  { "E***1306", C_ERROR,  "FAULT - dwr 2 PS3 Power Fault" },
  { "E***1307", C_ERROR,  "FAULT - dwr 2 PS4 Power Fault" },
  { "E***1308", C_ERROR,  "FAULT - dwr 3 PS1 Power Fault" },
  { "E***1309", C_ERROR,  "FAULT - dwr 3 PS2 Power Fault" },
  { "E***130A", C_ERROR,  "FAULT - dwr 3 PS3 Power Fault" },
  { "E***130B", C_ERROR,  "FAULT - dwr 3 PS4 Power Fault" },
  { "E***130C", C_ERROR,  "FAULT - dwr 4 PS1 Power Fault" },
  { "E***130D", C_ERROR,  "FAULT - dwr 4 PS2 Power Fault" },
  { "E***130E", C_ERROR,  "FAULT - dwr 4 PS3 Power Fault" },
  { "E***130F", C_ERROR,  "FAULT - dwr 4 PS4 Power Fault" },


  { "E***1320", C_ERROR,  "Voltage adjust failure, Vmem D1M0" },
  { "E***1321", C_ERROR,  "Voltage adjust failure, Vmem D1M1" },
  { "E***1322", C_ERROR,  "Voltage adjust failure, Vmem D2M0" },
  { "E***1323", C_ERROR,  "Voltage adjust failure, Vmem D2M1" },

  { "E***1324", C_ERROR,  "Voltage adjust failure, Vmem1" },
  { "E***1326", C_ERROR,  "Voltage adjust failure, Vmem2" },
  { "E***1327", C_ERROR,  "Voltage adjust failure, Vmem3" },
  { "E***1329", C_ERROR,  "Voltage adjust failure, Vmem4" },
  { "E***1332", C_ERROR,  "Voltage adjust failure, D2Vmem1" },
  { "E***1334", C_ERROR,  "Voltage adjust failure, D2Vmem2" },
  { "E***1335", C_ERROR,  "Voltage adjust failure, D2Vmem3" },
  { "E***1337", C_ERROR,  "Voltage adjust failure, D2Vmem4" },
  { "E***1340", C_ERROR,  "Voltage adjust failure, D3Vmem1" },
  { "E***1342", C_ERROR,  "Voltage adjust failure, D3Vmem2" },
  { "E***1343", C_ERROR,  "Voltage adjust failure, D3Vmem3" },
  { "E***1345", C_ERROR,  "Voltage adjust failure, D3Vmem4" },
  { "E***134E", C_ERROR,  "Voltage adjust failure, D4Vmem1" },
  { "E***1350", C_ERROR,  "Voltage adjust failure, D4Vmem2" },
  { "E***1351", C_ERROR,  "Voltage adjust failure, D4Vmem3" },
  { "E***1353", C_ERROR,  "Voltage adjust failure, D4Vmem4" },

  { "E5**13"  , C_ERROR,  "PS/REG power fault port %02X" },
  { "E***13",   C_ERROR,  "FAULT - Voltage adjust failure" },

  { "E***1400", C_ERROR,  "FAULT - PS1 Domain Fault" },
  { "E***1401", C_ERROR,  "FAULT - PS2 Domain Fault" },
  { "E***1402", C_ERROR,  "FAULT - PS3 Domain Fault" },
  { "E***1403", C_ERROR,  "FAULT - PS4 Domain Fault" },
  { "E***1404", C_ERROR,  "FAULT - dwr 2 PS1 Domain Fault" },
  { "E***1405", C_ERROR,  "FAULT - dwr 2 PS2 Domain Fault" },
  { "E***1406", C_ERROR,  "FAULT - dwr 2 PS3 Domain Fault" },
  { "E***1407", C_ERROR,  "FAULT - dwr 2 PS4 Domain Fault" },
  { "E***1408", C_ERROR,  "FAULT - dwr 3 PS1 Domain Fault" },
  { "E***1409", C_ERROR,  "FAULT - dwr 3 PS2 Domain Fault" },
  { "E***140A", C_ERROR,  "FAULT - dwr 3 PS3 Domain Fault" },
  { "E***140B", C_ERROR,  "FAULT - dwr 3 PS4 Domain Fault" },
  { "E***140C", C_ERROR,  "FAULT - dwr 4 PS1 Domain Fault" },
  { "E***140D", C_ERROR,  "FAULT - dwr 4 PS2 Domain Fault" },
  { "E***140E", C_ERROR,  "FAULT - dwr 4 PS3 Domain Fault" },
  { "E***140F", C_ERROR,  "FAULT - dwr 4 PS4 Domain Fault" },

  { "E5**14"  , C_ERROR,  "PS/REG domain fault" },

  { "E***1500", C_ERROR,  "FAULT - PS1 AC Fault" },
  { "E***1501", C_ERROR,  "FAULT - PS2 AC Fault" },
  { "E***1502", C_ERROR,  "FAULT - PS3 AC Fault" },
  { "E***1503", C_ERROR,  "FAULT - PS4 AC Fault" },
  { "E***1504", C_ERROR,  "FAULT - dwr 2 PS1 AC Fault" },
  { "E***1505", C_ERROR,  "FAULT - dwr 2 PS2 AC Fault" },
  { "E***1506", C_ERROR,  "FAULT - dwr 2 PS3 AC Fault" },
  { "E***1507", C_ERROR,  "FAULT - dwr 2 PS4 AC Fault" },
  { "E***1508", C_ERROR,  "FAULT - dwr 3 PS1 AC Fault" },
  { "E***1509", C_ERROR,  "FAULT - dwr 3 PS2 AC Fault" },
  { "E***150A", C_ERROR,  "FAULT - dwr 3 PS3 AC Fault" },
  { "E***150B", C_ERROR,  "FAULT - dwr 3 PS4 AC Fault" },
  { "E***150C", C_ERROR,  "FAULT - dwr 4 PS1 AC Fault" },
  { "E***150D", C_ERROR,  "FAULT - dwr 4 PS2 AC Fault" },
  { "E***150E", C_ERROR,  "FAULT - dwr 4 PS3 AC Fault" },
  { "E***150F", C_ERROR,  "FAULT - dwr 4 PS4 AC Fault" },
  { "E4**15",   C_ERROR,  "FAULT - CPN_AC_LOSS (node=0x%02X)" },
  { "E4**15"  , C_ERROR,  "Serial Device %02X lost power" },
  { "E5**15"  , C_ERROR,  "CPN AC power fault" },

  { "E***1600", C_ERROR,  "FAULT - PS1 missing" },
  { "E***1601", C_ERROR,  "FAULT - PS2 missing" },
  { "E***1602", C_ERROR,  "FAULT - PS3 missing" },
  { "E***1603", C_ERROR,  "FAULT - PS4 missing" },
  { "E***1604", C_ERROR,  "FAULT - dwr 2 PS1 missing" },
  { "E***1605", C_ERROR,  "FAULT - dwr 2 PS2 missing" },
  { "E***1606", C_ERROR,  "FAULT - dwr 2 PS3 missing" },
  { "E***1607", C_ERROR,  "FAULT - dwr 2 PS4 missing" },
  { "E***1608", C_ERROR,  "FAULT - dwr 3 PS1 missing" },
  { "E***1609", C_ERROR,  "FAULT - dwr 3 PS2 missing" },
  { "E***160A", C_ERROR,  "FAULT - dwr 3 PS3 missing" },
  { "E***160B", C_ERROR,  "FAULT - dwr 3 PS4 missing" },
  { "E***160C", C_ERROR,  "FAULT - dwr 4 PS1 missing" },
  { "E***160D", C_ERROR,  "FAULT - dwr 4 PS2 missing" },
  { "E***160E", C_ERROR,  "FAULT - dwr 4 PS3 missing" },
  { "E***160F", C_ERROR,  "FAULT - dwr 4 PS4 missing" },

  { "EA**16A0", C_ERROR,  "FAULT - System drawer connection card 0 missing" },
  { "EA**16A1", C_ERROR,  "FAULT - System drawer connection card 1 missing" },
  { "EA**16A2", C_ERROR,  "FAULT - System drawer connection card 2 missing" },
  { "EA**16A3", C_ERROR,  "FAULT - System drawer connection card 3 missing" },
  { "EA**16B0", C_ERROR,  "FAULT - Drawer 2 connection card 0 missing" },
  { "EA**16B1", C_ERROR,  "FAULT - Drawer 1 connection card 0 missing" },
  { "EA**16B2", C_ERROR,  "FAULT - Drawer 1 connection card 1 missing" },
  { "EA**16B3", C_ERROR,  "FAULT - Drawer 2 connection card 1 missing" },

  { "E***16F1", C_ERROR,  "FAULT - All power supplies in drawer missing" },
  { "E***16F2", C_ERROR,  "FAULT - All power supplies in drawer 1 missing" },
  { "E***16F3", C_ERROR,  "FAULT - All power supplies in drawer 2 missing" },
  { "E***16F4", C_ERROR,  "FAULT - All power supplies in drawer 3 missing" },
  { "E***16F5", C_ERROR,  "FAULT - All power supplies in drawer 4 missing" },

  { "E***16"  , C_ERROR,  "FAULT - Power Supply %02X Missing or Wrong Type" },


  { "E***1D60", C_ERROR,  "FAULT - GX Exp Card 1 softswitch" },
  { "E***1D63", C_ERROR,  "FAULT - GX Exp Card 2 softswitch" },
  { "E***1D68", C_ERROR,  "FAULT - HEA card softswitch" },
  { "E***1D70", C_ERROR,  "FAULT - dwr 2 GX Exp Card 1 softswitch" },
  { "E***1D73", C_ERROR,  "FAULT - dwr 2 GX Exp Card 2 softswitch" },
  { "E***1D78", C_ERROR,  "FAULT - dwr 2 HEA card softswitch" },
  { "E***1D80", C_ERROR,  "FAULT - dwr 2 GX Exp Card 1 softswitch" },
  { "E***1D83", C_ERROR,  "FAULT - dwr 2 GX Exp Card 2 softswitch" },
  { "E***1D88", C_ERROR,  "FAULT - dwr 2 HEA card softswitch" },
  { "E***1D90", C_ERROR,  "FAULT - dwr 2 GX Exp Card 1 softswitch" },
  { "E***1D93", C_ERROR,  "FAULT - dwr 2 GX Exp Card 2 softswitch" },
  { "E***1D98", C_ERROR,  "FAULT - dwr 2 HEA card softswitch" },
  { "E0**1DA0", C_ERROR,  "FAULT - Planar 1 SS fault" },
  { "E2**1d"  , C_ERROR,  "Softswitch fail" },

  { "****1E00", C_ERROR,  "open device failed" },
  { "****1E01", C_ERROR,  "write device failed" },
  { "****1E02", C_ERROR,  "close device failed" },
  { "****1E03", C_ERROR,  "read device failed" },

  { "****1F01", C_WARNING,"TMS limit reached - log only" },
  { "****1F02", C_NORMAL, "1k ilog limit reached - log only" },
  { "****1F03", C_ERROR,  "Invalid MTMS data - check error log for details" },
  { "****1F04", C_WARNING,"DPSS PGOOD_LATCHED event - log only" },

  { "E***2500", C_ERROR,  "PS_Kill - PS overload or system covers are not installed" },

  { "E0**2600", C_ERROR,  "FAULT - PGOOD fault - master pgood" },
  { "E0**2602", C_ERROR,  "FAULT - Reg Domain Bad" },
  { "E0**2603", C_ERROR,  "FAULT - PS Domain Bad" },
  { "E0**2605", C_ERROR,  "FAULT - SundanceIBT: 1.8v PGood Fault" },
  { "E0**2610", C_ERROR,  "FAULT - 100v config fail" },
  { "E0**2611", C_ERROR,  "FAULT - Vendor reg fault" },
  { "E0**2612", C_ERROR,  "FAULT - Misc pgood fault; 24\" J15/J16 optical sense fail" },
  { "E0**2613", C_ERROR,  "FAULT - 200V Required or 200V mismatch" },
  { "E***2614", C_ERROR,  "DC/AC power supply mismatch" },
  { "E***2616", C_ERROR,  "FAULT - PGOOD output (falcon: P5IOC_PLL_RST, firebird: PCIX_PCIE_PGOODHOSTALL)" },
  { "E***2617", C_ERROR,  "FAULT - PGOOD output / OBSIDIAN" },
  { "E***2618", C_ERROR,  "FAULT - PGOOD output (P5IOC_PLL_RST)" },

  { "E***261C", C_ERROR,  "FAULT - Proc Obsidian output failure" },
  { "E***261D", C_ERROR,  "FAULT - Evert Pgood failure" },

  { "E***261F", C_ERROR,  "FAULT - PGOOD output / PCI_OPTIONS_RESET" },

  { "E0**2620", C_ERROR,  "FAULT - Proc 12V Pgood input fault" },
  { "E0**2622", C_ERROR,  "FAULT - Expansion_Comp_Pgood" },
  { "E0**2623", C_ERROR,  "FAULT - Composite Card Pgood" },
  { "E0**2624", C_ERROR,  "FAULT - Proc 5 Reg Pgood fault" },

  { "E0**2626", C_ERROR,  "FAULT - 1.1 VIO_STAR_PGOOD" },
  { "E***2627", C_ERROR,  "FAULT - (Juno: GX slot 1 pgood fault, HV: Laver card pgood fault)" },
  { "E***2628", C_ERROR,  "FAULT - GX slot 1 pgood fault" },
  { "E***2629", C_ERROR,  "FAULT - 1.5v Reg PGOOD fault" },
  { "E***262A", C_ERROR,  "FAULT - GX slot 2 pgood fault" },
  { "E***262B", C_ERROR,  "FAULT - Proc 1.8V Reg PGOOD fault" },
  { "E0**262C", C_ERROR,  "FAULT - Proc 5V Reg PGOOD fault" },
  { "E***262D", C_ERROR,  "FAULT - Proc 3.3V Reg PGOOD fault" },
  { "E***262E", C_ERROR,  "FAULT - Proc 2.5V Reg PGOOD fault" },
  { "E***262F", C_ERROR,  "FAULT - (HV/juno:1.2reg_pgood input fault/DASD, falcon: 1.0v_PLX_REG, Firebird: 1.5v_P7IOC_pgood, merlin: base 2.5vreg_pgood)" },
  { "E0**2630", C_ERROR,  "FAULT - Misc pgood fault; 24\" J15/J16 optical sense fail" },
  { "E0**2631", C_ERROR,  "FAULT - Misc pgood fault; 24\" J15/J16 optical sense fail" },
  { "E0**2632", C_ERROR,  "FAULT - Misc pgood fault; 24\" J15/J16 optical sense fail" },
  { "E0**2633", C_ERROR,  "FAULT - Proc 1 REG_VRM pgood; 24\" J15/J16 optical sense fail" },
  { "E***2634", C_ERROR,  "FAULT - PROC_CARD_PGOOD fault" },

  { "E***2636", C_ERROR,  "FAULT - PROC_CARD_VMEMIO_PGOOD fault" },
  { "E***2637", C_ERROR,  "FAULT - PROC_CARD_VIO_PGOOD fault" },
  { "E***263A", C_ERROR,  "FAULT - Mem card 1 card pgood" },
  { "E***263B", C_ERROR,  "FAULT - Vdimm (Athena: Vsn) on mem card 1" },
  { "E***263C", C_ERROR,  "FAULT - Vsn (Athena: Vdimm) on mem card 1" },


  { "E***2641", C_ERROR,  "FAULT - VRM 2 CP2 Core 1 pgood" },

  { "E***2643", C_ERROR,  "FAULT - Proc 2 REG_VRM pgood fault" },
  { "E***2644", C_ERROR,  "FAULT - 1.2V reg P5IOC2" },

  { "E***2647", C_ERROR,  "FAULT - Q112_Q113_gate_detect (12.0VD / 12.0VE Flt)" },
  { "E***2648", C_ERROR,  "FAULT - power fault is latched" },
  { "E***2649", C_ERROR,  "FAULT - power fault" },
  { "E***264A", C_ERROR,  "FAULT - Mem card 2 card pgood" },
  { "E***264B", C_ERROR,  "FAULT - Vdimm (Athena: Vsn) on mem card 2" },
  { "E***264C", C_ERROR,  "FAULT - Vsn (Athena: Vdimm) on mem card 2" },

  { "E***2650", C_ERROR,  "FAULT - P7-3_VDD/VCS pgood (HV32: Proc 3 P7_VRM pgood)" },
  { "E***2651", C_ERROR,  "FAULT - 1.8V reg pgood" },
  { "E***2652", C_ERROR,  "FAULT - Proc 3 MEM_VRM pgood" },
  { "E***2653", C_ERROR,  "FAULT - Proc 3 REG_VRM pgood" },
  { "E***2654", C_ERROR,  "FAULT - 2.5V voltage divider" },
  { "E***2655", C_ERROR,  "FAULT - Proc 3 Card pgood" },
  { "E***265A", C_ERROR,  "FAULT - (HV16/Juno: Mem card 3 card pgood, falcon: 1.2VA Reg pgood)" },
  { "E***265B", C_ERROR,  "FAULT - Vdimm (Athena: Vsn) on mem card 3" },
  { "E***265C", C_ERROR,  "FAULT - Vsn (Athena: Vdimm) on mem card 3" },


  { "E***2665", C_ERROR,  "FAULT - Proc 4 Card pgood" },
  { "E***266A", C_ERROR,  "FAULT - Mem Card 4 card pgood" },
  { "E***266B", C_ERROR,  "FAULT - Vdimm (Athena: Vsn) PGOOD fault on mem card 4" },
  { "E***266C", C_ERROR,  "FAULT - MEM-4_VSN_PGOOD fault VSN VRM Connors 4 (Athena: Vdimm PGOOD on mem card 4)" },

  { "E***2671", C_ERROR,  "FAULT - Blades 12v Q120 shorted" },
  { "E***2672", C_ERROR,  "FAULT - Blades PEU3 voltage alert" },
  { "E***2673", C_ERROR,  "FAULT - Exp blade standby power fault" },
  { "E***2674", C_ERROR,  "FAULT - Exp blade pgood on at standby" },
  { "E***2675", C_ERROR,  "1.1Reg_CP0_P5IOC2_Vio_PGOOD (firebird: 1.1Reg_CP0_P7IOC_Vio_PGOOD)" },
  { "E***2676", C_ERROR,  "VTTA (firebird:VTTA/B) PGOOD" },
  { "E***2677", C_ERROR,  "VTTB PGOOD" },
  { "E***2678", C_ERROR,  "PROC_Vmem_SNova_Pgood 1.0v" },
  { "E***2679", C_ERROR,  "1.5Reg_Vmem_SNova_Pgood" },
  { "E***267A", C_ERROR,  "HSDC/4xel_A0_PGOOD (firebird: MezzCard_1_pgood)" },
  { "E***267B", C_ERROR,  "(falcon/blades: HSDC/4xel_B_PGOOD, firebird: MezzCard_2_pgood, Athena: Vsn Vterm Pgood fault on mem card 5)" },
  { "E***267C", C_ERROR,  "REG P5IOC2 Core 1.2V Pgood (Athena: Vdimm Pgood on mem card 5)" },
  { "E***267D", C_ERROR,  "2.0 PLL Pgood" },
  { "E***267E", C_ERROR,  "P7_VRM_PVID_Gate" },
  { "E***267F", C_ERROR,  "ETE Card PGOOD" },

  { "****2680", C_ERROR,  "DPSS power sequence slot 0 pgood fault" },
  { "****2681", C_ERROR,  "DPSS power sequence slot 1 pgood fault" },
  { "****2682", C_ERROR,  "DPSS power sequence slot 2 pgood fault" },
  { "****2683", C_ERROR,  "DPSS power sequence slot 3 pgood fault" },
  { "****2684", C_ERROR,  "DPSS power sequence slot 4 pgood fault" },
  { "****2685", C_ERROR,  "DPSS power sequence slot 5 pgood fault" },
  { "****2686", C_ERROR,  "DPSS power sequence slot 6 pgood fault" },
  { "****2687", C_ERROR,  "DPSS power sequence slot 7 pgood fault" },
  { "****2688", C_ERROR,  "DPSS power sequence slot 8 pgood fault" },
  { "****2689", C_ERROR,  "DPSS power sequence slot 9 pgood fault" },
  { "****268A", C_ERROR,  "DPSS power sequence slot 10 pgood fault" },
  { "****268B", C_ERROR,  "DPSS power sequence slot 11 pgood fault" },
  { "****268C", C_ERROR,  "DPSS power sequence slot 12 pgood fault" },
  { "****268D", C_ERROR,  "DPSS power sequence slot 13 pgood fault" },
  { "****268E", C_ERROR,  "DPSS power sequence slot 14 pgood fault" },
  { "****268F", C_ERROR,  "DPSS power sequence slot 15 pgood fault" },
  { "****2690", C_ERROR,  "DPSS power sequence slot 16 pgood fault" },
  { "****2691", C_ERROR,  "DPSS power sequence slot 17 pgood fault" },
  { "****2692", C_ERROR,  "DPSS power sequence slot 18 pgood fault" },
  { "****2693", C_ERROR,  "DPSS power sequence slot 19 pgood fault" },
  { "****2694", C_ERROR,  "DPSS power sequence slot 20 pgood fault" },
  { "****2695", C_ERROR,  "DPSS power sequence slot 21 pgood fault" },
  { "****2696", C_ERROR,  "DPSS power sequence slot 22 pgood fault" },
  { "****2697", C_ERROR,  "DPSS power sequence slot 23 pgood fault" },
  { "****2698", C_ERROR,  "DPSS power sequence slot 24 pgood fault" },
  { "****2699", C_ERROR,  "DPSS power sequence slot 25 pgood fault" },
  { "****269A", C_ERROR,  "DPSS power sequence slot 26 pgood fault" },
  { "****269B", C_ERROR,  "DPSS power sequence slot 27 pgood fault" },
  { "****269C", C_ERROR,  "DPSS power sequence slot 28 pgood fault" },
  { "****269D", C_ERROR,  "DPSS power sequence slot 29 pgood fault" },
  { "****269E", C_ERROR,  "DPSS power sequence slot 30 pgood fault" },
  { "****269F", C_ERROR,  "DPSS power sequence slot 31 pgood fault" },

  { "E2**26A0", C_ERROR,  "FAULT - 12Vcs pgood failure, system controller drawer connector card 0" },
  { "E2**26A1", C_ERROR,  "FAULT - 12Vcs pgood failure, system controller drawer connector card 1" },
  { "E2**26A2", C_ERROR,  "FAULT - 12Vcs pgood failure, system controller drawer connector card 2" },
  { "E2**26A3", C_ERROR,  "FAULT - 12Vcs pgood failure, system controller drawer connector card 3" },
  { "E***26A0", C_ERROR,  "exp 12V Pgood input fault" },
  { "E***26A9", C_ERROR,  "exp 1.5vreg_pgood" },
  { "E***26AB", C_ERROR,  "exp 1.8vreg_pgood" },
  { "E***26AC", C_ERROR,  "exp 5vreg_pgood" },
  { "E***26AD", C_ERROR,  "exp 3.3vreg_pgood" },
  { "E***26AE", C_ERROR,  "exp 2.5vreg_pgood" },
  { "E***26AF", C_ERROR,  "exp 2.5vreg_pgood" },
  { "E2**26B0", C_ERROR,  "FAULT - 12V pgood failure, system controller drawer connector card 0" },
  { "E2**26B1", C_ERROR,  "FAULT - 12V pgood failure, system controller drawer connector card 1" },
  { "E2**26B2", C_ERROR,  "FAULT - 12V pgood failure, system controller drawer connector card 2" },
  { "E2**26B3", C_ERROR,  "FAULT - 12V pgood failure, system controller drawer connector card 3" },
  { "E***26B0", C_ERROR,  "exp VRM CP0 Core pgood" },
  { "E***26B2", C_ERROR,  "exp VRM CP0 Array pgood" },
  { "E***26C0", C_ERROR,  "exp VRM CP1 Core pgood" },
  { "E***26C2", C_ERROR,  "exp VRM CP1 Array pgood" },
  { "E***26C7", C_ERROR,  "FAULT - Exp blade Q112_Q113_gate_detect (12.0VD / 12.0VE Flt)" },
  { "E***26C8", C_ERROR,  "exp Power fault is latched" },
  { "E***26C9", C_ERROR,  "exp Power fault" },
  { "E***26D0", C_ERROR,  "exp 1.1Reg_CP0_P5IOC2_Vio_PGOOD" },
  { "E***26D1", C_ERROR,  "exp VTTA pgood" },
  { "E***26D2", C_ERROR,  "exp VTTB pgood" },
  { "E***26D3", C_ERROR,  "exp PROC_Vmem_SNova_Pgood 1.0v" },
  { "E***26D4", C_ERROR,  "exp 1.5Reg_Vmem_SNova_Pgood" },
  { "E***26D5", C_ERROR,  "HSDC (falcon: 4xel_B_PGOOD, p7blade: 4xel_A0_PGOOD)" },
  { "E***26D6", C_ERROR,  "HSDC/4xel_B_PGOOD" },
  { "E***26D7", C_ERROR,  "exp REG_P5IOC2_Core1.2V_Pgood" },
  { "E***26D8", C_ERROR,  "exp 2.0_PLL_Pgood" },
  { "E***26D9", C_ERROR,  "exp pgood output / P7_VRM_PVID_Gate" },
  { "E***26DA", C_ERROR,  "exp Elang_COMP_PGOOD_Gate" },
  { "E***26DB", C_ERROR,  "exp 1.2VA reg" },
  { "E***26DC", C_ERROR,  "FAULT - P7IOC 1.2VA Pgood" },
  { "E***26DD", C_ERROR,  "FAULT - P7IOC 1.2VB Pgood" },


  { "E***26F1", C_ERROR,  "exp Blades 12v Q120 shorted" },

  { "E2**26"  , C_ERROR,  "PGOOD fault" },

  { "E***27**", C_ERROR,  "N phase fault detected in VRM %02X" },
  { "E***28**", C_ERROR,  "N+1 phase fault detected in VRM %02X" },
  { "E***29**", C_ERROR,  "Voltage setting readback error for VRM %02X" },
  { "E***2A**", C_ERROR,  "PMBus error for VRM %02X" },
  { "E***2B00", C_NORMAL, "VRM telemetry data" },

  { "E4**3100", C_ERROR,  "Thermal sensor read error or not installed (system bp)" },
  { "E4**3101", C_ERROR,  "Thermal sensor read error or not installed (exp bp)" },


  { "E***3158", C_ERROR,  "FAULT: I2C_1 PWM Blower Ctrl Chip" },
  { "E***315C", C_ERROR,  "FAULT: I2C_1 PWM Blower Ctrl Chip" },

  { "E4**32A0", C_ERROR,  "FAULT - I/O Planar PCI VPD" },

  { "E4084201", C_ERROR,  "UPS Util Fail (MFG Mode)", "powr_fsp_epow.C", "globalAlertProcessEpow3()" },
  { "EF084201", C_ERROR,  "INFO: UPS Util Fail", "powr_fsp_epow.C", "globalAlertProcessEpow3()" },
  { "E4084202", C_ERROR,  "CLEAR UPS Util Fail (MFG Mode)" },
  { "EF084202", C_ERROR,  "INFO: CLEAR UPS Util Fail" },
  { "E4084203", C_ERROR,  "UPS Battery Low (MFG Mode)", "powr_fsp_epow.C", "globalAlertProcessEpow4()" },
  { "EF084203", C_ERROR,  "INFO: UPS Battery Low", "powr_fsp_epow.C", "globalAlertProcessEpow4()" },
  { "E4084204", C_ERROR,  "CLEAR UPS Battery Low (MFG Mode)" },
  { "EF084204", C_ERROR,  "INFO: CLEAR UPS Battery Low" },

  { "E8**4410", C_ERROR,  "Communication fault" },
  { "E8**4411", C_ERROR,  "Communication fault" },
  { "E8**4412", C_ERROR,  "Invalid VPD" },
  { "E8**4420", C_ERROR,  "BBU - invalid VPD" },
  { "E8**4421", C_ERROR,  "BBU - fail to ack PT on" },
  { "E8**4422", C_ERROR,  "BBU - fail to ack PT off" },
  { "E8**4423", C_ERROR,  "BBU - fail to discharge in PT" },
  { "E8**4424", C_ERROR,  "BBU - fail to sustain PT" },
  { "E8**4425", C_ERROR,  "BBU - no BBU present" },
  { "E8**4426", C_ERROR,  "BBU - no charger present" },
  { "E8**4427", C_ERROR,  "BBU - fail to enable" },
  { "E8**4427", C_ERROR,  "BBU - fail ack 48v on" },
  { "E8**4427", C_ERROR,  "BBU - fail ack 48v off" },

  { "E***5000", C_ERROR,  "FAULT - FSP0 SPCN config check failure" },
  { "E***5001", C_ERROR,  "FAULT - FSP1 SPCN config check failure" },
  { "E***5010", C_ERROR,  "Missing cables between backplane and spcn ports" },
  { "E1**50"  , C_ERROR,  "FAULT - Config Check Failed (UART, ETH, Network)" },
  { "E***7100", C_ERROR,  "Drawer 1: Bad extended data from PS 1" },
  { "E***7101", C_ERROR,  "Drawer 1: Bad extended data from PS 2" },
  { "E***7102", C_ERROR,  "Drawer 2: Bad extended data from PS 1" },
  { "E***7103", C_ERROR,  "Drawer 2: Bad extended data from PS 2" },
  { "E***7104", C_ERROR,  "Drawer 3: Bad extended data from PS 1" },
  { "E***7105", C_ERROR,  "Drawer 3: Bad extended data from PS 2" },
  { "E***7106", C_ERROR,  "Drawer 4: Bad extended data from PS 1" },
  { "E***7107", C_ERROR,  "Drawer 4: Bad extended data from PS 2" },
  { "E5**71"  , C_ERROR,  "Sigprep node Fault" },

  { "E4**7201", C_WARNING,"Temperature Warning" },
  { "EF**7201", C_WARNING,"INFO: Temperature Warning" },
  { "E4**7202", C_NORMAL, "Temperature warning reset (temp returned to normal range)" },
  { "EF**7202", C_NORMAL, "INFO: Temperature warning reset (temp returned to normal range)" },
  { "E0**7203", C_ERROR,  "FAULT - EPOW3 Critical Fault" },
  { "E4**7203", C_ERROR,  "EPOW3 threshold exceeded" },
  { "EF**7203", C_ERROR,  "INFO: EPOW3 threshold exceeded" },
  { "E4**7204", C_NORMAL, "EPOW3 Reset" },
  { "EF**7204", C_NORMAL, "INFO: EPOW3 Reset" },
  { "E0**7205", C_ERROR,  "FAULT - EPOW4 Critical Fault" },
  { "E4**7205", C_ERROR,  "EPOW4 threshold exceeded" },
  { "EF**7205", C_ERROR,  "INFO: EPOW4 threshold exceeded" },
  { "E***7207", C_ERROR,  "Temperature Warning Low Limit reached" },
  { "E***7210", C_WARNING,"Altitude warning (High)" },

  { "EF**7211", C_WARNING,"INFO: Thermal management warning - ambient temp above normal" },
  { "EF**7212", C_NORMAL, "INFO: Thermal management ambient temp back to normal" },

  { "E***7213", C_ERROR,  "FAULT - Thermal Management - EPOW 3" },
  { "E***7214", C_ERROR,  "FAULT - Thermal Management - EPOW 4" },

  { "E***7218", C_ERROR,  "WARNING - DCA1 ambient temp warning" },
  { "E***7219", C_ERROR,  "DCA1 ambient temperature error" },
  { "E***7220", C_WARNING,"High Altitude Warning - performance loss" },
  { "E***7221", C_WARNING,"High Ambient Warning - performance loss" },
  { "E***7222", C_NORMAL, "High Ambient Reset - No performance loss" },
  { "E***7230", C_ERROR, "Ambient temp sensor 0 out of range" },
  { "E***7231", C_ERROR, "Ambient temp sensor 1 out of range" },
  { "E***7232", C_ERROR, "Ambient temp sensor 2 out of range" },

  { "E5**72"  , C_ERROR,  "BSF w/overcurrent bulk %02X " },

  { "E5**73"  , C_ERROR,  "Sigprep node Fault" },
  // @00Ad

  { "E0**74"  , C_ERROR,  "FAULT - switched 5v for VPD" },
  { "E7**7400", C_ERROR,  "Control Bulk Fault" },
  { "E7**7401", C_ERROR,  "Control Bulk OC Fault" },
  { "E7**7402", C_ERROR,  "Control Reg Fault +5v" },
  { "E7**7405", C_ERROR,  "Control Reg Fault +5v switched to VPD" },
  { "E7**7406", C_ERROR,  "+5v vpd will not turn off" },
  { "E7**7407", C_ERROR,  "+5v optical converter is faulted" },

  { "E00076"  , C_ERROR,  "FAULT - Thermal Critical Fault(Fan 0x%02X)" },
  { "EF0876"  , C_ERROR,  "INFO - Fan 0x%02X fault" },
  { "E30876"  , C_ERROR,  "FAULT - Fan 0x%02X fault" },
  { "D0E376"  , C_GREEN,  "CLEAR FAULT - Fan 0x%02X" },


  { "****76C0", C_ERROR,  "FAULT - Fan fault - GX slot 1" },
  { "****76C1", C_ERROR,  "FAULT - Fan fault - GX slot 2" },



  { "E93*80"  , C_ERROR,  "pci spcnum init failed", "powr_fsp_vpd_monitor.C,powr_fsp_spif_suspend.C" },

  { "E20880"  , C_ERROR,  "RH BPC cable missing" },
  { "E***8200", C_ERROR,  "FAULT - Invalid Torrent 1 VPD" },
  { "E***8201", C_ERROR,  "FAULT - Invalid Torrent 2 VPD" },
  { "E***8202", C_ERROR,  "FAULT - Invalid Torrent 3 VPD" },
  { "E***8203", C_ERROR,  "FAULT - Invalid Torrent 4 VPD" },
  { "E***8204", C_ERROR,  "FAULT - Invalid Torrent 5 VPD" },
  { "E***8205", C_ERROR,  "FAULT - Invalid Torrent 6 VPD" },
  { "E***8206", C_ERROR,  "FAULT - Invalid Torrent 7 VPD" },
  { "E***8207", C_ERROR,  "FAULT - Invalid Torrent 8 VPD" },
  { "E***8240", C_ERROR,  "FAULT - No Torrent 1 VPD" },
  { "E***8241", C_ERROR,  "FAULT - No Torrent 2 VPD" },
  { "E***8242", C_ERROR,  "FAULT - No Torrent 3 VPD" },
  { "E***8243", C_ERROR,  "FAULT - No Torrent 4 VPD" },
  { "E***8244", C_ERROR,  "FAULT - No Torrent 5 VPD" },
  { "E***8245", C_ERROR,  "FAULT - No Torrent 6 VPD" },
  { "E***8246", C_ERROR,  "FAULT - No Torrent 7 VPD" },
  { "E***8247", C_ERROR,  "FAULT - No Torrent 8 VPD" },
  { "E***8280", C_ERROR,  "FAULT - Torrent 1 Mismatch" },
  { "E***8281", C_ERROR,  "FAULT - Torrent 2 Mismatch" },
  { "E***8282", C_ERROR,  "FAULT - Torrent 3 Mismatch" },
  { "E***8283", C_ERROR,  "FAULT - Torrent 4 Mismatch" },
  { "E***8284", C_ERROR,  "FAULT - Torrent 5 Mismatch" },
  { "E***8285", C_ERROR,  "FAULT - Torrent 6 Mismatch" },
  { "E***8286", C_ERROR,  "FAULT - Torrent 7 Mismatch" },
  { "E***8287", C_ERROR,  "FAULT - Torrent 8 Mismatch" },

  { "E***8300", C_ERROR,  "FAULT - Invalid Processor 1 VPD" },
  { "E***8301", C_ERROR,  "FAULT - Invalid Processor 2 VPD" },
  { "E***8302", C_ERROR,  "FAULT - Invalid Processor 3 VPD" },
  { "E***8303", C_ERROR,  "FAULT - Invalid Processor 4 VPD" },
  { "E***8304", C_ERROR,  "FAULT - Invalid Processor 5 VPD" },
  { "E***8305", C_ERROR,  "FAULT - Invalid Processor 6 VPD" },
  { "E***8306", C_ERROR,  "FAULT - Invalid Processor 7 VPD" },
  { "E***8307", C_ERROR,  "FAULT - Invalid Processor 8 VPD" },
  { "E***8308", C_ERROR,  "FAULT - Invalid Processor 9 VPD" },
  { "E***8309", C_ERROR,  "FAULT - Invalid Processor 10 VPD" },
  { "E***830A", C_ERROR,  "FAULT - Invalid Processor 11 VPD" },
  { "E***830B", C_ERROR,  "FAULT - Invalid Processor 12 VPD" },
  { "E***830C", C_ERROR,  "FAULT - Invalid Processor 13 VPD" },
  { "E***830D", C_ERROR,  "FAULT - Invalid Processor 14 VPD" },
  { "E***830E", C_ERROR,  "FAULT - Invalid Processor 15 VPD" },
  { "E***830F", C_ERROR,  "FAULT - Invalid Processor 16 VPD" },
  { "E***8310", C_ERROR,  "FAULT - Invalid Processor 17 VPD" },
  { "E***8311", C_ERROR,  "FAULT - Invalid Processor 18 VPD" },
  { "E***8312", C_ERROR,  "FAULT - Invalid Processor 19 VPD" },
  { "E***8313", C_ERROR,  "FAULT - Invalid Processor 20 VPD" },
  { "E***8314", C_ERROR,  "FAULT - Invalid Processor 21 VPD" },
  { "E***8315", C_ERROR,  "FAULT - Invalid Processor 22 VPD" },
  { "E***8316", C_ERROR,  "FAULT - Invalid Processor 23 VPD" },
  { "E***8317", C_ERROR,  "FAULT - Invalid Processor 24 VPD" },
  { "E***8318", C_ERROR,  "FAULT - Invalid Processor 25 VPD" },
  { "E***8319", C_ERROR,  "FAULT - Invalid Processor 26 VPD" },
  { "E***831A", C_ERROR,  "FAULT - Invalid Processor 27 VPD" },
  { "E***831B", C_ERROR,  "FAULT - Invalid Processor 28 VPD" },
  { "E***831C", C_ERROR,  "FAULT - Invalid Processor 29 VPD" },
  { "E***831D", C_ERROR,  "FAULT - Invalid Processor 30 VPD" },
  { "E***831E", C_ERROR,  "FAULT - Invalid Processor 31 VPD" },
  { "E***831F", C_ERROR,  "FAULT - Invalid Processor 32 VPD" },

  { "E***8340", C_ERROR,  "FAULT - No Processor 1 VPD" },
  { "E***8341", C_ERROR,  "FAULT - No Processor 2 VPD" },
  { "E***8342", C_ERROR,  "FAULT - No Processor 3 VPD" },
  { "E***8343", C_ERROR,  "FAULT - No Processor 4 VPD" },
  { "E***8344", C_ERROR,  "FAULT - No Processor 5 VPD" },
  { "E***8345", C_ERROR,  "FAULT - No Processor 6 VPD" },
  { "E***8346", C_ERROR,  "FAULT - No Processor 7 VPD" },
  { "E***8347", C_ERROR,  "FAULT - No Processor 8 VPD" },
  { "E***8348", C_ERROR,  "FAULT - No Processor 9 VPD" },
  { "E***8349", C_ERROR,  "FAULT - No Processor 10 VPD" },
  { "E***834A", C_ERROR,  "FAULT - No Processor 11 VPD" },
  { "E***834B", C_ERROR,  "FAULT - No Processor 12 VPD" },
  { "E***834C", C_ERROR,  "FAULT - No Processor 13 VPD" },
  { "E***834D", C_ERROR,  "FAULT - No Processor 14 VPD" },
  { "E***834E", C_ERROR,  "FAULT - No Processor 15 VPD" },
  { "E***834F", C_ERROR,  "FAULT - No Processor 16 VPD" },
  { "E***8350", C_ERROR,  "FAULT - No Processor 17 VPD" },
  { "E***8351", C_ERROR,  "FAULT - No Processor 18 VPD" },
  { "E***8352", C_ERROR,  "FAULT - No Processor 19 VPD" },
  { "E***8353", C_ERROR,  "FAULT - No Processor 20 VPD" },
  { "E***8354", C_ERROR,  "FAULT - No Processor 21 VPD" },
  { "E***8355", C_ERROR,  "FAULT - No Processor 22 VPD" },
  { "E***8356", C_ERROR,  "FAULT - No Processor 23 VPD" },
  { "E***8357", C_ERROR,  "FAULT - No Processor 24 VPD" },
  { "E***8358", C_ERROR,  "FAULT - No Processor 25 VPD" },
  { "E***8359", C_ERROR,  "FAULT - No Processor 26 VPD" },
  { "E***835A", C_ERROR,  "FAULT - No Processor 27 VPD" },
  { "E***835B", C_ERROR,  "FAULT - No Processor 28 VPD" },
  { "E***835C", C_ERROR,  "FAULT - No Processor 29 VPD" },
  { "E***835D", C_ERROR,  "FAULT - No Processor 30 VPD" },
  { "E***835E", C_ERROR,  "FAULT - No Processor 31 VPD" },
  { "E***835F", C_ERROR,  "FAULT - No Processor 32 VPD" },

  { "E***8380", C_ERROR,  "FAULT - Processor 1 mismatch" },
  { "E***8381", C_ERROR,  "FAULT - Processor 2 mismatch" },
  { "E***8382", C_ERROR,  "FAULT - Processor 3 mismatch" },
  { "E***8383", C_ERROR,  "FAULT - Processor 4 mismatch" },
  { "E***8384", C_ERROR,  "FAULT - Processor 5 mismatch" },
  { "E***8385", C_ERROR,  "FAULT - Processor 6 mismatch" },
  { "E***8386", C_ERROR,  "FAULT - Processor 7 mismatch" },
  { "E***8387", C_ERROR,  "FAULT - Processor 8 mismatch" },
  { "E***8388", C_ERROR,  "FAULT - Processor 9 mismatch" },
  { "E***8389", C_ERROR,  "FAULT - Processor 10 mismatch" },
  { "E***838A", C_ERROR,  "FAULT - Processor 11 mismatch" },
  { "E***838B", C_ERROR,  "FAULT - Processor 12 mismatch" },
  { "E***838C", C_ERROR,  "FAULT - Processor 13 mismatch" },
  { "E***838D", C_ERROR,  "FAULT - Processor 14 mismatch" },
  { "E***838E", C_ERROR,  "FAULT - Processor 15 mismatch" },
  { "E***838F", C_ERROR,  "FAULT - Processor 16 mismatch" },
  { "E***8390", C_ERROR,  "FAULT - Processor 17 mismatch" },
  { "E***8391", C_ERROR,  "FAULT - Processor 18 mismatch" },
  { "E***8392", C_ERROR,  "FAULT - Processor 19 mismatch" },
  { "E***8393", C_ERROR,  "FAULT - Processor 20 mismatch" },
  { "E***8394", C_ERROR,  "FAULT - Processor 21 mismatch" },
  { "E***8395", C_ERROR,  "FAULT - Processor 22 mismatch" },
  { "E***8396", C_ERROR,  "FAULT - Processor 23 mismatch" },
  { "E***8397", C_ERROR,  "FAULT - Processor 24 mismatch" },
  { "E***8398", C_ERROR,  "FAULT - Processor 25 mismatch" },
  { "E***8399", C_ERROR,  "FAULT - Processor 26 mismatch" },
  { "E***839A", C_ERROR,  "FAULT - Processor 27 mismatch" },
  { "E***839B", C_ERROR,  "FAULT - Processor 28 mismatch" },
  { "E***839C", C_ERROR,  "FAULT - Processor 29 mismatch" },
  { "E***839D", C_ERROR,  "FAULT - Processor 30 mismatch" },
  { "E***839E", C_ERROR,  "FAULT - Processor 31 mismatch" },
  { "E***839F", C_ERROR,  "FAULT - Processor 32 mismatch" },
  { "EA**83",   C_ERROR,  "FAULT - Processor VPD config (eclipz_proc_num=0x%02X)" },

  { "E***8400", C_ERROR,  "FAULT - Invalid Config ID" },
  { "EA**8401", C_ERROR,  "VPD Fault - smart card" },
  { "E***8402", C_ERROR,  "FAULT - Unable to Collect VPD" },
  { "E***8404", C_ERROR,  "FAULT - Processor Unit VPD Mismatch" },
  { "E***8405", C_ERROR,  "FAULT - Processor Unit VPD Mismatch" },
  { "E***8406", C_ERROR,  "FAULT - Processor Unit VPD Mismatch" },
  { "E***8407", C_ERROR,  "FAULT - Cache Reg Mismatch" },
  { "EA**8408", C_ERROR,  "VPD Fault - mismatch" },
  { "EA**8409", C_ERROR,  "VPD Fault - no procs" },
  { "E***8409", C_ERROR,  "FAULT - No Processor Installed" },
  { "E***840D", C_ERROR,  "FAULT - SPCN Configuration mismatch" },
  { "E***840E", C_ERROR,  "FAULT - POP Required - Config ID loaded from hardware bits" },
  { "E***8410", C_ERROR,  "FAULT - Invalid processor card 1 VPD" },
  { "E***8411", C_ERROR,  "FAULT - Invalid processor card 2 VPD" },

  { "E***8420", C_ERROR,  "FAULT - No processor VPD" },
  { "E***8421", C_ERROR,  "FAULT - No processor card 2 VPD" },
  { "E***8422", C_ERROR,  "FAULT - No processor card VPD (dwr 2)" },
  { "E***8423", C_ERROR,  "FAULT - No processor card 4 VPD" },
  { "E***8424", C_ERROR,  "FAULT - No processor card VPD (dwr 3)" },
  { "E***8425", C_ERROR,  "FAULT - No processor card 6 VPD" },
  { "E***8426", C_ERROR,  "FAULT - No processor card VPD (dwr 4)" },
  { "E***8427", C_ERROR,  "FAULT - No processor card 8 VPD" },
  { "E***8430", C_ERROR,  "FAULT - POP Required - System cable required, but not present", "powr_fsp_dev.C", "ml_cable_check()" },
  { "E***8431", C_ERROR,  "FAULT - POP Required - System cable present, but not required", "powr_fsp_dev.C", "ml_cable_check()" },
  { "E***8432", C_ERROR,  "FAULT - System cable indicates no drawers present" },
  { "E***8440", C_ERROR,  "FAULT - Invalid Dasd backplane" },
  // @009d removed 3 entries
  { "E***8450", C_ERROR,  "FAULT - VRM missing or incorrectly installed" },
  { "E***8451", C_ERROR,  "FAULT - SPCN Configuration mismatch" },
  { "E***8453", C_ERROR,  "FAULT - VRM installed for non-existant processor (HV/Juno: Extra VRMs installed)" },
  { "E***8454", C_ERROR,  "FAULT - Extra fan installed slot A3" },
  { "E***8455", C_ERROR,  "FAULT - Power Supply Missing" },
  { "E***8456", C_ERROR,  "FAULT - Power Supply Missing" },
  { "E0**8460", C_ERROR,  "FAULT - All Drawers Garded Out" },
  { "E***8470", C_ERROR,  "FAULT - Processor Unit VPD Mismatch 1" },
  { "E***8471", C_ERROR,  "FAULT - Processor Unit VPD Mismatch 2" },
  { "E***8472", C_ERROR,  "FAULT - Processor Unit VPD Mismatch 3" },
  { "E***8473", C_ERROR,  "FAULT - Processor Unit VPD Mismatch 4" },
  { "E***8474", C_ERROR,  "FAULT - Processor Unit VPD Mismatch 5" },
  { "E***8475", C_ERROR,  "FAULT - Processor Unit VPD Mismatch 6" },
  { "E***8476", C_ERROR,  "FAULT - Processor Unit VPD Mismatch 7" },
  { "E***8477", C_ERROR,  "FAULT - Processor Unit VPD Mismatch 8" },
  { "E***8480", C_ERROR,  "FAULT - Bad or missing dimm/supernova vids" },
  { "E0**84A0", C_ERROR,  "FAULT - Invalid system backplane VPD", "powr_fsp_sqconfig.C","box_config2()"},
  { "E***84A1", C_ERROR,  "FAULT - Bad/Missing HW keyword in backplane vpd" },
  { "E***84A3", C_ERROR,  "FAULT - Invalid FSP card VPD" },

  { "E***84C0", C_ERROR,  "FAULT - No torrents installed" },


  { "E0088500", C_ERROR,  "FAULT - No CoolingZone and Fan objects" },
  { "EF0885"  , C_ERROR,  "INFO - Fan 0x%02X missing" },
  { "E30885"  , C_ERROR,  "FAULT - Fan 0x%02X missing" },
  { "E0**85"  , C_ERROR,  "CRITICAL FAULT - missing fan rotor limit reached (callout first missing fan %d)" },


  { "****8700", C_ERROR,  "Mack path validation: pin state mismatch in validation" },
  { "****8701", C_ERROR,  "Mack path validation: fdal error on primary path" },
  { "****8702", C_ERROR,  "Mack path validation: fdal error on redundant path" },
  { "****8703", C_ERROR,  "Mack path validation: fdal error on both paths" },
  { "****8704", C_ERROR,  "Mack Pin state mismatch during normal presence detect" },
  { "****8710", C_ERROR,  "FAULT - DCA 1 UART Comm Fault (uart 7)" },
  { "****8711", C_ERROR,  "FAULT - DCA 2 UART Comm Fault (uart 8)" },
  { "****8712", C_ERROR,  "FAULT - DCA 3 UART Comm Fault (uart 8)" },
  { "****8713", C_ERROR,  "FAULT - DCA 4 UART Comm Fault (uart 8)" },
  { "****8714", C_ERROR,  "FAULT - DCA 5 UART Comm Fault (uart 8)" },
  { "****8715", C_ERROR,  "FAULT - DCA 6 UART Comm Fault (uart 8)" },
  { "****8716", C_ERROR,  "FAULT - DCA 7 UART Comm Fault (uart 8)" },
  { "****8717", C_ERROR,  "FAULT - DCA 8 UART Comm Fault (uart 8)" },
  { "****8718", C_ERROR,  "FAULT - DCA 9 UART Comm Fault (uart 8)" },
  { "****8719", C_ERROR,  "FAULT - DCA 10 UART Comm Fault (uart 8)" },
  { "****871A", C_ERROR,  "FAULT - DCA 11 UART Comm Fault (uart 8)" },
  { "****871B", C_ERROR,  "FAULT - DCA 12 UART Comm Fault (uart 8)" },
  { "****871C", C_ERROR,  "FAULT - DCA 13 UART Comm Fault (uart 8)" },
  { "****871D", C_ERROR,  "FAULT - DCA 14 UART Comm Fault (uart 8)" },
  { "****871E", C_ERROR,  "FAULT - DCA 15 UART Comm Fault (uart 8)" },
  { "****871F", C_ERROR,  "FAULT - DCA 16 UART Comm Fault (uart 8)" },
  { "****8720", C_ERROR,  "FAULT - BPC A Ethernet Comm Fault" },
  { "****8721", C_ERROR,  "FAULT - BPC B Ethernet Comm Fault" },
  { "****8724", C_ERROR,  "FAULT - MTMS verification failed on BPC-A" },
  { "****8725", C_ERROR,  "FAULT - MTMS verification failed on BPC-B" },
  { "****8731", C_ERROR,  "FAULT - BPC Critical Fault - No present node books powered on" },
  { "****8732", C_ERROR,  "FAULT - BPC Critical Fault - CEC Cage ID mismatch (or no backend poll)" },
  { "****8733", C_ERROR,  "FAULT - BPC Critical Fault - No node books present to power on" },
  { "****8734", C_ERROR,  "FAULT - BPC Fault - FIPS log collection failed", "powr_fsp_epow.C,powr_fsp_bpc_handlers.C", "BPCRackClass::epowTimer(),BPCRackClass::handleBpcFipsLogResponse()" },
  { "****8735", C_ERROR,  "FAULT - BPC Critical Fault - No IP addresses found (no hmcx or nobackend poll)" },
  { "****8740", C_ERROR,  "FAULT - BPC A failed to reach standby" },
  { "****8741", C_ERROR,  "FAULT - BPC B failed to reach standby" },
  { "E2**8750", C_ERROR,  "RH BPC download failed on port 0" },
  { "E2**8750", C_ERROR,  "RH BPC download failed on port 1" },

  { "EA**88"  , C_ERROR,  "UPIC cable fault, connection card instance %d" },

  { "E9028A00", C_ERROR,  "Power Control MTMS mismatch in secondary", "ibt_slave_cmd.c", "slave_csc_exec()" },
  { "E9068A00", C_ERROR,  "Power controlling CEC changed - Log Only" },

  { "E***A010", C_ERROR,  "Unable to determine VRM XML file name" },
  { "E***A011", C_ERROR,  "VRM XML parser error" },
  { "E***A012", C_ERROR,  "Internal error during VRM XML action" },

  { "E8**a300", C_ERROR,  "No battery" },

  { "E***B2**", C_ERROR,  "Redundant enable fault detected from DPSS0/LCC0 to VRM %02X" },
  { "E***B3**", C_ERROR,  "Redundant enable fault detected from DPSS1/LCC1 to VRM %02X" },

  { "E8**C5"  , C_ERROR,  "LSP Fail %02X%02X" },

  { "E0**c6"  , C_ERROR,  "FAULT - Clock card not present" },
  { "EA**c600", C_ERROR,  "Path Test - My C-Bulk didn't turn off" },
  { "EA**c601", C_ERROR,  "Path Test - 29v bus won't go down" },
  { "EA**c602", C_ERROR,  "Path Test - 29v sensors in wrong state" },
  { "EA**C62E", C_ERROR,  "SPCN Network Fault" },

  { "EA04CB15", C_ERROR,  "background copy failed" },
  { "EA08A000", C_WARNING,"definition file read failure" },
  { "EA**cb"  , C_ERROR,  "BATs Fail" },

  { "E***D000", C_ERROR,  "DPSS 0 power sequence logic failure" },
  { "E***D001", C_ERROR,  "DPSS 0 primary power sequence power-on failure" },
  { "E***D002", C_ERROR,  "DPSS 0 primary power sequence power-on timeout" },
  { "E***D003", C_ERROR,  "DPSS 0 secondary power sequence power-on failure" },
  { "E***D004", C_ERROR,  "DPSS 0 secondary power sequence power-on timeout" },
  { "E***D005", C_ERROR,  "DPSS 0 secondary power sequence power-off failure" },
  { "E***D006", C_ERROR,  "DPSS 0 secondary power sequence power-off timeout" },
  { "E***D007", C_ERROR,  "DPSS 0 power sequence power-off failure" },
  { "E***D008", C_ERROR,  "DPSS 0 power sequence power-off timeout" },
  { "E***D009", C_ERROR,  "DPSS 0 access failure" },
  { "E***D00A", C_ERROR,  "DPSS 0 read failure" },
  { "E***D00B", C_ERROR,  "DPSS 0 write failure" },
  { "E***D00C", C_ERROR,  "DPSS 0 corrupted" },
  { "E***D00D", C_ERROR,  "DPSS 0 pgood fault agreement failure" },
  { "E***D00E", C_WARNING,"DPSS 0 missing" },

  { "E***D010", C_ERROR,  "DPSS 1 power sequence logic failure" },
  { "E***D011", C_ERROR,  "DPSS 1 primary power sequence power-on failure" },
  { "E***D012", C_ERROR,  "DPSS 1 primary power sequence power-on timeout" },
  { "E***D013", C_ERROR,  "DPSS 1 secondary power sequence power-on failure" },
  { "E***D014", C_ERROR,  "DPSS 1 secondary power sequence power-on timeout" },
  { "E***D015", C_ERROR,  "DPSS 1 secondary power sequence power-off failure" },
  { "E***D016", C_ERROR,  "DPSS 1 secondary power sequence power-off timeout" },
  { "E***D017", C_ERROR,  "DPSS 1 power sequence power-off failure" },
  { "E***D018", C_ERROR,  "DPSS 1 power sequence power-off timeout" },
  { "E***D019", C_ERROR,  "DPSS 1 access failure" },
  { "E***D01A", C_ERROR,  "DPSS 1 read failure" },
  { "E***D01B", C_ERROR,  "DPSS 1 write failure" },
  { "E***D01C", C_ERROR,  "DPSS 1 corrupted" },
  { "E***D01D", C_ERROR,  "DPSS 1 pgood fault agreement failure" },
  { "E***D01E", C_WARNING,"DPSS 1 missing" },

  { "E***C000", C_ERROR,  "FAULT-All thermal objects failed to be created from SYSMOD" },
  { "E***C001", C_ERROR,  "FAULT-No fan entries found in SYSMOD" },
  { "E***C002", C_ERROR,  "FAULT-No cooling zone entries found in SYSMOD" },
  { "E***C003", C_ERROR,  "INFO-Thermally required PSU missing from SYSMOD declared location" },

  { "E208"    , C_ERROR,  "PRI_POWER_GOOD_FAULT - FAULT_FLAGS_DISPLAY - %02x%02x" },
  { "E2"      , C_ERROR,  "Power Good Fault SRC %02X%02X" },

  { "E3"      , C_ERROR,  "FAULT - Thermal Fault SRC %02X%02X" },

  { "E4"      , C_ERROR,  "FAULT - Power AC Fault SRC %02X%02X" },

  { "E5"      , C_ERROR,  "FAULT - Power Node Fault SRC %02X%02X" },

  { "E7"      , C_ERROR,  "Misc Power Fault SRC %02X%02X" },

  { "E8"      , C_ERROR,  "Battery Fault SRC %02X%02X" },

  { "E9"      , C_ERROR,  "Sensor Fault SRC %02X%02X" },

  { "EA"      , C_ERROR,  "Misc Fault SRC %02X%02X" },

  { "EF087411", C_BOLD,   "Drawer 1 lost standby power" },
  { "EF087412", C_BOLD,   "Drawer 2 lost standby power" },
  { "EF087413", C_BOLD,   "Drawer 3 lost standby power" },
  { "EF087414", C_BOLD,   "Drawer 4 lost standby power" },
  { "EF"      , C_ERROR,  "INFO: Fault SRC %02X%02X" },

  { "FE"      , C_NORMAL, "rrrr=%02X%02X uu=%02X" },

  { "FFFF"    , C_ERROR,  "HEX DUMP follows (length=0x%02X%02X)" },

  // The following must be the last entry
  { ""        , C_ERROR,  "The End" }
};
#else
extern pte_entry_struct static_pte_entry_table[PTE_TABLE_SIZE];
#endif


}  // End powr namespace
using namespace powr;
